{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/2017-06-11-domain-name.png","path":"images/2017-06-11-domain-name.png","modified":0,"renderable":0},{"_id":"source/images/2017-06-11-domain-cname.png","path":"images/2017-06-11-domain-cname.png","modified":0,"renderable":0},{"_id":"source/images/2017-06-11-hexo-theme.png","path":"images/2017-06-11-hexo-theme.png","modified":0,"renderable":0},{"_id":"source/images/2017-06-11-new-resp.png","path":"images/2017-06-11-new-resp.png","modified":0,"renderable":0},{"_id":"source/images/2017-06-11-hexo-deploy.png","path":"images/2017-06-11-hexo-deploy.png","modified":0,"renderable":0},{"_id":"source/images/2017-06-11-wangyiyungentie.png","path":"images/2017-06-11-wangyiyungentie.png","modified":0,"renderable":0},{"_id":"source/images/2018-01-07_perspective.jpg","path":"images/2018-01-07_perspective.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-01-07_perspective2.jpg","path":"images/2018-01-07_perspective2.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-01-07_perspective3.jpg","path":"images/2018-01-07_perspective3.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-01-08_borde-radius.jpg","path":"images/2018-01-08_borde-radius.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-01-07_skew2.jpg","path":"images/2018-01-07_skew2.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-01-07_perspective4.jpg","path":"images/2018-01-07_perspective4.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-01-08_border-images.jpg","path":"images/2018-01-08_border-images.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-01-07_skew1.jpg","path":"images/2018-01-07_skew1.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-03-02_160947.jpg","path":"images/2018-03-02_160947.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-10-23-dom-offset1.png","path":"images/2018-10-23-dom-offset1.png","modified":0,"renderable":0},{"_id":"source/images/2018-10-23-dom-offset2.png","path":"images/2018-10-23-dom-offset2.png","modified":0,"renderable":0},{"_id":"source/images/2018-10-23-dom-offset3.png","path":"images/2018-10-23-dom-offset3.png","modified":0,"renderable":0},{"_id":"source/images/IMG_weixin.jpg","path":"images/IMG_weixin.jpg","modified":0,"renderable":0},{"_id":"source/images/IMG_zhifubao.jpg","path":"images/IMG_zhifubao.jpg","modified":0,"renderable":0},{"_id":"source/images/angular-cli-01.jpg","path":"images/angular-cli-01.jpg","modified":0,"renderable":0},{"_id":"source/images/angular-inject-config.jpg","path":"images/angular-inject-config.jpg","modified":0,"renderable":0},{"_id":"source/images/angular-cli-04.png","path":"images/angular-cli-04.png","modified":0,"renderable":0},{"_id":"source/images/app-construct.jpg","path":"images/app-construct.jpg","modified":0,"renderable":0},{"_id":"source/images/atrr-direc-18.png","path":"images/atrr-direc-18.png","modified":0,"renderable":0},{"_id":"source/images/app-module-jimu.jpg","path":"images/app-module-jimu.jpg","modified":0,"renderable":0},{"_id":"source/images/atrr-direc-4.png","path":"images/atrr-direc-4.png","modified":0,"renderable":0},{"_id":"source/images/construct-directive01.png","path":"images/construct-directive01.png","modified":0,"renderable":0},{"_id":"source/images/atrr-directive.png","path":"images/atrr-directive.png","modified":0,"renderable":0},{"_id":"source/images/construct-directive02.png","path":"images/construct-directive02.png","modified":0,"renderable":0},{"_id":"source/images/inector-design.jpg","path":"images/inector-design.jpg","modified":0,"renderable":0},{"_id":"source/images/angular-pipe-design.jpg","path":"images/angular-pipe-design.jpg","modified":0,"renderable":0},{"_id":"source/images/pipe1.png","path":"images/pipe1.png","modified":0,"renderable":0},{"_id":"source/images/pipe2.png","path":"images/pipe2.png","modified":0,"renderable":0},{"_id":"source/images/pipe3.png","path":"images/pipe3.png","modified":0,"renderable":0},{"_id":"source/images/pipe4.png","path":"images/pipe4.png","modified":0,"renderable":0},{"_id":"source/images/reactiveForm1.png","path":"images/reactiveForm1.png","modified":0,"renderable":0},{"_id":"source/images/reactiveForm2.png","path":"images/reactiveForm2.png","modified":0,"renderable":0},{"_id":"source/images/onchanges.png","path":"images/onchanges.png","modified":0,"renderable":0},{"_id":"source/images/templateform.png","path":"images/templateform.png","modified":0,"renderable":0},{"_id":"source/images/touxiang.jpg","path":"images/touxiang.jpg","modified":0,"renderable":0},{"_id":"source/images/zujianyangshi.png","path":"images/zujianyangshi.png","modified":0,"renderable":0},{"_id":"source/images/template_form.jpg","path":"images/template_form.jpg","modified":0,"renderable":0},{"_id":"source/images/zujianyangshi3.png","path":"images/zujianyangshi3.png","modified":0,"renderable":0},{"_id":"source/images/zujianyangshi2.png","path":"images/zujianyangshi2.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":0,"renderable":1},{"_id":"source/images/2017-06-11-domain-jiexi.png","path":"images/2017-06-11-domain-jiexi.png","modified":0,"renderable":0},{"_id":"source/images/angular-cli-02.jpg","path":"images/angular-cli-02.jpg","modified":0,"renderable":0},{"_id":"source/images/embedview.jpg","path":"images/embedview.jpg","modified":0,"renderable":0},{"_id":"source/images/injector-tree.jpg","path":"images/injector-tree.jpg","modified":0,"renderable":0},{"_id":"source/images/jianceqi-tree.jpg","path":"images/jianceqi-tree.jpg","modified":0,"renderable":0},{"_id":"source/images/longmao01.jpg","path":"images/longmao01.jpg","modified":0,"renderable":0},{"_id":"source/images/route-url-tree.jpg","path":"images/route-url-tree.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":0,"renderable":1},{"_id":"source/images/favicon.jpg","path":"images/favicon.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-06-11-myblok.png","path":"images/2017-06-11-myblok.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/images/module-tree.jpg","path":"images/module-tree.jpg","modified":0,"renderable":0},{"_id":"source/images/route-tree.jpg","path":"images/route-tree.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-06-11-hexo-page.png","path":"images/2017-06-11-hexo-page.png","modified":0,"renderable":0},{"_id":"source/images/IMG_1426.JPG","path":"images/IMG_1426.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_1497.JPG","path":"images/IMG_1497.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_1301.JPG","path":"images/IMG_1301.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_1494.JPG","path":"images/IMG_1494.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0800.JPG","path":"images/IMG_0800.JPG","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"815f27b115537ef0a1a23cf92140807be1352740","modified":1496074999283},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1495992248715},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1495992248715},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1495992248715},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1495992248715},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1495992248715},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1495992248715},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1495992248715},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1495992248743},{"_id":"themes/yilia/_config.yml","hash":"de9cc491e39811bea446103f4de662bea756a14b","modified":1539184130627},{"_id":"source/_posts/2017-06-01-hexo-build-blok.md","hash":"ec98e63c191bffdf97baf84544baecf369847db6","modified":1497173249230},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1495992248735},{"_id":"source/_posts/2017-06-11-hexo-bind-domain.md","hash":"3b8d41e68e137433c6fd90636acde3deb4a22629","modified":1497177291939},{"_id":"source/_posts/2017-07-15-angular-module.md","hash":"1591493ce7dae3505efc4f92cb5eca63b613cea3","modified":1503831151320},{"_id":"source/_posts/2017-06-11-hexo-theme.md","hash":"41de38df1c015f1d251ef982d9a2c153c0c842a0","modified":1497175155866},{"_id":"source/_posts/2017-06-11-hexo-add-pinglun.md","hash":"ab66a654414f078cf873e3a407186628923b4f7d","modified":1497182226798},{"_id":"source/_posts/2017-07-17-angular-router.md","hash":"cdc6b64629d6d10c46ed840ef5c165b893e3b7dd","modified":1512142973767},{"_id":"source/_posts/2017-07-21-angular-attr-directive.md","hash":"b355ad846d66d5140f2f0bc56f19d85956bfd275","modified":1509982506019},{"_id":"source/_posts/2017-07-20-angular-component-styles.md","hash":"3015bbaf7edd5c9ffa07c15aab9311cb6eb80112","modified":1508168957031},{"_id":"source/_posts/2017-07-23-angular-cli-comand.md","hash":"945d8be64f18aff2df7f7283e720c369943fc797","modified":1501087201669},{"_id":"source/_posts/2017-07-16-angular-Injector.md","hash":"3b430cecc37289328fbe43d6fe62b08d63f4f032","modified":1502644776473},{"_id":"source/_posts/2017-07-28-angular-pipe.md","hash":"fcdfaad689005222bea1c89a2b5685865fb3cdb1","modified":1501258756903},{"_id":"source/_posts/2017-07-31-angular-structDirective.md","hash":"68860cd7136a26193ff98907546f9123240f88c9","modified":1501781258738},{"_id":"source/_posts/2017-08-27-anular-http.md","hash":"ef0cf9294a4d2dedbc414a9da7811931fce6dd4d","modified":1503808145781},{"_id":"source/_posts/2017-07-23-angular-cli-install-deploy.md","hash":"e0e961d96374be4e59cddc97c273e8f310f91df8","modified":1500829937371},{"_id":"source/_posts/2017-07-23-angular-lifecysle-hook.md","hash":"0ed3fd5aff220447fb47756cc9f11e1e81cd56bb","modified":1502024446044},{"_id":"source/_posts/2017-05-29-markdown.md","hash":"f12115977c0a62701f1b013a5fc24a6f5a8e3565","modified":1497111474684},{"_id":"source/_posts/2017-10-07-class-and-interface.md","hash":"32b5f6e75c687cfc485479a095d1718ed8051a50","modified":1507309859008},{"_id":"source/_posts/2017-10-15-angular-jianceqi.md","hash":"8adc901212456361b3abf61d385cd4f6a388f059","modified":1508168645582},{"_id":"source/_posts/2017-09-10-angular-zujiantonxing.md","hash":"c8d83db9accce4626fe48026275bc57765f7209d","modified":1509982506103},{"_id":"source/_posts/2017-11-22-Form-templateForm.md","hash":"8aec8de850c602eef1e95e5fe8a70c2e6174c90e","modified":1512055986057},{"_id":"source/_posts/2017-11-10-angular-directive.md","hash":"422faefefd894555833b7cbe03eb1afc2bbe5e4a","modified":1510244057118},{"_id":"source/_posts/2017-12-01-router-guard.md","hash":"3cab307128d024ec4fb1ec1920206fdbbabf70c3","modified":1512377282067},{"_id":"source/_posts/2017-11-26-reactive-form.md","hash":"a5683d2afd444634a02502483aff8c1096fb63d4","modified":1545316192641},{"_id":"source/_posts/2017-11-19-Angular-Form.md","hash":"a4216fbf7f8630d73b7053f06a815c1a66458d19","modified":1511451083522},{"_id":"source/_posts/2017-09-03-angular-aot.md","hash":"fe653c0b5b738a2f28e0c9e78c67dbbd2480b26c","modified":1504432349927},{"_id":"source/_posts/2017-12-24-rxjs.md","hash":"363e0b37d3b4863c9bd764c7fbde0bdc40a3ed4a","modified":1514475657275},{"_id":"source/_posts/2017-12-27-rxjs-operators.md","hash":"04b807801cf9d987e8ea67cd3663495725807877","modified":1515683968377},{"_id":"source/_posts/2018-01-11-forkjoin-zip.md","hash":"a1af87cfd408c271d34a15ec0ad27c41328072f7","modified":1515684055026},{"_id":"source/_posts/2018-01-14-css3-3D.md","hash":"aa9d20758cf3205cdeacb6ff581506e91e07ae9e","modified":1515941116092},{"_id":"source/_posts/2018-01-14-css3-animation.md","hash":"0b34552ca02e1605a46bc3f50d109e0e1f638e46","modified":1541345410257},{"_id":"source/_posts/2018-01-18-css3-gradients.md","hash":"40613cce884507f7a7402686eff6210fd8801c97","modified":1516808229803},{"_id":"source/_posts/2018-01-21-css3-box.md","hash":"0e8e4081bca6b32a108ed4336b1a75ff304e601b","modified":1516521499917},{"_id":"source/_posts/2018-01-14-css3-border-box.md","hash":"05fe115451443a66ef5ed06813f479c31bcc1bed","modified":1516115757842},{"_id":"source/_posts/2018-03-09-design-pattern-1.md","hash":"4bf448e9ca681deee5f09fa909d67bb6c601ff3c","modified":1521294092856},{"_id":"source/_posts/2018-03-17-design-pattern-2.md","hash":"965c4620f85389585c45cb84a910264a0ef0367d","modified":1521378481210},{"_id":"source/_posts/2018-01-24-css3-modia.md","hash":"651a5d78a6ea7469d9d9360690dcd7e3391597ff","modified":1517051043838},{"_id":"source/_posts/2018-01-21-css3-flex.md","hash":"ff0c7848b878f2a57b0697cfff75a338a6f64b2b","modified":1516525104829},{"_id":"source/_posts/2018-03-18-design-pattern-3.md","hash":"911ed4438ae59d653050ee2c91087054121b8939","modified":1521733733876},{"_id":"source/_posts/2018-05-05-ECMAScript-mianxiangduixiang.md","hash":"a0d74b60855997edbbb91f0482355b82c1134bfd","modified":1525519979349},{"_id":"source/_posts/2018-05-06-javascipt-bibao-and-this.md","hash":"b82e75d1c3b3fd23aade51a8a1088e5da90ea65d","modified":1525608182660},{"_id":"source/_posts/2018-04-25-Javascript-ECMAScript.md","hash":"59f011c89535ae3df28d3baf13b8ed6aff1b760c","modified":1525597912751},{"_id":"source/_posts/2018-07-27-jquery-daoru.md","hash":"400945cd97b29ea033f1e3cacf42d23f308373f3","modified":1533305036645},{"_id":"source/_posts/2018-01-14-css3-2D.md","hash":"16c821e202b951b485c71cb00cc0234074588b0b","modified":1515927054222},{"_id":"source/_posts/2018-07-31-jq-plugin.md","hash":"df5deea729b1c2b3f30b02516db45a477583468d","modified":1533222818113},{"_id":"source/_posts/2018-08-31-jq-plugin-dev2.md","hash":"e4ce789a8e2beb528d91719bf53cc78a50918854","modified":1539619792201},{"_id":"source/_posts/2018-10-16-less-common.md","hash":"5a22929b17f08dfef1fe25c065e7732028a3bb38","modified":1540563533847},{"_id":"source/_posts/2018-10-16-lessjs-use.md","hash":"12ac8fb3c5fa3b1ee83c0930999d89bedfd9cb83","modified":1540562873279},{"_id":"source/_posts/2018-10-18-the-offset-of-javascript-and-jquery.md","hash":"934fffc7ab7b940c452b03242a8591b93b828704","modified":1540306457750},{"_id":"source/_posts/2018-10-22-less-import.md","hash":"28e36cb1f8eea44314b9a90097035a85328e9ad5","modified":1540484186279},{"_id":"source/_posts/2018-10-16-lessjs-use-depth.md","hash":"059df42894199e056599889285e746e241ef0307","modified":1540563999703},{"_id":"source/_posts/2018-07-28-JSON-xuliehua.md","hash":"b2b5d1aab30aa597d49188f13ac3175005ea475b","modified":1532769277245},{"_id":"source/_posts/2018-08-02-jq-plugins-dev.md","hash":"c1966d766cd72fb57df5b00670c6d83e84854037","modified":1540564137311},{"_id":"source/_posts/2018-11-11-ng-shadow-cat-readme.md","hash":"9ad24d8a048decc2b7b2a7d2335a6c65d96a6226","modified":1541924342784},{"_id":"source/_posts/2018-12-12-angular-templateRef-and-viewContainerRef.md","hash":"a42552a55eb43ada7d9194c67a6fe44c0a930eb1","modified":1544626687350},{"_id":"source/_posts/2018-12-14-custom-element-and-dynamic-component.md","hash":"932790962a8306ee244e9bdfbfbf1e3e0a936356","modified":1545054999402},{"_id":"source/_posts/2018-12-17-ng-template-ng-container-and-ng-content.md","hash":"74179a6fd620ac32a574b1477e097d5e61af7bda","modified":1545055142066},{"_id":"source/_posts/2019-01-14-dom-and-stack.md","hash":"93fc36bde155f39c14835d7ce67274d9cface20d","modified":1547474416348},{"_id":"source/_posts/2018-12-30-HTMLCollection-and-NodeList.md","hash":"93f0959b61741fb6a4f573450b10f62fa57a8a5f","modified":1546156785958},{"_id":"source/_posts/2018-12-30-JavaScript-form-Api.md","hash":"936f2ea6e036b985f18a6b92853570fd96893be2","modified":1546156813174},{"_id":"source/_posts/2018-12-13-angular-elementRef-and-renderer.md","hash":"dedc8cf9c98ce4dc2c20a05005f987da15461483","modified":1544796295451},{"_id":"source/images/2017-06-11-domain-name.png","hash":"cef6571ac4bff64816a1f2fc38ea08c75c3d3055","modified":1497175736227},{"_id":"source/about-me/index.md","hash":"58f1d66d4091d54f10d2f595c3cb68b06b851284","modified":1496117739183},{"_id":"source/images/2017-06-11-domain-cname.png","hash":"ada1d9821f25a17e7b5850a11e1bf00cfa0aaec3","modified":1497176855093},{"_id":"source/images/2017-06-11-hexo-theme.png","hash":"d734f0ce645c35510ee419d0cadc5c0c8c7a1008","modified":1497174389170},{"_id":"source/images/2017-06-11-new-resp.png","hash":"56dcb64a000f1fb1792590e6eb95575c6c232fc9","modified":1497157847675},{"_id":"source/images/2017-06-11-hexo-deploy.png","hash":"10df461d7ca9ac703651e771dea21a2ac925b782","modified":1497171339838},{"_id":"source/images/2017-06-11-wangyiyungentie.png","hash":"c93e73b26920ed50577ed4137105ddd8687d7b37","modified":1497181633610},{"_id":"source/images/2018-01-07_perspective.jpg","hash":"7cd01c2e6bb25d476f420f6d78819dd7ce48d28b","modified":1515287912454},{"_id":"source/images/2018-01-07_perspective2.jpg","hash":"10980a485bd9f8ca216857af7eb8e83231486199","modified":1515288625557},{"_id":"source/images/2018-01-07_perspective3.jpg","hash":"26e7c671ff42637a9eb4c1fcd89f3995f20bf278","modified":1515291124349},{"_id":"source/images/2018-01-08_borde-radius.jpg","hash":"c623b608dd744a9f3c6133c70686961bc4e4d2d4","modified":1515396364091},{"_id":"source/images/2018-01-07_skew2.jpg","hash":"47be17fb4f9fb017a04f0bdf2e1bc3cbaaf5c857","modified":1515290571581},{"_id":"source/images/2018-01-07_perspective4.jpg","hash":"e861357cb612cc9cf4ae414563a99c29be26b897","modified":1515291593797},{"_id":"source/images/2018-01-08_border-images.jpg","hash":"74d9b8b7829d304701b12895fc316d4c36fe1863","modified":1515422943415},{"_id":"source/images/2018-01-07_skew1.jpg","hash":"c0694735f662d9e19f31cddc812abdc287ae060b","modified":1515289755461},{"_id":"source/images/2018-03-02_160947.jpg","hash":"d546e055006abb8398ce216513a9bd68486172b9","modified":1519980166344},{"_id":"source/images/2018-10-23-dom-offset1.png","hash":"e5280deae3d3dcc228cecb022ea47d9a70f6a345","modified":1540306110846},{"_id":"source/images/2018-10-23-dom-offset2.png","hash":"4143b3a2501a5b993c14439b906feb927756ba35","modified":1540306147586},{"_id":"source/images/2018-10-23-dom-offset3.png","hash":"c66419f848bb7794c48e7bcb69df078ff13b637e","modified":1540306302926},{"_id":"source/images/IMG_weixin.jpg","hash":"06155dc61663ef9463a7c878f619f5096c348b55","modified":1496240853000},{"_id":"source/images/IMG_zhifubao.jpg","hash":"da77b89fab52c08befe1c3b3853edee50b4843b7","modified":1496241062000},{"_id":"source/images/angular-cli-01.jpg","hash":"0a19fcb16ab213cb1e184719307dd7bbb5a6e483","modified":1500390142003},{"_id":"source/images/angular-inject-config.jpg","hash":"05d0e21c4449b4ce76c8f01c1ce7c731c1293cea","modified":1500170203106},{"_id":"source/images/angular-cli-04.png","hash":"5487531b6ac7a04021174da86d758a7d39de03de","modified":1500390285228},{"_id":"source/images/app-construct.jpg","hash":"3a66777bc0c84835ae63d38d6551d11a9bfb2bb7","modified":1500046521577},{"_id":"source/images/atrr-direc-18.png","hash":"21d651c983a52509a7bc10db09512796a3bb2ffa","modified":1500816029807},{"_id":"source/images/app-module-jimu.jpg","hash":"631462cf47cb8f19c218d08b6b34059e37528e0d","modified":1500045465434},{"_id":"source/images/atrr-direc-4.png","hash":"b6a5cbd06b0e3b1aee9104b4d4803d99030a5df4","modified":1500815997961},{"_id":"source/images/construct-directive01.png","hash":"b0542919864718ab80fe75aa5c6e33c6d4ddc575","modified":1501519582288},{"_id":"source/images/atrr-directive.png","hash":"a1522abfda6b207bfbab4f71d207e3fa39e20e6c","modified":1500739785065},{"_id":"source/images/construct-directive02.png","hash":"6e9045d779b7fc7dedce7cc574b89e67293c6d16","modified":1501519610945},{"_id":"source/images/inector-design.jpg","hash":"ed4f3b39f4ecdf16a8d39e2a1ae0d5366f317f80","modified":1500050644052},{"_id":"source/images/angular-pipe-design.jpg","hash":"bda34b0bce44fa326c1dd6a1150b32c710c5bd13","modified":1500050787284},{"_id":"source/images/pipe1.png","hash":"f4822b2334ac0ec4157b4c773b061e4e5fabc160","modified":1501258259059},{"_id":"source/images/pipe2.png","hash":"48575933c4f64eb04df0b80de0c74fcd491802b9","modified":1501258296239},{"_id":"source/images/pipe3.png","hash":"f57a79cc6368f6a6301096ecf9c079bdf1284817","modified":1501258325932},{"_id":"source/images/pipe4.png","hash":"018cbe188c37a33a70cd7df95007c7b462149db5","modified":1501258357871},{"_id":"source/images/reactiveForm1.png","hash":"6d23d33a4b8906cc43e94635fc366b281a1b9d74","modified":1511975408152},{"_id":"source/images/reactiveForm2.png","hash":"f4df378133cbf96208b8b91d7215f76df541ccf2","modified":1511975431192},{"_id":"source/images/onchanges.png","hash":"e3e82e7b9527780b60750823770ba1be5acafc92","modified":1502023824588},{"_id":"source/images/templateform.png","hash":"083172b5f7972154122b41d52f80b9d044cd3293","modified":1511282080326},{"_id":"source/images/touxiang.jpg","hash":"843cb63b78aca163e9a9692e893c5a52c4c5a5cf","modified":1495643091454},{"_id":"source/images/zujianyangshi.png","hash":"2f8246d345e3c938eb44a14210865d4fba2a2628","modified":1500395437245},{"_id":"source/images/template_form.jpg","hash":"fd1abcb312ed0d3621b43dcaaede54f2b1326284","modified":1511054741391},{"_id":"source/images/zujianyangshi3.png","hash":"7a6b4c007c684f1cdc948db3cfe40bea3dacacc7","modified":1500485271057},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1495992248695},{"_id":"themes/yilia/.git/config","hash":"45dbf7cad960774e3ebd63f878005463a78e4c69","modified":1495992248695},{"_id":"source/images/zujianyangshi2.png","hash":"57464345b74e3933c1a9509a09e493148e2ca079","modified":1500485143273},{"_id":"themes/yilia/.git/index","hash":"6889fcc9f92e5d65dab73c12db781773d97a1ae1","modified":1496132476460},{"_id":"themes/yilia/.git/packed-refs","hash":"a8140137954dec646b34af234b44895c240f8f38","modified":1495992248695},{"_id":"source/photos/index.md","hash":"b2beb5a8baf315a610b1c2dc55f127a1e8fc18b4","modified":1515914365962},{"_id":"source/photos/data.json","hash":"96d6d74f0d97dfa811396dd80e5633eb66b41dcc","modified":1496137647862},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1495992248715},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1495992248715},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1495992248715},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1495992248715},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1495992248715},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1495992226300},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1495992248715},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1495992248715},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1495992248735},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1495992248735},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1495992248735},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1495992248735},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1495992248735},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1495992248735},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1495992248735},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1495992248743},{"_id":"source/images/2017-06-11-domain-jiexi.png","hash":"15877a5130781199c191d4d5c104060cf01f26ab","modified":1497176339862},{"_id":"source/images/angular-cli-02.jpg","hash":"d2d6f00734c3630c561c8bfe1079884001d07fed","modified":1500390188305},{"_id":"source/images/embedview.jpg","hash":"ccbbdad1a80e9d1455fcd83996d51b6017e81d0d","modified":1501578569672},{"_id":"source/images/injector-tree.jpg","hash":"82ac8e64a046b2132118ea3a1c4048947f19c048","modified":1500050937935},{"_id":"source/images/jianceqi-tree.jpg","hash":"0e747cf6ab1ee6225b11d629848d6c2f6dacebce","modified":1508030488898},{"_id":"source/images/longmao01.jpg","hash":"6e469b81ff71e61f86d0ffc23786d8f25e54cb2b","modified":1496937637023},{"_id":"source/images/route-url-tree.jpg","hash":"8199de3096fee57c3e7ab5064f17182814515af3","modified":1499270474098},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1495992248743},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1495992248735},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1495992248743},{"_id":"themes/yilia/source/main.b3331d.css","hash":"a29d673147eb61ae0596fd7589498945ab441435","modified":1540654549784},{"_id":"source/images/favicon.jpg","hash":"458d71aabdd2bab79f07ce0e77a10edc0a08a1a9","modified":1496938751808},{"_id":"source/images/2017-06-11-myblok.png","hash":"23c646b280e6b5b7ee81872e5696cc5cfabf7e40","modified":1497175082180},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1495992248739},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1495992226300},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1495992226300},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1495992226300},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1495992226300},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1495992226300},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1495992226300},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1495992226300},{"_id":"themes/yilia/.git/logs/HEAD","hash":"d0c902546c1531411e3c90a61d259194d934068e","modified":1495992248695},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1495992248735},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1495992226300},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1495992248735},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1495992226300},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"0c1a8bdd20594b5e3746412ef305ad2a5f84b6e6","modified":1540481410864},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1495992248739},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1495992226300},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1495992248739},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1495992248739},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1495992248739},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1495992248739},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1495992248739},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1495992248739},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1495992248739},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1495992248735},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1495992248739},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1495992248735},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1495992248739},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1495992248739},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1495992248739},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1495992248739},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1495992248739},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1495992248739},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1495992248739},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1495992248739},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1495992248739},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1495992248739},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1495992248739},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1495992248739},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1495992248739},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1495992248739},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1495992248739},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1495992248739},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1495992248739},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1495992248739},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1495992248739},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1495992248739},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1495992248739},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1495992248739},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1495992248739},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1495992248739},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1495992248739},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1495992248739},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1495992248739},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1495992248739},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1495992248739},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1495992248739},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1495992248739},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1495992248739},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1495992248739},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1495992248739},{"_id":"source/images/module-tree.jpg","hash":"51f92abb433ade684d93c693ec0664cd2b9bbafd","modified":1500050987691},{"_id":"source/images/route-tree.jpg","hash":"1d457e57ff379cfacc8843d2f4c4728cde03e713","modified":1499268798068},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1495992248735},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1495992248739},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1495992248739},{"_id":"themes/yilia/.git/objects/pack/pack-0c44c76d4ffe18ade69d4e276cbea1b35daa5c0a.idx","hash":"269b1913f36a3243270406497d275122a4a9647f","modified":1495992248407},{"_id":"themes/yilia/.git/refs/heads/master","hash":"891805485d22f9cbd7a1042d98f7953414f4c0fd","modified":1495992248695},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"1ba1d4a4663eae37b1a2b75c47dfdff4fb3cbf52","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1495992248735},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"1c55605464856521a101754918328f2b0e5f485a","modified":1496245558858},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1495992248735},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1495992248735},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1495992248739},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1495992248735},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1495992248739},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1495992248739},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1495992248739},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1495992248739},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1495992248739},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1495992248739},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1495992248739},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1495992248739},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1495992248739},{"_id":"source/images/2017-06-11-hexo-page.png","hash":"0946df4c567a5655c482be0dc49bd54084d21334","modified":1497170592168},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1495992248739},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"0ab2241684cfe731ed3ce8ab7a1efaff99a2a73a","modified":1508074249204},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1495992248739},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1495992248695},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"d0c902546c1531411e3c90a61d259194d934068e","modified":1495992248695},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"d0c902546c1531411e3c90a61d259194d934068e","modified":1495992248695},{"_id":"source/images/IMG_1426.JPG","hash":"4061fafcce65dc41f3af83766854979c2339fbf2","modified":1428146578000},{"_id":"source/images/IMG_1497.JPG","hash":"5b8561cac02ebecc1246916bce7e2abec553e654","modified":1429327420000},{"_id":"source/images/IMG_1301.JPG","hash":"1a8b686d5a6ada604b26b6bd16d8d494c98ddc81","modified":1428132328000},{"_id":"source/images/IMG_1494.JPG","hash":"8a6d61d14ec8df0dcdc303d0552a6f0b85f99ba5","modified":1429327282000},{"_id":"source/images/IMG_0800.JPG","hash":"ed7a1101bdfc3bad1a30235c6f3cf8630dbf57d6","modified":1426915160000},{"_id":"themes/yilia/.git/objects/pack/pack-0c44c76d4ffe18ade69d4e276cbea1b35daa5c0a.pack","hash":"4d454bf7b0bbdc6483e997f6143ffb52c61443df","modified":1495992248407},{"_id":"public/photos/data.json","hash":"7d11c414a976c22c3b1329795700703342d689a3","modified":1547474084583},{"_id":"public/content.json","hash":"0b43bc6ffb9883860de0478c08406e0b97aa385a","modified":1547474424020},{"_id":"public/about-me/index.html","hash":"e61978194869d02fd7f3282fd7534d7e7412ea5f","modified":1547474086090},{"_id":"public/photos/index.html","hash":"485fabfa75e97c413c0ab07e0206bb505ae215b4","modified":1547474086090},{"_id":"public/2019/01/14/dom-and-stack/index.html","hash":"b6fbc1e2b7f371ff836d117b0185b725051f54c8","modified":1547474424673},{"_id":"public/2018/12/17/ng-template-ng-container-and-ng-content/index.html","hash":"9c9f2073067037d99163182ff9773e80b5fb7833","modified":1547474086090},{"_id":"public/2018/12/14/custom-element-and-dynamic-component/index.html","hash":"2eaa3aacb7a8c3ec5995074e64bdb553310571aa","modified":1547474086091},{"_id":"public/2018/12/13/angular-elementRef-and-renderer/index.html","hash":"a174bee3f959510efc3cbe3b7faa57851fa2b86b","modified":1547474086091},{"_id":"public/2018/12/12/angular-templateRef-and-viewContainerRef/index.html","hash":"2b6e220c05756562ccbf32bee8d4854bbc88ff87","modified":1547474086091},{"_id":"public/2018/11/10/ng-shadow-cat-readme/index.html","hash":"c253e0af7c48b3045627a69f959d270ae69015f5","modified":1547474086091},{"_id":"public/2018/09/26/jq-plugin-dev2/index.html","hash":"28bebab9ea51ac42c5c3de5f9b9946d8a0fbbbb7","modified":1547474086092},{"_id":"public/2018/09/12/jq-plugins-dev/index.html","hash":"60fae21cc76ac04105f1232404fd454598d9db88","modified":1547474086094},{"_id":"public/2018/08/23/less-import/index.html","hash":"69fd9fa34140a8747546778895705d873ed3cf52","modified":1547474086094},{"_id":"public/2018/08/22/the-offset-of-javascript-and-jquery/index.html","hash":"deeee0ac3c217b6d1140b0a148bbdd1be4c7e272","modified":1547474086094},{"_id":"public/2018/08/15/lessjs-use-depth/index.html","hash":"e6801ebb6101041fbf537a2b10c858a34af2e96b","modified":1547474086095},{"_id":"public/2018/08/14/lessjs-use/index.html","hash":"4253c57a8ab178b06cb45ec6b48080efd69bc5bf","modified":1547474086095},{"_id":"public/2018/08/10/less-common/index.html","hash":"0d83201040dfa19c19ae7611c7a07ba007a722d8","modified":1547474086095},{"_id":"public/2018/07/31/jq-plugin/index.html","hash":"0736574bc786029bd8ebeb511929ce70de6a1204","modified":1547474086096},{"_id":"public/2018/07/28/JSON-xuliehua/index.html","hash":"60d62da46145ef18145c60e86253b3764ff2f4d9","modified":1547474086096},{"_id":"public/2018/07/27/jquery-daoru/index.html","hash":"5e7deafb94b8ae7a21491d5e5533738076350837","modified":1547474086096},{"_id":"public/2018/06/16/JavaScript-form-Api/index.html","hash":"33328e6ae9387423a4e58591f97c6d48733abe2e","modified":1547474086096},{"_id":"public/2018/06/06/HTMLCollection-and-NodeList/index.html","hash":"66b635482b79e75ea00d9084c26f01366feb5205","modified":1547474086096},{"_id":"public/2018/05/06/javascipt-bibao-and-this/index.html","hash":"52233608959bd1d17cc9b37e7193eaadecda4a87","modified":1547474086097},{"_id":"public/2018/05/05/ECMAScript-mianxiangduixiang/index.html","hash":"ab8d8580e52e256c3f719abccc6f7881dcf441d8","modified":1547474086097},{"_id":"public/2018/04/25/Javascript-ECMAScript/index.html","hash":"5491f8939941e77d97d8f8b2a0919e64ff0270ea","modified":1547474086097},{"_id":"public/2018/03/18/design-pattern-3/index.html","hash":"9a5c1d11a5036362b04e50d55b0a46b147c2ed60","modified":1547474086097},{"_id":"public/2018/03/17/design-pattern-2/index.html","hash":"f2a0e182ca6e182234595800940fe6bf3641cda6","modified":1547474086097},{"_id":"public/2018/03/09/design-pattern-1/index.html","hash":"e57c4db87dc5f7a2199c29032698c6f47be6f20f","modified":1547474086098},{"_id":"public/2018/01/24/css3-modia/index.html","hash":"3e18772ba875018c835ffe2f638bd3fc88ce5aab","modified":1547474086098},{"_id":"public/2018/01/21/css3-flex/index.html","hash":"1ff7af0434532f7a2ee0d633abd8225b71e238db","modified":1547474086098},{"_id":"public/2018/01/21/css3-box/index.html","hash":"92b954df4fab40b9bba10bcc9d9d1e8ca72cd0bd","modified":1547474086098},{"_id":"public/2018/01/18/css3-gradients/index.html","hash":"267a724cbddf045f36bae793a2c18f1e9a8c731d","modified":1547474086099},{"_id":"public/2018/01/14/css3-animation/index.html","hash":"9c460458dce5ff5a4114275ae5f55bb619b982fb","modified":1547474086099},{"_id":"public/2018/01/14/css3-3D/index.html","hash":"2fe7082ad2194de135f7c518479bb515f8a94d41","modified":1547474086099},{"_id":"public/2018/01/14/css3-2D/index.html","hash":"4d8212db85f4d1eebd08adff23f639f24f74b1a4","modified":1547474086099},{"_id":"public/2018/01/14/css3-border-box/index.html","hash":"2030bff75259143ce8e6bd4a54e07e3c5f25f8c1","modified":1547474086100},{"_id":"public/2018/01/11/forkjoin-zip/index.html","hash":"ca4f91a0d879bab87b6985097519663d25cb9089","modified":1547474086100},{"_id":"public/2017/12/27/rxjs-operators/index.html","hash":"eb7083320ef29ed2f8b8f6992c2827842cc6c2cc","modified":1547474086100},{"_id":"public/2017/12/24/rxjs/index.html","hash":"04ee61a08e79999beaa0262e3c6fa25024f9d616","modified":1547474086100},{"_id":"public/2017/12/01/router-guard/index.html","hash":"300d83b136d289ed92f193b82ab1cebc944c83c1","modified":1547474086100},{"_id":"public/2017/11/26/reactive-form/index.html","hash":"ab8fa560ea05bfd0c6aa984b406e23759fa095fc","modified":1547474086101},{"_id":"public/2017/11/22/Form-templateForm/index.html","hash":"1dec436a6292e8a0d2d73636a6919d63b1a7da2c","modified":1547474086101},{"_id":"public/2017/11/19/Angular-Form/index.html","hash":"4e1d86b6622680bda6519ed76ea27748eace2dff","modified":1547474086101},{"_id":"public/2017/11/10/angular-directive/index.html","hash":"d83b4248f843d26ce29a00f1a7b7c0ffa5b3af72","modified":1547474086101},{"_id":"public/2017/10/15/angular-jianceqi/index.html","hash":"0943c65407cfba176be66fb32ff5acadd1634907","modified":1547474086102},{"_id":"public/2017/10/07/class-and-interface/index.html","hash":"820e7d2e87e1179d7bf0a5b4bdb1648e71b556c7","modified":1547474086102},{"_id":"public/2017/09/10/angular-zujiantonxing/index.html","hash":"6ac811dc85fcb17d44de0fcc303455653840070d","modified":1547474086102},{"_id":"public/2017/09/03/angular-aot/index.html","hash":"a66de4b5f136ff2262f7a39d1f0a7794c479b74f","modified":1547474086102},{"_id":"public/2017/08/27/anular-http/index.html","hash":"fc28e999c9e1cf9bc1511614bd00fa0971ce3ada","modified":1547474086102},{"_id":"public/2017/07/31/angular-structDirective/index.html","hash":"05cd283b79cc786821899e8fdd676e647ca869d5","modified":1547474086102},{"_id":"public/2017/07/28/angular-pipe/index.html","hash":"c8be7dda5736d73575427194a4baf74174b9fa6b","modified":1547474086103},{"_id":"public/2017/07/23/angular-lifecysle-hook/index.html","hash":"73917f71aa164a41b0a6624f13d1d24a0b6637de","modified":1547474086103},{"_id":"public/2017/07/23/angular-cli-comand/index.html","hash":"e2cbdb6e1abe8e75b333b46c87e75cda237338c7","modified":1547474086103},{"_id":"public/2017/07/23/angular-cli-install-deploy/index.html","hash":"c39c383bd7582dfe4012a7d1381f924428b069e9","modified":1547474086103},{"_id":"public/2017/07/21/angular-attr-directive/index.html","hash":"9f755777d7d9af7543a6d5b3c04f750b8a4a696f","modified":1547474086104},{"_id":"public/2017/07/20/angular-component-styles/index.html","hash":"2e06011ef1c999e6d89316c9cfbcd7d857b0d206","modified":1547474086104},{"_id":"public/2017/07/17/angular-router/index.html","hash":"785c60b08384c82bbf49fcb87cebb981b0857ecb","modified":1547474086104},{"_id":"public/2017/07/16/angular-Injector/index.html","hash":"7e20d8030c8c53a88a6bc8ad5c5e6ff71fe059c9","modified":1547474086104},{"_id":"public/2017/07/15/angular-module/index.html","hash":"3ddc04f389b66748bdb49c17948b060e321ee2bd","modified":1547474086105},{"_id":"public/2017/06/11/hexo-add-pinglun/index.html","hash":"8350ab2887e6a181657653eb05814fd774481226","modified":1547474086105},{"_id":"public/2017/06/11/hexo-bind-domain/index.html","hash":"2e4503e96e0881a1e98d261cf0cb2b5127180328","modified":1547474086105},{"_id":"public/2017/06/11/hexo-theme/index.html","hash":"ac7df36e530527ede779b5132a5730081c427586","modified":1547474086105},{"_id":"public/2017/06/01/hexo-build-blok/index.html","hash":"058b247b75c9fa6f2f8a5705485e6a8311f7353e","modified":1547474086106},{"_id":"public/2017/05/29/markdown/index.html","hash":"cb2376a1c27835540ce3a2b4707dc01ee00a1f77","modified":1547474086106},{"_id":"public/archives/index.html","hash":"945d907768bd00369454ae05acb169a2789194c2","modified":1547474086106},{"_id":"public/archives/page/2/index.html","hash":"e26f21b9f4828138746902d242c11a7eb94a6956","modified":1547474086106},{"_id":"public/archives/page/3/index.html","hash":"3fcf524e3f9232751c32311f8da6943fd97f34b1","modified":1547474086108},{"_id":"public/archives/page/4/index.html","hash":"0f782a62d6c8d6bbe87adfa5b8259386c4d91a5a","modified":1547474086108},{"_id":"public/archives/page/5/index.html","hash":"0f8640dd382b567fc7210fe7c0a7c2f53dc35051","modified":1547474086109},{"_id":"public/archives/page/6/index.html","hash":"8e95e9e547c838249ed923dbbbbecc52022c88bf","modified":1547474086109},{"_id":"public/archives/2017/index.html","hash":"6b003bae5f215a22cc30f55a566131b8089606a4","modified":1547474086109},{"_id":"public/archives/2017/page/2/index.html","hash":"3c95b21cb0f791c19733fedfa8aaa8161f903492","modified":1547474086109},{"_id":"public/archives/2017/page/3/index.html","hash":"e8777eba24f42337a7478cbceaf9a5d43da84a88","modified":1547474086109},{"_id":"public/archives/2017/05/index.html","hash":"8754048cbd9d5819f034f20807cab6f2f77ed121","modified":1547474086110},{"_id":"public/archives/2017/06/index.html","hash":"5d4129cf009ce8db4293cac93fde015e0b3b01bd","modified":1547474086110},{"_id":"public/archives/2017/07/index.html","hash":"5e3100a837934a5441532942cbc243baba1b8c89","modified":1547474086110},{"_id":"public/archives/2017/08/index.html","hash":"d3f1a287c620d6458deb20c7bf35917e95a0530c","modified":1547474086110},{"_id":"public/archives/2017/09/index.html","hash":"63a2895c3f9df745c491e84e665a769c57db86ea","modified":1547474086110},{"_id":"public/archives/2017/10/index.html","hash":"ccc80ff60bf17e2e836b055d3fa0385d23237f57","modified":1547474086111},{"_id":"public/archives/2017/11/index.html","hash":"49525e45a1fdcebb7a28d8528f0fc6974c2ab2d3","modified":1547474086111},{"_id":"public/archives/2017/12/index.html","hash":"b7da380b427abd1b911ace024443ca67d48a052f","modified":1547474086111},{"_id":"public/archives/2018/index.html","hash":"15e04102aacf7bae0a54c9819c7f7998a24e6e8c","modified":1547474086111},{"_id":"public/archives/2018/page/2/index.html","hash":"2ecbc0c8a1cd1d3894072de6a4f409da123e56b3","modified":1547474086111},{"_id":"public/archives/2018/page/3/index.html","hash":"8dc62c6080a93265f71029d8fca79d52bd832878","modified":1547474086112},{"_id":"public/archives/2018/page/4/index.html","hash":"1ca389094d4db1b169ab5130d6da2ae95ca2f101","modified":1547474086112},{"_id":"public/archives/2018/01/index.html","hash":"22e73e3193a03eff7e330f4c6f9f03e49f0a328b","modified":1547474086112},{"_id":"public/archives/2018/03/index.html","hash":"4a1182d3578627d2a70135a8cb6c4476e38e0021","modified":1547474086112},{"_id":"public/archives/2018/04/index.html","hash":"b7e9a89d922094dd510764c0f9311477be1b157b","modified":1547474086112},{"_id":"public/archives/2018/05/index.html","hash":"ad177d7f69ff3e7a9b4b1b89b021210def77d414","modified":1547474086112},{"_id":"public/archives/2018/06/index.html","hash":"387b55c3fb495acbfc370605bdb4517d85089df6","modified":1547474086113},{"_id":"public/archives/2018/07/index.html","hash":"7fec582f25f58d03d3101fb882a613a8446e22c2","modified":1547474086113},{"_id":"public/archives/2018/08/index.html","hash":"9df05a4e66a93f8345e8094c43baf5adb29eac5d","modified":1547474086113},{"_id":"public/archives/2018/09/index.html","hash":"c4176a1a5b040610c2fdd8b73a9779dcaa9379e3","modified":1547474086113},{"_id":"public/archives/2018/11/index.html","hash":"8ced56547be18dbd7a7676ed57cdd9f0944e62ab","modified":1547474086113},{"_id":"public/archives/2018/12/index.html","hash":"5dbbb64017d2e8b9e0062812b4df97898d11a16b","modified":1547474086114},{"_id":"public/archives/2019/index.html","hash":"e07967bc5a3304cbc6f51624a8f6d33ed8f75fdd","modified":1547474086114},{"_id":"public/archives/2019/01/index.html","hash":"ce8a4b0ef2a025ecefd7b7faab5b078b444fb601","modified":1547474086114},{"_id":"public/categories/博客/index.html","hash":"280d9b402547a734530bd3ee65b3ddfa6454871e","modified":1547474086114},{"_id":"public/categories/前端/index.html","hash":"67b73654b945bf54ad62d505e052daddc69794a9","modified":1547474086114},{"_id":"public/categories/前端/page/2/index.html","hash":"83a09f6110b108424b0dea1b7cf8eec41b26a80e","modified":1547474086114},{"_id":"public/categories/前端/page/3/index.html","hash":"e7c9f73e218e3c8c866433b2480d9abab7e3883c","modified":1547474086115},{"_id":"public/categories/前端/page/4/index.html","hash":"0239f4cc15f7ef2b503c1cfd90457d31413256c2","modified":1547474086115},{"_id":"public/categories/前端/page/5/index.html","hash":"8fffce32a6357e586275781939e81afd9057c410","modified":1547474086115},{"_id":"public/categories/前端工具/index.html","hash":"19f8535ffd3ff947ac2051951774c9cd22a3766d","modified":1547474086115},{"_id":"public/categories/后端/index.html","hash":"1ba5ab3e2087106bb2f7cfda9b6d4a0ff5abef2a","modified":1547474086115},{"_id":"public/index.html","hash":"ac23763d916bba2645387613f582eeb1a8c35355","modified":1547474086116},{"_id":"public/page/2/index.html","hash":"d9a3f79f6a98759442e95663c9baae779c5f561f","modified":1547474086116},{"_id":"public/page/3/index.html","hash":"0bd52d601def9be4f69a56306b6f4246224019e1","modified":1547474086116},{"_id":"public/page/4/index.html","hash":"33c4d0f54bcd3176a3a31c296c21bdc26422a554","modified":1547474086116},{"_id":"public/page/5/index.html","hash":"cecf6dc09fdbb34b8c46cdac9f7679519e49f79c","modified":1547474086116},{"_id":"public/page/6/index.html","hash":"b42585ab20871f08ffb6bc4e3a3ac1a1c200feca","modified":1547474086117},{"_id":"public/tags/Hexo/index.html","hash":"a560cf7dcd3da9fa5646880dd157b0124af1d006","modified":1547474086117},{"_id":"public/tags/hexo/index.html","hash":"b9187a28b83d753c82a5b30abbc3a7fc60829390","modified":1547474086117},{"_id":"public/tags/Augular/index.html","hash":"9bb244c5fcf58e5d1bca0ab05d32c1bdfd293490","modified":1547474086117},{"_id":"public/tags/Augular/page/2/index.html","hash":"5802b81a8dbec9e31447a86ed6353da03e431241","modified":1547474086117},{"_id":"public/tags/写作/index.html","hash":"0f07dfdac2111e9021c444556063eb8e2f68a6ae","modified":1547474086117},{"_id":"public/tags/Typescript/index.html","hash":"755fecae92f563f26dca3196a3384191f44aedd8","modified":1547474086118},{"_id":"public/tags/rxjs/index.html","hash":"4d324c3e0e109c20d132454055e2a64a2f6e228b","modified":1547474086118},{"_id":"public/tags/CSS/index.html","hash":"fc3c8d43d16e1cf789d093098dc9df1ded3d8aff","modified":1547474086118},{"_id":"public/tags/设计/index.html","hash":"f4181a41af736436415d3a21de0e8f0d1d248a52","modified":1547474086119},{"_id":"public/tags/js/index.html","hash":"1d0e77f4ce47fc49be3da36a001aabe7b5b8bbdf","modified":1547474086119},{"_id":"public/tags/Jqury/index.html","hash":"51ceec4b3a37c6f8275ab9f31dea052172d91a01","modified":1547474086119},{"_id":"public/tags/Jquery/index.html","hash":"d53237d660168e0a159ca1da233e1064405503ba","modified":1547474086119},{"_id":"public/tags/Jquery，plugin/index.html","hash":"29b7c7b76b33cc2369ea0f5bd77bdd5d2e4f17b8","modified":1547474086119},{"_id":"public/tags/angular，plugin/index.html","hash":"fd5f7de37d5b0a8806f4a227af2e3d8393cb538d","modified":1547474086120},{"_id":"public/tags/angular/index.html","hash":"bc19cc36be28fd9ff5936e7b1912b7f33dee8f5d","modified":1547474086120},{"_id":"public/tags/Less/index.html","hash":"6f078e449b02915846345cca943f414125dc9277","modified":1547474086120},{"_id":"public/CNAME","hash":"815f27b115537ef0a1a23cf92140807be1352740","modified":1547474086224},{"_id":"public/images/2017-06-11-domain-name.png","hash":"cef6571ac4bff64816a1f2fc38ea08c75c3d3055","modified":1547474086224},{"_id":"public/images/2017-06-11-domain-cname.png","hash":"ada1d9821f25a17e7b5850a11e1bf00cfa0aaec3","modified":1547474086224},{"_id":"public/images/2017-06-11-hexo-theme.png","hash":"d734f0ce645c35510ee419d0cadc5c0c8c7a1008","modified":1547474086224},{"_id":"public/images/2017-06-11-new-resp.png","hash":"56dcb64a000f1fb1792590e6eb95575c6c232fc9","modified":1547474086224},{"_id":"public/images/2017-06-11-hexo-deploy.png","hash":"10df461d7ca9ac703651e771dea21a2ac925b782","modified":1547474086224},{"_id":"public/images/2017-06-11-wangyiyungentie.png","hash":"c93e73b26920ed50577ed4137105ddd8687d7b37","modified":1547474086224},{"_id":"public/images/2018-01-07_perspective.jpg","hash":"7cd01c2e6bb25d476f420f6d78819dd7ce48d28b","modified":1547474086224},{"_id":"public/images/2018-01-07_perspective2.jpg","hash":"10980a485bd9f8ca216857af7eb8e83231486199","modified":1547474086225},{"_id":"public/images/2018-01-07_perspective3.jpg","hash":"26e7c671ff42637a9eb4c1fcd89f3995f20bf278","modified":1547474086225},{"_id":"public/images/2018-01-08_borde-radius.jpg","hash":"c623b608dd744a9f3c6133c70686961bc4e4d2d4","modified":1547474086225},{"_id":"public/images/2018-01-07_skew2.jpg","hash":"47be17fb4f9fb017a04f0bdf2e1bc3cbaaf5c857","modified":1547474086225},{"_id":"public/images/2018-01-07_perspective4.jpg","hash":"e861357cb612cc9cf4ae414563a99c29be26b897","modified":1547474086225},{"_id":"public/images/2018-01-08_border-images.jpg","hash":"74d9b8b7829d304701b12895fc316d4c36fe1863","modified":1547474086225},{"_id":"public/images/2018-01-07_skew1.jpg","hash":"c0694735f662d9e19f31cddc812abdc287ae060b","modified":1547474086225},{"_id":"public/images/2018-03-02_160947.jpg","hash":"d546e055006abb8398ce216513a9bd68486172b9","modified":1547474086225},{"_id":"public/images/2018-10-23-dom-offset1.png","hash":"e5280deae3d3dcc228cecb022ea47d9a70f6a345","modified":1547474086226},{"_id":"public/images/2018-10-23-dom-offset2.png","hash":"4143b3a2501a5b993c14439b906feb927756ba35","modified":1547474086226},{"_id":"public/images/2018-10-23-dom-offset3.png","hash":"c66419f848bb7794c48e7bcb69df078ff13b637e","modified":1547474086226},{"_id":"public/images/IMG_weixin.jpg","hash":"06155dc61663ef9463a7c878f619f5096c348b55","modified":1547474086226},{"_id":"public/images/IMG_zhifubao.jpg","hash":"da77b89fab52c08befe1c3b3853edee50b4843b7","modified":1547474086226},{"_id":"public/images/angular-cli-01.jpg","hash":"0a19fcb16ab213cb1e184719307dd7bbb5a6e483","modified":1547474086226},{"_id":"public/images/angular-inject-config.jpg","hash":"05d0e21c4449b4ce76c8f01c1ce7c731c1293cea","modified":1547474086226},{"_id":"public/images/angular-cli-04.png","hash":"5487531b6ac7a04021174da86d758a7d39de03de","modified":1547474086227},{"_id":"public/images/app-construct.jpg","hash":"3a66777bc0c84835ae63d38d6551d11a9bfb2bb7","modified":1547474086227},{"_id":"public/images/atrr-direc-18.png","hash":"21d651c983a52509a7bc10db09512796a3bb2ffa","modified":1547474086228},{"_id":"public/images/app-module-jimu.jpg","hash":"631462cf47cb8f19c218d08b6b34059e37528e0d","modified":1547474086228},{"_id":"public/images/atrr-direc-4.png","hash":"b6a5cbd06b0e3b1aee9104b4d4803d99030a5df4","modified":1547474086228},{"_id":"public/images/construct-directive01.png","hash":"b0542919864718ab80fe75aa5c6e33c6d4ddc575","modified":1547474086228},{"_id":"public/images/atrr-directive.png","hash":"a1522abfda6b207bfbab4f71d207e3fa39e20e6c","modified":1547474086228},{"_id":"public/images/construct-directive02.png","hash":"6e9045d779b7fc7dedce7cc574b89e67293c6d16","modified":1547474086237},{"_id":"public/images/inector-design.jpg","hash":"ed4f3b39f4ecdf16a8d39e2a1ae0d5366f317f80","modified":1547474086237},{"_id":"public/images/angular-pipe-design.jpg","hash":"bda34b0bce44fa326c1dd6a1150b32c710c5bd13","modified":1547474086237},{"_id":"public/images/pipe1.png","hash":"f4822b2334ac0ec4157b4c773b061e4e5fabc160","modified":1547474086237},{"_id":"public/images/pipe2.png","hash":"48575933c4f64eb04df0b80de0c74fcd491802b9","modified":1547474086237},{"_id":"public/images/pipe3.png","hash":"f57a79cc6368f6a6301096ecf9c079bdf1284817","modified":1547474086237},{"_id":"public/images/pipe4.png","hash":"018cbe188c37a33a70cd7df95007c7b462149db5","modified":1547474086237},{"_id":"public/images/reactiveForm1.png","hash":"6d23d33a4b8906cc43e94635fc366b281a1b9d74","modified":1547474086238},{"_id":"public/images/reactiveForm2.png","hash":"f4df378133cbf96208b8b91d7215f76df541ccf2","modified":1547474086238},{"_id":"public/images/onchanges.png","hash":"e3e82e7b9527780b60750823770ba1be5acafc92","modified":1547474086238},{"_id":"public/images/templateform.png","hash":"083172b5f7972154122b41d52f80b9d044cd3293","modified":1547474086238},{"_id":"public/images/touxiang.jpg","hash":"843cb63b78aca163e9a9692e893c5a52c4c5a5cf","modified":1547474086239},{"_id":"public/images/zujianyangshi.png","hash":"2f8246d345e3c938eb44a14210865d4fba2a2628","modified":1547474086239},{"_id":"public/images/template_form.jpg","hash":"fd1abcb312ed0d3621b43dcaaede54f2b1326284","modified":1547474086239},{"_id":"public/images/zujianyangshi3.png","hash":"7a6b4c007c684f1cdc948db3cfe40bea3dacacc7","modified":1547474086239},{"_id":"public/images/zujianyangshi2.png","hash":"57464345b74e3933c1a9509a09e493148e2ca079","modified":1547474086239},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1547474086239},{"_id":"public/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1547474086239},{"_id":"public/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1547474086239},{"_id":"public/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1547474086240},{"_id":"public/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1547474086240},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1547474086240},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1547474086240},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1547474086240},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1547474086240},{"_id":"public/images/2017-06-11-domain-jiexi.png","hash":"15877a5130781199c191d4d5c104060cf01f26ab","modified":1547474086273},{"_id":"public/images/angular-cli-02.jpg","hash":"d2d6f00734c3630c561c8bfe1079884001d07fed","modified":1547474086273},{"_id":"public/images/embedview.jpg","hash":"ccbbdad1a80e9d1455fcd83996d51b6017e81d0d","modified":1547474086273},{"_id":"public/images/injector-tree.jpg","hash":"82ac8e64a046b2132118ea3a1c4048947f19c048","modified":1547474086295},{"_id":"public/images/jianceqi-tree.jpg","hash":"0e747cf6ab1ee6225b11d629848d6c2f6dacebce","modified":1547474086295},{"_id":"public/images/longmao01.jpg","hash":"6e469b81ff71e61f86d0ffc23786d8f25e54cb2b","modified":1547474086295},{"_id":"public/images/route-url-tree.jpg","hash":"8199de3096fee57c3e7ab5064f17182814515af3","modified":1547474086296},{"_id":"public/images/favicon.jpg","hash":"458d71aabdd2bab79f07ce0e77a10edc0a08a1a9","modified":1547474086308},{"_id":"public/images/2017-06-11-myblok.png","hash":"23c646b280e6b5b7ee81872e5696cc5cfabf7e40","modified":1547474086308},{"_id":"public/images/module-tree.jpg","hash":"51f92abb433ade684d93c693ec0664cd2b9bbafd","modified":1547474086324},{"_id":"public/images/route-tree.jpg","hash":"1d457e57ff379cfacc8843d2f4c4728cde03e713","modified":1547474086325},{"_id":"public/images/2017-06-11-hexo-page.png","hash":"0946df4c567a5655c482be0dc49bd54084d21334","modified":1547474086359},{"_id":"public/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1547474086397},{"_id":"public/main.b3331d.css","hash":"a29d673147eb61ae0596fd7589498945ab441435","modified":1547474086400},{"_id":"public/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1547474086410},{"_id":"public/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1547474086436},{"_id":"public/images/IMG_1426.JPG","hash":"4061fafcce65dc41f3af83766854979c2339fbf2","modified":1547474086460},{"_id":"public/images/IMG_1301.JPG","hash":"1a8b686d5a6ada604b26b6bd16d8d494c98ddc81","modified":1547474086470},{"_id":"public/images/IMG_1497.JPG","hash":"5b8561cac02ebecc1246916bce7e2abec553e654","modified":1547474086479},{"_id":"public/images/IMG_1494.JPG","hash":"8a6d61d14ec8df0dcdc303d0552a6f0b85f99ba5","modified":1547474086490},{"_id":"public/images/IMG_0800.JPG","hash":"ed7a1101bdfc3bad1a30235c6f3cf8630dbf57d6","modified":1547474086604}],"Category":[{"name":"博客","_id":"cjqwe42450004or0bbtycnh49"},{"name":"前端","_id":"cjqwe425g000nor0buupohww2"},{"name":"前端工具","_id":"cjqwe426a001eor0bu31yv7f9"},{"name":"后端","_id":"cjqwe4271002dor0bb6hew6eb"}],"Data":[],"Page":[{"title":"about me","type":"about","layout":"page","comments":0,"_content":"LIUXUWEN","source":"about-me/index.md","raw":"---\ntitle: about me\ntype: about\nlayout: page\ncomments: false\n---\nLIUXUWEN","date":"2017-05-30T08:19:03.089Z","updated":"2017-05-30T04:15:39.183Z","path":"about-me/index.html","_id":"cjqwe42400001or0b666pnuje","content":"<p>LIUXUWEN</p>\n","site":{"data":{}},"excerpt":"","more":"<p>LIUXUWEN</p>\n"},{"title":"相册","layout":"page","_content":"\n<style>\ndiv.img img {\n    margin: -30px;\n    padding: 0px;\n    border: 1px solid #ccc;\n    float: left;\n    width: 200px;\n    height: 200px;\n}\n\ndiv.img img:hover {\n    border: 1px solid #777;\n    width: 760px;\n    height: 650px;\n    position: absolute;\n    top: 10%;\n    left: 10%;\n}\n</style>\n\n<div class=\"img\">\n\n <img src=\"/images/IMG_0800.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n\n <img src=\"/images/IMG_1301.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n\n <img src=\"/images/IMG_1426.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n\n <img src=\"/images/IMG_1494.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n\n <img src=\"/images/IMG_1497.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n</div>\n\n<div style=\"clear: left;\"></div>","source":"photos/index.md","raw":"---\ntitle: 相册\nlayout: page\n---\n\n<style>\ndiv.img img {\n    margin: -30px;\n    padding: 0px;\n    border: 1px solid #ccc;\n    float: left;\n    width: 200px;\n    height: 200px;\n}\n\ndiv.img img:hover {\n    border: 1px solid #777;\n    width: 760px;\n    height: 650px;\n    position: absolute;\n    top: 10%;\n    left: 10%;\n}\n</style>\n\n<div class=\"img\">\n\n <img src=\"/images/IMG_0800.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n\n <img src=\"/images/IMG_1301.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n\n <img src=\"/images/IMG_1426.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n\n <img src=\"/images/IMG_1494.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n\n <img src=\"/images/IMG_1497.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\">\n</div>\n\n<div style=\"clear: left;\"></div>","date":"2018-01-14T07:19:26.002Z","updated":"2018-01-14T07:19:25.962Z","path":"photos/index.html","comments":1,"_id":"cjqwe42430003or0bc2frh7me","content":"<style>\ndiv.img img {\n    margin: -30px;\n    padding: 0px;\n    border: 1px solid #ccc;\n    float: left;\n    width: 200px;\n    height: 200px;\n}\n\ndiv.img img:hover {\n    border: 1px solid #777;\n    width: 760px;\n    height: 650px;\n    position: absolute;\n    top: 10%;\n    left: 10%;\n}\n</style>\n\n<div class=\"img\"><br><br> <img src=\"/images/IMG_0800.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br><br> <img src=\"/images/IMG_1301.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br><br> <img src=\"/images/IMG_1426.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br><br> <img src=\"/images/IMG_1494.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br><br> <img src=\"/images/IMG_1497.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br></div>\n\n<div style=\"clear: left;\"></div>","site":{"data":{}},"excerpt":"","more":"<style>\ndiv.img img {\n    margin: -30px;\n    padding: 0px;\n    border: 1px solid #ccc;\n    float: left;\n    width: 200px;\n    height: 200px;\n}\n\ndiv.img img:hover {\n    border: 1px solid #777;\n    width: 760px;\n    height: 650px;\n    position: absolute;\n    top: 10%;\n    left: 10%;\n}\n</style>\n\n<div class=\"img\"><br><br> <img src=\"/images/IMG_0800.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br><br> <img src=\"/images/IMG_1301.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br><br> <img src=\"/images/IMG_1426.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br><br> <img src=\"/images/IMG_1494.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br><br> <img src=\"/images/IMG_1497.JPG\" alt=\"图片文本描述\" width=\"300\" height=\"200\"><br></div>\n\n<div style=\"clear: left;\"></div>"},{"_content":"[\n\t\"IMG_0666.JPG\",\n\t\"IMG_0670.JPG\",\n\t\"IMG_0686.JPG\",\n\t\"IMG_0693.JPG\",\n\t\"IMG_0696.JPG\",\n\t\"IMG_0732.JPG\",\n\t\"IMG_0741.JPG\",\n\t\"IMG_0754.JPG\",\n\t\"IMG_0795.JPG\",\n\t\"IMG_0798.JPG\",\n\t\"IMG_0824.JPG\",\n\t\"IMG_0828.JPG\",\n\t\"IMG_0834.JPG\"\n]","source":"photos/data.json","raw":"[\n\t\"IMG_0666.JPG\",\n\t\"IMG_0670.JPG\",\n\t\"IMG_0686.JPG\",\n\t\"IMG_0693.JPG\",\n\t\"IMG_0696.JPG\",\n\t\"IMG_0732.JPG\",\n\t\"IMG_0741.JPG\",\n\t\"IMG_0754.JPG\",\n\t\"IMG_0795.JPG\",\n\t\"IMG_0798.JPG\",\n\t\"IMG_0824.JPG\",\n\t\"IMG_0828.JPG\",\n\t\"IMG_0834.JPG\"\n]","date":"2017-05-30T09:47:27.862Z","updated":"2017-05-30T09:47:27.862Z","path":"photos/data.json","layout":"false","title":"","comments":1,"_id":"cjqwe42490007or0bynp5m4rh","content":"[\"IMG_0666.JPG\",\"IMG_0670.JPG\",\"IMG_0686.JPG\",\"IMG_0693.JPG\",\"IMG_0696.JPG\",\"IMG_0732.JPG\",\"IMG_0741.JPG\",\"IMG_0754.JPG\",\"IMG_0795.JPG\",\"IMG_0798.JPG\",\"IMG_0824.JPG\",\"IMG_0828.JPG\",\"IMG_0834.JPG\"]","site":{"data":{}},"excerpt":"","more":"[\"IMG_0666.JPG\",\"IMG_0670.JPG\",\"IMG_0686.JPG\",\"IMG_0693.JPG\",\"IMG_0696.JPG\",\"IMG_0732.JPG\",\"IMG_0741.JPG\",\"IMG_0754.JPG\",\"IMG_0795.JPG\",\"IMG_0798.JPG\",\"IMG_0824.JPG\",\"IMG_0828.JPG\",\"IMG_0834.JPG\"]"}],"Post":[{"title":"hexo搭建个人博客","date":"2017-05-31T16:21:20.000Z","comments":1,"_content":"一直想有一个自己的站点，用来写点东西，记录学习和生活\n偶然的机会，见识到了同事的博客，体验甚好，更加触动了自己搭建个人站点的想法<!--more-->\n从同事了解了下是用Hexo来搭建的，Hexo是一个超轻量级的博客系统，搭建起来很方便，我时自己百度各种资料，上官网学习，一步步搭建起来的，过程中也遇到各种问题，现总结一下，希望有所用。\n## 一. 安装node.js和npm\n网上的安装指导教程很多，根据机器系统的不同有所不同，我的机子时ubuntu的，我是使用apt-get命令安装的\n\n    $ sudo apt-get install nodejs\n    $ sudo apt-get install npm\n看版本号有东西说明安装成功了\n\n    $ node -v\n    v7.10.0\n    $ npm -v\n    4.2.0\n推荐在线教程：\n[菜鸟教程-Node.js 安装配置](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n## 二. 安装git\ngit的安装方式也较多，可以百度搜一下，我是用apt-get安装的\n\n    $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\n       libz-dev libssl-dev\n    $ apt-get install git-core\n    $ git --version\n    git version 2.9.3\n推荐在线教程：\n[菜鸟教程-Git 安装配置](http://www.runoob.com/git/git-install-setup.html)\n\n## 三. 注册github\n点击上[github官网](https://github.com/)，按照网站提示注册就可以了，注册成功后要去自己的邮箱验证\n接下来设置SSH-Key链接\n\n    ssh-keygen -t rsa -C \"email_name@163.com\"\n    Generating public/private rsa key pair.\n    Enter file in which to save the key\n    (/Users/root/.ssh/id_rsa): ->按回车\n    Enter passphrase (empty for no passphrase): ->输入密码\n    Enter same passphrase again: ->再次输入密码\n然后在个人账号的setting->SSH and GPG keys里点击Add SSH Key添加公开密钥即可，密钥为刚刚生成的id_rsa.pub文件里的内容，官网里也有[添加SSH指导](https://help.github.com/articles/connecting-to-github-with-ssh/)\n\n## 四. 建立blog仓库\n官网有个给初学者提供的github的[hello-world指导文档](https://guides.github.com/activities/hello-world/)，可以先熟悉仓库的建设和分支管理\n**创建博客仓库**\n主要是创建和用户名对于的仓库，比如github用户名时blueskyawen,仓库名就叫blueskyawen.github.io\n![new repository](/images/2017-06-11-new-resp.png)\n**创建github page**\n进入刚刚创建的博客代理仓库，选择Settings进入设置页面，在GitHub Pages配置页面和主题,然后既可以通过地址:'your_name.github.io'来访问站点页面了\n\n## 五. 安装配置Hexo\n这里时核心也是最重要的部分，有时间的人可以阅读[hexo官网文档](https://hexo.io/zh-cn/docs/)来学习\n**全局安装hexo**\n\n    npm install hexo-cli -g 或 npm install -g hexo-cli\n查看版本，有说明安装成功\n\n    hexo -v\n    hexo-cli: 1.0.2\n    os: Linux 4.8.0-52-generic linux x64\n    http_parser: 2.7.0\n    node: 7.10.0\n    v8: 5.5.372.43\n    uv: 1.11.0\n    zlib: 1.2.11\n    ares: 1.10.1-DEV\n    modules: 51\n    openssl: 1.0.2k\n    icu: 58.2\n    unicode: 9.0\n    cldr: 30.0.3\n    tz: 2016j\n**初始化hexo**\n\n    hexo init blog\n    cd blog\n    npm install\n启动服务，正常时这样的\n\n    hexo server\n    INFO  Start processing\n    INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n在浏览器里输入以下地址访问页面：http://localhost:4000/\n![hexo page](/images/2017-06-11-hexo-page.png)\n\n**部署到github**\n先安装hexo-deployer\n\n    npm install hexo-deployer-git --save\n\n然后到博客根目录的_config.yml文件，找到deploy配置位置，填写上仓库地址，地址就是刚刚创建的那个github仓库的地址，可以从仓库首页面clone or download下拉框里直接拷贝\n![hexo deploy](/images/2017-06-11-hexo-deploy.png)\n然后出入下面的命令三件套，每一次修改都可以使用这三件套来部署\n\n    hexo clean\n    hexo g\n    hexo d\n提示你输入github的用户名和密码，就OK了，然后你就可以使用your_githubName.github.io来访问自己的站点了，效果和本地跑的一样\n\n## 六. Hexo常用命令\n下面时一Hexo常用的命令，平时可能会经常用到，也可以使用hexo -help自己查看各种命令的使用方法，括号内时简写\n\n    hexo clean   -- 清理缓存文件\n    hexo generate(g) -- 生成静态文件\n    hexo server(s)  -- 启动服务\n    hexo deploy(d)  -- 部署站点\n    hexo d -g  -- 生成加部署\n    hexo new \"Name\" -- 新建文章\n    hexo new draft \"Name\" -- 新建草稿文档\n    hexo --draft -- 显示草稿\n    hexo publish [layout] filename -- 发布草稿\n","source":"_posts/2017-06-01-hexo-build-blok.md","raw":"---\ntitle: hexo搭建个人博客\ndate: 2017-06-01 00:21:20\ntags: Hexo\ncategories: 博客\ncomments: true\n---\n一直想有一个自己的站点，用来写点东西，记录学习和生活\n偶然的机会，见识到了同事的博客，体验甚好，更加触动了自己搭建个人站点的想法<!--more-->\n从同事了解了下是用Hexo来搭建的，Hexo是一个超轻量级的博客系统，搭建起来很方便，我时自己百度各种资料，上官网学习，一步步搭建起来的，过程中也遇到各种问题，现总结一下，希望有所用。\n## 一. 安装node.js和npm\n网上的安装指导教程很多，根据机器系统的不同有所不同，我的机子时ubuntu的，我是使用apt-get命令安装的\n\n    $ sudo apt-get install nodejs\n    $ sudo apt-get install npm\n看版本号有东西说明安装成功了\n\n    $ node -v\n    v7.10.0\n    $ npm -v\n    4.2.0\n推荐在线教程：\n[菜鸟教程-Node.js 安装配置](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n## 二. 安装git\ngit的安装方式也较多，可以百度搜一下，我是用apt-get安装的\n\n    $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\n       libz-dev libssl-dev\n    $ apt-get install git-core\n    $ git --version\n    git version 2.9.3\n推荐在线教程：\n[菜鸟教程-Git 安装配置](http://www.runoob.com/git/git-install-setup.html)\n\n## 三. 注册github\n点击上[github官网](https://github.com/)，按照网站提示注册就可以了，注册成功后要去自己的邮箱验证\n接下来设置SSH-Key链接\n\n    ssh-keygen -t rsa -C \"email_name@163.com\"\n    Generating public/private rsa key pair.\n    Enter file in which to save the key\n    (/Users/root/.ssh/id_rsa): ->按回车\n    Enter passphrase (empty for no passphrase): ->输入密码\n    Enter same passphrase again: ->再次输入密码\n然后在个人账号的setting->SSH and GPG keys里点击Add SSH Key添加公开密钥即可，密钥为刚刚生成的id_rsa.pub文件里的内容，官网里也有[添加SSH指导](https://help.github.com/articles/connecting-to-github-with-ssh/)\n\n## 四. 建立blog仓库\n官网有个给初学者提供的github的[hello-world指导文档](https://guides.github.com/activities/hello-world/)，可以先熟悉仓库的建设和分支管理\n**创建博客仓库**\n主要是创建和用户名对于的仓库，比如github用户名时blueskyawen,仓库名就叫blueskyawen.github.io\n![new repository](/images/2017-06-11-new-resp.png)\n**创建github page**\n进入刚刚创建的博客代理仓库，选择Settings进入设置页面，在GitHub Pages配置页面和主题,然后既可以通过地址:'your_name.github.io'来访问站点页面了\n\n## 五. 安装配置Hexo\n这里时核心也是最重要的部分，有时间的人可以阅读[hexo官网文档](https://hexo.io/zh-cn/docs/)来学习\n**全局安装hexo**\n\n    npm install hexo-cli -g 或 npm install -g hexo-cli\n查看版本，有说明安装成功\n\n    hexo -v\n    hexo-cli: 1.0.2\n    os: Linux 4.8.0-52-generic linux x64\n    http_parser: 2.7.0\n    node: 7.10.0\n    v8: 5.5.372.43\n    uv: 1.11.0\n    zlib: 1.2.11\n    ares: 1.10.1-DEV\n    modules: 51\n    openssl: 1.0.2k\n    icu: 58.2\n    unicode: 9.0\n    cldr: 30.0.3\n    tz: 2016j\n**初始化hexo**\n\n    hexo init blog\n    cd blog\n    npm install\n启动服务，正常时这样的\n\n    hexo server\n    INFO  Start processing\n    INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n在浏览器里输入以下地址访问页面：http://localhost:4000/\n![hexo page](/images/2017-06-11-hexo-page.png)\n\n**部署到github**\n先安装hexo-deployer\n\n    npm install hexo-deployer-git --save\n\n然后到博客根目录的_config.yml文件，找到deploy配置位置，填写上仓库地址，地址就是刚刚创建的那个github仓库的地址，可以从仓库首页面clone or download下拉框里直接拷贝\n![hexo deploy](/images/2017-06-11-hexo-deploy.png)\n然后出入下面的命令三件套，每一次修改都可以使用这三件套来部署\n\n    hexo clean\n    hexo g\n    hexo d\n提示你输入github的用户名和密码，就OK了，然后你就可以使用your_githubName.github.io来访问自己的站点了，效果和本地跑的一样\n\n## 六. Hexo常用命令\n下面时一Hexo常用的命令，平时可能会经常用到，也可以使用hexo -help自己查看各种命令的使用方法，括号内时简写\n\n    hexo clean   -- 清理缓存文件\n    hexo generate(g) -- 生成静态文件\n    hexo server(s)  -- 启动服务\n    hexo deploy(d)  -- 部署站点\n    hexo d -g  -- 生成加部署\n    hexo new \"Name\" -- 新建文章\n    hexo new draft \"Name\" -- 新建草稿文档\n    hexo --draft -- 显示草稿\n    hexo publish [layout] filename -- 发布草稿\n","slug":"hexo-build-blok","published":1,"updated":"2017-06-11T09:27:29.230Z","layout":"post","photos":[],"link":"","_id":"cjqwe423g0000or0bs00by0ko","content":"<p>一直想有一个自己的站点，用来写点东西，记录学习和生活<br>偶然的机会，见识到了同事的博客，体验甚好，更加触动了自己搭建个人站点的想法<a id=\"more\"></a><br>从同事了解了下是用Hexo来搭建的，Hexo是一个超轻量级的博客系统，搭建起来很方便，我时自己百度各种资料，上官网学习，一步步搭建起来的，过程中也遇到各种问题，现总结一下，希望有所用。</p>\n<h2 id=\"一-安装node-js和npm\"><a href=\"#一-安装node-js和npm\" class=\"headerlink\" title=\"一. 安装node.js和npm\"></a>一. 安装node.js和npm</h2><p>网上的安装指导教程很多，根据机器系统的不同有所不同，我的机子时ubuntu的，我是使用apt-get命令安装的</p>\n<pre><code>$ sudo apt-get install nodejs\n$ sudo apt-get install npm\n</code></pre><p>看版本号有东西说明安装成功了</p>\n<pre><code>$ node -v\nv7.10.0\n$ npm -v\n4.2.0\n</code></pre><p>推荐在线教程：<br><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">菜鸟教程-Node.js 安装配置</a></p>\n<h2 id=\"二-安装git\"><a href=\"#二-安装git\" class=\"headerlink\" title=\"二. 安装git\"></a>二. 安装git</h2><p>git的安装方式也较多，可以百度搜一下，我是用apt-get安装的</p>\n<pre><code>$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\n   libz-dev libssl-dev\n$ apt-get install git-core\n$ git --version\ngit version 2.9.3\n</code></pre><p>推荐在线教程：<br><a href=\"http://www.runoob.com/git/git-install-setup.html\" target=\"_blank\" rel=\"external\">菜鸟教程-Git 安装配置</a></p>\n<h2 id=\"三-注册github\"><a href=\"#三-注册github\" class=\"headerlink\" title=\"三. 注册github\"></a>三. 注册github</h2><p>点击上<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github官网</a>，按照网站提示注册就可以了，注册成功后要去自己的邮箱验证<br>接下来设置SSH-Key链接</p>\n<pre><code>ssh-keygen -t rsa -C &quot;email_name@163.com&quot;\nGenerating public/private rsa key pair.\nEnter file in which to save the key\n(/Users/root/.ssh/id_rsa): -&gt;按回车\nEnter passphrase (empty for no passphrase): -&gt;输入密码\nEnter same passphrase again: -&gt;再次输入密码\n</code></pre><p>然后在个人账号的setting-&gt;SSH and GPG keys里点击Add SSH Key添加公开密钥即可，密钥为刚刚生成的id_rsa.pub文件里的内容，官网里也有<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">添加SSH指导</a></p>\n<h2 id=\"四-建立blog仓库\"><a href=\"#四-建立blog仓库\" class=\"headerlink\" title=\"四. 建立blog仓库\"></a>四. 建立blog仓库</h2><p>官网有个给初学者提供的github的<a href=\"https://guides.github.com/activities/hello-world/\" target=\"_blank\" rel=\"external\">hello-world指导文档</a>，可以先熟悉仓库的建设和分支管理<br><strong>创建博客仓库</strong><br>主要是创建和用户名对于的仓库，比如github用户名时blueskyawen,仓库名就叫blueskyawen.github.io<br><img src=\"/images/2017-06-11-new-resp.png\" alt=\"new repository\"><br><strong>创建github page</strong><br>进入刚刚创建的博客代理仓库，选择Settings进入设置页面，在GitHub Pages配置页面和主题,然后既可以通过地址:’your_name.github.io’来访问站点页面了</p>\n<h2 id=\"五-安装配置Hexo\"><a href=\"#五-安装配置Hexo\" class=\"headerlink\" title=\"五. 安装配置Hexo\"></a>五. 安装配置Hexo</h2><p>这里时核心也是最重要的部分，有时间的人可以阅读<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">hexo官网文档</a>来学习<br><strong>全局安装hexo</strong></p>\n<pre><code>npm install hexo-cli -g 或 npm install -g hexo-cli\n</code></pre><p>查看版本，有说明安装成功</p>\n<pre><code>hexo -v\nhexo-cli: 1.0.2\nos: Linux 4.8.0-52-generic linux x64\nhttp_parser: 2.7.0\nnode: 7.10.0\nv8: 5.5.372.43\nuv: 1.11.0\nzlib: 1.2.11\nares: 1.10.1-DEV\nmodules: 51\nopenssl: 1.0.2k\nicu: 58.2\nunicode: 9.0\ncldr: 30.0.3\ntz: 2016j\n</code></pre><p><strong>初始化hexo</strong></p>\n<pre><code>hexo init blog\ncd blog\nnpm install\n</code></pre><p>启动服务，正常时这样的</p>\n<pre><code>hexo server\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n</code></pre><p>在浏览器里输入以下地址访问页面：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br><img src=\"/images/2017-06-11-hexo-page.png\" alt=\"hexo page\"></p>\n<p><strong>部署到github</strong><br>先安装hexo-deployer</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后到博客根目录的_config.yml文件，找到deploy配置位置，填写上仓库地址，地址就是刚刚创建的那个github仓库的地址，可以从仓库首页面clone or download下拉框里直接拷贝<br><img src=\"/images/2017-06-11-hexo-deploy.png\" alt=\"hexo deploy\"><br>然后出入下面的命令三件套，每一次修改都可以使用这三件套来部署</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre><p>提示你输入github的用户名和密码，就OK了，然后你就可以使用your_githubName.github.io来访问自己的站点了，效果和本地跑的一样</p>\n<h2 id=\"六-Hexo常用命令\"><a href=\"#六-Hexo常用命令\" class=\"headerlink\" title=\"六. Hexo常用命令\"></a>六. Hexo常用命令</h2><p>下面时一Hexo常用的命令，平时可能会经常用到，也可以使用hexo -help自己查看各种命令的使用方法，括号内时简写</p>\n<pre><code>hexo clean   -- 清理缓存文件\nhexo generate(g) -- 生成静态文件\nhexo server(s)  -- 启动服务\nhexo deploy(d)  -- 部署站点\nhexo d -g  -- 生成加部署\nhexo new &quot;Name&quot; -- 新建文章\nhexo new draft &quot;Name&quot; -- 新建草稿文档\nhexo --draft -- 显示草稿\nhexo publish [layout] filename -- 发布草稿\n</code></pre>","site":{"data":{}},"excerpt":"<p>一直想有一个自己的站点，用来写点东西，记录学习和生活<br>偶然的机会，见识到了同事的博客，体验甚好，更加触动了自己搭建个人站点的想法","more":"<br>从同事了解了下是用Hexo来搭建的，Hexo是一个超轻量级的博客系统，搭建起来很方便，我时自己百度各种资料，上官网学习，一步步搭建起来的，过程中也遇到各种问题，现总结一下，希望有所用。</p>\n<h2 id=\"一-安装node-js和npm\"><a href=\"#一-安装node-js和npm\" class=\"headerlink\" title=\"一. 安装node.js和npm\"></a>一. 安装node.js和npm</h2><p>网上的安装指导教程很多，根据机器系统的不同有所不同，我的机子时ubuntu的，我是使用apt-get命令安装的</p>\n<pre><code>$ sudo apt-get install nodejs\n$ sudo apt-get install npm\n</code></pre><p>看版本号有东西说明安装成功了</p>\n<pre><code>$ node -v\nv7.10.0\n$ npm -v\n4.2.0\n</code></pre><p>推荐在线教程：<br><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">菜鸟教程-Node.js 安装配置</a></p>\n<h2 id=\"二-安装git\"><a href=\"#二-安装git\" class=\"headerlink\" title=\"二. 安装git\"></a>二. 安装git</h2><p>git的安装方式也较多，可以百度搜一下，我是用apt-get安装的</p>\n<pre><code>$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\n   libz-dev libssl-dev\n$ apt-get install git-core\n$ git --version\ngit version 2.9.3\n</code></pre><p>推荐在线教程：<br><a href=\"http://www.runoob.com/git/git-install-setup.html\" target=\"_blank\" rel=\"external\">菜鸟教程-Git 安装配置</a></p>\n<h2 id=\"三-注册github\"><a href=\"#三-注册github\" class=\"headerlink\" title=\"三. 注册github\"></a>三. 注册github</h2><p>点击上<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github官网</a>，按照网站提示注册就可以了，注册成功后要去自己的邮箱验证<br>接下来设置SSH-Key链接</p>\n<pre><code>ssh-keygen -t rsa -C &quot;email_name@163.com&quot;\nGenerating public/private rsa key pair.\nEnter file in which to save the key\n(/Users/root/.ssh/id_rsa): -&gt;按回车\nEnter passphrase (empty for no passphrase): -&gt;输入密码\nEnter same passphrase again: -&gt;再次输入密码\n</code></pre><p>然后在个人账号的setting-&gt;SSH and GPG keys里点击Add SSH Key添加公开密钥即可，密钥为刚刚生成的id_rsa.pub文件里的内容，官网里也有<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">添加SSH指导</a></p>\n<h2 id=\"四-建立blog仓库\"><a href=\"#四-建立blog仓库\" class=\"headerlink\" title=\"四. 建立blog仓库\"></a>四. 建立blog仓库</h2><p>官网有个给初学者提供的github的<a href=\"https://guides.github.com/activities/hello-world/\" target=\"_blank\" rel=\"external\">hello-world指导文档</a>，可以先熟悉仓库的建设和分支管理<br><strong>创建博客仓库</strong><br>主要是创建和用户名对于的仓库，比如github用户名时blueskyawen,仓库名就叫blueskyawen.github.io<br><img src=\"/images/2017-06-11-new-resp.png\" alt=\"new repository\"><br><strong>创建github page</strong><br>进入刚刚创建的博客代理仓库，选择Settings进入设置页面，在GitHub Pages配置页面和主题,然后既可以通过地址:’your_name.github.io’来访问站点页面了</p>\n<h2 id=\"五-安装配置Hexo\"><a href=\"#五-安装配置Hexo\" class=\"headerlink\" title=\"五. 安装配置Hexo\"></a>五. 安装配置Hexo</h2><p>这里时核心也是最重要的部分，有时间的人可以阅读<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">hexo官网文档</a>来学习<br><strong>全局安装hexo</strong></p>\n<pre><code>npm install hexo-cli -g 或 npm install -g hexo-cli\n</code></pre><p>查看版本，有说明安装成功</p>\n<pre><code>hexo -v\nhexo-cli: 1.0.2\nos: Linux 4.8.0-52-generic linux x64\nhttp_parser: 2.7.0\nnode: 7.10.0\nv8: 5.5.372.43\nuv: 1.11.0\nzlib: 1.2.11\nares: 1.10.1-DEV\nmodules: 51\nopenssl: 1.0.2k\nicu: 58.2\nunicode: 9.0\ncldr: 30.0.3\ntz: 2016j\n</code></pre><p><strong>初始化hexo</strong></p>\n<pre><code>hexo init blog\ncd blog\nnpm install\n</code></pre><p>启动服务，正常时这样的</p>\n<pre><code>hexo server\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n</code></pre><p>在浏览器里输入以下地址访问页面：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br><img src=\"/images/2017-06-11-hexo-page.png\" alt=\"hexo page\"></p>\n<p><strong>部署到github</strong><br>先安装hexo-deployer</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后到博客根目录的_config.yml文件，找到deploy配置位置，填写上仓库地址，地址就是刚刚创建的那个github仓库的地址，可以从仓库首页面clone or download下拉框里直接拷贝<br><img src=\"/images/2017-06-11-hexo-deploy.png\" alt=\"hexo deploy\"><br>然后出入下面的命令三件套，每一次修改都可以使用这三件套来部署</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre><p>提示你输入github的用户名和密码，就OK了，然后你就可以使用your_githubName.github.io来访问自己的站点了，效果和本地跑的一样</p>\n<h2 id=\"六-Hexo常用命令\"><a href=\"#六-Hexo常用命令\" class=\"headerlink\" title=\"六. Hexo常用命令\"></a>六. Hexo常用命令</h2><p>下面时一Hexo常用的命令，平时可能会经常用到，也可以使用hexo -help自己查看各种命令的使用方法，括号内时简写</p>\n<pre><code>hexo clean   -- 清理缓存文件\nhexo generate(g) -- 生成静态文件\nhexo server(s)  -- 启动服务\nhexo deploy(d)  -- 部署站点\nhexo d -g  -- 生成加部署\nhexo new &quot;Name&quot; -- 新建文章\nhexo new draft &quot;Name&quot; -- 新建草稿文档\nhexo --draft -- 显示草稿\nhexo publish [layout] filename -- 发布草稿\n</code></pre>"},{"title":"Hexo博客绑定个人域名","date":"2017-06-10T16:28:14.000Z","comments":1,"_content":"之前搭建完博客并且部署到github上以后，已经可以通过github.io地址来访问我的博客页面\n但这个地址这是仓库地址，缺乏个性，也为注册其他插件带来问题\n<!--more-->\n我在想，如果有自己的域名就好了，说干就干，由于已经在阿里云有了账号，下面以阿里云为例描述绑定域名的过程\n\n## 1.购买域名\n进入[阿里云](https://www.aliyun.com/)官网，登录到域名购买页面\n输入个性的域名，查询注册情况，只要没被注册即可使用\n![domain name](/images/2017-06-11-domain-name.png)\n\n## 2.身份认证\n注册完域名后，进入到自己的域名列表后需要进行个人信息填写和实名认证，这一步很重要，不然不能进行解析，一段时间后会被挂起状态，不能正常使用，所以还是认证的好，认证步骤有详细的提示，这里就不赘述了\n\n## 3.域名解析\n进入到自己的域名列表，点击域名操作的解析，进入域名解析页面\n![domain jiexi](/images/2017-06-11-domain-jiexi.png)\n点击添加解析，填写配置：\n> 类型--选择CNAME\n主机记录--@\n线路--默认\n记录值--填写博客仓库的名字：\"your_github_name.github.io\"\n\n点击保存即可\n\n## 4.仓库配置\n回到github仓库，在别根目录下增加名为CNAME的文件，内容为刚刚申请的域名\n![domain cname file](/images/2017-06-11-domain-cname.png)\n为了防止以后部署提交会覆盖这个文件，可以在本地机子增加这个文件，然后PUSH到仓库里去\n\n## 5.配置文件修改\n这个主要是要修改我们根目录的_config.yml，设置站点为/，否则如果存在子目录的话，部署后的主题会失效\n\n    # URL\n    ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n    url: http://blueskyawen.com/\n    root: /\n\n至此，域名更换和配置已经完全结束了，可以使用域名访问站点试试","source":"_posts/2017-06-11-hexo-bind-domain.md","raw":"---\ntitle: Hexo博客绑定个人域名\ndate: 2017-06-11 00:28:14\ntags: hexo\ncategories: 博客\ncomments: true\n---\n之前搭建完博客并且部署到github上以后，已经可以通过github.io地址来访问我的博客页面\n但这个地址这是仓库地址，缺乏个性，也为注册其他插件带来问题\n<!--more-->\n我在想，如果有自己的域名就好了，说干就干，由于已经在阿里云有了账号，下面以阿里云为例描述绑定域名的过程\n\n## 1.购买域名\n进入[阿里云](https://www.aliyun.com/)官网，登录到域名购买页面\n输入个性的域名，查询注册情况，只要没被注册即可使用\n![domain name](/images/2017-06-11-domain-name.png)\n\n## 2.身份认证\n注册完域名后，进入到自己的域名列表后需要进行个人信息填写和实名认证，这一步很重要，不然不能进行解析，一段时间后会被挂起状态，不能正常使用，所以还是认证的好，认证步骤有详细的提示，这里就不赘述了\n\n## 3.域名解析\n进入到自己的域名列表，点击域名操作的解析，进入域名解析页面\n![domain jiexi](/images/2017-06-11-domain-jiexi.png)\n点击添加解析，填写配置：\n> 类型--选择CNAME\n主机记录--@\n线路--默认\n记录值--填写博客仓库的名字：\"your_github_name.github.io\"\n\n点击保存即可\n\n## 4.仓库配置\n回到github仓库，在别根目录下增加名为CNAME的文件，内容为刚刚申请的域名\n![domain cname file](/images/2017-06-11-domain-cname.png)\n为了防止以后部署提交会覆盖这个文件，可以在本地机子增加这个文件，然后PUSH到仓库里去\n\n## 5.配置文件修改\n这个主要是要修改我们根目录的_config.yml，设置站点为/，否则如果存在子目录的话，部署后的主题会失效\n\n    # URL\n    ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n    url: http://blueskyawen.com/\n    root: /\n\n至此，域名更换和配置已经完全结束了，可以使用域名访问站点试试","slug":"hexo-bind-domain","published":1,"updated":"2017-06-11T10:34:51.939Z","layout":"post","photos":[],"link":"","_id":"cjqwe42410002or0bcapncpw4","content":"<p>之前搭建完博客并且部署到github上以后，已经可以通过github.io地址来访问我的博客页面<br>但这个地址这是仓库地址，缺乏个性，也为注册其他插件带来问题<br><a id=\"more\"></a><br>我在想，如果有自己的域名就好了，说干就干，由于已经在阿里云有了账号，下面以阿里云为例描述绑定域名的过程</p>\n<h2 id=\"1-购买域名\"><a href=\"#1-购买域名\" class=\"headerlink\" title=\"1.购买域名\"></a>1.购买域名</h2><p>进入<a href=\"https://www.aliyun.com/\" target=\"_blank\" rel=\"external\">阿里云</a>官网，登录到域名购买页面<br>输入个性的域名，查询注册情况，只要没被注册即可使用<br><img src=\"/images/2017-06-11-domain-name.png\" alt=\"domain name\"></p>\n<h2 id=\"2-身份认证\"><a href=\"#2-身份认证\" class=\"headerlink\" title=\"2.身份认证\"></a>2.身份认证</h2><p>注册完域名后，进入到自己的域名列表后需要进行个人信息填写和实名认证，这一步很重要，不然不能进行解析，一段时间后会被挂起状态，不能正常使用，所以还是认证的好，认证步骤有详细的提示，这里就不赘述了</p>\n<h2 id=\"3-域名解析\"><a href=\"#3-域名解析\" class=\"headerlink\" title=\"3.域名解析\"></a>3.域名解析</h2><p>进入到自己的域名列表，点击域名操作的解析，进入域名解析页面<br><img src=\"/images/2017-06-11-domain-jiexi.png\" alt=\"domain jiexi\"><br>点击添加解析，填写配置：</p>\n<blockquote>\n<p>类型–选择CNAME<br>主机记录–@<br>线路–默认<br>记录值–填写博客仓库的名字：”your_github_name.github.io”</p>\n</blockquote>\n<p>点击保存即可</p>\n<h2 id=\"4-仓库配置\"><a href=\"#4-仓库配置\" class=\"headerlink\" title=\"4.仓库配置\"></a>4.仓库配置</h2><p>回到github仓库，在别根目录下增加名为CNAME的文件，内容为刚刚申请的域名<br><img src=\"/images/2017-06-11-domain-cname.png\" alt=\"domain cname file\"><br>为了防止以后部署提交会覆盖这个文件，可以在本地机子增加这个文件，然后PUSH到仓库里去</p>\n<h2 id=\"5-配置文件修改\"><a href=\"#5-配置文件修改\" class=\"headerlink\" title=\"5.配置文件修改\"></a>5.配置文件修改</h2><p>这个主要是要修改我们根目录的_config.yml，设置站点为/，否则如果存在子目录的话，部署后的主题会失效</p>\n<pre><code># URL\n## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;\nurl: http://blueskyawen.com/\nroot: /\n</code></pre><p>至此，域名更换和配置已经完全结束了，可以使用域名访问站点试试</p>\n","site":{"data":{}},"excerpt":"<p>之前搭建完博客并且部署到github上以后，已经可以通过github.io地址来访问我的博客页面<br>但这个地址这是仓库地址，缺乏个性，也为注册其他插件带来问题<br>","more":"<br>我在想，如果有自己的域名就好了，说干就干，由于已经在阿里云有了账号，下面以阿里云为例描述绑定域名的过程</p>\n<h2 id=\"1-购买域名\"><a href=\"#1-购买域名\" class=\"headerlink\" title=\"1.购买域名\"></a>1.购买域名</h2><p>进入<a href=\"https://www.aliyun.com/\" target=\"_blank\" rel=\"external\">阿里云</a>官网，登录到域名购买页面<br>输入个性的域名，查询注册情况，只要没被注册即可使用<br><img src=\"/images/2017-06-11-domain-name.png\" alt=\"domain name\"></p>\n<h2 id=\"2-身份认证\"><a href=\"#2-身份认证\" class=\"headerlink\" title=\"2.身份认证\"></a>2.身份认证</h2><p>注册完域名后，进入到自己的域名列表后需要进行个人信息填写和实名认证，这一步很重要，不然不能进行解析，一段时间后会被挂起状态，不能正常使用，所以还是认证的好，认证步骤有详细的提示，这里就不赘述了</p>\n<h2 id=\"3-域名解析\"><a href=\"#3-域名解析\" class=\"headerlink\" title=\"3.域名解析\"></a>3.域名解析</h2><p>进入到自己的域名列表，点击域名操作的解析，进入域名解析页面<br><img src=\"/images/2017-06-11-domain-jiexi.png\" alt=\"domain jiexi\"><br>点击添加解析，填写配置：</p>\n<blockquote>\n<p>类型–选择CNAME<br>主机记录–@<br>线路–默认<br>记录值–填写博客仓库的名字：”your_github_name.github.io”</p>\n</blockquote>\n<p>点击保存即可</p>\n<h2 id=\"4-仓库配置\"><a href=\"#4-仓库配置\" class=\"headerlink\" title=\"4.仓库配置\"></a>4.仓库配置</h2><p>回到github仓库，在别根目录下增加名为CNAME的文件，内容为刚刚申请的域名<br><img src=\"/images/2017-06-11-domain-cname.png\" alt=\"domain cname file\"><br>为了防止以后部署提交会覆盖这个文件，可以在本地机子增加这个文件，然后PUSH到仓库里去</p>\n<h2 id=\"5-配置文件修改\"><a href=\"#5-配置文件修改\" class=\"headerlink\" title=\"5.配置文件修改\"></a>5.配置文件修改</h2><p>这个主要是要修改我们根目录的_config.yml，设置站点为/，否则如果存在子目录的话，部署后的主题会失效</p>\n<pre><code># URL\n## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;\nurl: http://blueskyawen.com/\nroot: /\n</code></pre><p>至此，域名更换和配置已经完全结束了，可以使用域名访问站点试试</p>"},{"title":"Hexo主题配置","date":"2017-06-10T16:19:19.000Z","comments":1,"_content":"之前搭建的博客有自己默认的主题，个人不喜欢，觉得略丑，体验也不好，于是懂了更换主题的念头。\nHexo主题非常多，官网上[主题库](https://hexo.io/themes/)里有很多优秀的主题，大家可以根据自己的喜好来选择合适的主题\n<!--more-->\n由于Hexo是一款非常优秀的开源博客系统，所以github上也有大量的主题可供选择\n下面是github上star数量最多的前10个主题：\n> iissnan/hexo-theme-next， 3510个star。\nlitten/hexo-theme-yilia， 1703个star。\nTryGhost/Casper， 679个star。\nwuchong/jacman， 503个star。\nA-limon/pacman， 431个star。\ndaleanthony/uno， 416个star。\norderedlist/modernist， 367个star。\nAlxMedia/hueman， 336个star。\nkathyqian/crisp-ghost-theme， 303个star。\nxiangming/landscape-plus， 287个star。\n\n我用的就是hexo-theme-yilia，感觉这个主题页面简单，正合心意\n**1.clone主题代码**\n在博客目录下执行命令clone主题代码：\n\n    $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n完事在主题目录themes里增加yilia的主题代码\n\n**2.配置主题**\n在博客根目录的_config.yml文件中，配置新主题\n![hexo theme](/images/2017-06-11-hexo-theme.png)\n\n**3.修改主题配置信息**\n修改themes/yilia/_config.yml文件，修改的时候，每个冒号后面都需要留一个英文空格，不然报错，下面时我的配置文件，仅供参考\n    # Header\n    menu:\n      主页: /\n      归档: /archives\n      随笔: /categories/随笔\n      相册: /photos\n\n    # SubNav\n    subnav:\n      github: \"https://github.com/blueskyawen\"\n      weibo: \"#\"\n      rss: \"#\"\n      zhihu: \"#\"\n      qq: \"#\"\n      #weixin: \"#\"\n      #jianshu: \"#\"\n      #mail: \"mailto:litten225@qq.com\"\n      #facebook: \"#\"\n      #google: \"#\"\n      #twitter: \"#\"\n      #linkedin: \"#\"\n\n    rss: /atom.xml\n\n    # 是否需要修改 root 路径\n    # 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，\n    # 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\n    root: /\n\n    # Content\n    # 文章太长，截断按钮文字\n    excerpt_link: more\n    # 文章卡片右下角常驻链接，不需要请设置为false\n    show_all_link: '展开全文'\n    # 数学公式\n    mathjax: false\n    # 是否在新窗口打开链接\n    open_in_new: false\n    fancybox: true\n    top: true\n\n    # 是否开启动画效果\n    animate: true\n\n    # 打赏\n    # 请在需要打赏的文章的md文件头部，设置属性reward: true\n\n    # 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏\n    reward_type: 2\n    # 打赏wording\n    reward_wording: '请随意打赏'\n    # 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg\n    alipay: /images/IMG_zhifubao.jpg\n    # 微信二维码图片地址\n    weixin: /images/IMG_weixin.jpg\n\n    # Miscellaneous分析统计工具\n    baidu_analytics: ''\n    #google_analytics: ''\n\n    favicon: /images/favicon.jpg\n\n    #你的头像url\n    avatar: /images/touxiang.jpg\n\n    #是否开启分享\n    share_jia: true\n    share_addthis: false\n\n    #评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉\n    #具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/\n    #1、多说\n    duoshuo: false\n    #2、网易云跟帖\n    wangyiyun: true\n    #3、畅言\n    changyan_appid: false\n    changyan_conf: false\n\n    #4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的\n    disqus: false\n\n    # 样式定制 - 一般不需要修改，除非有很强的定制欲望…\n    style:\n      # 头像上面的背景颜色\n      header: '#003f80'\n      # 右滑板块背景\n      slider: 'linear-gradient(200deg,#a0cfe4,#e8c37e)'\n\n    # slider的设置\n    slider:\n      # 是否默认展开tags板块\n      showTags: false\n\n    # 智能菜单\n    # 如不需要，将该对应项置为false\n    # 比如\n    #smart_menu:\n    #  friends: false\n    smart_menu:\n      innerArchive: '所有文章'\n      friends: '链接'\n      aboutme: '关于我'\n\n    friends:\n      天猫商城: https://www.tmall.com\n      阿里云: https://www.aliyun.com\n      携程: http://www.ctrip.com\n      ZTE: http://www.zte.com.cn\n\n    aboutme: 前端菜鸟<br>正在学习的路上前行<br>现就职于某通讯企业<br>长路漫漫，渐行渐远\n\n**4.查看主题效果**\n仍然使用命令三件套来重新生成和部署站点，效果如下：\n![my blog](/images/2017-06-11-myblok.png)","source":"_posts/2017-06-11-hexo-theme.md","raw":"---\ntitle: Hexo主题配置\ndate: 2017-06-11 00:19:19\ntags: hexo\ncategories: 博客\ncomments: true\n---\n之前搭建的博客有自己默认的主题，个人不喜欢，觉得略丑，体验也不好，于是懂了更换主题的念头。\nHexo主题非常多，官网上[主题库](https://hexo.io/themes/)里有很多优秀的主题，大家可以根据自己的喜好来选择合适的主题\n<!--more-->\n由于Hexo是一款非常优秀的开源博客系统，所以github上也有大量的主题可供选择\n下面是github上star数量最多的前10个主题：\n> iissnan/hexo-theme-next， 3510个star。\nlitten/hexo-theme-yilia， 1703个star。\nTryGhost/Casper， 679个star。\nwuchong/jacman， 503个star。\nA-limon/pacman， 431个star。\ndaleanthony/uno， 416个star。\norderedlist/modernist， 367个star。\nAlxMedia/hueman， 336个star。\nkathyqian/crisp-ghost-theme， 303个star。\nxiangming/landscape-plus， 287个star。\n\n我用的就是hexo-theme-yilia，感觉这个主题页面简单，正合心意\n**1.clone主题代码**\n在博客目录下执行命令clone主题代码：\n\n    $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n完事在主题目录themes里增加yilia的主题代码\n\n**2.配置主题**\n在博客根目录的_config.yml文件中，配置新主题\n![hexo theme](/images/2017-06-11-hexo-theme.png)\n\n**3.修改主题配置信息**\n修改themes/yilia/_config.yml文件，修改的时候，每个冒号后面都需要留一个英文空格，不然报错，下面时我的配置文件，仅供参考\n    # Header\n    menu:\n      主页: /\n      归档: /archives\n      随笔: /categories/随笔\n      相册: /photos\n\n    # SubNav\n    subnav:\n      github: \"https://github.com/blueskyawen\"\n      weibo: \"#\"\n      rss: \"#\"\n      zhihu: \"#\"\n      qq: \"#\"\n      #weixin: \"#\"\n      #jianshu: \"#\"\n      #mail: \"mailto:litten225@qq.com\"\n      #facebook: \"#\"\n      #google: \"#\"\n      #twitter: \"#\"\n      #linkedin: \"#\"\n\n    rss: /atom.xml\n\n    # 是否需要修改 root 路径\n    # 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，\n    # 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\n    root: /\n\n    # Content\n    # 文章太长，截断按钮文字\n    excerpt_link: more\n    # 文章卡片右下角常驻链接，不需要请设置为false\n    show_all_link: '展开全文'\n    # 数学公式\n    mathjax: false\n    # 是否在新窗口打开链接\n    open_in_new: false\n    fancybox: true\n    top: true\n\n    # 是否开启动画效果\n    animate: true\n\n    # 打赏\n    # 请在需要打赏的文章的md文件头部，设置属性reward: true\n\n    # 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏\n    reward_type: 2\n    # 打赏wording\n    reward_wording: '请随意打赏'\n    # 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg\n    alipay: /images/IMG_zhifubao.jpg\n    # 微信二维码图片地址\n    weixin: /images/IMG_weixin.jpg\n\n    # Miscellaneous分析统计工具\n    baidu_analytics: ''\n    #google_analytics: ''\n\n    favicon: /images/favicon.jpg\n\n    #你的头像url\n    avatar: /images/touxiang.jpg\n\n    #是否开启分享\n    share_jia: true\n    share_addthis: false\n\n    #评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉\n    #具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/\n    #1、多说\n    duoshuo: false\n    #2、网易云跟帖\n    wangyiyun: true\n    #3、畅言\n    changyan_appid: false\n    changyan_conf: false\n\n    #4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的\n    disqus: false\n\n    # 样式定制 - 一般不需要修改，除非有很强的定制欲望…\n    style:\n      # 头像上面的背景颜色\n      header: '#003f80'\n      # 右滑板块背景\n      slider: 'linear-gradient(200deg,#a0cfe4,#e8c37e)'\n\n    # slider的设置\n    slider:\n      # 是否默认展开tags板块\n      showTags: false\n\n    # 智能菜单\n    # 如不需要，将该对应项置为false\n    # 比如\n    #smart_menu:\n    #  friends: false\n    smart_menu:\n      innerArchive: '所有文章'\n      friends: '链接'\n      aboutme: '关于我'\n\n    friends:\n      天猫商城: https://www.tmall.com\n      阿里云: https://www.aliyun.com\n      携程: http://www.ctrip.com\n      ZTE: http://www.zte.com.cn\n\n    aboutme: 前端菜鸟<br>正在学习的路上前行<br>现就职于某通讯企业<br>长路漫漫，渐行渐远\n\n**4.查看主题效果**\n仍然使用命令三件套来重新生成和部署站点，效果如下：\n![my blog](/images/2017-06-11-myblok.png)","slug":"hexo-theme","published":1,"updated":"2017-06-11T09:59:15.866Z","layout":"post","photos":[],"link":"","_id":"cjqwe42480006or0b1n0z9gjh","content":"<p>之前搭建的博客有自己默认的主题，个人不喜欢，觉得略丑，体验也不好，于是懂了更换主题的念头。<br>Hexo主题非常多，官网上<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">主题库</a>里有很多优秀的主题，大家可以根据自己的喜好来选择合适的主题<br><a id=\"more\"></a><br>由于Hexo是一款非常优秀的开源博客系统，所以github上也有大量的主题可供选择<br>下面是github上star数量最多的前10个主题：</p>\n<blockquote>\n<p>iissnan/hexo-theme-next， 3510个star。<br>litten/hexo-theme-yilia， 1703个star。<br>TryGhost/Casper， 679个star。<br>wuchong/jacman， 503个star。<br>A-limon/pacman， 431个star。<br>daleanthony/uno， 416个star。<br>orderedlist/modernist， 367个star。<br>AlxMedia/hueman， 336个star。<br>kathyqian/crisp-ghost-theme， 303个star。<br>xiangming/landscape-plus， 287个star。</p>\n</blockquote>\n<p>我用的就是hexo-theme-yilia，感觉这个主题页面简单，正合心意<br><strong>1.clone主题代码</strong><br>在博客目录下执行命令clone主题代码：</p>\n<pre><code>$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n</code></pre><p>完事在主题目录themes里增加yilia的主题代码</p>\n<p><strong>2.配置主题</strong><br>在博客根目录的_config.yml文件中，配置新主题<br><img src=\"/images/2017-06-11-hexo-theme.png\" alt=\"hexo theme\"></p>\n<p><strong>3.修改主题配置信息</strong><br>修改themes/yilia/_config.yml文件，修改的时候，每个冒号后面都需要留一个英文空格，不然报错，下面时我的配置文件，仅供参考</p>\n<pre><code># Header\nmenu:\n  主页: /\n  归档: /archives\n  随笔: /categories/随笔\n  相册: /photos\n\n# SubNav\nsubnav:\n  github: &quot;https://github.com/blueskyawen&quot;\n  weibo: &quot;#&quot;\n  rss: &quot;#&quot;\n  zhihu: &quot;#&quot;\n  qq: &quot;#&quot;\n  #weixin: &quot;#&quot;\n  #jianshu: &quot;#&quot;\n  #mail: &quot;mailto:litten225@qq.com&quot;\n  #facebook: &quot;#&quot;\n  #google: &quot;#&quot;\n  #twitter: &quot;#&quot;\n  #linkedin: &quot;#&quot;\n\nrss: /atom.xml\n\n# 是否需要修改 root 路径\n# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，\n# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\nroot: /\n\n# Content\n# 文章太长，截断按钮文字\nexcerpt_link: more\n# 文章卡片右下角常驻链接，不需要请设置为false\nshow_all_link: &apos;展开全文&apos;\n# 数学公式\nmathjax: false\n# 是否在新窗口打开链接\nopen_in_new: false\nfancybox: true\ntop: true\n\n# 是否开启动画效果\nanimate: true\n\n# 打赏\n# 请在需要打赏的文章的md文件头部，设置属性reward: true\n\n# 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏\nreward_type: 2\n# 打赏wording\nreward_wording: &apos;请随意打赏&apos;\n# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg\nalipay: /images/IMG_zhifubao.jpg\n# 微信二维码图片地址\nweixin: /images/IMG_weixin.jpg\n\n# Miscellaneous分析统计工具\nbaidu_analytics: &apos;&apos;\n#google_analytics: &apos;&apos;\n\nfavicon: /images/favicon.jpg\n\n#你的头像url\navatar: /images/touxiang.jpg\n\n#是否开启分享\nshare_jia: true\nshare_addthis: false\n\n#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉\n#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/\n#1、多说\nduoshuo: false\n#2、网易云跟帖\nwangyiyun: true\n#3、畅言\nchangyan_appid: false\nchangyan_conf: false\n\n#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的\ndisqus: false\n\n# 样式定制 - 一般不需要修改，除非有很强的定制欲望…\nstyle:\n  # 头像上面的背景颜色\n  header: &apos;#003f80&apos;\n  # 右滑板块背景\n  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;\n\n# slider的设置\nslider:\n  # 是否默认展开tags板块\n  showTags: false\n\n# 智能菜单\n# 如不需要，将该对应项置为false\n# 比如\n#smart_menu:\n#  friends: false\nsmart_menu:\n  innerArchive: &apos;所有文章&apos;\n  friends: &apos;链接&apos;\n  aboutme: &apos;关于我&apos;\n\nfriends:\n  天猫商城: https://www.tmall.com\n  阿里云: https://www.aliyun.com\n  携程: http://www.ctrip.com\n  ZTE: http://www.zte.com.cn\n\naboutme: 前端菜鸟&lt;br&gt;正在学习的路上前行&lt;br&gt;现就职于某通讯企业&lt;br&gt;长路漫漫，渐行渐远\n</code></pre><p><strong>4.查看主题效果</strong><br>仍然使用命令三件套来重新生成和部署站点，效果如下：<br><img src=\"/images/2017-06-11-myblok.png\" alt=\"my blog\"></p>\n","site":{"data":{}},"excerpt":"<p>之前搭建的博客有自己默认的主题，个人不喜欢，觉得略丑，体验也不好，于是懂了更换主题的念头。<br>Hexo主题非常多，官网上<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">主题库</a>里有很多优秀的主题，大家可以根据自己的喜好来选择合适的主题<br>","more":"<br>由于Hexo是一款非常优秀的开源博客系统，所以github上也有大量的主题可供选择<br>下面是github上star数量最多的前10个主题：</p>\n<blockquote>\n<p>iissnan/hexo-theme-next， 3510个star。<br>litten/hexo-theme-yilia， 1703个star。<br>TryGhost/Casper， 679个star。<br>wuchong/jacman， 503个star。<br>A-limon/pacman， 431个star。<br>daleanthony/uno， 416个star。<br>orderedlist/modernist， 367个star。<br>AlxMedia/hueman， 336个star。<br>kathyqian/crisp-ghost-theme， 303个star。<br>xiangming/landscape-plus， 287个star。</p>\n</blockquote>\n<p>我用的就是hexo-theme-yilia，感觉这个主题页面简单，正合心意<br><strong>1.clone主题代码</strong><br>在博客目录下执行命令clone主题代码：</p>\n<pre><code>$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n</code></pre><p>完事在主题目录themes里增加yilia的主题代码</p>\n<p><strong>2.配置主题</strong><br>在博客根目录的_config.yml文件中，配置新主题<br><img src=\"/images/2017-06-11-hexo-theme.png\" alt=\"hexo theme\"></p>\n<p><strong>3.修改主题配置信息</strong><br>修改themes/yilia/_config.yml文件，修改的时候，每个冒号后面都需要留一个英文空格，不然报错，下面时我的配置文件，仅供参考</p>\n<pre><code># Header\nmenu:\n  主页: /\n  归档: /archives\n  随笔: /categories/随笔\n  相册: /photos\n\n# SubNav\nsubnav:\n  github: &quot;https://github.com/blueskyawen&quot;\n  weibo: &quot;#&quot;\n  rss: &quot;#&quot;\n  zhihu: &quot;#&quot;\n  qq: &quot;#&quot;\n  #weixin: &quot;#&quot;\n  #jianshu: &quot;#&quot;\n  #mail: &quot;mailto:litten225@qq.com&quot;\n  #facebook: &quot;#&quot;\n  #google: &quot;#&quot;\n  #twitter: &quot;#&quot;\n  #linkedin: &quot;#&quot;\n\nrss: /atom.xml\n\n# 是否需要修改 root 路径\n# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，\n# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\nroot: /\n\n# Content\n# 文章太长，截断按钮文字\nexcerpt_link: more\n# 文章卡片右下角常驻链接，不需要请设置为false\nshow_all_link: &apos;展开全文&apos;\n# 数学公式\nmathjax: false\n# 是否在新窗口打开链接\nopen_in_new: false\nfancybox: true\ntop: true\n\n# 是否开启动画效果\nanimate: true\n\n# 打赏\n# 请在需要打赏的文章的md文件头部，设置属性reward: true\n\n# 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏\nreward_type: 2\n# 打赏wording\nreward_wording: &apos;请随意打赏&apos;\n# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg\nalipay: /images/IMG_zhifubao.jpg\n# 微信二维码图片地址\nweixin: /images/IMG_weixin.jpg\n\n# Miscellaneous分析统计工具\nbaidu_analytics: &apos;&apos;\n#google_analytics: &apos;&apos;\n\nfavicon: /images/favicon.jpg\n\n#你的头像url\navatar: /images/touxiang.jpg\n\n#是否开启分享\nshare_jia: true\nshare_addthis: false\n\n#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉\n#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/\n#1、多说\nduoshuo: false\n#2、网易云跟帖\nwangyiyun: true\n#3、畅言\nchangyan_appid: false\nchangyan_conf: false\n\n#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的\ndisqus: false\n\n# 样式定制 - 一般不需要修改，除非有很强的定制欲望…\nstyle:\n  # 头像上面的背景颜色\n  header: &apos;#003f80&apos;\n  # 右滑板块背景\n  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;\n\n# slider的设置\nslider:\n  # 是否默认展开tags板块\n  showTags: false\n\n# 智能菜单\n# 如不需要，将该对应项置为false\n# 比如\n#smart_menu:\n#  friends: false\nsmart_menu:\n  innerArchive: &apos;所有文章&apos;\n  friends: &apos;链接&apos;\n  aboutme: &apos;关于我&apos;\n\nfriends:\n  天猫商城: https://www.tmall.com\n  阿里云: https://www.aliyun.com\n  携程: http://www.ctrip.com\n  ZTE: http://www.zte.com.cn\n\naboutme: 前端菜鸟&lt;br&gt;正在学习的路上前行&lt;br&gt;现就职于某通讯企业&lt;br&gt;长路漫漫，渐行渐远\n</code></pre><p><strong>4.查看主题效果</strong><br>仍然使用命令三件套来重新生成和部署站点，效果如下：<br><img src=\"/images/2017-06-11-myblok.png\" alt=\"my blog\"></p>"},{"title":"Hexo博客添加评论模块","date":"2017-06-10T16:43:11.000Z","comments":1,"_content":"写好的东西总希望和人一起讨论分享，下面来给博客增加评论系统\nYilia组图集成了多说，网易云跟帖，畅言，Disqus等众多评论系统，只需要简单的设置即可实现功能\n<!--more-->\n在这以网易云跟帖为例子说明\n### 注册账号\n点击[这里](https://gentie.163.com/index.html)到网易云跟帖网站，按照流程注册账号，登录之后进入后台管理，填写站点信息，网址时你申请的域名\n![wangyiyungentie](/images/2017-06-11-wangyiyungentie.png)\n获取代码到主题的/themes/yilia/layout/_partial/post/wangyiyun.ejs文件下，替换其内容\n\n### 配置主题文件\n在/themes/yilia/_config.yml中找到评论配置,将wangyiyun改成true\n\n    #评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉\n    #具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/\n\n    #1、多说\n    duoshuo: false\n\n    #2、网易云跟帖\n    wangyiyun: true\n\n    #3、畅言\n    changyan_appid: false\n    changyan_conf: false\n\n    #4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的\n    disqus: false\n\n重新执行Hexo命令三件套，重新部署站点，查看效果","source":"_posts/2017-06-11-hexo-add-pinglun.md","raw":"---\ntitle: Hexo博客添加评论模块\ndate: 2017-06-11 00:43:11\ntags: hexo\ncategories: 博客\ncomments: true\n---\n写好的东西总希望和人一起讨论分享，下面来给博客增加评论系统\nYilia组图集成了多说，网易云跟帖，畅言，Disqus等众多评论系统，只需要简单的设置即可实现功能\n<!--more-->\n在这以网易云跟帖为例子说明\n### 注册账号\n点击[这里](https://gentie.163.com/index.html)到网易云跟帖网站，按照流程注册账号，登录之后进入后台管理，填写站点信息，网址时你申请的域名\n![wangyiyungentie](/images/2017-06-11-wangyiyungentie.png)\n获取代码到主题的/themes/yilia/layout/_partial/post/wangyiyun.ejs文件下，替换其内容\n\n### 配置主题文件\n在/themes/yilia/_config.yml中找到评论配置,将wangyiyun改成true\n\n    #评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉\n    #具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/\n\n    #1、多说\n    duoshuo: false\n\n    #2、网易云跟帖\n    wangyiyun: true\n\n    #3、畅言\n    changyan_appid: false\n    changyan_conf: false\n\n    #4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的\n    disqus: false\n\n重新执行Hexo命令三件套，重新部署站点，查看效果","slug":"hexo-add-pinglun","published":1,"updated":"2017-06-11T11:57:06.798Z","layout":"post","photos":[],"link":"","_id":"cjqwe424b0008or0bmxk71q10","content":"<p>写好的东西总希望和人一起讨论分享，下面来给博客增加评论系统<br>Yilia组图集成了多说，网易云跟帖，畅言，Disqus等众多评论系统，只需要简单的设置即可实现功能<br><a id=\"more\"></a><br>在这以网易云跟帖为例子说明</p>\n<h3 id=\"注册账号\"><a href=\"#注册账号\" class=\"headerlink\" title=\"注册账号\"></a>注册账号</h3><p>点击<a href=\"https://gentie.163.com/index.html\" target=\"_blank\" rel=\"external\">这里</a>到网易云跟帖网站，按照流程注册账号，登录之后进入后台管理，填写站点信息，网址时你申请的域名<br><img src=\"/images/2017-06-11-wangyiyungentie.png\" alt=\"wangyiyungentie\"><br>获取代码到主题的/themes/yilia/layout/_partial/post/wangyiyun.ejs文件下，替换其内容</p>\n<h3 id=\"配置主题文件\"><a href=\"#配置主题文件\" class=\"headerlink\" title=\"配置主题文件\"></a>配置主题文件</h3><p>在/themes/yilia/_config.yml中找到评论配置,将wangyiyun改成true</p>\n<pre><code>#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉\n#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/\n\n#1、多说\nduoshuo: false\n\n#2、网易云跟帖\nwangyiyun: true\n\n#3、畅言\nchangyan_appid: false\nchangyan_conf: false\n\n#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的\ndisqus: false\n</code></pre><p>重新执行Hexo命令三件套，重新部署站点，查看效果</p>\n","site":{"data":{}},"excerpt":"<p>写好的东西总希望和人一起讨论分享，下面来给博客增加评论系统<br>Yilia组图集成了多说，网易云跟帖，畅言，Disqus等众多评论系统，只需要简单的设置即可实现功能<br>","more":"<br>在这以网易云跟帖为例子说明</p>\n<h3 id=\"注册账号\"><a href=\"#注册账号\" class=\"headerlink\" title=\"注册账号\"></a>注册账号</h3><p>点击<a href=\"https://gentie.163.com/index.html\" target=\"_blank\" rel=\"external\">这里</a>到网易云跟帖网站，按照流程注册账号，登录之后进入后台管理，填写站点信息，网址时你申请的域名<br><img src=\"/images/2017-06-11-wangyiyungentie.png\" alt=\"wangyiyungentie\"><br>获取代码到主题的/themes/yilia/layout/_partial/post/wangyiyun.ejs文件下，替换其内容</p>\n<h3 id=\"配置主题文件\"><a href=\"#配置主题文件\" class=\"headerlink\" title=\"配置主题文件\"></a>配置主题文件</h3><p>在/themes/yilia/_config.yml中找到评论配置,将wangyiyun改成true</p>\n<pre><code>#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉\n#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/\n\n#1、多说\nduoshuo: false\n\n#2、网易云跟帖\nwangyiyun: true\n\n#3、畅言\nchangyan_appid: false\nchangyan_conf: false\n\n#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的\ndisqus: false\n</code></pre><p>重新执行Hexo命令三件套，重新部署站点，查看效果</p>"},{"title":"Angular-组件样式表","date":"2017-07-19T17:43:48.000Z","comments":1,"_content":"\n在angular应用中可以使用所有的CSS样式来修饰我们的模板元素，渲染我们的页面，还可以把样式的有效范围限制在组件模板中\n<!--more-->\n\n## 样式在组件的使用方式\n##### （1）在模板中直接使用\n    //外联样式文件\n    <link src=\"common.css\">\n\n    //模板内样式\n    <style>\n    h1 {\n        font-size: 24px;\n        color: red;\n    }\n    </style>\n\n    //元素内联样式\n    <div style=\"display:inline;\"></div>\n\n##### （2）在组件元数据配置\n    //通过URL路径加载CSS文件\n    @Component({\n      selector: 'app-root',\n      styleUrls: ['./app.component.css']\n    })\n\n    //通过CSS字符串数组\n    @Component({\n      selector: 'app-root',\n      styles: ['h1 {color: green;}']\n    })\n\n    //通过模块打包器载入CSS字符串\n    @Component({\n      selector: 'app-root',\n      styles: [require('./app.component.css')]\n    })\n第三种与第二种实例，都是设置的styles数据，只不过后者是直接加载的css字符串，不用手动在数据里写，推荐第一种写法\n> 这几种方式可以同时声明在元数据中，但后声明的同类样式会覆盖前面，所以，为清晰起见，建议只使用一种\n\n## 样式限定范围在组件\nangular默认采用Emulated仿真式模式来设置组件元数据的视图封装模式\n仿真式模式，是通过预处理CSS 代码来模拟Shadow DOM的行为，把CSS 样式的有效范围局限在组件视图中。就是“只进不出”，全局样式能够在组件模板中使用生效，但本组件的CSS样式不能正常在组件外部使用\n究其内部，其实只是angular对组件的CSS/模板进行预处理后，在组件模板元素上添加特定的属性，并且同时在CSS也添加相应的属性，来达到限制范围在目的，比如：\n\n    //appComponen.ts\n    @Component({\n        selector: 'app-root',\n        templateUrl: './app.component.html',\n        styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n        title = 'app';\n    }\n\n    //appComponen.html\n    <div style=\"text-align:center\">\n      <h1 class=\"HAHA\">\n        Welcome to {{title}}!\n      </h1>\n      <img width=\"300\" src=\"data:image/svg+xml“>\n    </div>\n    <h2>Here are some links to help you start: </h2>\n\n    //appComponen.css\n    .HAHA {\n        color: red;\n    }\n运行应用偶打开浏览器查看元素\n![zujianyangshi](/images/zujianyangshi.png)\n\n## 特殊选择器\n**（1）:host {}**\n表示组件的宿主元素，以宿主元素的属性来控制本组件模板内的样式表现，但是不能控制宿主的样式，比如组件Logincomponent的元数据如下：\n\n    //logincomponent.ts\n    import { Component, OnInit } from '@angular/core';\n    @Component({\n      selector: 'app-login',\n      templateUrl: './login.component.html',\n      styles: [':host(.AAA) p { color: orange;font-size: 36px;}']\n    })\n    export class LoginComponent implements OnInit {\n      constructor() { }\n    }\n\n    //logincomponent.html\n    <p>\n      login works!\n    </p>\n\n    //父组件调用\n    <app-login></app-login>\n组件Login的宿主元素就是它的选择器组成的`<app-login></app-login>`，此时组件样式是没有效果的\n![zujianyangshi2](/images/zujianyangshi2.png)\n要想生效必须在宿主元素中加上条件\n\n    <app-login class=\"AAA\"></app-login>\n效果：\n![zujianyangshi3](/images/zujianyangshi3.png)\n\n**（2）:host-context {}**\n表示组件的祖先元素，不限于宿主元素，以祖先元素的属性来控制本组件内的样式表现，不能控制祖先宿主的样式\n还是上面那个例子，在父组件使用时改成\n\n    @Component({\n      selector: 'app-login',\n      templateUrl: './login.component.html',\n      styles: [':host-context(.AAA) p { color: orange;font-size: 36px;}']\n    })\n    export class LoginComponent implements OnInit {\n      constructor() { }\n    }\n\n    //父组件调用\n    <div>\n        <app-login></app-login>\n    </div>\n其中div和app-login都是组件的祖先宿主宿主元素，适用此选择器，此时组件样式时不生效的，要想生效需修改如下\n\n    <div class=\"AAA\">\n        <app-login></app-login>\n    </div>\n    或\n    <div>\n        <app-login class=\"AAA\"></app-login>\n    </div>\n\n**（3）/deep/ >>>**\n组件样式默认只在本组件内生效，CSS定义时加上这个生效范围会扩大到其子组件的模板视图\n这里说的子组件指的是在组件模板内直接使用其他组件的选择器的，比如上面例子的组件login就是其调用者的子组件\n这么写\n\n    :host >>> h1 {color:red;}\n    或\n    :host /deep/ h1 {color:red;}\n表示本组件的h1适用，甚至子组件的h1也适用于这个选择器\n","source":"_posts/2017-07-20-angular-component-styles.md","raw":"---\ntitle: Angular-组件样式表\ndate: 2017-07-20 01:43:48\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n在angular应用中可以使用所有的CSS样式来修饰我们的模板元素，渲染我们的页面，还可以把样式的有效范围限制在组件模板中\n<!--more-->\n\n## 样式在组件的使用方式\n##### （1）在模板中直接使用\n    //外联样式文件\n    <link src=\"common.css\">\n\n    //模板内样式\n    <style>\n    h1 {\n        font-size: 24px;\n        color: red;\n    }\n    </style>\n\n    //元素内联样式\n    <div style=\"display:inline;\"></div>\n\n##### （2）在组件元数据配置\n    //通过URL路径加载CSS文件\n    @Component({\n      selector: 'app-root',\n      styleUrls: ['./app.component.css']\n    })\n\n    //通过CSS字符串数组\n    @Component({\n      selector: 'app-root',\n      styles: ['h1 {color: green;}']\n    })\n\n    //通过模块打包器载入CSS字符串\n    @Component({\n      selector: 'app-root',\n      styles: [require('./app.component.css')]\n    })\n第三种与第二种实例，都是设置的styles数据，只不过后者是直接加载的css字符串，不用手动在数据里写，推荐第一种写法\n> 这几种方式可以同时声明在元数据中，但后声明的同类样式会覆盖前面，所以，为清晰起见，建议只使用一种\n\n## 样式限定范围在组件\nangular默认采用Emulated仿真式模式来设置组件元数据的视图封装模式\n仿真式模式，是通过预处理CSS 代码来模拟Shadow DOM的行为，把CSS 样式的有效范围局限在组件视图中。就是“只进不出”，全局样式能够在组件模板中使用生效，但本组件的CSS样式不能正常在组件外部使用\n究其内部，其实只是angular对组件的CSS/模板进行预处理后，在组件模板元素上添加特定的属性，并且同时在CSS也添加相应的属性，来达到限制范围在目的，比如：\n\n    //appComponen.ts\n    @Component({\n        selector: 'app-root',\n        templateUrl: './app.component.html',\n        styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n        title = 'app';\n    }\n\n    //appComponen.html\n    <div style=\"text-align:center\">\n      <h1 class=\"HAHA\">\n        Welcome to {{title}}!\n      </h1>\n      <img width=\"300\" src=\"data:image/svg+xml“>\n    </div>\n    <h2>Here are some links to help you start: </h2>\n\n    //appComponen.css\n    .HAHA {\n        color: red;\n    }\n运行应用偶打开浏览器查看元素\n![zujianyangshi](/images/zujianyangshi.png)\n\n## 特殊选择器\n**（1）:host {}**\n表示组件的宿主元素，以宿主元素的属性来控制本组件模板内的样式表现，但是不能控制宿主的样式，比如组件Logincomponent的元数据如下：\n\n    //logincomponent.ts\n    import { Component, OnInit } from '@angular/core';\n    @Component({\n      selector: 'app-login',\n      templateUrl: './login.component.html',\n      styles: [':host(.AAA) p { color: orange;font-size: 36px;}']\n    })\n    export class LoginComponent implements OnInit {\n      constructor() { }\n    }\n\n    //logincomponent.html\n    <p>\n      login works!\n    </p>\n\n    //父组件调用\n    <app-login></app-login>\n组件Login的宿主元素就是它的选择器组成的`<app-login></app-login>`，此时组件样式是没有效果的\n![zujianyangshi2](/images/zujianyangshi2.png)\n要想生效必须在宿主元素中加上条件\n\n    <app-login class=\"AAA\"></app-login>\n效果：\n![zujianyangshi3](/images/zujianyangshi3.png)\n\n**（2）:host-context {}**\n表示组件的祖先元素，不限于宿主元素，以祖先元素的属性来控制本组件内的样式表现，不能控制祖先宿主的样式\n还是上面那个例子，在父组件使用时改成\n\n    @Component({\n      selector: 'app-login',\n      templateUrl: './login.component.html',\n      styles: [':host-context(.AAA) p { color: orange;font-size: 36px;}']\n    })\n    export class LoginComponent implements OnInit {\n      constructor() { }\n    }\n\n    //父组件调用\n    <div>\n        <app-login></app-login>\n    </div>\n其中div和app-login都是组件的祖先宿主宿主元素，适用此选择器，此时组件样式时不生效的，要想生效需修改如下\n\n    <div class=\"AAA\">\n        <app-login></app-login>\n    </div>\n    或\n    <div>\n        <app-login class=\"AAA\"></app-login>\n    </div>\n\n**（3）/deep/ >>>**\n组件样式默认只在本组件内生效，CSS定义时加上这个生效范围会扩大到其子组件的模板视图\n这里说的子组件指的是在组件模板内直接使用其他组件的选择器的，比如上面例子的组件login就是其调用者的子组件\n这么写\n\n    :host >>> h1 {color:red;}\n    或\n    :host /deep/ h1 {color:red;}\n表示本组件的h1适用，甚至子组件的h1也适用于这个选择器\n","slug":"angular-component-styles","published":1,"updated":"2017-10-16T15:49:17.031Z","layout":"post","photos":[],"link":"","_id":"cjqwe424p0009or0bw8cbaowy","content":"<p>在angular应用中可以使用所有的CSS样式来修饰我们的模板元素，渲染我们的页面，还可以把样式的有效范围限制在组件模板中<br><a id=\"more\"></a></p>\n<h2 id=\"样式在组件的使用方式\"><a href=\"#样式在组件的使用方式\" class=\"headerlink\" title=\"样式在组件的使用方式\"></a>样式在组件的使用方式</h2><h5 id=\"（1）在模板中直接使用\"><a href=\"#（1）在模板中直接使用\" class=\"headerlink\" title=\"（1）在模板中直接使用\"></a>（1）在模板中直接使用</h5><pre><code>//外联样式文件\n&lt;link src=&quot;common.css&quot;&gt;\n\n//模板内样式\n&lt;style&gt;\nh1 {\n    font-size: 24px;\n    color: red;\n}\n&lt;/style&gt;\n\n//元素内联样式\n&lt;div style=&quot;display:inline;&quot;&gt;&lt;/div&gt;\n</code></pre><h5 id=\"（2）在组件元数据配置\"><a href=\"#（2）在组件元数据配置\" class=\"headerlink\" title=\"（2）在组件元数据配置\"></a>（2）在组件元数据配置</h5><pre><code>//通过URL路径加载CSS文件\n@Component({\n  selector: &apos;app-root&apos;,\n  styleUrls: [&apos;./app.component.css&apos;]\n})\n\n//通过CSS字符串数组\n@Component({\n  selector: &apos;app-root&apos;,\n  styles: [&apos;h1 {color: green;}&apos;]\n})\n\n//通过模块打包器载入CSS字符串\n@Component({\n  selector: &apos;app-root&apos;,\n  styles: [require(&apos;./app.component.css&apos;)]\n})\n</code></pre><p>第三种与第二种实例，都是设置的styles数据，只不过后者是直接加载的css字符串，不用手动在数据里写，推荐第一种写法</p>\n<blockquote>\n<p>这几种方式可以同时声明在元数据中，但后声明的同类样式会覆盖前面，所以，为清晰起见，建议只使用一种</p>\n</blockquote>\n<h2 id=\"样式限定范围在组件\"><a href=\"#样式限定范围在组件\" class=\"headerlink\" title=\"样式限定范围在组件\"></a>样式限定范围在组件</h2><p>angular默认采用Emulated仿真式模式来设置组件元数据的视图封装模式<br>仿真式模式，是通过预处理CSS 代码来模拟Shadow DOM的行为，把CSS 样式的有效范围局限在组件视图中。就是“只进不出”，全局样式能够在组件模板中使用生效，但本组件的CSS样式不能正常在组件外部使用<br>究其内部，其实只是angular对组件的CSS/模板进行预处理后，在组件模板元素上添加特定的属性，并且同时在CSS也添加相应的属性，来达到限制范围在目的，比如：</p>\n<pre><code>//appComponen.ts\n@Component({\n    selector: &apos;app-root&apos;,\n    templateUrl: &apos;./app.component.html&apos;,\n    styleUrls: [&apos;./app.component.css&apos;]\n})\nexport class AppComponent {\n    title = &apos;app&apos;;\n}\n\n//appComponen.html\n&lt;div style=&quot;text-align:center&quot;&gt;\n  &lt;h1 class=&quot;HAHA&quot;&gt;\n    Welcome to {{title}}!\n  &lt;/h1&gt;\n  &lt;img width=&quot;300&quot; src=&quot;data:image/svg+xml“&gt;\n&lt;/div&gt;\n&lt;h2&gt;Here are some links to help you start: &lt;/h2&gt;\n\n//appComponen.css\n.HAHA {\n    color: red;\n}\n</code></pre><p>运行应用偶打开浏览器查看元素<br><img src=\"/images/zujianyangshi.png\" alt=\"zujianyangshi\"></p>\n<h2 id=\"特殊选择器\"><a href=\"#特殊选择器\" class=\"headerlink\" title=\"特殊选择器\"></a>特殊选择器</h2><p><strong>（1）:host {}</strong><br>表示组件的宿主元素，以宿主元素的属性来控制本组件模板内的样式表现，但是不能控制宿主的样式，比如组件Logincomponent的元数据如下：</p>\n<pre><code>//logincomponent.ts\nimport { Component, OnInit } from &apos;@angular/core&apos;;\n@Component({\n  selector: &apos;app-login&apos;,\n  templateUrl: &apos;./login.component.html&apos;,\n  styles: [&apos;:host(.AAA) p { color: orange;font-size: 36px;}&apos;]\n})\nexport class LoginComponent implements OnInit {\n  constructor() { }\n}\n\n//logincomponent.html\n&lt;p&gt;\n  login works!\n&lt;/p&gt;\n\n//父组件调用\n&lt;app-login&gt;&lt;/app-login&gt;\n</code></pre><p>组件Login的宿主元素就是它的选择器组成的<code>&lt;app-login&gt;&lt;/app-login&gt;</code>，此时组件样式是没有效果的<br><img src=\"/images/zujianyangshi2.png\" alt=\"zujianyangshi2\"><br>要想生效必须在宿主元素中加上条件</p>\n<pre><code>&lt;app-login class=&quot;AAA&quot;&gt;&lt;/app-login&gt;\n</code></pre><p>效果：<br><img src=\"/images/zujianyangshi3.png\" alt=\"zujianyangshi3\"></p>\n<p><strong>（2）:host-context {}</strong><br>表示组件的祖先元素，不限于宿主元素，以祖先元素的属性来控制本组件内的样式表现，不能控制祖先宿主的样式<br>还是上面那个例子，在父组件使用时改成</p>\n<pre><code>@Component({\n  selector: &apos;app-login&apos;,\n  templateUrl: &apos;./login.component.html&apos;,\n  styles: [&apos;:host-context(.AAA) p { color: orange;font-size: 36px;}&apos;]\n})\nexport class LoginComponent implements OnInit {\n  constructor() { }\n}\n\n//父组件调用\n&lt;div&gt;\n    &lt;app-login&gt;&lt;/app-login&gt;\n&lt;/div&gt;\n</code></pre><p>其中div和app-login都是组件的祖先宿主宿主元素，适用此选择器，此时组件样式时不生效的，要想生效需修改如下</p>\n<pre><code>&lt;div class=&quot;AAA&quot;&gt;\n    &lt;app-login&gt;&lt;/app-login&gt;\n&lt;/div&gt;\n或\n&lt;div&gt;\n    &lt;app-login class=&quot;AAA&quot;&gt;&lt;/app-login&gt;\n&lt;/div&gt;\n</code></pre><p><strong>（3）/deep/ &gt;&gt;&gt;</strong><br>组件样式默认只在本组件内生效，CSS定义时加上这个生效范围会扩大到其子组件的模板视图<br>这里说的子组件指的是在组件模板内直接使用其他组件的选择器的，比如上面例子的组件login就是其调用者的子组件<br>这么写</p>\n<pre><code>:host &gt;&gt;&gt; h1 {color:red;}\n或\n:host /deep/ h1 {color:red;}\n</code></pre><p>表示本组件的h1适用，甚至子组件的h1也适用于这个选择器</p>\n","site":{"data":{}},"excerpt":"<p>在angular应用中可以使用所有的CSS样式来修饰我们的模板元素，渲染我们的页面，还可以把样式的有效范围限制在组件模板中<br>","more":"</p>\n<h2 id=\"样式在组件的使用方式\"><a href=\"#样式在组件的使用方式\" class=\"headerlink\" title=\"样式在组件的使用方式\"></a>样式在组件的使用方式</h2><h5 id=\"（1）在模板中直接使用\"><a href=\"#（1）在模板中直接使用\" class=\"headerlink\" title=\"（1）在模板中直接使用\"></a>（1）在模板中直接使用</h5><pre><code>//外联样式文件\n&lt;link src=&quot;common.css&quot;&gt;\n\n//模板内样式\n&lt;style&gt;\nh1 {\n    font-size: 24px;\n    color: red;\n}\n&lt;/style&gt;\n\n//元素内联样式\n&lt;div style=&quot;display:inline;&quot;&gt;&lt;/div&gt;\n</code></pre><h5 id=\"（2）在组件元数据配置\"><a href=\"#（2）在组件元数据配置\" class=\"headerlink\" title=\"（2）在组件元数据配置\"></a>（2）在组件元数据配置</h5><pre><code>//通过URL路径加载CSS文件\n@Component({\n  selector: &apos;app-root&apos;,\n  styleUrls: [&apos;./app.component.css&apos;]\n})\n\n//通过CSS字符串数组\n@Component({\n  selector: &apos;app-root&apos;,\n  styles: [&apos;h1 {color: green;}&apos;]\n})\n\n//通过模块打包器载入CSS字符串\n@Component({\n  selector: &apos;app-root&apos;,\n  styles: [require(&apos;./app.component.css&apos;)]\n})\n</code></pre><p>第三种与第二种实例，都是设置的styles数据，只不过后者是直接加载的css字符串，不用手动在数据里写，推荐第一种写法</p>\n<blockquote>\n<p>这几种方式可以同时声明在元数据中，但后声明的同类样式会覆盖前面，所以，为清晰起见，建议只使用一种</p>\n</blockquote>\n<h2 id=\"样式限定范围在组件\"><a href=\"#样式限定范围在组件\" class=\"headerlink\" title=\"样式限定范围在组件\"></a>样式限定范围在组件</h2><p>angular默认采用Emulated仿真式模式来设置组件元数据的视图封装模式<br>仿真式模式，是通过预处理CSS 代码来模拟Shadow DOM的行为，把CSS 样式的有效范围局限在组件视图中。就是“只进不出”，全局样式能够在组件模板中使用生效，但本组件的CSS样式不能正常在组件外部使用<br>究其内部，其实只是angular对组件的CSS/模板进行预处理后，在组件模板元素上添加特定的属性，并且同时在CSS也添加相应的属性，来达到限制范围在目的，比如：</p>\n<pre><code>//appComponen.ts\n@Component({\n    selector: &apos;app-root&apos;,\n    templateUrl: &apos;./app.component.html&apos;,\n    styleUrls: [&apos;./app.component.css&apos;]\n})\nexport class AppComponent {\n    title = &apos;app&apos;;\n}\n\n//appComponen.html\n&lt;div style=&quot;text-align:center&quot;&gt;\n  &lt;h1 class=&quot;HAHA&quot;&gt;\n    Welcome to {{title}}!\n  &lt;/h1&gt;\n  &lt;img width=&quot;300&quot; src=&quot;data:image/svg+xml“&gt;\n&lt;/div&gt;\n&lt;h2&gt;Here are some links to help you start: &lt;/h2&gt;\n\n//appComponen.css\n.HAHA {\n    color: red;\n}\n</code></pre><p>运行应用偶打开浏览器查看元素<br><img src=\"/images/zujianyangshi.png\" alt=\"zujianyangshi\"></p>\n<h2 id=\"特殊选择器\"><a href=\"#特殊选择器\" class=\"headerlink\" title=\"特殊选择器\"></a>特殊选择器</h2><p><strong>（1）:host {}</strong><br>表示组件的宿主元素，以宿主元素的属性来控制本组件模板内的样式表现，但是不能控制宿主的样式，比如组件Logincomponent的元数据如下：</p>\n<pre><code>//logincomponent.ts\nimport { Component, OnInit } from &apos;@angular/core&apos;;\n@Component({\n  selector: &apos;app-login&apos;,\n  templateUrl: &apos;./login.component.html&apos;,\n  styles: [&apos;:host(.AAA) p { color: orange;font-size: 36px;}&apos;]\n})\nexport class LoginComponent implements OnInit {\n  constructor() { }\n}\n\n//logincomponent.html\n&lt;p&gt;\n  login works!\n&lt;/p&gt;\n\n//父组件调用\n&lt;app-login&gt;&lt;/app-login&gt;\n</code></pre><p>组件Login的宿主元素就是它的选择器组成的<code>&lt;app-login&gt;&lt;/app-login&gt;</code>，此时组件样式是没有效果的<br><img src=\"/images/zujianyangshi2.png\" alt=\"zujianyangshi2\"><br>要想生效必须在宿主元素中加上条件</p>\n<pre><code>&lt;app-login class=&quot;AAA&quot;&gt;&lt;/app-login&gt;\n</code></pre><p>效果：<br><img src=\"/images/zujianyangshi3.png\" alt=\"zujianyangshi3\"></p>\n<p><strong>（2）:host-context {}</strong><br>表示组件的祖先元素，不限于宿主元素，以祖先元素的属性来控制本组件内的样式表现，不能控制祖先宿主的样式<br>还是上面那个例子，在父组件使用时改成</p>\n<pre><code>@Component({\n  selector: &apos;app-login&apos;,\n  templateUrl: &apos;./login.component.html&apos;,\n  styles: [&apos;:host-context(.AAA) p { color: orange;font-size: 36px;}&apos;]\n})\nexport class LoginComponent implements OnInit {\n  constructor() { }\n}\n\n//父组件调用\n&lt;div&gt;\n    &lt;app-login&gt;&lt;/app-login&gt;\n&lt;/div&gt;\n</code></pre><p>其中div和app-login都是组件的祖先宿主宿主元素，适用此选择器，此时组件样式时不生效的，要想生效需修改如下</p>\n<pre><code>&lt;div class=&quot;AAA&quot;&gt;\n    &lt;app-login&gt;&lt;/app-login&gt;\n&lt;/div&gt;\n或\n&lt;div&gt;\n    &lt;app-login class=&quot;AAA&quot;&gt;&lt;/app-login&gt;\n&lt;/div&gt;\n</code></pre><p><strong>（3）/deep/ &gt;&gt;&gt;</strong><br>组件样式默认只在本组件内生效，CSS定义时加上这个生效范围会扩大到其子组件的模板视图<br>这里说的子组件指的是在组件模板内直接使用其他组件的选择器的，比如上面例子的组件login就是其调用者的子组件<br>这么写</p>\n<pre><code>:host &gt;&gt;&gt; h1 {color:red;}\n或\n:host /deep/ h1 {color:red;}\n</code></pre><p>表示本组件的h1适用，甚至子组件的h1也适用于这个选择器</p>"},{"title":"Angular-管道","date":"2017-07-27T17:24:09.000Z","comments":1,"_content":"\n## 管道是什么\n简单来说，是一种值转换器，用于在模板中对变量或数据进行转换后显示，好比数据输入进入一个管道，得到期望的数据输出，示意图：\n<!--more-->\n![angular-pipe-design](/images/angular-pipe-design.jpg)\n其实，在本质上，就是把一些通用的转换函数封装成管道类，供各个组件模块在应用中实例化使用，比如：字符串转化成大写/数字四舍五入等\n\n## 使用方法\n**输入值 | 管道：参数**\n输入值流向管道进行处理，并返回处理后的数据\n| 是管道操作符，熟悉C++的同学可理解管道类的一种运算符重载，赋予它特殊的作用，虽然实际可能只是函数参数的重载\n管道可带参数值，用于指导数据的处理方式，比如：\n\n    {{ birthday | date:\"MM/dd/yy\" }}\n\n\n## 常用的管道\n常用内置管道：DatePipe、UpperCasePipe、LowerCasePipe、CurrencyPipe、JsonPipe和PercentPipe等，看名字就能知道各个管道的作用，\n点击[这里](https://www.angular.cn/docs/ts/latest/api/ \"angular-API\")进入API文档，搜索pipe可学习更多内置管道\n**多个可选参数**\n管道可以接受任何数量的可选参数来对它的输出进行微调，在管道名后面添加一个或者多个参数，参数间使用冒号( : )隔开，比如\n\n    {{data | currency:'EUR'}}\n    {{data | slice:1:5}}\n参数可以是字符串常量和组件属性变量，我们可以在组件里利用属性控制显示的格式规则\n**链式调用**\n多个管道链式调用，将从左至右顺序执行，最终的效果时各个管道效果的叠加\n\n    {{  birthday | date:'fullDate' | uppercase}}\n\n## 自定义管道\n管道作用：存储单位转化器，输入为mb，如果输入小于1,显示kb；小于1024，显示MB;大于1024，显示GB;其他输入值或非数字输入，显示error\n\n    import { Pipe, PipeTransform } from '@angular/core';\n\n    @Pipe({\n      name: 'transverter'\n    })\n    export class TransverterPipe implements PipeTransform {\n\n      transform(value: any, args?: any): any {\n        if(isNaN(value)) {\n          return 'error'\n        }\n\n        let tempValue = +value;\n\n        if(tempValue < 0) {\n          return 'error';\n        } else if(tempValue < 1) {\n          tempValue *= 1024;\n          return tempValue + 'KB';\n        } else if(tempValue < 1024) {\n          return value + 'MB';\n        } else {\n          tempValue = tempValue/1024;\n          return tempValue + 'GB';\n        }\n      }\n\n    }\n\n管道类只要继承PipeTransform接口，实现transform方法即可，其他第一个参数value是输入数据，后面的args是可选参数，使用管道\n\n    <div>\n      <label>请输入： </label>\n      <input type=\"text\" name=\"input\" [(ngModel)]=\"inputValue\">\n      <span>MB</span>\n    </div>\n    <p>使用管道转换后： {{inputValue | transverter}}</p>\n\n效果：\n<img src=\"/images/pipe3.png\"><img src=\"/images/pipe1.png\"><img src=\"/images/pipe2.png\"><img src=\"/images/pipe4.png\">\n\n## 管道的变更检测\n一般情况下，管道对输入数据的变更检测属于纯检测，相应的管道叫纯管道；相应的，非纯管道执行非纯的变更检测策略\n**(1) 纯检测**\n只对原始类型值(String、Number、Boolean、Symbol)的更改进行检测， 或者对对象引用(Date、Array、Function、Object)的更改变化进行检测，而对于对象内的成员值变化不做检测\n比如，有数组A[10],如下使用管道\n\n    let arrayData = A[10];\n    {{arrayData | PipeName}}\n如果数组内成员的值发生变化，纯检测检测不到变更，应为数组引用并无变化\n使用纯检测方式的管道是纯管道，定义时元数据如下设置：\n\n    @Pipe({\n      name: 'flyImpure',\n    })\n    或\n    @Pipe({\n      name: 'flyImpure',\n      pure: true\n    })\n\n**(2) 非纯检测**\n对输入值和数据成员都进行检测，包括组合对象的成员变更，但是每个变更检测周期都会触发检测，次数多，代价较大\n使用非纯检测方式的管道是非纯管道，定义时元数据如下设置：\n\n    @Pipe({\n      name: 'flyingHeroesImpure',\n      pure: false\n    })\n\n> 两种管道的定义和使用方式相同，只是变更检测方式不同而已\n\n## 管道的替代品\n**(1) 使用纯管道实现替代非纯管道**\n由于非纯管道的变更检测次数频繁，代价大，所以一般不会使用它，在需要用到非纯管道的场景，我们也可以用在组件内使用的时候进行特别的设计，使得纯管道也能达到预期效果，比如：\n\n    let arrayData = A[10];\n\n    arrayData = clone(arrayData);\n    {{arrayData | PipeName}}\n\n**(2) 管道的替代品**\n管道作用就是数据转化，这些工作都可以放在组件内完成，或者定义服务来做，服务也能用来备多个组件共享\n\n##### 其他，一些好东西：\n1 . Date和Currency管道需要ECMAScript国际化（I18n）API，但Safari和其它老式浏览器不支持它，该问题可以用垫片（Polyfill）解决\n\n    <script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en\">\n    </script>\n\n2 . 纯管道与纯函数：纯函数是指在处理输入并返回结果时，不会产生任何副作用的函数。 给定相同的输入，它们总是返回相同的输出,纯管道必须总是用纯函数实现\n\n3 . 非纯AsyncPipe,AsyncPipe接受一个Promise或Observable作为输入，并且自动订阅这个输入，最终返回它们给出的值\n\n4 . 在多种值绑定语法中，Angular通过变更检测过程来查找绑定值的更改，并在每一次JavaScript事件之后运行：每次按键、鼠标移动、定时器以及服务器的响应。这可能会让变更检测显得很昂贵，但是Angular会尽可能降低变更检测的成本","source":"_posts/2017-07-28-angular-pipe.md","raw":"---\ntitle: Angular-管道\ndate: 2017-07-28 01:24:09\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n## 管道是什么\n简单来说，是一种值转换器，用于在模板中对变量或数据进行转换后显示，好比数据输入进入一个管道，得到期望的数据输出，示意图：\n<!--more-->\n![angular-pipe-design](/images/angular-pipe-design.jpg)\n其实，在本质上，就是把一些通用的转换函数封装成管道类，供各个组件模块在应用中实例化使用，比如：字符串转化成大写/数字四舍五入等\n\n## 使用方法\n**输入值 | 管道：参数**\n输入值流向管道进行处理，并返回处理后的数据\n| 是管道操作符，熟悉C++的同学可理解管道类的一种运算符重载，赋予它特殊的作用，虽然实际可能只是函数参数的重载\n管道可带参数值，用于指导数据的处理方式，比如：\n\n    {{ birthday | date:\"MM/dd/yy\" }}\n\n\n## 常用的管道\n常用内置管道：DatePipe、UpperCasePipe、LowerCasePipe、CurrencyPipe、JsonPipe和PercentPipe等，看名字就能知道各个管道的作用，\n点击[这里](https://www.angular.cn/docs/ts/latest/api/ \"angular-API\")进入API文档，搜索pipe可学习更多内置管道\n**多个可选参数**\n管道可以接受任何数量的可选参数来对它的输出进行微调，在管道名后面添加一个或者多个参数，参数间使用冒号( : )隔开，比如\n\n    {{data | currency:'EUR'}}\n    {{data | slice:1:5}}\n参数可以是字符串常量和组件属性变量，我们可以在组件里利用属性控制显示的格式规则\n**链式调用**\n多个管道链式调用，将从左至右顺序执行，最终的效果时各个管道效果的叠加\n\n    {{  birthday | date:'fullDate' | uppercase}}\n\n## 自定义管道\n管道作用：存储单位转化器，输入为mb，如果输入小于1,显示kb；小于1024，显示MB;大于1024，显示GB;其他输入值或非数字输入，显示error\n\n    import { Pipe, PipeTransform } from '@angular/core';\n\n    @Pipe({\n      name: 'transverter'\n    })\n    export class TransverterPipe implements PipeTransform {\n\n      transform(value: any, args?: any): any {\n        if(isNaN(value)) {\n          return 'error'\n        }\n\n        let tempValue = +value;\n\n        if(tempValue < 0) {\n          return 'error';\n        } else if(tempValue < 1) {\n          tempValue *= 1024;\n          return tempValue + 'KB';\n        } else if(tempValue < 1024) {\n          return value + 'MB';\n        } else {\n          tempValue = tempValue/1024;\n          return tempValue + 'GB';\n        }\n      }\n\n    }\n\n管道类只要继承PipeTransform接口，实现transform方法即可，其他第一个参数value是输入数据，后面的args是可选参数，使用管道\n\n    <div>\n      <label>请输入： </label>\n      <input type=\"text\" name=\"input\" [(ngModel)]=\"inputValue\">\n      <span>MB</span>\n    </div>\n    <p>使用管道转换后： {{inputValue | transverter}}</p>\n\n效果：\n<img src=\"/images/pipe3.png\"><img src=\"/images/pipe1.png\"><img src=\"/images/pipe2.png\"><img src=\"/images/pipe4.png\">\n\n## 管道的变更检测\n一般情况下，管道对输入数据的变更检测属于纯检测，相应的管道叫纯管道；相应的，非纯管道执行非纯的变更检测策略\n**(1) 纯检测**\n只对原始类型值(String、Number、Boolean、Symbol)的更改进行检测， 或者对对象引用(Date、Array、Function、Object)的更改变化进行检测，而对于对象内的成员值变化不做检测\n比如，有数组A[10],如下使用管道\n\n    let arrayData = A[10];\n    {{arrayData | PipeName}}\n如果数组内成员的值发生变化，纯检测检测不到变更，应为数组引用并无变化\n使用纯检测方式的管道是纯管道，定义时元数据如下设置：\n\n    @Pipe({\n      name: 'flyImpure',\n    })\n    或\n    @Pipe({\n      name: 'flyImpure',\n      pure: true\n    })\n\n**(2) 非纯检测**\n对输入值和数据成员都进行检测，包括组合对象的成员变更，但是每个变更检测周期都会触发检测，次数多，代价较大\n使用非纯检测方式的管道是非纯管道，定义时元数据如下设置：\n\n    @Pipe({\n      name: 'flyingHeroesImpure',\n      pure: false\n    })\n\n> 两种管道的定义和使用方式相同，只是变更检测方式不同而已\n\n## 管道的替代品\n**(1) 使用纯管道实现替代非纯管道**\n由于非纯管道的变更检测次数频繁，代价大，所以一般不会使用它，在需要用到非纯管道的场景，我们也可以用在组件内使用的时候进行特别的设计，使得纯管道也能达到预期效果，比如：\n\n    let arrayData = A[10];\n\n    arrayData = clone(arrayData);\n    {{arrayData | PipeName}}\n\n**(2) 管道的替代品**\n管道作用就是数据转化，这些工作都可以放在组件内完成，或者定义服务来做，服务也能用来备多个组件共享\n\n##### 其他，一些好东西：\n1 . Date和Currency管道需要ECMAScript国际化（I18n）API，但Safari和其它老式浏览器不支持它，该问题可以用垫片（Polyfill）解决\n\n    <script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en\">\n    </script>\n\n2 . 纯管道与纯函数：纯函数是指在处理输入并返回结果时，不会产生任何副作用的函数。 给定相同的输入，它们总是返回相同的输出,纯管道必须总是用纯函数实现\n\n3 . 非纯AsyncPipe,AsyncPipe接受一个Promise或Observable作为输入，并且自动订阅这个输入，最终返回它们给出的值\n\n4 . 在多种值绑定语法中，Angular通过变更检测过程来查找绑定值的更改，并在每一次JavaScript事件之后运行：每次按键、鼠标移动、定时器以及服务器的响应。这可能会让变更检测显得很昂贵，但是Angular会尽可能降低变更检测的成本","slug":"angular-pipe","published":1,"updated":"2017-07-28T16:19:16.903Z","layout":"post","photos":[],"link":"","_id":"cjqwe424t000dor0bjq01bpgh","content":"<h2 id=\"管道是什么\"><a href=\"#管道是什么\" class=\"headerlink\" title=\"管道是什么\"></a>管道是什么</h2><p>简单来说，是一种值转换器，用于在模板中对变量或数据进行转换后显示，好比数据输入进入一个管道，得到期望的数据输出，示意图：<br><a id=\"more\"></a><br><img src=\"/images/angular-pipe-design.jpg\" alt=\"angular-pipe-design\"><br>其实，在本质上，就是把一些通用的转换函数封装成管道类，供各个组件模块在应用中实例化使用，比如：字符串转化成大写/数字四舍五入等</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p><strong>输入值 | 管道：参数</strong><br>输入值流向管道进行处理，并返回处理后的数据<br>| 是管道操作符，熟悉C++的同学可理解管道类的一种运算符重载，赋予它特殊的作用，虽然实际可能只是函数参数的重载<br>管道可带参数值，用于指导数据的处理方式，比如：</p>\n<pre><code>{{ birthday | date:\"MM/dd/yy\" }}\n</code></pre><h2 id=\"常用的管道\"><a href=\"#常用的管道\" class=\"headerlink\" title=\"常用的管道\"></a>常用的管道</h2><p>常用内置管道：DatePipe、UpperCasePipe、LowerCasePipe、CurrencyPipe、JsonPipe和PercentPipe等，看名字就能知道各个管道的作用，<br>点击<a href=\"https://www.angular.cn/docs/ts/latest/api/\" title=\"angular-API\" target=\"_blank\" rel=\"external\">这里</a>进入API文档，搜索pipe可学习更多内置管道<br><strong>多个可选参数</strong><br>管道可以接受任何数量的可选参数来对它的输出进行微调，在管道名后面添加一个或者多个参数，参数间使用冒号( : )隔开，比如</p>\n<pre><code>{{data | currency:'EUR'}}\n{{data | slice:1:5}}\n</code></pre><p>参数可以是字符串常量和组件属性变量，我们可以在组件里利用属性控制显示的格式规则<br><strong>链式调用</strong><br>多个管道链式调用，将从左至右顺序执行，最终的效果时各个管道效果的叠加</p>\n<pre><code>{{  birthday | date:'fullDate' | uppercase}}\n</code></pre><h2 id=\"自定义管道\"><a href=\"#自定义管道\" class=\"headerlink\" title=\"自定义管道\"></a>自定义管道</h2><p>管道作用：存储单位转化器，输入为mb，如果输入小于1,显示kb；小于1024，显示MB;大于1024，显示GB;其他输入值或非数字输入，显示error</p>\n<pre><code>import { Pipe, PipeTransform } from &apos;@angular/core&apos;;\n\n@Pipe({\n  name: &apos;transverter&apos;\n})\nexport class TransverterPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if(isNaN(value)) {\n      return &apos;error&apos;\n    }\n\n    let tempValue = +value;\n\n    if(tempValue &lt; 0) {\n      return &apos;error&apos;;\n    } else if(tempValue &lt; 1) {\n      tempValue *= 1024;\n      return tempValue + &apos;KB&apos;;\n    } else if(tempValue &lt; 1024) {\n      return value + &apos;MB&apos;;\n    } else {\n      tempValue = tempValue/1024;\n      return tempValue + &apos;GB&apos;;\n    }\n  }\n\n}\n</code></pre><p>管道类只要继承PipeTransform接口，实现transform方法即可，其他第一个参数value是输入数据，后面的args是可选参数，使用管道</p>\n<pre><code>&lt;div&gt;\n  &lt;label&gt;请输入： &lt;/label&gt;\n  &lt;input type=&quot;text&quot; name=&quot;input&quot; [(ngModel)]=&quot;inputValue&quot;&gt;\n  &lt;span&gt;MB&lt;/span&gt;\n&lt;/div&gt;\n&lt;p&gt;使用管道转换后： {{inputValue | transverter}}&lt;/p&gt;\n</code></pre><p>效果：<br><img src=\"/images/pipe3.png\"><img src=\"/images/pipe1.png\"><img src=\"/images/pipe2.png\"><img src=\"/images/pipe4.png\"></p>\n<h2 id=\"管道的变更检测\"><a href=\"#管道的变更检测\" class=\"headerlink\" title=\"管道的变更检测\"></a>管道的变更检测</h2><p>一般情况下，管道对输入数据的变更检测属于纯检测，相应的管道叫纯管道；相应的，非纯管道执行非纯的变更检测策略<br><strong>(1) 纯检测</strong><br>只对原始类型值(String、Number、Boolean、Symbol)的更改进行检测， 或者对对象引用(Date、Array、Function、Object)的更改变化进行检测，而对于对象内的成员值变化不做检测<br>比如，有数组A[10],如下使用管道</p>\n<pre><code>let arrayData = A[10];\n{{arrayData | PipeName}}\n</code></pre><p>如果数组内成员的值发生变化，纯检测检测不到变更，应为数组引用并无变化<br>使用纯检测方式的管道是纯管道，定义时元数据如下设置：</p>\n<pre><code>@Pipe({\n  name: &apos;flyImpure&apos;,\n})\n或\n@Pipe({\n  name: &apos;flyImpure&apos;,\n  pure: true\n})\n</code></pre><p><strong>(2) 非纯检测</strong><br>对输入值和数据成员都进行检测，包括组合对象的成员变更，但是每个变更检测周期都会触发检测，次数多，代价较大<br>使用非纯检测方式的管道是非纯管道，定义时元数据如下设置：</p>\n<pre><code>@Pipe({\n  name: &apos;flyingHeroesImpure&apos;,\n  pure: false\n})\n</code></pre><blockquote>\n<p>两种管道的定义和使用方式相同，只是变更检测方式不同而已</p>\n</blockquote>\n<h2 id=\"管道的替代品\"><a href=\"#管道的替代品\" class=\"headerlink\" title=\"管道的替代品\"></a>管道的替代品</h2><p><strong>(1) 使用纯管道实现替代非纯管道</strong><br>由于非纯管道的变更检测次数频繁，代价大，所以一般不会使用它，在需要用到非纯管道的场景，我们也可以用在组件内使用的时候进行特别的设计，使得纯管道也能达到预期效果，比如：</p>\n<pre><code>let arrayData = A[10];\n\narrayData = clone(arrayData);\n{{arrayData | PipeName}}\n</code></pre><p><strong>(2) 管道的替代品</strong><br>管道作用就是数据转化，这些工作都可以放在组件内完成，或者定义服务来做，服务也能用来备多个组件共享</p>\n<h5 id=\"其他，一些好东西：\"><a href=\"#其他，一些好东西：\" class=\"headerlink\" title=\"其他，一些好东西：\"></a>其他，一些好东西：</h5><p>1 . Date和Currency管道需要ECMAScript国际化（I18n）API，但Safari和其它老式浏览器不支持它，该问题可以用垫片（Polyfill）解决</p>\n<pre><code>&lt;script src=&quot;https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en&quot;&gt;\n&lt;/script&gt;\n</code></pre><p>2 . 纯管道与纯函数：纯函数是指在处理输入并返回结果时，不会产生任何副作用的函数。 给定相同的输入，它们总是返回相同的输出,纯管道必须总是用纯函数实现</p>\n<p>3 . 非纯AsyncPipe,AsyncPipe接受一个Promise或Observable作为输入，并且自动订阅这个输入，最终返回它们给出的值</p>\n<p>4 . 在多种值绑定语法中，Angular通过变更检测过程来查找绑定值的更改，并在每一次JavaScript事件之后运行：每次按键、鼠标移动、定时器以及服务器的响应。这可能会让变更检测显得很昂贵，但是Angular会尽可能降低变更检测的成本</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"管道是什么\"><a href=\"#管道是什么\" class=\"headerlink\" title=\"管道是什么\"></a>管道是什么</h2><p>简单来说，是一种值转换器，用于在模板中对变量或数据进行转换后显示，好比数据输入进入一个管道，得到期望的数据输出，示意图：<br>","more":"<br><img src=\"/images/angular-pipe-design.jpg\" alt=\"angular-pipe-design\"><br>其实，在本质上，就是把一些通用的转换函数封装成管道类，供各个组件模块在应用中实例化使用，比如：字符串转化成大写/数字四舍五入等</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p><strong>输入值 | 管道：参数</strong><br>输入值流向管道进行处理，并返回处理后的数据<br>| 是管道操作符，熟悉C++的同学可理解管道类的一种运算符重载，赋予它特殊的作用，虽然实际可能只是函数参数的重载<br>管道可带参数值，用于指导数据的处理方式，比如：</p>\n<pre><code>{{ birthday | date:\"MM/dd/yy\" }}\n</code></pre><h2 id=\"常用的管道\"><a href=\"#常用的管道\" class=\"headerlink\" title=\"常用的管道\"></a>常用的管道</h2><p>常用内置管道：DatePipe、UpperCasePipe、LowerCasePipe、CurrencyPipe、JsonPipe和PercentPipe等，看名字就能知道各个管道的作用，<br>点击<a href=\"https://www.angular.cn/docs/ts/latest/api/\" title=\"angular-API\" target=\"_blank\" rel=\"external\">这里</a>进入API文档，搜索pipe可学习更多内置管道<br><strong>多个可选参数</strong><br>管道可以接受任何数量的可选参数来对它的输出进行微调，在管道名后面添加一个或者多个参数，参数间使用冒号( : )隔开，比如</p>\n<pre><code>{{data | currency:'EUR'}}\n{{data | slice:1:5}}\n</code></pre><p>参数可以是字符串常量和组件属性变量，我们可以在组件里利用属性控制显示的格式规则<br><strong>链式调用</strong><br>多个管道链式调用，将从左至右顺序执行，最终的效果时各个管道效果的叠加</p>\n<pre><code>{{  birthday | date:'fullDate' | uppercase}}\n</code></pre><h2 id=\"自定义管道\"><a href=\"#自定义管道\" class=\"headerlink\" title=\"自定义管道\"></a>自定义管道</h2><p>管道作用：存储单位转化器，输入为mb，如果输入小于1,显示kb；小于1024，显示MB;大于1024，显示GB;其他输入值或非数字输入，显示error</p>\n<pre><code>import { Pipe, PipeTransform } from &apos;@angular/core&apos;;\n\n@Pipe({\n  name: &apos;transverter&apos;\n})\nexport class TransverterPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if(isNaN(value)) {\n      return &apos;error&apos;\n    }\n\n    let tempValue = +value;\n\n    if(tempValue &lt; 0) {\n      return &apos;error&apos;;\n    } else if(tempValue &lt; 1) {\n      tempValue *= 1024;\n      return tempValue + &apos;KB&apos;;\n    } else if(tempValue &lt; 1024) {\n      return value + &apos;MB&apos;;\n    } else {\n      tempValue = tempValue/1024;\n      return tempValue + &apos;GB&apos;;\n    }\n  }\n\n}\n</code></pre><p>管道类只要继承PipeTransform接口，实现transform方法即可，其他第一个参数value是输入数据，后面的args是可选参数，使用管道</p>\n<pre><code>&lt;div&gt;\n  &lt;label&gt;请输入： &lt;/label&gt;\n  &lt;input type=&quot;text&quot; name=&quot;input&quot; [(ngModel)]=&quot;inputValue&quot;&gt;\n  &lt;span&gt;MB&lt;/span&gt;\n&lt;/div&gt;\n&lt;p&gt;使用管道转换后： {{inputValue | transverter}}&lt;/p&gt;\n</code></pre><p>效果：<br><img src=\"/images/pipe3.png\"><img src=\"/images/pipe1.png\"><img src=\"/images/pipe2.png\"><img src=\"/images/pipe4.png\"></p>\n<h2 id=\"管道的变更检测\"><a href=\"#管道的变更检测\" class=\"headerlink\" title=\"管道的变更检测\"></a>管道的变更检测</h2><p>一般情况下，管道对输入数据的变更检测属于纯检测，相应的管道叫纯管道；相应的，非纯管道执行非纯的变更检测策略<br><strong>(1) 纯检测</strong><br>只对原始类型值(String、Number、Boolean、Symbol)的更改进行检测， 或者对对象引用(Date、Array、Function、Object)的更改变化进行检测，而对于对象内的成员值变化不做检测<br>比如，有数组A[10],如下使用管道</p>\n<pre><code>let arrayData = A[10];\n{{arrayData | PipeName}}\n</code></pre><p>如果数组内成员的值发生变化，纯检测检测不到变更，应为数组引用并无变化<br>使用纯检测方式的管道是纯管道，定义时元数据如下设置：</p>\n<pre><code>@Pipe({\n  name: &apos;flyImpure&apos;,\n})\n或\n@Pipe({\n  name: &apos;flyImpure&apos;,\n  pure: true\n})\n</code></pre><p><strong>(2) 非纯检测</strong><br>对输入值和数据成员都进行检测，包括组合对象的成员变更，但是每个变更检测周期都会触发检测，次数多，代价较大<br>使用非纯检测方式的管道是非纯管道，定义时元数据如下设置：</p>\n<pre><code>@Pipe({\n  name: &apos;flyingHeroesImpure&apos;,\n  pure: false\n})\n</code></pre><blockquote>\n<p>两种管道的定义和使用方式相同，只是变更检测方式不同而已</p>\n</blockquote>\n<h2 id=\"管道的替代品\"><a href=\"#管道的替代品\" class=\"headerlink\" title=\"管道的替代品\"></a>管道的替代品</h2><p><strong>(1) 使用纯管道实现替代非纯管道</strong><br>由于非纯管道的变更检测次数频繁，代价大，所以一般不会使用它，在需要用到非纯管道的场景，我们也可以用在组件内使用的时候进行特别的设计，使得纯管道也能达到预期效果，比如：</p>\n<pre><code>let arrayData = A[10];\n\narrayData = clone(arrayData);\n{{arrayData | PipeName}}\n</code></pre><p><strong>(2) 管道的替代品</strong><br>管道作用就是数据转化，这些工作都可以放在组件内完成，或者定义服务来做，服务也能用来备多个组件共享</p>\n<h5 id=\"其他，一些好东西：\"><a href=\"#其他，一些好东西：\" class=\"headerlink\" title=\"其他，一些好东西：\"></a>其他，一些好东西：</h5><p>1 . Date和Currency管道需要ECMAScript国际化（I18n）API，但Safari和其它老式浏览器不支持它，该问题可以用垫片（Polyfill）解决</p>\n<pre><code>&lt;script src=&quot;https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en&quot;&gt;\n&lt;/script&gt;\n</code></pre><p>2 . 纯管道与纯函数：纯函数是指在处理输入并返回结果时，不会产生任何副作用的函数。 给定相同的输入，它们总是返回相同的输出,纯管道必须总是用纯函数实现</p>\n<p>3 . 非纯AsyncPipe,AsyncPipe接受一个Promise或Observable作为输入，并且自动订阅这个输入，最终返回它们给出的值</p>\n<p>4 . 在多种值绑定语法中，Angular通过变更检测过程来查找绑定值的更改，并在每一次JavaScript事件之后运行：每次按键、鼠标移动、定时器以及服务器的响应。这可能会让变更检测显得很昂贵，但是Angular会尽可能降低变更检测的成本</p>"},{"title":"Angular-结构指令","date":"2017-07-30T17:11:43.000Z","comments":1,"_content":"\n结构型指令可以很方便的DOM结构树，Angular有一个强力的模板引擎来支持这一些，比如：添加、移除或维护DOM元素\n<!--more-->\n例如：\n\n    <div *ngIf=\"hero\" >{{hero.name}}</div>\n\n## 内置结构指令\n**（1）NgIf**\n\n    <div *ngIf=\"hero\" >{{hero.name}}</div>\n接受一个条件值，当条件为假时，从DOM中移除它的宿主元素，取消它监听过的那些DOM事件，从Angular变更检测中移除该组件，并销毁它，DOM节点可以被当做垃圾收集起来，并且\n释放它们占用的内存；否则，则添加它们\n解开语法糖：\n\n    <div *ngIf=\"hero\" class=\"active\">{{hero.name}}</div>\n    -->\n    <div template=\"ngIf hero\" class=\"active\">{{hero.name}}</div>\n    -->\n    <ng-template [ngIf]=\"hero\">\n      <div class=\"active\">{{hero.name}}</div>\n    </ng-template>\n\n> 上述解开的形式不会真的渲染出来，angular渲染时会移除ng-template，并辅以标记性注释占位，真正添加到DOM树里的是里面的div部分\n\n**（2）NgFor**\n\n    <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n指令接受一个模板表达式，对数据列表进行迭代，应用于宿主元素，并将宿主元素及其子元素一起克隆多份置于DOM树上\n解开语法糖：\n\n    <div *ngFor=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\">\n      ({{i}}) {{hero.name}}\n    </div>\n    -->\n    <div template=\"ngFor let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\">\n      ({{i}}) {{hero.name}}\n    </div>\n    -->\n    <ng-template ngFor let-hero [ngForOf]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\">\n      <div [class.odd]=\"odd\">({{i}}) {{hero.name}}</div>\n    </ng-template>\n这个比较复杂：\n- let关键字声明一个模板输入变量，本例中就是hero、i和odd； 解析器会把let hero、let i和let odd翻译成命名变量let-hero、let-i和let-odd\n- 微语法解析器接收of和trackby，把它们首字母大写（of -> Of, trackBy -> TrackBy）， 并且给它们加上指令的属性名（ngFor）前缀，最终生成的名字是ngForOf和ngForTrackBy\n- 两个NgFor的输入属性分别是，列表heroes，track-by函数是trackById\n\nNgFor指令在列表上循环，每个循环中都会设置和重置它自己的上下文对象上的属性。 这些属性包括index和odd以及一个特殊的属性名$implicit（隐式变量，let-hero）\n\n\n\n**（3）NgSwitch**\n\n    <div [ngSwitch]=\"hero?.emotion\">\n      <happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"hero\"></happy-hero>\n      <sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"hero\"></sad-hero>\n      <confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"hero\"></confused-hero>\n      <unknown-hero  *ngSwitchDefault           [hero]=\"hero\"></unknown-hero>\n    </div>\n\nNgSwitch不是结构指令，只是属性指令，用来接受“状态值”；NgSwitchCase和NgSwitchDefault是结构型指令，用来根据状态来匹配显示不同的分支DOM,用法额原理都类似于NGIF\n解开语法糖：\n\n    <div [ngSwitch]=\"hero?.emotion\">\n      <ng-template [ngSwitchCase]=\"'happy'\">\n        <happy-hero [hero]=\"hero\"></happy-hero>\n      </ng-template>\n      <ng-template [ngSwitchCase]=\"'sad'\">\n        <sad-hero [hero]=\"hero\"></sad-hero>\n      </ng-template>\n      <ng-template [ngSwitchCase]=\"'confused'\">\n        <confused-hero [hero]=\"hero\"></confused-hero>\n      </ng-template >\n      <ng-template ngSwitchDefault>\n        <unknown-hero [hero]=\"hero\"></unknown-hero>\n      </ng-template>\n    </div>\n\n> 注意：\n> - 模板输入变量时一个模块实例的变量值，可以使用到当前实例中；而模板引用变量时引用的元素，代表的时那个元素本身，可在当前整个文档中使用；两种有不同的命名空间\n> - 一个元素不同时使用两个结构型实例\n\n## ng-template/ng-container\n**（1）ng-template**\n`<ng-template>`是一类html标签，是angular用来解释渲染结构性指令的一种方式，不会直接显示在html,最后会替换成同意义的注释；比如ngif中，当条件为false，angular将移除相应分支元素，取而代之的时一段注释\n这个标签直接单独使用的时候也有次效果，比如：\n\n    <ng-template><p>AA</p></ng-template>\n包裹的元素内容在渲染时会消失，而代之的是注释\n\n**（2）ng-container**\n`<ng-container>`是一种不影响当前样式/布局的组合元素,angular只是用它来包裹控制内部元素的显示不显示，最后是不会添加渲染到DOM树上的，也不会有注释，使用起来就像普通语言中的if条件一样；它可直接包裹任何元素，包括文本\n\n    <p>\n      I turned the corner\n      <ng-container *ngIf=\"hero\">\n        and saw {{hero.name}}. I waved\n      </ng-container>\n      and continued on my way.\n    </p>\n\n有些元素不能直接使用其他标签包裹，比如select中的option，必须和select挨着，否则会出问题；这是不能使用ngif或ng-template，但可以使用ng-container，它不会有副作用，因为最后都会移除掉\n\n    <select [(ngModel)]=\"hero\">\n      <ng-container *ngFor=\"let h of heroes\">\n        <ng-container *ngIf=\"showSad || h.emotion !== 'sad'\">\n          <option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})</option>\n        </ng-container>\n      </ng-container>\n    </select>\n会根据heros动态显示option,而所有的ng-container标签最后都会移除，否则会影响option显示\n\n## 自定义结构指令\n指令作用：使用数字来控制元素的增加和移除，类似于ngIf，接受源字符串，当输入是数字时添加；输入是非数字或空串，移除宿主元素\n\n    import { Directive, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\n    @Directive({\n      selector: '[numIf]'\n    })\n    export class NumIfDirective {\n      private hasView = false;\n\n      constructor(private templateRef: TemplateRef<any>,\n                  private viewContainer: ViewContainerRef) {\n\n      }\n\n      @Input() set numIf(condition: any) {\n        if (condition && !isNaN(condition) && !this.hasView) {\n          this.viewContainer.createEmbeddedView(this.templateRef);\n          this.hasView = true;\n        } else if (isNaN(condition) && this.hasView) {\n          this.viewContainer.clear();\n          this.hasView = false;\n        }\n      }\n\n    }\n使用的地方\n\n    <div>\n      <label>请输入： </label>\n      <input type=\"text\" name=\"input\" [(ngModel)]=\"myValue\">\n    </div>\n    <p *numIf=\"myValue\">输入的值是： {{myValue}}</p>\n\n效果如下：\n\n<img src=\"/images/construct-directive01.png\"><img src=\"/images/construct-directive02.png\">\n\n##### 其他，一些好东西：\n1 . 自定义结构指令里头，有几个新的概念，这里简单说一下\n- embedview,内嵌视图\n- TemplateRef，内嵌视图创建模板，存有指令宿主元素模板\n- viewContainer,视图容器,view列表\n- viewcontainerRef,描绘视图容器，用于管理container,可同时创建内嵌view和组件视图，类里有不同的方法来创建，还有一个container的锚点，用于指定容器，可当做列表的头地址，新创建的view一个个作为兄弟成员存放，方便管理；类中injector存有TemplateRef\n\n几个概念的大概关系如下：\n![embedview](/images/embedview.jpg)","source":"_posts/2017-07-31-angular-structDirective.md","raw":"---\ntitle: Angular-结构指令\ndate: 2017-07-31 01:11:43\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n结构型指令可以很方便的DOM结构树，Angular有一个强力的模板引擎来支持这一些，比如：添加、移除或维护DOM元素\n<!--more-->\n例如：\n\n    <div *ngIf=\"hero\" >{{hero.name}}</div>\n\n## 内置结构指令\n**（1）NgIf**\n\n    <div *ngIf=\"hero\" >{{hero.name}}</div>\n接受一个条件值，当条件为假时，从DOM中移除它的宿主元素，取消它监听过的那些DOM事件，从Angular变更检测中移除该组件，并销毁它，DOM节点可以被当做垃圾收集起来，并且\n释放它们占用的内存；否则，则添加它们\n解开语法糖：\n\n    <div *ngIf=\"hero\" class=\"active\">{{hero.name}}</div>\n    -->\n    <div template=\"ngIf hero\" class=\"active\">{{hero.name}}</div>\n    -->\n    <ng-template [ngIf]=\"hero\">\n      <div class=\"active\">{{hero.name}}</div>\n    </ng-template>\n\n> 上述解开的形式不会真的渲染出来，angular渲染时会移除ng-template，并辅以标记性注释占位，真正添加到DOM树里的是里面的div部分\n\n**（2）NgFor**\n\n    <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n指令接受一个模板表达式，对数据列表进行迭代，应用于宿主元素，并将宿主元素及其子元素一起克隆多份置于DOM树上\n解开语法糖：\n\n    <div *ngFor=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\">\n      ({{i}}) {{hero.name}}\n    </div>\n    -->\n    <div template=\"ngFor let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\">\n      ({{i}}) {{hero.name}}\n    </div>\n    -->\n    <ng-template ngFor let-hero [ngForOf]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\">\n      <div [class.odd]=\"odd\">({{i}}) {{hero.name}}</div>\n    </ng-template>\n这个比较复杂：\n- let关键字声明一个模板输入变量，本例中就是hero、i和odd； 解析器会把let hero、let i和let odd翻译成命名变量let-hero、let-i和let-odd\n- 微语法解析器接收of和trackby，把它们首字母大写（of -> Of, trackBy -> TrackBy）， 并且给它们加上指令的属性名（ngFor）前缀，最终生成的名字是ngForOf和ngForTrackBy\n- 两个NgFor的输入属性分别是，列表heroes，track-by函数是trackById\n\nNgFor指令在列表上循环，每个循环中都会设置和重置它自己的上下文对象上的属性。 这些属性包括index和odd以及一个特殊的属性名$implicit（隐式变量，let-hero）\n\n\n\n**（3）NgSwitch**\n\n    <div [ngSwitch]=\"hero?.emotion\">\n      <happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"hero\"></happy-hero>\n      <sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"hero\"></sad-hero>\n      <confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"hero\"></confused-hero>\n      <unknown-hero  *ngSwitchDefault           [hero]=\"hero\"></unknown-hero>\n    </div>\n\nNgSwitch不是结构指令，只是属性指令，用来接受“状态值”；NgSwitchCase和NgSwitchDefault是结构型指令，用来根据状态来匹配显示不同的分支DOM,用法额原理都类似于NGIF\n解开语法糖：\n\n    <div [ngSwitch]=\"hero?.emotion\">\n      <ng-template [ngSwitchCase]=\"'happy'\">\n        <happy-hero [hero]=\"hero\"></happy-hero>\n      </ng-template>\n      <ng-template [ngSwitchCase]=\"'sad'\">\n        <sad-hero [hero]=\"hero\"></sad-hero>\n      </ng-template>\n      <ng-template [ngSwitchCase]=\"'confused'\">\n        <confused-hero [hero]=\"hero\"></confused-hero>\n      </ng-template >\n      <ng-template ngSwitchDefault>\n        <unknown-hero [hero]=\"hero\"></unknown-hero>\n      </ng-template>\n    </div>\n\n> 注意：\n> - 模板输入变量时一个模块实例的变量值，可以使用到当前实例中；而模板引用变量时引用的元素，代表的时那个元素本身，可在当前整个文档中使用；两种有不同的命名空间\n> - 一个元素不同时使用两个结构型实例\n\n## ng-template/ng-container\n**（1）ng-template**\n`<ng-template>`是一类html标签，是angular用来解释渲染结构性指令的一种方式，不会直接显示在html,最后会替换成同意义的注释；比如ngif中，当条件为false，angular将移除相应分支元素，取而代之的时一段注释\n这个标签直接单独使用的时候也有次效果，比如：\n\n    <ng-template><p>AA</p></ng-template>\n包裹的元素内容在渲染时会消失，而代之的是注释\n\n**（2）ng-container**\n`<ng-container>`是一种不影响当前样式/布局的组合元素,angular只是用它来包裹控制内部元素的显示不显示，最后是不会添加渲染到DOM树上的，也不会有注释，使用起来就像普通语言中的if条件一样；它可直接包裹任何元素，包括文本\n\n    <p>\n      I turned the corner\n      <ng-container *ngIf=\"hero\">\n        and saw {{hero.name}}. I waved\n      </ng-container>\n      and continued on my way.\n    </p>\n\n有些元素不能直接使用其他标签包裹，比如select中的option，必须和select挨着，否则会出问题；这是不能使用ngif或ng-template，但可以使用ng-container，它不会有副作用，因为最后都会移除掉\n\n    <select [(ngModel)]=\"hero\">\n      <ng-container *ngFor=\"let h of heroes\">\n        <ng-container *ngIf=\"showSad || h.emotion !== 'sad'\">\n          <option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})</option>\n        </ng-container>\n      </ng-container>\n    </select>\n会根据heros动态显示option,而所有的ng-container标签最后都会移除，否则会影响option显示\n\n## 自定义结构指令\n指令作用：使用数字来控制元素的增加和移除，类似于ngIf，接受源字符串，当输入是数字时添加；输入是非数字或空串，移除宿主元素\n\n    import { Directive, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\n    @Directive({\n      selector: '[numIf]'\n    })\n    export class NumIfDirective {\n      private hasView = false;\n\n      constructor(private templateRef: TemplateRef<any>,\n                  private viewContainer: ViewContainerRef) {\n\n      }\n\n      @Input() set numIf(condition: any) {\n        if (condition && !isNaN(condition) && !this.hasView) {\n          this.viewContainer.createEmbeddedView(this.templateRef);\n          this.hasView = true;\n        } else if (isNaN(condition) && this.hasView) {\n          this.viewContainer.clear();\n          this.hasView = false;\n        }\n      }\n\n    }\n使用的地方\n\n    <div>\n      <label>请输入： </label>\n      <input type=\"text\" name=\"input\" [(ngModel)]=\"myValue\">\n    </div>\n    <p *numIf=\"myValue\">输入的值是： {{myValue}}</p>\n\n效果如下：\n\n<img src=\"/images/construct-directive01.png\"><img src=\"/images/construct-directive02.png\">\n\n##### 其他，一些好东西：\n1 . 自定义结构指令里头，有几个新的概念，这里简单说一下\n- embedview,内嵌视图\n- TemplateRef，内嵌视图创建模板，存有指令宿主元素模板\n- viewContainer,视图容器,view列表\n- viewcontainerRef,描绘视图容器，用于管理container,可同时创建内嵌view和组件视图，类里有不同的方法来创建，还有一个container的锚点，用于指定容器，可当做列表的头地址，新创建的view一个个作为兄弟成员存放，方便管理；类中injector存有TemplateRef\n\n几个概念的大概关系如下：\n![embedview](/images/embedview.jpg)","slug":"angular-structDirective","published":1,"updated":"2017-08-03T17:27:38.738Z","layout":"post","photos":[],"link":"","_id":"cjqwe424w000for0bwb6j8hhp","content":"<p>结构型指令可以很方便的DOM结构树，Angular有一个强力的模板引擎来支持这一些，比如：添加、移除或维护DOM元素<br><a id=\"more\"></a><br>例如：</p>\n<pre><code>&lt;div *ngIf=&quot;hero&quot; &gt;{{hero.name}}&lt;/div&gt;\n</code></pre><h2 id=\"内置结构指令\"><a href=\"#内置结构指令\" class=\"headerlink\" title=\"内置结构指令\"></a>内置结构指令</h2><p><strong>（1）NgIf</strong></p>\n<pre><code>&lt;div *ngIf=&quot;hero&quot; &gt;{{hero.name}}&lt;/div&gt;\n</code></pre><p>接受一个条件值，当条件为假时，从DOM中移除它的宿主元素，取消它监听过的那些DOM事件，从Angular变更检测中移除该组件，并销毁它，DOM节点可以被当做垃圾收集起来，并且<br>释放它们占用的内存；否则，则添加它们<br>解开语法糖：</p>\n<pre><code>&lt;div *ngIf=&quot;hero&quot; class=&quot;active&quot;&gt;{{hero.name}}&lt;/div&gt;\n--&gt;\n&lt;div template=&quot;ngIf hero&quot; class=&quot;active&quot;&gt;{{hero.name}}&lt;/div&gt;\n--&gt;\n&lt;ng-template [ngIf]=&quot;hero&quot;&gt;\n  &lt;div class=&quot;active&quot;&gt;{{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n</code></pre><blockquote>\n<p>上述解开的形式不会真的渲染出来，angular渲染时会移除ng-template，并辅以标记性注释占位，真正添加到DOM树里的是里面的div部分</p>\n</blockquote>\n<p><strong>（2）NgFor</strong></p>\n<pre><code>&lt;div *ngFor=&quot;let hero of heroes&quot;&gt;{{hero.name}}&lt;/div&gt;\n</code></pre><p>指令接受一个模板表达式，对数据列表进行迭代，应用于宿主元素，并将宿主元素及其子元素一起克隆多份置于DOM树上<br>解开语法糖：</p>\n<pre><code>&lt;div *ngFor=&quot;let hero of heroes; let i=index; let odd=odd; trackBy: trackById&quot; [class.odd]=&quot;odd&quot;&gt;\n  ({{i}}) {{hero.name}}\n&lt;/div&gt;\n--&gt;\n&lt;div template=&quot;ngFor let hero of heroes; let i=index; let odd=odd; trackBy: trackById&quot; [class.odd]=&quot;odd&quot;&gt;\n  ({{i}}) {{hero.name}}\n&lt;/div&gt;\n--&gt;\n&lt;ng-template ngFor let-hero [ngForOf]=&quot;heroes&quot; let-i=&quot;index&quot; let-odd=&quot;odd&quot; [ngForTrackBy]=&quot;trackById&quot;&gt;\n  &lt;div [class.odd]=&quot;odd&quot;&gt;({{i}}) {{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n</code></pre><p>这个比较复杂：</p>\n<ul>\n<li>let关键字声明一个模板输入变量，本例中就是hero、i和odd； 解析器会把let hero、let i和let odd翻译成命名变量let-hero、let-i和let-odd</li>\n<li>微语法解析器接收of和trackby，把它们首字母大写（of -&gt; Of, trackBy -&gt; TrackBy）， 并且给它们加上指令的属性名（ngFor）前缀，最终生成的名字是ngForOf和ngForTrackBy</li>\n<li>两个NgFor的输入属性分别是，列表heroes，track-by函数是trackById</li>\n</ul>\n<p>NgFor指令在列表上循环，每个循环中都会设置和重置它自己的上下文对象上的属性。 这些属性包括index和odd以及一个特殊的属性名$implicit（隐式变量，let-hero）</p>\n<p><strong>（3）NgSwitch</strong></p>\n<pre><code>&lt;div [ngSwitch]=&quot;hero?.emotion&quot;&gt;\n  &lt;happy-hero    *ngSwitchCase=&quot;&apos;happy&apos;&quot;    [hero]=&quot;hero&quot;&gt;&lt;/happy-hero&gt;\n  &lt;sad-hero      *ngSwitchCase=&quot;&apos;sad&apos;&quot;      [hero]=&quot;hero&quot;&gt;&lt;/sad-hero&gt;\n  &lt;confused-hero *ngSwitchCase=&quot;&apos;confused&apos;&quot; [hero]=&quot;hero&quot;&gt;&lt;/confused-hero&gt;\n  &lt;unknown-hero  *ngSwitchDefault           [hero]=&quot;hero&quot;&gt;&lt;/unknown-hero&gt;\n&lt;/div&gt;\n</code></pre><p>NgSwitch不是结构指令，只是属性指令，用来接受“状态值”；NgSwitchCase和NgSwitchDefault是结构型指令，用来根据状态来匹配显示不同的分支DOM,用法额原理都类似于NGIF<br>解开语法糖：</p>\n<pre><code>&lt;div [ngSwitch]=&quot;hero?.emotion&quot;&gt;\n  &lt;ng-template [ngSwitchCase]=&quot;&apos;happy&apos;&quot;&gt;\n    &lt;happy-hero [hero]=&quot;hero&quot;&gt;&lt;/happy-hero&gt;\n  &lt;/ng-template&gt;\n  &lt;ng-template [ngSwitchCase]=&quot;&apos;sad&apos;&quot;&gt;\n    &lt;sad-hero [hero]=&quot;hero&quot;&gt;&lt;/sad-hero&gt;\n  &lt;/ng-template&gt;\n  &lt;ng-template [ngSwitchCase]=&quot;&apos;confused&apos;&quot;&gt;\n    &lt;confused-hero [hero]=&quot;hero&quot;&gt;&lt;/confused-hero&gt;\n  &lt;/ng-template &gt;\n  &lt;ng-template ngSwitchDefault&gt;\n    &lt;unknown-hero [hero]=&quot;hero&quot;&gt;&lt;/unknown-hero&gt;\n  &lt;/ng-template&gt;\n&lt;/div&gt;\n</code></pre><blockquote>\n<p>注意：</p>\n<ul>\n<li>模板输入变量时一个模块实例的变量值，可以使用到当前实例中；而模板引用变量时引用的元素，代表的时那个元素本身，可在当前整个文档中使用；两种有不同的命名空间</li>\n<li>一个元素不同时使用两个结构型实例</li>\n</ul>\n</blockquote>\n<h2 id=\"ng-template-ng-container\"><a href=\"#ng-template-ng-container\" class=\"headerlink\" title=\"ng-template/ng-container\"></a>ng-template/ng-container</h2><p><strong>（1）ng-template</strong><br><code>&lt;ng-template&gt;</code>是一类html标签，是angular用来解释渲染结构性指令的一种方式，不会直接显示在html,最后会替换成同意义的注释；比如ngif中，当条件为false，angular将移除相应分支元素，取而代之的时一段注释<br>这个标签直接单独使用的时候也有次效果，比如：</p>\n<pre><code>&lt;ng-template&gt;&lt;p&gt;AA&lt;/p&gt;&lt;/ng-template&gt;\n</code></pre><p>包裹的元素内容在渲染时会消失，而代之的是注释</p>\n<p><strong>（2）ng-container</strong><br><code>&lt;ng-container&gt;</code>是一种不影响当前样式/布局的组合元素,angular只是用它来包裹控制内部元素的显示不显示，最后是不会添加渲染到DOM树上的，也不会有注释，使用起来就像普通语言中的if条件一样；它可直接包裹任何元素，包括文本</p>\n<pre><code>&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *ngIf=&quot;hero&quot;&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n</code></pre><p>有些元素不能直接使用其他标签包裹，比如select中的option，必须和select挨着，否则会出问题；这是不能使用ngif或ng-template，但可以使用ng-container，它不会有副作用，因为最后都会移除掉</p>\n<pre><code>&lt;select [(ngModel)]=&quot;hero&quot;&gt;\n  &lt;ng-container *ngFor=&quot;let h of heroes&quot;&gt;\n    &lt;ng-container *ngIf=&quot;showSad || h.emotion !== &apos;sad&apos;&quot;&gt;\n      &lt;option [ngValue]=&quot;h&quot;&gt;{{h.name}} ({{h.emotion}})&lt;/option&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n</code></pre><p>会根据heros动态显示option,而所有的ng-container标签最后都会移除，否则会影响option显示</p>\n<h2 id=\"自定义结构指令\"><a href=\"#自定义结构指令\" class=\"headerlink\" title=\"自定义结构指令\"></a>自定义结构指令</h2><p>指令作用：使用数字来控制元素的增加和移除，类似于ngIf，接受源字符串，当输入是数字时添加；输入是非数字或空串，移除宿主元素</p>\n<pre><code>import { Directive, Input, TemplateRef, ViewContainerRef} from &apos;@angular/core&apos;;\n\n@Directive({\n  selector: &apos;[numIf]&apos;\n})\nexport class NumIfDirective {\n  private hasView = false;\n\n  constructor(private templateRef: TemplateRef&lt;any&gt;,\n              private viewContainer: ViewContainerRef) {\n\n  }\n\n  @Input() set numIf(condition: any) {\n    if (condition &amp;&amp; !isNaN(condition) &amp;&amp; !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (isNaN(condition) &amp;&amp; this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n\n}\n</code></pre><p>使用的地方</p>\n<pre><code>&lt;div&gt;\n  &lt;label&gt;请输入： &lt;/label&gt;\n  &lt;input type=&quot;text&quot; name=&quot;input&quot; [(ngModel)]=&quot;myValue&quot;&gt;\n&lt;/div&gt;\n&lt;p *numIf=&quot;myValue&quot;&gt;输入的值是： {{myValue}}&lt;/p&gt;\n</code></pre><p>效果如下：</p>\n<p><img src=\"/images/construct-directive01.png\"><img src=\"/images/construct-directive02.png\"></p>\n<h5 id=\"其他，一些好东西：\"><a href=\"#其他，一些好东西：\" class=\"headerlink\" title=\"其他，一些好东西：\"></a>其他，一些好东西：</h5><p>1 . 自定义结构指令里头，有几个新的概念，这里简单说一下</p>\n<ul>\n<li>embedview,内嵌视图</li>\n<li>TemplateRef，内嵌视图创建模板，存有指令宿主元素模板</li>\n<li>viewContainer,视图容器,view列表</li>\n<li>viewcontainerRef,描绘视图容器，用于管理container,可同时创建内嵌view和组件视图，类里有不同的方法来创建，还有一个container的锚点，用于指定容器，可当做列表的头地址，新创建的view一个个作为兄弟成员存放，方便管理；类中injector存有TemplateRef</li>\n</ul>\n<p>几个概念的大概关系如下：<br><img src=\"/images/embedview.jpg\" alt=\"embedview\"></p>\n","site":{"data":{}},"excerpt":"<p>结构型指令可以很方便的DOM结构树，Angular有一个强力的模板引擎来支持这一些，比如：添加、移除或维护DOM元素<br>","more":"<br>例如：</p>\n<pre><code>&lt;div *ngIf=&quot;hero&quot; &gt;{{hero.name}}&lt;/div&gt;\n</code></pre><h2 id=\"内置结构指令\"><a href=\"#内置结构指令\" class=\"headerlink\" title=\"内置结构指令\"></a>内置结构指令</h2><p><strong>（1）NgIf</strong></p>\n<pre><code>&lt;div *ngIf=&quot;hero&quot; &gt;{{hero.name}}&lt;/div&gt;\n</code></pre><p>接受一个条件值，当条件为假时，从DOM中移除它的宿主元素，取消它监听过的那些DOM事件，从Angular变更检测中移除该组件，并销毁它，DOM节点可以被当做垃圾收集起来，并且<br>释放它们占用的内存；否则，则添加它们<br>解开语法糖：</p>\n<pre><code>&lt;div *ngIf=&quot;hero&quot; class=&quot;active&quot;&gt;{{hero.name}}&lt;/div&gt;\n--&gt;\n&lt;div template=&quot;ngIf hero&quot; class=&quot;active&quot;&gt;{{hero.name}}&lt;/div&gt;\n--&gt;\n&lt;ng-template [ngIf]=&quot;hero&quot;&gt;\n  &lt;div class=&quot;active&quot;&gt;{{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n</code></pre><blockquote>\n<p>上述解开的形式不会真的渲染出来，angular渲染时会移除ng-template，并辅以标记性注释占位，真正添加到DOM树里的是里面的div部分</p>\n</blockquote>\n<p><strong>（2）NgFor</strong></p>\n<pre><code>&lt;div *ngFor=&quot;let hero of heroes&quot;&gt;{{hero.name}}&lt;/div&gt;\n</code></pre><p>指令接受一个模板表达式，对数据列表进行迭代，应用于宿主元素，并将宿主元素及其子元素一起克隆多份置于DOM树上<br>解开语法糖：</p>\n<pre><code>&lt;div *ngFor=&quot;let hero of heroes; let i=index; let odd=odd; trackBy: trackById&quot; [class.odd]=&quot;odd&quot;&gt;\n  ({{i}}) {{hero.name}}\n&lt;/div&gt;\n--&gt;\n&lt;div template=&quot;ngFor let hero of heroes; let i=index; let odd=odd; trackBy: trackById&quot; [class.odd]=&quot;odd&quot;&gt;\n  ({{i}}) {{hero.name}}\n&lt;/div&gt;\n--&gt;\n&lt;ng-template ngFor let-hero [ngForOf]=&quot;heroes&quot; let-i=&quot;index&quot; let-odd=&quot;odd&quot; [ngForTrackBy]=&quot;trackById&quot;&gt;\n  &lt;div [class.odd]=&quot;odd&quot;&gt;({{i}}) {{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n</code></pre><p>这个比较复杂：</p>\n<ul>\n<li>let关键字声明一个模板输入变量，本例中就是hero、i和odd； 解析器会把let hero、let i和let odd翻译成命名变量let-hero、let-i和let-odd</li>\n<li>微语法解析器接收of和trackby，把它们首字母大写（of -&gt; Of, trackBy -&gt; TrackBy）， 并且给它们加上指令的属性名（ngFor）前缀，最终生成的名字是ngForOf和ngForTrackBy</li>\n<li>两个NgFor的输入属性分别是，列表heroes，track-by函数是trackById</li>\n</ul>\n<p>NgFor指令在列表上循环，每个循环中都会设置和重置它自己的上下文对象上的属性。 这些属性包括index和odd以及一个特殊的属性名$implicit（隐式变量，let-hero）</p>\n<p><strong>（3）NgSwitch</strong></p>\n<pre><code>&lt;div [ngSwitch]=&quot;hero?.emotion&quot;&gt;\n  &lt;happy-hero    *ngSwitchCase=&quot;&apos;happy&apos;&quot;    [hero]=&quot;hero&quot;&gt;&lt;/happy-hero&gt;\n  &lt;sad-hero      *ngSwitchCase=&quot;&apos;sad&apos;&quot;      [hero]=&quot;hero&quot;&gt;&lt;/sad-hero&gt;\n  &lt;confused-hero *ngSwitchCase=&quot;&apos;confused&apos;&quot; [hero]=&quot;hero&quot;&gt;&lt;/confused-hero&gt;\n  &lt;unknown-hero  *ngSwitchDefault           [hero]=&quot;hero&quot;&gt;&lt;/unknown-hero&gt;\n&lt;/div&gt;\n</code></pre><p>NgSwitch不是结构指令，只是属性指令，用来接受“状态值”；NgSwitchCase和NgSwitchDefault是结构型指令，用来根据状态来匹配显示不同的分支DOM,用法额原理都类似于NGIF<br>解开语法糖：</p>\n<pre><code>&lt;div [ngSwitch]=&quot;hero?.emotion&quot;&gt;\n  &lt;ng-template [ngSwitchCase]=&quot;&apos;happy&apos;&quot;&gt;\n    &lt;happy-hero [hero]=&quot;hero&quot;&gt;&lt;/happy-hero&gt;\n  &lt;/ng-template&gt;\n  &lt;ng-template [ngSwitchCase]=&quot;&apos;sad&apos;&quot;&gt;\n    &lt;sad-hero [hero]=&quot;hero&quot;&gt;&lt;/sad-hero&gt;\n  &lt;/ng-template&gt;\n  &lt;ng-template [ngSwitchCase]=&quot;&apos;confused&apos;&quot;&gt;\n    &lt;confused-hero [hero]=&quot;hero&quot;&gt;&lt;/confused-hero&gt;\n  &lt;/ng-template &gt;\n  &lt;ng-template ngSwitchDefault&gt;\n    &lt;unknown-hero [hero]=&quot;hero&quot;&gt;&lt;/unknown-hero&gt;\n  &lt;/ng-template&gt;\n&lt;/div&gt;\n</code></pre><blockquote>\n<p>注意：</p>\n<ul>\n<li>模板输入变量时一个模块实例的变量值，可以使用到当前实例中；而模板引用变量时引用的元素，代表的时那个元素本身，可在当前整个文档中使用；两种有不同的命名空间</li>\n<li>一个元素不同时使用两个结构型实例</li>\n</ul>\n</blockquote>\n<h2 id=\"ng-template-ng-container\"><a href=\"#ng-template-ng-container\" class=\"headerlink\" title=\"ng-template/ng-container\"></a>ng-template/ng-container</h2><p><strong>（1）ng-template</strong><br><code>&lt;ng-template&gt;</code>是一类html标签，是angular用来解释渲染结构性指令的一种方式，不会直接显示在html,最后会替换成同意义的注释；比如ngif中，当条件为false，angular将移除相应分支元素，取而代之的时一段注释<br>这个标签直接单独使用的时候也有次效果，比如：</p>\n<pre><code>&lt;ng-template&gt;&lt;p&gt;AA&lt;/p&gt;&lt;/ng-template&gt;\n</code></pre><p>包裹的元素内容在渲染时会消失，而代之的是注释</p>\n<p><strong>（2）ng-container</strong><br><code>&lt;ng-container&gt;</code>是一种不影响当前样式/布局的组合元素,angular只是用它来包裹控制内部元素的显示不显示，最后是不会添加渲染到DOM树上的，也不会有注释，使用起来就像普通语言中的if条件一样；它可直接包裹任何元素，包括文本</p>\n<pre><code>&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *ngIf=&quot;hero&quot;&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n</code></pre><p>有些元素不能直接使用其他标签包裹，比如select中的option，必须和select挨着，否则会出问题；这是不能使用ngif或ng-template，但可以使用ng-container，它不会有副作用，因为最后都会移除掉</p>\n<pre><code>&lt;select [(ngModel)]=&quot;hero&quot;&gt;\n  &lt;ng-container *ngFor=&quot;let h of heroes&quot;&gt;\n    &lt;ng-container *ngIf=&quot;showSad || h.emotion !== &apos;sad&apos;&quot;&gt;\n      &lt;option [ngValue]=&quot;h&quot;&gt;{{h.name}} ({{h.emotion}})&lt;/option&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n</code></pre><p>会根据heros动态显示option,而所有的ng-container标签最后都会移除，否则会影响option显示</p>\n<h2 id=\"自定义结构指令\"><a href=\"#自定义结构指令\" class=\"headerlink\" title=\"自定义结构指令\"></a>自定义结构指令</h2><p>指令作用：使用数字来控制元素的增加和移除，类似于ngIf，接受源字符串，当输入是数字时添加；输入是非数字或空串，移除宿主元素</p>\n<pre><code>import { Directive, Input, TemplateRef, ViewContainerRef} from &apos;@angular/core&apos;;\n\n@Directive({\n  selector: &apos;[numIf]&apos;\n})\nexport class NumIfDirective {\n  private hasView = false;\n\n  constructor(private templateRef: TemplateRef&lt;any&gt;,\n              private viewContainer: ViewContainerRef) {\n\n  }\n\n  @Input() set numIf(condition: any) {\n    if (condition &amp;&amp; !isNaN(condition) &amp;&amp; !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (isNaN(condition) &amp;&amp; this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n\n}\n</code></pre><p>使用的地方</p>\n<pre><code>&lt;div&gt;\n  &lt;label&gt;请输入： &lt;/label&gt;\n  &lt;input type=&quot;text&quot; name=&quot;input&quot; [(ngModel)]=&quot;myValue&quot;&gt;\n&lt;/div&gt;\n&lt;p *numIf=&quot;myValue&quot;&gt;输入的值是： {{myValue}}&lt;/p&gt;\n</code></pre><p>效果如下：</p>\n<p><img src=\"/images/construct-directive01.png\"><img src=\"/images/construct-directive02.png\"></p>\n<h5 id=\"其他，一些好东西：\"><a href=\"#其他，一些好东西：\" class=\"headerlink\" title=\"其他，一些好东西：\"></a>其他，一些好东西：</h5><p>1 . 自定义结构指令里头，有几个新的概念，这里简单说一下</p>\n<ul>\n<li>embedview,内嵌视图</li>\n<li>TemplateRef，内嵌视图创建模板，存有指令宿主元素模板</li>\n<li>viewContainer,视图容器,view列表</li>\n<li>viewcontainerRef,描绘视图容器，用于管理container,可同时创建内嵌view和组件视图，类里有不同的方法来创建，还有一个container的锚点，用于指定容器，可当做列表的头地址，新创建的view一个个作为兄弟成员存放，方便管理；类中injector存有TemplateRef</li>\n</ul>\n<p>几个概念的大概关系如下：<br><img src=\"/images/embedview.jpg\" alt=\"embedview\"></p>"},{"title":"Angular-Http","date":"2017-08-27T04:26:40.000Z","comments":1,"_content":"\n前端应用需要通过http协议与后端服务器通讯,现代浏览器支持使用两种不同的 API 发起 HTTP 请求：XMLHttpRequest 接口和 fetch() API。\n<!--more-->\n@angular/common/http中的HttpClient类(旧版的时Http)，Angular 为应用程序提供了一个简化的 API 来实现 HTTP 功能。它基于浏览器提供的XMLHttpRequest接口。 HttpClient带来的其它优点包括：可测试性、强类型的请求和响应对象、发起请求与接收响应时的拦截器支持，以及更好的、基于可观察（Observable）对象的错误处理机制\n\n### 引入Http模块\n在应用根模块引入一次即可，这样可在全应用范围内可用\n\n    import {HttpClientModule} from '@angular/common/http';\n\n    @NgModule({\n      imports: [\n        BrowserModule,\n        HttpClientModule,\n      ],\n    })\n    export class AppModule {}\n\n引入之后，在应用的各个组件和服务里就可以通过依赖注入来使用此服务了\n\n### 基本的应用\n**（1）获取数据**\n基本格式：\n\n    http.get<ItemsResponse>(url).subscribe(\n                 // Successful responses call the first callback.\n        data => {...},\n                // Errors will call this callback instead:\n        err => {\n          console.log('Something went wrong!');\n        }\n      });\n\n比如：\n\n    this.http.get('/api/items').subscribe(data => {\n      this.results = data['results'];\n    });\n\n限制强类型参数，可直接使用.好获取响应体\n\n    interface ItemsResponse {\n      results: string[];\n    }\n    http.get<ItemsResponse>('/api/items').subscribe(data => {\n      this.results = data.results;\n    });\n\n读取完整的响应体，包括特殊的响应头或状态码\n\n    http.get<MyJsonData>('/data.json', {observe: 'response'})\n      .subscribe(resp => {\n        // Here, resp is of type HttpResponse<MyJsonData>.\n        // You can inspect its headers:\n        console.log(resp.headers.get('X-Custom-Header'));\n        // And access the body directly, which is typed as MyJsonData as requested.\n        console.log(resp.body.someField);\n      });\n\n获取错误信息\n\n    http.get<ItemsResponse>('/api/items').subscribe(\n      \tdata => {...},\n        (err: HttpErrorResponse) => {\n          if (err.error instanceof Error) {\n            // A client-side or network error occurred..\n            console.log('An error occurred:', err.error.message);\n          } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong,\n            console.log(`Backend returned code ${err.status}, body was: ${err.error}`);\n          }\n        }\n      });\n\n请求重试\n\n    import 'rxjs/add/operator/retry';\n    http.get<ItemsResponse>('/api/items')\n      // Retry this request up to 3 times.\n      .retry(3)\n      // Any errors after the 3rd retry will fall through to the app.\n      .subscribe(...)\n\n请求非 JSON 数据\n\n    http.get('/textfile.txt', {responseType: 'text'})\n      // The Observable returned by get() is of type Observable<string>\n      // because a text response was specified. There's no need to pass\n      // a <string> type parameter to get().\n      .subscribe(data => console.log(data));\n\n\n**（2）设置数据**\n\n    const body = {name: 'Brad'};\n\n    http.post('/api/developers/add', body)\n      .subscribe(...);\n\n注意这个subscribe()方法。 所有从HttpClient返回的可观察对象都是冷的（cold），也就是说，它们只是发起请求的蓝图而已。在我们调用subscribe()之前，什么都不会发生，而当我们每次调用subscribe()时，就会独立发起一次请求。下列代码会使用同样的数据发送两次同样的 POST 请求：\n\n    const req = http.post('/api/items/add', body);\n    req.subscribe();\n    req.subscribe();\n\n请求中添加一个Authorization头\n\nhttp.post('/api/items/add', body, {\n    headers: new HttpHeaders().set('Authorization', 'my-auth-token'),\n  })\n  .subscribe();\n\nURL携带参数\n\nhttp.post('/api/items/add', body, {\n    params: new HttpParams().set('id', '3'),\n  })\n  .subscribe();\n\n同下\n\n    http.post('/api/items/add?id=3', body)\n      .subscribe();\n\n\n**（3）删除数据**\n\n    http.delete('/api/developers', id)\n      .subscribe(...);\n\n### 拦截器\n@angular/common/http的主要特性之一是拦截器，它能声明一些拦截器，拦在应用和后端之间。当应用程序发起一个请求时，拦截器可以在请求被发往服务器之前先转换这个请求。并且在应用看到服务器发回来的响应之前，转换这个响应。这对于处理包括认证和记录日志在内的一系列工作都非常有用\n\n> 可同事拦截请求消息和响应消息\n\n具体可参考文档[HttpClient 库](https://www.angular.cn/guide/http)\n","source":"_posts/2017-08-27-anular-http.md","raw":"---\ntitle: Angular-Http\ndate: 2017-08-27 12:26:40\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n前端应用需要通过http协议与后端服务器通讯,现代浏览器支持使用两种不同的 API 发起 HTTP 请求：XMLHttpRequest 接口和 fetch() API。\n<!--more-->\n@angular/common/http中的HttpClient类(旧版的时Http)，Angular 为应用程序提供了一个简化的 API 来实现 HTTP 功能。它基于浏览器提供的XMLHttpRequest接口。 HttpClient带来的其它优点包括：可测试性、强类型的请求和响应对象、发起请求与接收响应时的拦截器支持，以及更好的、基于可观察（Observable）对象的错误处理机制\n\n### 引入Http模块\n在应用根模块引入一次即可，这样可在全应用范围内可用\n\n    import {HttpClientModule} from '@angular/common/http';\n\n    @NgModule({\n      imports: [\n        BrowserModule,\n        HttpClientModule,\n      ],\n    })\n    export class AppModule {}\n\n引入之后，在应用的各个组件和服务里就可以通过依赖注入来使用此服务了\n\n### 基本的应用\n**（1）获取数据**\n基本格式：\n\n    http.get<ItemsResponse>(url).subscribe(\n                 // Successful responses call the first callback.\n        data => {...},\n                // Errors will call this callback instead:\n        err => {\n          console.log('Something went wrong!');\n        }\n      });\n\n比如：\n\n    this.http.get('/api/items').subscribe(data => {\n      this.results = data['results'];\n    });\n\n限制强类型参数，可直接使用.好获取响应体\n\n    interface ItemsResponse {\n      results: string[];\n    }\n    http.get<ItemsResponse>('/api/items').subscribe(data => {\n      this.results = data.results;\n    });\n\n读取完整的响应体，包括特殊的响应头或状态码\n\n    http.get<MyJsonData>('/data.json', {observe: 'response'})\n      .subscribe(resp => {\n        // Here, resp is of type HttpResponse<MyJsonData>.\n        // You can inspect its headers:\n        console.log(resp.headers.get('X-Custom-Header'));\n        // And access the body directly, which is typed as MyJsonData as requested.\n        console.log(resp.body.someField);\n      });\n\n获取错误信息\n\n    http.get<ItemsResponse>('/api/items').subscribe(\n      \tdata => {...},\n        (err: HttpErrorResponse) => {\n          if (err.error instanceof Error) {\n            // A client-side or network error occurred..\n            console.log('An error occurred:', err.error.message);\n          } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong,\n            console.log(`Backend returned code ${err.status}, body was: ${err.error}`);\n          }\n        }\n      });\n\n请求重试\n\n    import 'rxjs/add/operator/retry';\n    http.get<ItemsResponse>('/api/items')\n      // Retry this request up to 3 times.\n      .retry(3)\n      // Any errors after the 3rd retry will fall through to the app.\n      .subscribe(...)\n\n请求非 JSON 数据\n\n    http.get('/textfile.txt', {responseType: 'text'})\n      // The Observable returned by get() is of type Observable<string>\n      // because a text response was specified. There's no need to pass\n      // a <string> type parameter to get().\n      .subscribe(data => console.log(data));\n\n\n**（2）设置数据**\n\n    const body = {name: 'Brad'};\n\n    http.post('/api/developers/add', body)\n      .subscribe(...);\n\n注意这个subscribe()方法。 所有从HttpClient返回的可观察对象都是冷的（cold），也就是说，它们只是发起请求的蓝图而已。在我们调用subscribe()之前，什么都不会发生，而当我们每次调用subscribe()时，就会独立发起一次请求。下列代码会使用同样的数据发送两次同样的 POST 请求：\n\n    const req = http.post('/api/items/add', body);\n    req.subscribe();\n    req.subscribe();\n\n请求中添加一个Authorization头\n\nhttp.post('/api/items/add', body, {\n    headers: new HttpHeaders().set('Authorization', 'my-auth-token'),\n  })\n  .subscribe();\n\nURL携带参数\n\nhttp.post('/api/items/add', body, {\n    params: new HttpParams().set('id', '3'),\n  })\n  .subscribe();\n\n同下\n\n    http.post('/api/items/add?id=3', body)\n      .subscribe();\n\n\n**（3）删除数据**\n\n    http.delete('/api/developers', id)\n      .subscribe(...);\n\n### 拦截器\n@angular/common/http的主要特性之一是拦截器，它能声明一些拦截器，拦在应用和后端之间。当应用程序发起一个请求时，拦截器可以在请求被发往服务器之前先转换这个请求。并且在应用看到服务器发回来的响应之前，转换这个响应。这对于处理包括认证和记录日志在内的一系列工作都非常有用\n\n> 可同事拦截请求消息和响应消息\n\n具体可参考文档[HttpClient 库](https://www.angular.cn/guide/http)\n","slug":"anular-http","published":1,"updated":"2017-08-27T04:29:05.781Z","layout":"post","photos":[],"link":"","_id":"cjqwe425c000jor0b4q8znuv0","content":"<p>前端应用需要通过http协议与后端服务器通讯,现代浏览器支持使用两种不同的 API 发起 HTTP 请求：XMLHttpRequest 接口和 fetch() API。<br><a id=\"more\"></a><br>@angular/common/http中的HttpClient类(旧版的时Http)，Angular 为应用程序提供了一个简化的 API 来实现 HTTP 功能。它基于浏览器提供的XMLHttpRequest接口。 HttpClient带来的其它优点包括：可测试性、强类型的请求和响应对象、发起请求与接收响应时的拦截器支持，以及更好的、基于可观察（Observable）对象的错误处理机制</p>\n<h3 id=\"引入Http模块\"><a href=\"#引入Http模块\" class=\"headerlink\" title=\"引入Http模块\"></a>引入Http模块</h3><p>在应用根模块引入一次即可，这样可在全应用范围内可用</p>\n<pre><code>import {HttpClientModule} from &apos;@angular/common/http&apos;;\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n})\nexport class AppModule {}\n</code></pre><p>引入之后，在应用的各个组件和服务里就可以通过依赖注入来使用此服务了</p>\n<h3 id=\"基本的应用\"><a href=\"#基本的应用\" class=\"headerlink\" title=\"基本的应用\"></a>基本的应用</h3><p><strong>（1）获取数据</strong><br>基本格式：</p>\n<pre><code>http.get&lt;ItemsResponse&gt;(url).subscribe(\n             // Successful responses call the first callback.\n    data =&gt; {...},\n            // Errors will call this callback instead:\n    err =&gt; {\n      console.log(&apos;Something went wrong!&apos;);\n    }\n  });\n</code></pre><p>比如：</p>\n<pre><code>this.http.get(&apos;/api/items&apos;).subscribe(data =&gt; {\n  this.results = data[&apos;results&apos;];\n});\n</code></pre><p>限制强类型参数，可直接使用.好获取响应体</p>\n<pre><code>interface ItemsResponse {\n  results: string[];\n}\nhttp.get&lt;ItemsResponse&gt;(&apos;/api/items&apos;).subscribe(data =&gt; {\n  this.results = data.results;\n});\n</code></pre><p>读取完整的响应体，包括特殊的响应头或状态码</p>\n<pre><code>http.get&lt;MyJsonData&gt;(&apos;/data.json&apos;, {observe: &apos;response&apos;})\n  .subscribe(resp =&gt; {\n    // Here, resp is of type HttpResponse&lt;MyJsonData&gt;.\n    // You can inspect its headers:\n    console.log(resp.headers.get(&apos;X-Custom-Header&apos;));\n    // And access the body directly, which is typed as MyJsonData as requested.\n    console.log(resp.body.someField);\n  });\n</code></pre><p>获取错误信息</p>\n<pre><code>http.get&lt;ItemsResponse&gt;(&apos;/api/items&apos;).subscribe(\n      data =&gt; {...},\n    (err: HttpErrorResponse) =&gt; {\n      if (err.error instanceof Error) {\n        // A client-side or network error occurred..\n        console.log(&apos;An error occurred:&apos;, err.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.log(`Backend returned code ${err.status}, body was: ${err.error}`);\n      }\n    }\n  });\n</code></pre><p>请求重试</p>\n<pre><code>import &apos;rxjs/add/operator/retry&apos;;\nhttp.get&lt;ItemsResponse&gt;(&apos;/api/items&apos;)\n  // Retry this request up to 3 times.\n  .retry(3)\n  // Any errors after the 3rd retry will fall through to the app.\n  .subscribe(...)\n</code></pre><p>请求非 JSON 数据</p>\n<pre><code>http.get(&apos;/textfile.txt&apos;, {responseType: &apos;text&apos;})\n  // The Observable returned by get() is of type Observable&lt;string&gt;\n  // because a text response was specified. There&apos;s no need to pass\n  // a &lt;string&gt; type parameter to get().\n  .subscribe(data =&gt; console.log(data));\n</code></pre><p><strong>（2）设置数据</strong></p>\n<pre><code>const body = {name: &apos;Brad&apos;};\n\nhttp.post(&apos;/api/developers/add&apos;, body)\n  .subscribe(...);\n</code></pre><p>注意这个subscribe()方法。 所有从HttpClient返回的可观察对象都是冷的（cold），也就是说，它们只是发起请求的蓝图而已。在我们调用subscribe()之前，什么都不会发生，而当我们每次调用subscribe()时，就会独立发起一次请求。下列代码会使用同样的数据发送两次同样的 POST 请求：</p>\n<pre><code>const req = http.post(&apos;/api/items/add&apos;, body);\nreq.subscribe();\nreq.subscribe();\n</code></pre><p>请求中添加一个Authorization头</p>\n<p>http.post(‘/api/items/add’, body, {<br>    headers: new HttpHeaders().set(‘Authorization’, ‘my-auth-token’),<br>  })<br>  .subscribe();</p>\n<p>URL携带参数</p>\n<p>http.post(‘/api/items/add’, body, {<br>    params: new HttpParams().set(‘id’, ‘3’),<br>  })<br>  .subscribe();</p>\n<p>同下</p>\n<pre><code>http.post(&apos;/api/items/add?id=3&apos;, body)\n  .subscribe();\n</code></pre><p><strong>（3）删除数据</strong></p>\n<pre><code>http.delete(&apos;/api/developers&apos;, id)\n  .subscribe(...);\n</code></pre><h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>@angular/common/http的主要特性之一是拦截器，它能声明一些拦截器，拦在应用和后端之间。当应用程序发起一个请求时，拦截器可以在请求被发往服务器之前先转换这个请求。并且在应用看到服务器发回来的响应之前，转换这个响应。这对于处理包括认证和记录日志在内的一系列工作都非常有用</p>\n<blockquote>\n<p>可同事拦截请求消息和响应消息</p>\n</blockquote>\n<p>具体可参考文档<a href=\"https://www.angular.cn/guide/http\" target=\"_blank\" rel=\"external\">HttpClient 库</a></p>\n","site":{"data":{}},"excerpt":"<p>前端应用需要通过http协议与后端服务器通讯,现代浏览器支持使用两种不同的 API 发起 HTTP 请求：XMLHttpRequest 接口和 fetch() API。<br>","more":"<br>@angular/common/http中的HttpClient类(旧版的时Http)，Angular 为应用程序提供了一个简化的 API 来实现 HTTP 功能。它基于浏览器提供的XMLHttpRequest接口。 HttpClient带来的其它优点包括：可测试性、强类型的请求和响应对象、发起请求与接收响应时的拦截器支持，以及更好的、基于可观察（Observable）对象的错误处理机制</p>\n<h3 id=\"引入Http模块\"><a href=\"#引入Http模块\" class=\"headerlink\" title=\"引入Http模块\"></a>引入Http模块</h3><p>在应用根模块引入一次即可，这样可在全应用范围内可用</p>\n<pre><code>import {HttpClientModule} from &apos;@angular/common/http&apos;;\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n})\nexport class AppModule {}\n</code></pre><p>引入之后，在应用的各个组件和服务里就可以通过依赖注入来使用此服务了</p>\n<h3 id=\"基本的应用\"><a href=\"#基本的应用\" class=\"headerlink\" title=\"基本的应用\"></a>基本的应用</h3><p><strong>（1）获取数据</strong><br>基本格式：</p>\n<pre><code>http.get&lt;ItemsResponse&gt;(url).subscribe(\n             // Successful responses call the first callback.\n    data =&gt; {...},\n            // Errors will call this callback instead:\n    err =&gt; {\n      console.log(&apos;Something went wrong!&apos;);\n    }\n  });\n</code></pre><p>比如：</p>\n<pre><code>this.http.get(&apos;/api/items&apos;).subscribe(data =&gt; {\n  this.results = data[&apos;results&apos;];\n});\n</code></pre><p>限制强类型参数，可直接使用.好获取响应体</p>\n<pre><code>interface ItemsResponse {\n  results: string[];\n}\nhttp.get&lt;ItemsResponse&gt;(&apos;/api/items&apos;).subscribe(data =&gt; {\n  this.results = data.results;\n});\n</code></pre><p>读取完整的响应体，包括特殊的响应头或状态码</p>\n<pre><code>http.get&lt;MyJsonData&gt;(&apos;/data.json&apos;, {observe: &apos;response&apos;})\n  .subscribe(resp =&gt; {\n    // Here, resp is of type HttpResponse&lt;MyJsonData&gt;.\n    // You can inspect its headers:\n    console.log(resp.headers.get(&apos;X-Custom-Header&apos;));\n    // And access the body directly, which is typed as MyJsonData as requested.\n    console.log(resp.body.someField);\n  });\n</code></pre><p>获取错误信息</p>\n<pre><code>http.get&lt;ItemsResponse&gt;(&apos;/api/items&apos;).subscribe(\n      data =&gt; {...},\n    (err: HttpErrorResponse) =&gt; {\n      if (err.error instanceof Error) {\n        // A client-side or network error occurred..\n        console.log(&apos;An error occurred:&apos;, err.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.log(`Backend returned code ${err.status}, body was: ${err.error}`);\n      }\n    }\n  });\n</code></pre><p>请求重试</p>\n<pre><code>import &apos;rxjs/add/operator/retry&apos;;\nhttp.get&lt;ItemsResponse&gt;(&apos;/api/items&apos;)\n  // Retry this request up to 3 times.\n  .retry(3)\n  // Any errors after the 3rd retry will fall through to the app.\n  .subscribe(...)\n</code></pre><p>请求非 JSON 数据</p>\n<pre><code>http.get(&apos;/textfile.txt&apos;, {responseType: &apos;text&apos;})\n  // The Observable returned by get() is of type Observable&lt;string&gt;\n  // because a text response was specified. There&apos;s no need to pass\n  // a &lt;string&gt; type parameter to get().\n  .subscribe(data =&gt; console.log(data));\n</code></pre><p><strong>（2）设置数据</strong></p>\n<pre><code>const body = {name: &apos;Brad&apos;};\n\nhttp.post(&apos;/api/developers/add&apos;, body)\n  .subscribe(...);\n</code></pre><p>注意这个subscribe()方法。 所有从HttpClient返回的可观察对象都是冷的（cold），也就是说，它们只是发起请求的蓝图而已。在我们调用subscribe()之前，什么都不会发生，而当我们每次调用subscribe()时，就会独立发起一次请求。下列代码会使用同样的数据发送两次同样的 POST 请求：</p>\n<pre><code>const req = http.post(&apos;/api/items/add&apos;, body);\nreq.subscribe();\nreq.subscribe();\n</code></pre><p>请求中添加一个Authorization头</p>\n<p>http.post(‘/api/items/add’, body, {<br>    headers: new HttpHeaders().set(‘Authorization’, ‘my-auth-token’),<br>  })<br>  .subscribe();</p>\n<p>URL携带参数</p>\n<p>http.post(‘/api/items/add’, body, {<br>    params: new HttpParams().set(‘id’, ‘3’),<br>  })<br>  .subscribe();</p>\n<p>同下</p>\n<pre><code>http.post(&apos;/api/items/add?id=3&apos;, body)\n  .subscribe();\n</code></pre><p><strong>（3）删除数据</strong></p>\n<pre><code>http.delete(&apos;/api/developers&apos;, id)\n  .subscribe(...);\n</code></pre><h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>@angular/common/http的主要特性之一是拦截器，它能声明一些拦截器，拦在应用和后端之间。当应用程序发起一个请求时，拦截器可以在请求被发往服务器之前先转换这个请求。并且在应用看到服务器发回来的响应之前，转换这个响应。这对于处理包括认证和记录日志在内的一系列工作都非常有用</p>\n<blockquote>\n<p>可同事拦截请求消息和响应消息</p>\n</blockquote>\n<p>具体可参考文档<a href=\"https://www.angular.cn/guide/http\" target=\"_blank\" rel=\"external\">HttpClient 库</a></p>"},{"title":"Angular/cli-安装部署(ubuntu环境)","date":"2017-07-23T13:51:24.000Z","comments":1,"_content":"\n## 安装angular/cli\n##### 1. npm普通方式\n**(1). 安装升级nodejs**\n进入[nodejs官网](https://nodejs.org/en/download/ \"nodejs官网\")获取所需的版本，鼠标浮动在相应版本上获取下载路径，本机获取的版本时linux-64的：\n<!--more-->\nhttps://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz\n使用wget下载nodejs包\n\n    /home$ wget https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz\n    /home$ tar xvf node-v6.11.1-linux-x64.tar.xz\n\n添加软连接\n\n    /home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/node /usr/local/bin/node\n    /home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/npm /usr/local/bin/npm\n查看版本号：\n\n    /home$ node -v\n    v8.0.0\n    /home$ npm -v\n    5.0.0\n\n**(2). 部署angular/cli**\n全局安装angular/cli，等待安装完成\n\n    /home$ npm install -g @angular/cli\n\n创建链接\n\n    /home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/ng /usr/local/bin/ng\n\nng -v查看是否安装成功，成功则有版本信息\n![angular-cli-01](/images/angular-cli-01.jpg)\n\n> 注意：如果如果之前已存在或安装过，需先清理\nnpm uninstall -g angular-cli\nnpm uninstall --save-dev angular-cli\nnpm cache clean\nnpm uninstall -g @angular/cli\nnpm cache clean\nnpm install -g @angular/cli@latest\n重新安装本地文件\nrm -rf node_modules dist\nnpm install --save-dev @angular/cli@latest\nnpm install\n\n\n##### 2. cnpm普通方式\n使用为国内程序员定制的cnpm安装更为方便\n\n    npm i -g cnpm\n    cnpm i -g @angular/cli\n\n如果如果之前已存在或安装过，需先清理\n\n    npm uninstall -g angular-cli\n    npm cache clean\n    npm prune\n\n## 试用angular/cli\n通过创建一个新项目来试验下刚刚安装的angular/cli工具\n打开终端窗口，运行命令生成新的项目和应用程序框架：\n![angular-cli-02](/images/angular-cli-02.jpg)\n安装依赖包\n\n    cd my-app\n    npm install\n\n启动服务\n\n    ng serve --open\n\nng serve该命令启动服务器，监视您的文件更改，重新构建应用程序;添加--open选项将在构建成功后自动打开您的浏览器进行呈现\n如果想让加载的包更小，可以添加选项prod\n\n    ng serve --prod --open\n\n效果相同：\n![angular-cli-04](/images/angular-cli-04.png)","source":"_posts/2017-07-23-angular-cli-install-deploy.md","raw":"---\ntitle: Angular/cli-安装部署(ubuntu环境)\ndate: 2017-07-23 21:51:24\ntags: Augular\ncategories: 前端工具\ncomments: true\n---\n\n## 安装angular/cli\n##### 1. npm普通方式\n**(1). 安装升级nodejs**\n进入[nodejs官网](https://nodejs.org/en/download/ \"nodejs官网\")获取所需的版本，鼠标浮动在相应版本上获取下载路径，本机获取的版本时linux-64的：\n<!--more-->\nhttps://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz\n使用wget下载nodejs包\n\n    /home$ wget https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz\n    /home$ tar xvf node-v6.11.1-linux-x64.tar.xz\n\n添加软连接\n\n    /home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/node /usr/local/bin/node\n    /home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/npm /usr/local/bin/npm\n查看版本号：\n\n    /home$ node -v\n    v8.0.0\n    /home$ npm -v\n    5.0.0\n\n**(2). 部署angular/cli**\n全局安装angular/cli，等待安装完成\n\n    /home$ npm install -g @angular/cli\n\n创建链接\n\n    /home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/ng /usr/local/bin/ng\n\nng -v查看是否安装成功，成功则有版本信息\n![angular-cli-01](/images/angular-cli-01.jpg)\n\n> 注意：如果如果之前已存在或安装过，需先清理\nnpm uninstall -g angular-cli\nnpm uninstall --save-dev angular-cli\nnpm cache clean\nnpm uninstall -g @angular/cli\nnpm cache clean\nnpm install -g @angular/cli@latest\n重新安装本地文件\nrm -rf node_modules dist\nnpm install --save-dev @angular/cli@latest\nnpm install\n\n\n##### 2. cnpm普通方式\n使用为国内程序员定制的cnpm安装更为方便\n\n    npm i -g cnpm\n    cnpm i -g @angular/cli\n\n如果如果之前已存在或安装过，需先清理\n\n    npm uninstall -g angular-cli\n    npm cache clean\n    npm prune\n\n## 试用angular/cli\n通过创建一个新项目来试验下刚刚安装的angular/cli工具\n打开终端窗口，运行命令生成新的项目和应用程序框架：\n![angular-cli-02](/images/angular-cli-02.jpg)\n安装依赖包\n\n    cd my-app\n    npm install\n\n启动服务\n\n    ng serve --open\n\nng serve该命令启动服务器，监视您的文件更改，重新构建应用程序;添加--open选项将在构建成功后自动打开您的浏览器进行呈现\n如果想让加载的包更小，可以添加选项prod\n\n    ng serve --prod --open\n\n效果相同：\n![angular-cli-04](/images/angular-cli-04.png)","slug":"angular-cli-install-deploy","published":1,"updated":"2017-07-23T17:12:17.371Z","layout":"post","photos":[],"link":"","_id":"cjqwe425f000mor0bnod2dzez","content":"<h2 id=\"安装angular-cli\"><a href=\"#安装angular-cli\" class=\"headerlink\" title=\"安装angular/cli\"></a>安装angular/cli</h2><h5 id=\"1-npm普通方式\"><a href=\"#1-npm普通方式\" class=\"headerlink\" title=\"1. npm普通方式\"></a>1. npm普通方式</h5><p><strong>(1). 安装升级nodejs</strong><br>进入<a href=\"https://nodejs.org/en/download/\" title=\"nodejs官网\" target=\"_blank\" rel=\"external\">nodejs官网</a>获取所需的版本，鼠标浮动在相应版本上获取下载路径，本机获取的版本时linux-64的：<br><a id=\"more\"></a><br><a href=\"https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz\" target=\"_blank\" rel=\"external\">https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz</a><br>使用wget下载nodejs包</p>\n<pre><code>/home$ wget https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz\n/home$ tar xvf node-v6.11.1-linux-x64.tar.xz\n</code></pre><p>添加软连接</p>\n<pre><code>/home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/node /usr/local/bin/node\n/home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/npm /usr/local/bin/npm\n</code></pre><p>查看版本号：</p>\n<pre><code>/home$ node -v\nv8.0.0\n/home$ npm -v\n5.0.0\n</code></pre><p><strong>(2). 部署angular/cli</strong><br>全局安装angular/cli，等待安装完成</p>\n<pre><code>/home$ npm install -g @angular/cli\n</code></pre><p>创建链接</p>\n<pre><code>/home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/ng /usr/local/bin/ng\n</code></pre><p>ng -v查看是否安装成功，成功则有版本信息<br><img src=\"/images/angular-cli-01.jpg\" alt=\"angular-cli-01\"></p>\n<blockquote>\n<p>注意：如果如果之前已存在或安装过，需先清理<br>npm uninstall -g angular-cli<br>npm uninstall –save-dev angular-cli<br>npm cache clean<br>npm uninstall -g @angular/cli<br>npm cache clean<br>npm install -g @angular/cli@latest<br>重新安装本地文件<br>rm -rf node_modules dist<br>npm install –save-dev @angular/cli@latest<br>npm install</p>\n</blockquote>\n<h5 id=\"2-cnpm普通方式\"><a href=\"#2-cnpm普通方式\" class=\"headerlink\" title=\"2. cnpm普通方式\"></a>2. cnpm普通方式</h5><p>使用为国内程序员定制的cnpm安装更为方便</p>\n<pre><code>npm i -g cnpm\ncnpm i -g @angular/cli\n</code></pre><p>如果如果之前已存在或安装过，需先清理</p>\n<pre><code>npm uninstall -g angular-cli\nnpm cache clean\nnpm prune\n</code></pre><h2 id=\"试用angular-cli\"><a href=\"#试用angular-cli\" class=\"headerlink\" title=\"试用angular/cli\"></a>试用angular/cli</h2><p>通过创建一个新项目来试验下刚刚安装的angular/cli工具<br>打开终端窗口，运行命令生成新的项目和应用程序框架：<br><img src=\"/images/angular-cli-02.jpg\" alt=\"angular-cli-02\"><br>安装依赖包</p>\n<pre><code>cd my-app\nnpm install\n</code></pre><p>启动服务</p>\n<pre><code>ng serve --open\n</code></pre><p>ng serve该命令启动服务器，监视您的文件更改，重新构建应用程序;添加–open选项将在构建成功后自动打开您的浏览器进行呈现<br>如果想让加载的包更小，可以添加选项prod</p>\n<pre><code>ng serve --prod --open\n</code></pre><p>效果相同：<br><img src=\"/images/angular-cli-04.png\" alt=\"angular-cli-04\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装angular-cli\"><a href=\"#安装angular-cli\" class=\"headerlink\" title=\"安装angular/cli\"></a>安装angular/cli</h2><h5 id=\"1-npm普通方式\"><a href=\"#1-npm普通方式\" class=\"headerlink\" title=\"1. npm普通方式\"></a>1. npm普通方式</h5><p><strong>(1). 安装升级nodejs</strong><br>进入<a href=\"https://nodejs.org/en/download/\" title=\"nodejs官网\" target=\"_blank\" rel=\"external\">nodejs官网</a>获取所需的版本，鼠标浮动在相应版本上获取下载路径，本机获取的版本时linux-64的：<br>","more":"<br><a href=\"https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz\" target=\"_blank\" rel=\"external\">https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz</a><br>使用wget下载nodejs包</p>\n<pre><code>/home$ wget https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz\n/home$ tar xvf node-v6.11.1-linux-x64.tar.xz\n</code></pre><p>添加软连接</p>\n<pre><code>/home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/node /usr/local/bin/node\n/home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/npm /usr/local/bin/npm\n</code></pre><p>查看版本号：</p>\n<pre><code>/home$ node -v\nv8.0.0\n/home$ npm -v\n5.0.0\n</code></pre><p><strong>(2). 部署angular/cli</strong><br>全局安装angular/cli，等待安装完成</p>\n<pre><code>/home$ npm install -g @angular/cli\n</code></pre><p>创建链接</p>\n<pre><code>/home$ sudo ln -s /home/node-v6.11.1-linux-x64/bin/ng /usr/local/bin/ng\n</code></pre><p>ng -v查看是否安装成功，成功则有版本信息<br><img src=\"/images/angular-cli-01.jpg\" alt=\"angular-cli-01\"></p>\n<blockquote>\n<p>注意：如果如果之前已存在或安装过，需先清理<br>npm uninstall -g angular-cli<br>npm uninstall –save-dev angular-cli<br>npm cache clean<br>npm uninstall -g @angular/cli<br>npm cache clean<br>npm install -g @angular/cli@latest<br>重新安装本地文件<br>rm -rf node_modules dist<br>npm install –save-dev @angular/cli@latest<br>npm install</p>\n</blockquote>\n<h5 id=\"2-cnpm普通方式\"><a href=\"#2-cnpm普通方式\" class=\"headerlink\" title=\"2. cnpm普通方式\"></a>2. cnpm普通方式</h5><p>使用为国内程序员定制的cnpm安装更为方便</p>\n<pre><code>npm i -g cnpm\ncnpm i -g @angular/cli\n</code></pre><p>如果如果之前已存在或安装过，需先清理</p>\n<pre><code>npm uninstall -g angular-cli\nnpm cache clean\nnpm prune\n</code></pre><h2 id=\"试用angular-cli\"><a href=\"#试用angular-cli\" class=\"headerlink\" title=\"试用angular/cli\"></a>试用angular/cli</h2><p>通过创建一个新项目来试验下刚刚安装的angular/cli工具<br>打开终端窗口，运行命令生成新的项目和应用程序框架：<br><img src=\"/images/angular-cli-02.jpg\" alt=\"angular-cli-02\"><br>安装依赖包</p>\n<pre><code>cd my-app\nnpm install\n</code></pre><p>启动服务</p>\n<pre><code>ng serve --open\n</code></pre><p>ng serve该命令启动服务器，监视您的文件更改，重新构建应用程序;添加–open选项将在构建成功后自动打开您的浏览器进行呈现<br>如果想让加载的包更小，可以添加选项prod</p>\n<pre><code>ng serve --prod --open\n</code></pre><p>效果相同：<br><img src=\"/images/angular-cli-04.png\" alt=\"angular-cli-04\"></p>"},{"title":"Angular-生命周期钩子","date":"2017-07-23T14:58:58.000Z","comments":1,"_content":"\n在开发angular应用书写组件或者指令的时候，我们从来没有去手动的new或者deletet来管理它们的实例，angular系统管理着这一切\n组件/指令像普通的事物一样，有着自己的声明周期：生，变更，销毁..等等，这个过程有angular自动管理着\n<!--more-->\n\n## 生命周期钩子\n生命周期显而易见，但是当用户想在这个过程中做点什么呢？于是angular便在生命过程中的关键时间点上提供了相应的介入接口和钩子方法，让用户可以介入其中\n两个概念：\n- 接口,生命周期的暴露点，开发介入点，比如初始化接口：OnInit\n- 钩子，接口对应的函数方法，供开发使用，只要实现相应的钩子方法即看介入对应的生命周期点，比如初始化钩子：ngOnInit()\n\n> 接口和钩子是一一对应的，钩子方式是：ng接口名，比如OnInit和ngOnInit()，在实现时继承相应接口并实现对应钩子函数即可，当然，接口继承并非强制型的，可以直接实现钩子函数，当清晰起见，最后先继承接口再实现钩子\n\n## 钩子\n在组件和指令实例的生命周期里，有多个不同的生命点，angular都为其设置了接口和钩子，按照时间先后有\n\n| 生命点接口 | 生命周期钩子 | 调用方式 |\n| :------: |:---------------:| :-----:|\n| OnChanges| ngOnChanges() | 简单输入变量本值发生变化时调用，第一次调用在OnInit之前 |\n| OnInit | ngOnInit（）| 初始化时调用 |\n| DoCheck | ngDoCheck（）| 周期更改检测，每次变更周期都会调用 |\n| AfterContentInit | ngAfterContentInit（）| 内容完成初始化投影后调用 |\n| AfterContentChecked | ngAfterContentChecked（）| 紧跟上一条完成初始化投影后调用，以及每次变更周期在DoCheck之后调用 |\n| AfterViewInit | ngAfterViewInit（）| 组件和子组件完成视图初始化时调用 |\n| AfterViewChecked | ngAfterViewChecked（）| 紧跟上一条完成组件和子组件完成视图后调用，每次变更周期在AfterContentChecked之后调用 |\n| OnDestroy | ngOnDestroy（）| 销毁时调用 |\n\n> 生命周期各个钩子的调用都在构造函数之后\n\n## 生命钩子的使用\n**（1）OnInit**\n实现组件初始化时需要作的复杂逻辑处理，比如和服务端进行数据交互等，保持构造函数的简单，方便测试\n\n**（2）OnDestroy**\n实例销毁时调用，用于在组件或指令销毁时的资源回收，比如：取消可观察对象的订阅，停止定时器等，特别时调用第三方库时的内存回收\n一个特别的例子，使用echart等第三方库封装图表控件的时候，在初始化图表后，销毁实例时务必调用相关借口释放内存，否则浏览器内存泄露，会变慢，这些工作一般都放在ngOnDestroy（）里来做\n\n**（3）OnChanges**\n一般用于父子组件的交互和通讯，可用于子组件对输入变量的变更检测，以便采取一定的行动，当然变更检测能检测到的也只是常规变量引用的值变化，对于对象/组件这种结构型变量的成员变化则无法检测\nngOnChanges（）钩子函数接受一个数组变量，存放所有输入变量的变化信息，每个变量有3个字段：\n\"输入变量名\" : {\"当前值\"：\"\",\"是否首次变更\": true,\"上一次的值\"：\"\"}\n\n    import { Component, OnInit, Input, SimpleChanges} from '@angular/core';\n    @Input() inputValue : any = '';\n    ngOnChanges(changes: SimpleChanges) {\n        console.log(changes);\n    }\n控制台打印：\n![onchanges--](/images/onchanges.png)\n\n**（4）DoCheck**\n每个变更周期都会调用，可用于检测各种变量的变化，但调用次数频繁，且大部分是无用调用，所以使用时需谨慎，实现逻辑需简单\n\n**（5）AfterViewInit**\n一般使用于完成子组件初始化后需要做的工作","source":"_posts/2017-07-23-angular-lifecysle-hook.md","raw":"---\ntitle: Angular-生命周期钩子\ndate: 2017-07-23 22:58:58\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n在开发angular应用书写组件或者指令的时候，我们从来没有去手动的new或者deletet来管理它们的实例，angular系统管理着这一切\n组件/指令像普通的事物一样，有着自己的声明周期：生，变更，销毁..等等，这个过程有angular自动管理着\n<!--more-->\n\n## 生命周期钩子\n生命周期显而易见，但是当用户想在这个过程中做点什么呢？于是angular便在生命过程中的关键时间点上提供了相应的介入接口和钩子方法，让用户可以介入其中\n两个概念：\n- 接口,生命周期的暴露点，开发介入点，比如初始化接口：OnInit\n- 钩子，接口对应的函数方法，供开发使用，只要实现相应的钩子方法即看介入对应的生命周期点，比如初始化钩子：ngOnInit()\n\n> 接口和钩子是一一对应的，钩子方式是：ng接口名，比如OnInit和ngOnInit()，在实现时继承相应接口并实现对应钩子函数即可，当然，接口继承并非强制型的，可以直接实现钩子函数，当清晰起见，最后先继承接口再实现钩子\n\n## 钩子\n在组件和指令实例的生命周期里，有多个不同的生命点，angular都为其设置了接口和钩子，按照时间先后有\n\n| 生命点接口 | 生命周期钩子 | 调用方式 |\n| :------: |:---------------:| :-----:|\n| OnChanges| ngOnChanges() | 简单输入变量本值发生变化时调用，第一次调用在OnInit之前 |\n| OnInit | ngOnInit（）| 初始化时调用 |\n| DoCheck | ngDoCheck（）| 周期更改检测，每次变更周期都会调用 |\n| AfterContentInit | ngAfterContentInit（）| 内容完成初始化投影后调用 |\n| AfterContentChecked | ngAfterContentChecked（）| 紧跟上一条完成初始化投影后调用，以及每次变更周期在DoCheck之后调用 |\n| AfterViewInit | ngAfterViewInit（）| 组件和子组件完成视图初始化时调用 |\n| AfterViewChecked | ngAfterViewChecked（）| 紧跟上一条完成组件和子组件完成视图后调用，每次变更周期在AfterContentChecked之后调用 |\n| OnDestroy | ngOnDestroy（）| 销毁时调用 |\n\n> 生命周期各个钩子的调用都在构造函数之后\n\n## 生命钩子的使用\n**（1）OnInit**\n实现组件初始化时需要作的复杂逻辑处理，比如和服务端进行数据交互等，保持构造函数的简单，方便测试\n\n**（2）OnDestroy**\n实例销毁时调用，用于在组件或指令销毁时的资源回收，比如：取消可观察对象的订阅，停止定时器等，特别时调用第三方库时的内存回收\n一个特别的例子，使用echart等第三方库封装图表控件的时候，在初始化图表后，销毁实例时务必调用相关借口释放内存，否则浏览器内存泄露，会变慢，这些工作一般都放在ngOnDestroy（）里来做\n\n**（3）OnChanges**\n一般用于父子组件的交互和通讯，可用于子组件对输入变量的变更检测，以便采取一定的行动，当然变更检测能检测到的也只是常规变量引用的值变化，对于对象/组件这种结构型变量的成员变化则无法检测\nngOnChanges（）钩子函数接受一个数组变量，存放所有输入变量的变化信息，每个变量有3个字段：\n\"输入变量名\" : {\"当前值\"：\"\",\"是否首次变更\": true,\"上一次的值\"：\"\"}\n\n    import { Component, OnInit, Input, SimpleChanges} from '@angular/core';\n    @Input() inputValue : any = '';\n    ngOnChanges(changes: SimpleChanges) {\n        console.log(changes);\n    }\n控制台打印：\n![onchanges--](/images/onchanges.png)\n\n**（4）DoCheck**\n每个变更周期都会调用，可用于检测各种变量的变化，但调用次数频繁，且大部分是无用调用，所以使用时需谨慎，实现逻辑需简单\n\n**（5）AfterViewInit**\n一般使用于完成子组件初始化后需要做的工作","slug":"angular-lifecysle-hook","published":1,"updated":"2017-08-06T13:00:46.044Z","layout":"post","photos":[],"link":"","_id":"cjqwe425i000por0bbobv7tm3","content":"<p>在开发angular应用书写组件或者指令的时候，我们从来没有去手动的new或者deletet来管理它们的实例，angular系统管理着这一切<br>组件/指令像普通的事物一样，有着自己的声明周期：生，变更，销毁..等等，这个过程有angular自动管理着<br><a id=\"more\"></a></p>\n<h2 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h2><p>生命周期显而易见，但是当用户想在这个过程中做点什么呢？于是angular便在生命过程中的关键时间点上提供了相应的介入接口和钩子方法，让用户可以介入其中<br>两个概念：</p>\n<ul>\n<li>接口,生命周期的暴露点，开发介入点，比如初始化接口：OnInit</li>\n<li>钩子，接口对应的函数方法，供开发使用，只要实现相应的钩子方法即看介入对应的生命周期点，比如初始化钩子：ngOnInit()</li>\n</ul>\n<blockquote>\n<p>接口和钩子是一一对应的，钩子方式是：ng接口名，比如OnInit和ngOnInit()，在实现时继承相应接口并实现对应钩子函数即可，当然，接口继承并非强制型的，可以直接实现钩子函数，当清晰起见，最后先继承接口再实现钩子</p>\n</blockquote>\n<h2 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h2><p>在组件和指令实例的生命周期里，有多个不同的生命点，angular都为其设置了接口和钩子，按照时间先后有</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">生命点接口</th>\n<th style=\"text-align:center\">生命周期钩子</th>\n<th style=\"text-align:center\">调用方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">OnChanges</td>\n<td style=\"text-align:center\">ngOnChanges()</td>\n<td style=\"text-align:center\">简单输入变量本值发生变化时调用，第一次调用在OnInit之前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OnInit</td>\n<td style=\"text-align:center\">ngOnInit（）</td>\n<td style=\"text-align:center\">初始化时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DoCheck</td>\n<td style=\"text-align:center\">ngDoCheck（）</td>\n<td style=\"text-align:center\">周期更改检测，每次变更周期都会调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AfterContentInit</td>\n<td style=\"text-align:center\">ngAfterContentInit（）</td>\n<td style=\"text-align:center\">内容完成初始化投影后调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AfterContentChecked</td>\n<td style=\"text-align:center\">ngAfterContentChecked（）</td>\n<td style=\"text-align:center\">紧跟上一条完成初始化投影后调用，以及每次变更周期在DoCheck之后调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AfterViewInit</td>\n<td style=\"text-align:center\">ngAfterViewInit（）</td>\n<td style=\"text-align:center\">组件和子组件完成视图初始化时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AfterViewChecked</td>\n<td style=\"text-align:center\">ngAfterViewChecked（）</td>\n<td style=\"text-align:center\">紧跟上一条完成组件和子组件完成视图后调用，每次变更周期在AfterContentChecked之后调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OnDestroy</td>\n<td style=\"text-align:center\">ngOnDestroy（）</td>\n<td style=\"text-align:center\">销毁时调用</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>生命周期各个钩子的调用都在构造函数之后</p>\n</blockquote>\n<h2 id=\"生命钩子的使用\"><a href=\"#生命钩子的使用\" class=\"headerlink\" title=\"生命钩子的使用\"></a>生命钩子的使用</h2><p><strong>（1）OnInit</strong><br>实现组件初始化时需要作的复杂逻辑处理，比如和服务端进行数据交互等，保持构造函数的简单，方便测试</p>\n<p><strong>（2）OnDestroy</strong><br>实例销毁时调用，用于在组件或指令销毁时的资源回收，比如：取消可观察对象的订阅，停止定时器等，特别时调用第三方库时的内存回收<br>一个特别的例子，使用echart等第三方库封装图表控件的时候，在初始化图表后，销毁实例时务必调用相关借口释放内存，否则浏览器内存泄露，会变慢，这些工作一般都放在ngOnDestroy（）里来做</p>\n<p><strong>（3）OnChanges</strong><br>一般用于父子组件的交互和通讯，可用于子组件对输入变量的变更检测，以便采取一定的行动，当然变更检测能检测到的也只是常规变量引用的值变化，对于对象/组件这种结构型变量的成员变化则无法检测<br>ngOnChanges（）钩子函数接受一个数组变量，存放所有输入变量的变化信息，每个变量有3个字段：<br>“输入变量名” : {“当前值”：””,”是否首次变更”: true,”上一次的值”：””}</p>\n<pre><code>import { Component, OnInit, Input, SimpleChanges} from &apos;@angular/core&apos;;\n@Input() inputValue : any = &apos;&apos;;\nngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n}\n</code></pre><p>控制台打印：<br><img src=\"/images/onchanges.png\" alt=\"onchanges--\"></p>\n<p><strong>（4）DoCheck</strong><br>每个变更周期都会调用，可用于检测各种变量的变化，但调用次数频繁，且大部分是无用调用，所以使用时需谨慎，实现逻辑需简单</p>\n<p><strong>（5）AfterViewInit</strong><br>一般使用于完成子组件初始化后需要做的工作</p>\n","site":{"data":{}},"excerpt":"<p>在开发angular应用书写组件或者指令的时候，我们从来没有去手动的new或者deletet来管理它们的实例，angular系统管理着这一切<br>组件/指令像普通的事物一样，有着自己的声明周期：生，变更，销毁..等等，这个过程有angular自动管理着<br>","more":"</p>\n<h2 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h2><p>生命周期显而易见，但是当用户想在这个过程中做点什么呢？于是angular便在生命过程中的关键时间点上提供了相应的介入接口和钩子方法，让用户可以介入其中<br>两个概念：</p>\n<ul>\n<li>接口,生命周期的暴露点，开发介入点，比如初始化接口：OnInit</li>\n<li>钩子，接口对应的函数方法，供开发使用，只要实现相应的钩子方法即看介入对应的生命周期点，比如初始化钩子：ngOnInit()</li>\n</ul>\n<blockquote>\n<p>接口和钩子是一一对应的，钩子方式是：ng接口名，比如OnInit和ngOnInit()，在实现时继承相应接口并实现对应钩子函数即可，当然，接口继承并非强制型的，可以直接实现钩子函数，当清晰起见，最后先继承接口再实现钩子</p>\n</blockquote>\n<h2 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h2><p>在组件和指令实例的生命周期里，有多个不同的生命点，angular都为其设置了接口和钩子，按照时间先后有</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">生命点接口</th>\n<th style=\"text-align:center\">生命周期钩子</th>\n<th style=\"text-align:center\">调用方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">OnChanges</td>\n<td style=\"text-align:center\">ngOnChanges()</td>\n<td style=\"text-align:center\">简单输入变量本值发生变化时调用，第一次调用在OnInit之前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OnInit</td>\n<td style=\"text-align:center\">ngOnInit（）</td>\n<td style=\"text-align:center\">初始化时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DoCheck</td>\n<td style=\"text-align:center\">ngDoCheck（）</td>\n<td style=\"text-align:center\">周期更改检测，每次变更周期都会调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AfterContentInit</td>\n<td style=\"text-align:center\">ngAfterContentInit（）</td>\n<td style=\"text-align:center\">内容完成初始化投影后调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AfterContentChecked</td>\n<td style=\"text-align:center\">ngAfterContentChecked（）</td>\n<td style=\"text-align:center\">紧跟上一条完成初始化投影后调用，以及每次变更周期在DoCheck之后调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AfterViewInit</td>\n<td style=\"text-align:center\">ngAfterViewInit（）</td>\n<td style=\"text-align:center\">组件和子组件完成视图初始化时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AfterViewChecked</td>\n<td style=\"text-align:center\">ngAfterViewChecked（）</td>\n<td style=\"text-align:center\">紧跟上一条完成组件和子组件完成视图后调用，每次变更周期在AfterContentChecked之后调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OnDestroy</td>\n<td style=\"text-align:center\">ngOnDestroy（）</td>\n<td style=\"text-align:center\">销毁时调用</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>生命周期各个钩子的调用都在构造函数之后</p>\n</blockquote>\n<h2 id=\"生命钩子的使用\"><a href=\"#生命钩子的使用\" class=\"headerlink\" title=\"生命钩子的使用\"></a>生命钩子的使用</h2><p><strong>（1）OnInit</strong><br>实现组件初始化时需要作的复杂逻辑处理，比如和服务端进行数据交互等，保持构造函数的简单，方便测试</p>\n<p><strong>（2）OnDestroy</strong><br>实例销毁时调用，用于在组件或指令销毁时的资源回收，比如：取消可观察对象的订阅，停止定时器等，特别时调用第三方库时的内存回收<br>一个特别的例子，使用echart等第三方库封装图表控件的时候，在初始化图表后，销毁实例时务必调用相关借口释放内存，否则浏览器内存泄露，会变慢，这些工作一般都放在ngOnDestroy（）里来做</p>\n<p><strong>（3）OnChanges</strong><br>一般用于父子组件的交互和通讯，可用于子组件对输入变量的变更检测，以便采取一定的行动，当然变更检测能检测到的也只是常规变量引用的值变化，对于对象/组件这种结构型变量的成员变化则无法检测<br>ngOnChanges（）钩子函数接受一个数组变量，存放所有输入变量的变化信息，每个变量有3个字段：<br>“输入变量名” : {“当前值”：””,”是否首次变更”: true,”上一次的值”：””}</p>\n<pre><code>import { Component, OnInit, Input, SimpleChanges} from &apos;@angular/core&apos;;\n@Input() inputValue : any = &apos;&apos;;\nngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n}\n</code></pre><p>控制台打印：<br><img src=\"/images/onchanges.png\" alt=\"onchanges--\"></p>\n<p><strong>（4）DoCheck</strong><br>每个变更周期都会调用，可用于检测各种变量的变化，但调用次数频繁，且大部分是无用调用，所以使用时需谨慎，实现逻辑需简单</p>\n<p><strong>（5）AfterViewInit</strong><br>一般使用于完成子组件初始化后需要做的工作</p>"},{"title":"Markdown语法及编辑工具","date":"2017-05-29T09:19:02.000Z","comments":1,"_content":"花了好几天时间，终于把博客搭建好了。\n搭建博客是为了写点东西，记录下平时学习和生活的点滴，便于积累知识和查看。\n然而发现，记录文章是基于Markdown语法来书写的，所以在开始博客前先熟悉了下markdown语法，并对常用的一些语法作了下总结，基本可以满足平常的写作需求。\n<!--more-->\n\n## 1. Markdown语法\n其实就是一种text to html的微语法，文本化的书写方式，最终还是由工具转化成html文档加以展示。\n\n### HTML兼容\nmarkdown语法对html标签是兼容的，在写作时可以随意使用html标签组织内容，但对于块级元素(比如:div)和行内元素标签(比如:span)和微语法的结合效果是不一样的:**块级元素标签内markdown语法无效;而行内元素标签内markdown语法有效**。\n\n### 特殊字符的自动转化\n对于& < 这样的符号在html文档里有特殊意义的，但markdown会根据它们的使用场景进行自动转换，比如:当<用于标签表示时工具不去理会，但是当只用于普通场景(3<5)时会自动转化成对应的实体。\n\n### 段落\n段落前后默认会有空行，如果需要在段落内换行，可敲2个空格加回车\n\n### 标题\nmarkdown里有两种标题形式:\n\n**1). Setext**\n\n    # 标题1\n    ## 标题2\n    ### 标题3\n    #### 标题4\n    ##### 标题5\n    ###### 标题6\n6级标题，#号越少，标题越高\n\n**2). atx**\n\n    一级标题\n    ====\n    二级标题\n    ----\n\n### 区块引用\n使用>符号定义应用，可以多层嵌套\n\n    > 外文引用\n    > > 外文引用\n效果如下：\n> 外文引用\n> > 外文引用\n\n### 列表\n**1). 无序列表:**使用* + - 来构造无序列表\n\n    * 列表项目1\n    * 列表项目2\n    + 列表项目1\n    + 列表项目2\n    - 列表项目1\n    - 列表项目2\n效果如下：\n- 列表项目1\n- 列表项目2\n\n**2). 有序列表:**使用数字.来构造有序列表\n\n    1 列表项目1\n    2 列表项目2\n\n效果如下：\n1. 列表项目1\n2. 列表项目2\n\n注意：列表标记符号和项目内容之间须至少1个空格，最多3个空格\n\n### 代码区块\n使用反引号`包围代码块，或者缩进4个空格来构造代码块，当代码块作为列表或引用的子元素时，可缩进到5个空格\n注意：代码块前后须加空行\n\n### 分割线\n使用多个* - _ 来制造分隔线\n\n    ***\n    ---\n    ___\n\n效果如下：\n---\n\n### 插入链接\n**(1) 行内形式**\n\n    [百度一下，你就知道](http://www.baidu.com \"baidu\")\n\n效果如下：\n[百度一下，你就知道](http://www.baidu.com \"baidu\")\n\n**(2) 参考形式**\n\n    [百度一下，你就知道](1)\n    [淘宝]()\n    [1]: http://www.baidu.com \"baidu\"\n    [淘宝]: http://www.taobao.com \"taobao\"\n\n效果如下：\n[百度一下，你就知道][1]\n[淘宝][]\n\n[1]: http://www.baidu.com \"baidu\"\n[淘宝]: http://www.taobao.com \"taobao\"\n注意：参考形式的url定义处和使用处须有空行，一般放在段落后面或文章最尾部\n\n### 插入图像\n与链接类似，也分行内形式和参考形式\n\n    ![text](url \"title\")\n\n    ![text][id]\n    [id]: url \"title\"\n\n效果如下:\n![longmao](/images/longmao01.jpg \"longmao_01\")\n\n### 字体\n单个*斜体，俩个粗体\n\n    *斜体*\n    **粗体**\n    ***斜体+粗体***\n效果如下：\n*斜体*\n**粗体**\n***斜体+粗体***\n\n### 表格\n    | Left-Aligned  | Center Aligned  | Right Aligned |\n    | :------------ |:---------------:| -----:|\n    | col 3 is      | some wordy text | $1600 |\n    | col 2 is      | centered        |   $12 |\n效果如下：\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n其中，:---左对齐，:---:中间对齐，---:左对齐，\n\n## 2. Markdown工具\n有许多的markdown语法转换工具，提供便捷书写和实时预览的功能，帮助方便的编辑文档，个人推荐以下，可在线编辑:\n\n - [Markdown plus](http://mdp.tylingsoft.com): Markdown编辑器，可以支持添加任务列表、emoji、流程图等\n - [作业部落](http://mdp.tylingsoft.com): 在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。\n\n参考：\n1. [Markdown 语法说明(简体中文版)-http://www.appinn.com/markdown/](http://www.appinn.com/markdown/)","source":"_posts/2017-05-29-markdown.md","raw":"---\ntitle: Markdown语法及编辑工具\ndate: 2017-05-29 17:19:02\ntags: 写作\ncategories: 博客\ncomments: true\n---\n花了好几天时间，终于把博客搭建好了。\n搭建博客是为了写点东西，记录下平时学习和生活的点滴，便于积累知识和查看。\n然而发现，记录文章是基于Markdown语法来书写的，所以在开始博客前先熟悉了下markdown语法，并对常用的一些语法作了下总结，基本可以满足平常的写作需求。\n<!--more-->\n\n## 1. Markdown语法\n其实就是一种text to html的微语法，文本化的书写方式，最终还是由工具转化成html文档加以展示。\n\n### HTML兼容\nmarkdown语法对html标签是兼容的，在写作时可以随意使用html标签组织内容，但对于块级元素(比如:div)和行内元素标签(比如:span)和微语法的结合效果是不一样的:**块级元素标签内markdown语法无效;而行内元素标签内markdown语法有效**。\n\n### 特殊字符的自动转化\n对于& < 这样的符号在html文档里有特殊意义的，但markdown会根据它们的使用场景进行自动转换，比如:当<用于标签表示时工具不去理会，但是当只用于普通场景(3<5)时会自动转化成对应的实体。\n\n### 段落\n段落前后默认会有空行，如果需要在段落内换行，可敲2个空格加回车\n\n### 标题\nmarkdown里有两种标题形式:\n\n**1). Setext**\n\n    # 标题1\n    ## 标题2\n    ### 标题3\n    #### 标题4\n    ##### 标题5\n    ###### 标题6\n6级标题，#号越少，标题越高\n\n**2). atx**\n\n    一级标题\n    ====\n    二级标题\n    ----\n\n### 区块引用\n使用>符号定义应用，可以多层嵌套\n\n    > 外文引用\n    > > 外文引用\n效果如下：\n> 外文引用\n> > 外文引用\n\n### 列表\n**1). 无序列表:**使用* + - 来构造无序列表\n\n    * 列表项目1\n    * 列表项目2\n    + 列表项目1\n    + 列表项目2\n    - 列表项目1\n    - 列表项目2\n效果如下：\n- 列表项目1\n- 列表项目2\n\n**2). 有序列表:**使用数字.来构造有序列表\n\n    1 列表项目1\n    2 列表项目2\n\n效果如下：\n1. 列表项目1\n2. 列表项目2\n\n注意：列表标记符号和项目内容之间须至少1个空格，最多3个空格\n\n### 代码区块\n使用反引号`包围代码块，或者缩进4个空格来构造代码块，当代码块作为列表或引用的子元素时，可缩进到5个空格\n注意：代码块前后须加空行\n\n### 分割线\n使用多个* - _ 来制造分隔线\n\n    ***\n    ---\n    ___\n\n效果如下：\n---\n\n### 插入链接\n**(1) 行内形式**\n\n    [百度一下，你就知道](http://www.baidu.com \"baidu\")\n\n效果如下：\n[百度一下，你就知道](http://www.baidu.com \"baidu\")\n\n**(2) 参考形式**\n\n    [百度一下，你就知道](1)\n    [淘宝]()\n    [1]: http://www.baidu.com \"baidu\"\n    [淘宝]: http://www.taobao.com \"taobao\"\n\n效果如下：\n[百度一下，你就知道][1]\n[淘宝][]\n\n[1]: http://www.baidu.com \"baidu\"\n[淘宝]: http://www.taobao.com \"taobao\"\n注意：参考形式的url定义处和使用处须有空行，一般放在段落后面或文章最尾部\n\n### 插入图像\n与链接类似，也分行内形式和参考形式\n\n    ![text](url \"title\")\n\n    ![text][id]\n    [id]: url \"title\"\n\n效果如下:\n![longmao](/images/longmao01.jpg \"longmao_01\")\n\n### 字体\n单个*斜体，俩个粗体\n\n    *斜体*\n    **粗体**\n    ***斜体+粗体***\n效果如下：\n*斜体*\n**粗体**\n***斜体+粗体***\n\n### 表格\n    | Left-Aligned  | Center Aligned  | Right Aligned |\n    | :------------ |:---------------:| -----:|\n    | col 3 is      | some wordy text | $1600 |\n    | col 2 is      | centered        |   $12 |\n效果如下：\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n其中，:---左对齐，:---:中间对齐，---:左对齐，\n\n## 2. Markdown工具\n有许多的markdown语法转换工具，提供便捷书写和实时预览的功能，帮助方便的编辑文档，个人推荐以下，可在线编辑:\n\n - [Markdown plus](http://mdp.tylingsoft.com): Markdown编辑器，可以支持添加任务列表、emoji、流程图等\n - [作业部落](http://mdp.tylingsoft.com): 在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。\n\n参考：\n1. [Markdown 语法说明(简体中文版)-http://www.appinn.com/markdown/](http://www.appinn.com/markdown/)","slug":"markdown","published":1,"updated":"2017-06-10T16:17:54.684Z","layout":"post","photos":[],"link":"","_id":"cjqwe425j000sor0bve3uhsqe","content":"<p>花了好几天时间，终于把博客搭建好了。<br>搭建博客是为了写点东西，记录下平时学习和生活的点滴，便于积累知识和查看。<br>然而发现，记录文章是基于Markdown语法来书写的，所以在开始博客前先熟悉了下markdown语法，并对常用的一些语法作了下总结，基本可以满足平常的写作需求。<br><a id=\"more\"></a></p>\n<h2 id=\"1-Markdown语法\"><a href=\"#1-Markdown语法\" class=\"headerlink\" title=\"1. Markdown语法\"></a>1. Markdown语法</h2><p>其实就是一种text to html的微语法，文本化的书写方式，最终还是由工具转化成html文档加以展示。</p>\n<h3 id=\"HTML兼容\"><a href=\"#HTML兼容\" class=\"headerlink\" title=\"HTML兼容\"></a>HTML兼容</h3><p>markdown语法对html标签是兼容的，在写作时可以随意使用html标签组织内容，但对于块级元素(比如:div)和行内元素标签(比如:span)和微语法的结合效果是不一样的:<strong>块级元素标签内markdown语法无效;而行内元素标签内markdown语法有效</strong>。</p>\n<h3 id=\"特殊字符的自动转化\"><a href=\"#特殊字符的自动转化\" class=\"headerlink\" title=\"特殊字符的自动转化\"></a>特殊字符的自动转化</h3><p>对于&amp; &lt; 这样的符号在html文档里有特殊意义的，但markdown会根据它们的使用场景进行自动转换，比如:当&lt;用于标签表示时工具不去理会，但是当只用于普通场景(3&lt;5)时会自动转化成对应的实体。</p>\n<h3 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h3><p>段落前后默认会有空行，如果需要在段落内换行，可敲2个空格加回车</p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>markdown里有两种标题形式:</p>\n<p><strong>1). Setext</strong></p>\n<pre><code># 标题1\n## 标题2\n### 标题3\n#### 标题4\n##### 标题5\n###### 标题6\n</code></pre><p>6级标题，#号越少，标题越高</p>\n<p><strong>2). atx</strong></p>\n<pre><code>一级标题\n====\n二级标题\n----\n</code></pre><h3 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h3><p>使用&gt;符号定义应用，可以多层嵌套</p>\n<pre><code>&gt; 外文引用\n&gt; &gt; 外文引用\n</code></pre><p>效果如下：</p>\n<blockquote>\n<p>外文引用</p>\n<blockquote>\n<p>外文引用</p>\n</blockquote>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p><strong>1). 无序列表:</strong>使用* + - 来构造无序列表</p>\n<pre><code>* 列表项目1\n* 列表项目2\n+ 列表项目1\n+ 列表项目2\n- 列表项目1\n- 列表项目2\n</code></pre><p>效果如下：</p>\n<ul>\n<li>列表项目1</li>\n<li>列表项目2</li>\n</ul>\n<p><strong>2). 有序列表:</strong>使用数字.来构造有序列表</p>\n<pre><code>1 列表项目1\n2 列表项目2\n</code></pre><p>效果如下：</p>\n<ol>\n<li>列表项目1</li>\n<li>列表项目2</li>\n</ol>\n<p>注意：列表标记符号和项目内容之间须至少1个空格，最多3个空格</p>\n<h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><p>使用反引号`包围代码块，或者缩进4个空格来构造代码块，当代码块作为列表或引用的子元素时，可缩进到5个空格<br>注意：代码块前后须加空行</p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>使用多个* - _ 来制造分隔线</p>\n<pre><code>***\n---\n___\n</code></pre><h2 id=\"效果如下：\"><a href=\"#效果如下：\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h2><h3 id=\"插入链接\"><a href=\"#插入链接\" class=\"headerlink\" title=\"插入链接\"></a>插入链接</h3><p><strong>(1) 行内形式</strong></p>\n<pre><code>[百度一下，你就知道](http://www.baidu.com &quot;baidu&quot;)\n</code></pre><p>效果如下：<br><a href=\"http://www.baidu.com\" title=\"baidu\" target=\"_blank\" rel=\"external\">百度一下，你就知道</a></p>\n<p><strong>(2) 参考形式</strong></p>\n<pre><code>[百度一下，你就知道](1)\n[淘宝]()\n[1]: http://www.baidu.com &quot;baidu&quot;\n[淘宝]: http://www.taobao.com &quot;taobao&quot;\n</code></pre><p>效果如下：<br><a href=\"http://www.baidu.com\" title=\"baidu\" target=\"_blank\" rel=\"external\">百度一下，你就知道</a><br><a href=\"http://www.taobao.com\" title=\"taobao\" target=\"_blank\" rel=\"external\">淘宝</a></p>\n<p>注意：参考形式的url定义处和使用处须有空行，一般放在段落后面或文章最尾部</p>\n<h3 id=\"插入图像\"><a href=\"#插入图像\" class=\"headerlink\" title=\"插入图像\"></a>插入图像</h3><p>与链接类似，也分行内形式和参考形式</p>\n<pre><code>![text](url &quot;title&quot;)\n\n![text][id]\n[id]: url &quot;title&quot;\n</code></pre><p>效果如下:<br><img src=\"/images/longmao01.jpg\" alt=\"longmao\" title=\"longmao_01\"></p>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>单个*斜体，俩个粗体</p>\n<pre><code>*斜体*\n**粗体**\n***斜体+粗体***\n</code></pre><p>效果如下：<br><em>斜体</em><br><strong>粗体</strong><br><strong><em>斜体+粗体</em></strong></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><pre><code>| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n</code></pre><p>效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n</tbody>\n</table>\n<p>其中，:—左对齐，:—:中间对齐，—:左对齐，</p>\n<h2 id=\"2-Markdown工具\"><a href=\"#2-Markdown工具\" class=\"headerlink\" title=\"2. Markdown工具\"></a>2. Markdown工具</h2><p>有许多的markdown语法转换工具，提供便捷书写和实时预览的功能，帮助方便的编辑文档，个人推荐以下，可在线编辑:</p>\n<ul>\n<li><a href=\"http://mdp.tylingsoft.com\" target=\"_blank\" rel=\"external\">Markdown plus</a>: Markdown编辑器，可以支持添加任务列表、emoji、流程图等</li>\n<li><a href=\"http://mdp.tylingsoft.com\" target=\"_blank\" rel=\"external\">作业部落</a>: 在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。</li>\n</ul>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown 语法说明(简体中文版)-http://www.appinn.com/markdown/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>花了好几天时间，终于把博客搭建好了。<br>搭建博客是为了写点东西，记录下平时学习和生活的点滴，便于积累知识和查看。<br>然而发现，记录文章是基于Markdown语法来书写的，所以在开始博客前先熟悉了下markdown语法，并对常用的一些语法作了下总结，基本可以满足平常的写作需求。<br>","more":"</p>\n<h2 id=\"1-Markdown语法\"><a href=\"#1-Markdown语法\" class=\"headerlink\" title=\"1. Markdown语法\"></a>1. Markdown语法</h2><p>其实就是一种text to html的微语法，文本化的书写方式，最终还是由工具转化成html文档加以展示。</p>\n<h3 id=\"HTML兼容\"><a href=\"#HTML兼容\" class=\"headerlink\" title=\"HTML兼容\"></a>HTML兼容</h3><p>markdown语法对html标签是兼容的，在写作时可以随意使用html标签组织内容，但对于块级元素(比如:div)和行内元素标签(比如:span)和微语法的结合效果是不一样的:<strong>块级元素标签内markdown语法无效;而行内元素标签内markdown语法有效</strong>。</p>\n<h3 id=\"特殊字符的自动转化\"><a href=\"#特殊字符的自动转化\" class=\"headerlink\" title=\"特殊字符的自动转化\"></a>特殊字符的自动转化</h3><p>对于&amp; &lt; 这样的符号在html文档里有特殊意义的，但markdown会根据它们的使用场景进行自动转换，比如:当&lt;用于标签表示时工具不去理会，但是当只用于普通场景(3&lt;5)时会自动转化成对应的实体。</p>\n<h3 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h3><p>段落前后默认会有空行，如果需要在段落内换行，可敲2个空格加回车</p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>markdown里有两种标题形式:</p>\n<p><strong>1). Setext</strong></p>\n<pre><code># 标题1\n## 标题2\n### 标题3\n#### 标题4\n##### 标题5\n###### 标题6\n</code></pre><p>6级标题，#号越少，标题越高</p>\n<p><strong>2). atx</strong></p>\n<pre><code>一级标题\n====\n二级标题\n----\n</code></pre><h3 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h3><p>使用&gt;符号定义应用，可以多层嵌套</p>\n<pre><code>&gt; 外文引用\n&gt; &gt; 外文引用\n</code></pre><p>效果如下：</p>\n<blockquote>\n<p>外文引用</p>\n<blockquote>\n<p>外文引用</p>\n</blockquote>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p><strong>1). 无序列表:</strong>使用* + - 来构造无序列表</p>\n<pre><code>* 列表项目1\n* 列表项目2\n+ 列表项目1\n+ 列表项目2\n- 列表项目1\n- 列表项目2\n</code></pre><p>效果如下：</p>\n<ul>\n<li>列表项目1</li>\n<li>列表项目2</li>\n</ul>\n<p><strong>2). 有序列表:</strong>使用数字.来构造有序列表</p>\n<pre><code>1 列表项目1\n2 列表项目2\n</code></pre><p>效果如下：</p>\n<ol>\n<li>列表项目1</li>\n<li>列表项目2</li>\n</ol>\n<p>注意：列表标记符号和项目内容之间须至少1个空格，最多3个空格</p>\n<h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><p>使用反引号`包围代码块，或者缩进4个空格来构造代码块，当代码块作为列表或引用的子元素时，可缩进到5个空格<br>注意：代码块前后须加空行</p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>使用多个* - _ 来制造分隔线</p>\n<pre><code>***\n---\n___\n</code></pre><h2 id=\"效果如下：\"><a href=\"#效果如下：\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h2><h3 id=\"插入链接\"><a href=\"#插入链接\" class=\"headerlink\" title=\"插入链接\"></a>插入链接</h3><p><strong>(1) 行内形式</strong></p>\n<pre><code>[百度一下，你就知道](http://www.baidu.com &quot;baidu&quot;)\n</code></pre><p>效果如下：<br><a href=\"http://www.baidu.com\" title=\"baidu\" target=\"_blank\" rel=\"external\">百度一下，你就知道</a></p>\n<p><strong>(2) 参考形式</strong></p>\n<pre><code>[百度一下，你就知道](1)\n[淘宝]()\n[1]: http://www.baidu.com &quot;baidu&quot;\n[淘宝]: http://www.taobao.com &quot;taobao&quot;\n</code></pre><p>效果如下：<br><a href=\"http://www.baidu.com\" title=\"baidu\" target=\"_blank\" rel=\"external\">百度一下，你就知道</a><br><a href=\"http://www.taobao.com\" title=\"taobao\" target=\"_blank\" rel=\"external\">淘宝</a></p>\n<p>注意：参考形式的url定义处和使用处须有空行，一般放在段落后面或文章最尾部</p>\n<h3 id=\"插入图像\"><a href=\"#插入图像\" class=\"headerlink\" title=\"插入图像\"></a>插入图像</h3><p>与链接类似，也分行内形式和参考形式</p>\n<pre><code>![text](url &quot;title&quot;)\n\n![text][id]\n[id]: url &quot;title&quot;\n</code></pre><p>效果如下:<br><img src=\"/images/longmao01.jpg\" alt=\"longmao\" title=\"longmao_01\"></p>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>单个*斜体，俩个粗体</p>\n<pre><code>*斜体*\n**粗体**\n***斜体+粗体***\n</code></pre><p>效果如下：<br><em>斜体</em><br><strong>粗体</strong><br><strong><em>斜体+粗体</em></strong></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><pre><code>| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n</code></pre><p>效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n</tbody>\n</table>\n<p>其中，:—左对齐，:—:中间对齐，—:左对齐，</p>\n<h2 id=\"2-Markdown工具\"><a href=\"#2-Markdown工具\" class=\"headerlink\" title=\"2. Markdown工具\"></a>2. Markdown工具</h2><p>有许多的markdown语法转换工具，提供便捷书写和实时预览的功能，帮助方便的编辑文档，个人推荐以下，可在线编辑:</p>\n<ul>\n<li><a href=\"http://mdp.tylingsoft.com\" target=\"_blank\" rel=\"external\">Markdown plus</a>: Markdown编辑器，可以支持添加任务列表、emoji、流程图等</li>\n<li><a href=\"http://mdp.tylingsoft.com\" target=\"_blank\" rel=\"external\">作业部落</a>: 在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。</li>\n</ul>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown 语法说明(简体中文版)-http://www.appinn.com/markdown/</a></li>\n</ol>"},{"title":"类与接口","date":"2017-10-06T17:09:48.000Z","comments":1,"_content":"\n作为javascript的超集，typescript遵循了ES6标准，同时扩展了多方面的能力，而类和接口时Typescript两个十分重要的特性\n<!--more-->\n\n### 一. 类\nTypescript支持基于类的面向对象编程，类作为面向对象具有三大特性：封装性，继承性，多态\n\n1) 封装\n\n类将属性和方法封装成独立的个体，作为模板供实例化使用\n\n    class Car {\n\n        public engine : string;\n        private distance : number;\n        protected price : number;\n\n        constructor(engine : string,price : number) {\n            this.distance = 0;\n            this.engine = engine;\n            this.price = price;\n        }\n\n        drive(distance :number) {\n            this.distance = distance;\n        }\n    }\n    let mycar = new Car('Aodi',200);\n    mycar.drive(10);\n\n2) 继承\n\n基类可派生出多个子类，子类可继承基类的基本属性\n\n    class Moto extends Car {\n\n        constructor(engine : string,price : number) {\n            super(engine,price)\n        }\n    }\n    let myMoto = new Moto('Aodi',30);\n    myMoto.drive(10);\n\n3) 多态\n\n    class Moto extends Car {\n\n        constructor(engine : string,price : number) {\n            super(engine,price)\n        }\n\n        drive(distance :number) {\n            this.distance = distance;\n        }\n    }\n    let myMoto ： Car = new Moto('Aodi',30);\n    myMoto.drive(10); //调用子类方法\n\n4) 抽象类继承\n\n抽象类不能实例化，只提供子类继承，用于提炼声明一些公共的属性和方法\n\n    abstract class basicCar {\n        color : string;\n        abstract drive(distance :number) : void;\n    }\n    class Car extends basicCar {\n        drive() : void {\n            ///...//\n        }\n    }\n\n ### 二. 接口\n\n 接口在面向对象设计中用来声明可复用的模板单位，比如：属性接口，类接口等，同时接口也只是用来严格限制类型使用的，是设计模式的一种设计方式，比如使用属性接口定义的变量需要严格进行参数检测的，而继承类接口的class必须实现接口里的方法，否则将会检测报错\n\n1) 属性接口\n\n属性型接口可将一些字段集合在一些以供声明，类似于结构体，但使用属性接口定义的变量在赋值时需要进行接口检查器的检测，所赋予的值里必须存在接口声明中存在的字段且类型一致，否则报错，十分严格\n\n    interface Name {\n        firstName : string;\n        secondName ?: string;\n    }\n\n    let name : Name = {firstName: 'Mical',secondName: 'Jordon'};\n    let name2 : Name = {firstName: 'Mical'};\n    let name3 : Name = {firstName: 'Mical',secondName: 'Jordon',age: 33};\n    //ok\n\n2) 函数接口\n\n函数型接口主要声明严格类型的方法原型，包括入参的个数/类型以及返回值的类型，使用此接口定义的变量可接受与声明方式一致的函数，不可接受其他类型的函数赋值\n\n    interface Function {\n        (aa : string,bb: number): string\n    }\n\n    let myfun1 : Function = function(a : string,b : number) {\n        return a + b;\n    }\n    myfun1('mybaby', 9); //ok\n\n    let myfun1 : Function = function(a : string,b : string) {\n        return a + b;\n    } //No ok!!\n\n3) 索引接口\n\n索引型接口主要声明可又索引值来访问其中value值的结构性变量模板，包括数组和一般的接口\n\n    //Array\n    interface aRRAY {\n        [aa : number]: string\n    }\n    let aa : aRRAY = ['11','ddd'];\n\n     //interface\n    interface aRRAY {\n        [aa : string]: string\n    }\n    let bbb : aRRAY = ['name':'ssas'];\n\n3) 类接口\n\n类接口主要为了给引用的class来提供一些共有的属性和方法，本身并不实现这些方法，而class引用了它就必须实现这些，相当严格；相关类似于抽象类\n\n    interface basic {\n        name: string;\n        eat() : void;\n    }\n\n    interface basic2 extends basic {\n        walk() : void;\n    }\n\n    class IT implements basic2 {\n        name : string;\n        constructor(name : string) {\n            this.name = name;\n        }\n\n        eat() : void {\n         //eat\n        }\n\n        walk() : void {\n         //walk\n        }\n    }\n\n### 类和接口的区别\n\n- 接口是为了数据声明而设计，拥有严格接口检测，而类是为了对象和数据封装\n- 类需要实例化且调用构造函数，接口不需要，类接口也不需要\n- 接口在使用上和类是本质不同的\n- 类的继承使用extends，而引用接口使用implements\n- 类可以实现自己的方法，类接口不行","source":"_posts/2017-10-07-class-and-interface.md","raw":"---\ntitle: 类与接口\ndate: 2017-10-07 01:09:48\ntags: Typescript\ncategories: 前端\ncomments: true\n---\n\n作为javascript的超集，typescript遵循了ES6标准，同时扩展了多方面的能力，而类和接口时Typescript两个十分重要的特性\n<!--more-->\n\n### 一. 类\nTypescript支持基于类的面向对象编程，类作为面向对象具有三大特性：封装性，继承性，多态\n\n1) 封装\n\n类将属性和方法封装成独立的个体，作为模板供实例化使用\n\n    class Car {\n\n        public engine : string;\n        private distance : number;\n        protected price : number;\n\n        constructor(engine : string,price : number) {\n            this.distance = 0;\n            this.engine = engine;\n            this.price = price;\n        }\n\n        drive(distance :number) {\n            this.distance = distance;\n        }\n    }\n    let mycar = new Car('Aodi',200);\n    mycar.drive(10);\n\n2) 继承\n\n基类可派生出多个子类，子类可继承基类的基本属性\n\n    class Moto extends Car {\n\n        constructor(engine : string,price : number) {\n            super(engine,price)\n        }\n    }\n    let myMoto = new Moto('Aodi',30);\n    myMoto.drive(10);\n\n3) 多态\n\n    class Moto extends Car {\n\n        constructor(engine : string,price : number) {\n            super(engine,price)\n        }\n\n        drive(distance :number) {\n            this.distance = distance;\n        }\n    }\n    let myMoto ： Car = new Moto('Aodi',30);\n    myMoto.drive(10); //调用子类方法\n\n4) 抽象类继承\n\n抽象类不能实例化，只提供子类继承，用于提炼声明一些公共的属性和方法\n\n    abstract class basicCar {\n        color : string;\n        abstract drive(distance :number) : void;\n    }\n    class Car extends basicCar {\n        drive() : void {\n            ///...//\n        }\n    }\n\n ### 二. 接口\n\n 接口在面向对象设计中用来声明可复用的模板单位，比如：属性接口，类接口等，同时接口也只是用来严格限制类型使用的，是设计模式的一种设计方式，比如使用属性接口定义的变量需要严格进行参数检测的，而继承类接口的class必须实现接口里的方法，否则将会检测报错\n\n1) 属性接口\n\n属性型接口可将一些字段集合在一些以供声明，类似于结构体，但使用属性接口定义的变量在赋值时需要进行接口检查器的检测，所赋予的值里必须存在接口声明中存在的字段且类型一致，否则报错，十分严格\n\n    interface Name {\n        firstName : string;\n        secondName ?: string;\n    }\n\n    let name : Name = {firstName: 'Mical',secondName: 'Jordon'};\n    let name2 : Name = {firstName: 'Mical'};\n    let name3 : Name = {firstName: 'Mical',secondName: 'Jordon',age: 33};\n    //ok\n\n2) 函数接口\n\n函数型接口主要声明严格类型的方法原型，包括入参的个数/类型以及返回值的类型，使用此接口定义的变量可接受与声明方式一致的函数，不可接受其他类型的函数赋值\n\n    interface Function {\n        (aa : string,bb: number): string\n    }\n\n    let myfun1 : Function = function(a : string,b : number) {\n        return a + b;\n    }\n    myfun1('mybaby', 9); //ok\n\n    let myfun1 : Function = function(a : string,b : string) {\n        return a + b;\n    } //No ok!!\n\n3) 索引接口\n\n索引型接口主要声明可又索引值来访问其中value值的结构性变量模板，包括数组和一般的接口\n\n    //Array\n    interface aRRAY {\n        [aa : number]: string\n    }\n    let aa : aRRAY = ['11','ddd'];\n\n     //interface\n    interface aRRAY {\n        [aa : string]: string\n    }\n    let bbb : aRRAY = ['name':'ssas'];\n\n3) 类接口\n\n类接口主要为了给引用的class来提供一些共有的属性和方法，本身并不实现这些方法，而class引用了它就必须实现这些，相当严格；相关类似于抽象类\n\n    interface basic {\n        name: string;\n        eat() : void;\n    }\n\n    interface basic2 extends basic {\n        walk() : void;\n    }\n\n    class IT implements basic2 {\n        name : string;\n        constructor(name : string) {\n            this.name = name;\n        }\n\n        eat() : void {\n         //eat\n        }\n\n        walk() : void {\n         //walk\n        }\n    }\n\n### 类和接口的区别\n\n- 接口是为了数据声明而设计，拥有严格接口检测，而类是为了对象和数据封装\n- 类需要实例化且调用构造函数，接口不需要，类接口也不需要\n- 接口在使用上和类是本质不同的\n- 类的继承使用extends，而引用接口使用implements\n- 类可以实现自己的方法，类接口不行","slug":"class-and-interface","published":1,"updated":"2017-10-06T17:10:59.008Z","layout":"post","photos":[],"link":"","_id":"cjqwe425m000vor0bztf1n8k9","content":"<p>作为javascript的超集，typescript遵循了ES6标准，同时扩展了多方面的能力，而类和接口时Typescript两个十分重要的特性<br><a id=\"more\"></a></p>\n<h3 id=\"一-类\"><a href=\"#一-类\" class=\"headerlink\" title=\"一. 类\"></a>一. 类</h3><p>Typescript支持基于类的面向对象编程，类作为面向对象具有三大特性：封装性，继承性，多态</p>\n<p>1) 封装</p>\n<p>类将属性和方法封装成独立的个体，作为模板供实例化使用</p>\n<pre><code>class Car {\n\n    public engine : string;\n    private distance : number;\n    protected price : number;\n\n    constructor(engine : string,price : number) {\n        this.distance = 0;\n        this.engine = engine;\n        this.price = price;\n    }\n\n    drive(distance :number) {\n        this.distance = distance;\n    }\n}\nlet mycar = new Car(&apos;Aodi&apos;,200);\nmycar.drive(10);\n</code></pre><p>2) 继承</p>\n<p>基类可派生出多个子类，子类可继承基类的基本属性</p>\n<pre><code>class Moto extends Car {\n\n    constructor(engine : string,price : number) {\n        super(engine,price)\n    }\n}\nlet myMoto = new Moto(&apos;Aodi&apos;,30);\nmyMoto.drive(10);\n</code></pre><p>3) 多态</p>\n<pre><code>class Moto extends Car {\n\n    constructor(engine : string,price : number) {\n        super(engine,price)\n    }\n\n    drive(distance :number) {\n        this.distance = distance;\n    }\n}\nlet myMoto ： Car = new Moto(&apos;Aodi&apos;,30);\nmyMoto.drive(10); //调用子类方法\n</code></pre><p>4) 抽象类继承</p>\n<p>抽象类不能实例化，只提供子类继承，用于提炼声明一些公共的属性和方法</p>\n<pre><code>abstract class basicCar {\n    color : string;\n    abstract drive(distance :number) : void;\n}\nclass Car extends basicCar {\n    drive() : void {\n        ///...//\n    }\n}\n</code></pre><h3 id=\"二-接口\"><a href=\"#二-接口\" class=\"headerlink\" title=\"二. 接口\"></a>二. 接口</h3><p> 接口在面向对象设计中用来声明可复用的模板单位，比如：属性接口，类接口等，同时接口也只是用来严格限制类型使用的，是设计模式的一种设计方式，比如使用属性接口定义的变量需要严格进行参数检测的，而继承类接口的class必须实现接口里的方法，否则将会检测报错</p>\n<p>1) 属性接口</p>\n<p>属性型接口可将一些字段集合在一些以供声明，类似于结构体，但使用属性接口定义的变量在赋值时需要进行接口检查器的检测，所赋予的值里必须存在接口声明中存在的字段且类型一致，否则报错，十分严格</p>\n<pre><code>interface Name {\n    firstName : string;\n    secondName ?: string;\n}\n\nlet name : Name = {firstName: &apos;Mical&apos;,secondName: &apos;Jordon&apos;};\nlet name2 : Name = {firstName: &apos;Mical&apos;};\nlet name3 : Name = {firstName: &apos;Mical&apos;,secondName: &apos;Jordon&apos;,age: 33};\n//ok\n</code></pre><p>2) 函数接口</p>\n<p>函数型接口主要声明严格类型的方法原型，包括入参的个数/类型以及返回值的类型，使用此接口定义的变量可接受与声明方式一致的函数，不可接受其他类型的函数赋值</p>\n<pre><code>interface Function {\n    (aa : string,bb: number): string\n}\n\nlet myfun1 : Function = function(a : string,b : number) {\n    return a + b;\n}\nmyfun1(&apos;mybaby&apos;, 9); //ok\n\nlet myfun1 : Function = function(a : string,b : string) {\n    return a + b;\n} //No ok!!\n</code></pre><p>3) 索引接口</p>\n<p>索引型接口主要声明可又索引值来访问其中value值的结构性变量模板，包括数组和一般的接口</p>\n<pre><code>//Array\ninterface aRRAY {\n    [aa : number]: string\n}\nlet aa : aRRAY = [&apos;11&apos;,&apos;ddd&apos;];\n\n //interface\ninterface aRRAY {\n    [aa : string]: string\n}\nlet bbb : aRRAY = [&apos;name&apos;:&apos;ssas&apos;];\n</code></pre><p>3) 类接口</p>\n<p>类接口主要为了给引用的class来提供一些共有的属性和方法，本身并不实现这些方法，而class引用了它就必须实现这些，相当严格；相关类似于抽象类</p>\n<pre><code>interface basic {\n    name: string;\n    eat() : void;\n}\n\ninterface basic2 extends basic {\n    walk() : void;\n}\n\nclass IT implements basic2 {\n    name : string;\n    constructor(name : string) {\n        this.name = name;\n    }\n\n    eat() : void {\n     //eat\n    }\n\n    walk() : void {\n     //walk\n    }\n}\n</code></pre><h3 id=\"类和接口的区别\"><a href=\"#类和接口的区别\" class=\"headerlink\" title=\"类和接口的区别\"></a>类和接口的区别</h3><ul>\n<li>接口是为了数据声明而设计，拥有严格接口检测，而类是为了对象和数据封装</li>\n<li>类需要实例化且调用构造函数，接口不需要，类接口也不需要</li>\n<li>接口在使用上和类是本质不同的</li>\n<li>类的继承使用extends，而引用接口使用implements</li>\n<li>类可以实现自己的方法，类接口不行</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>作为javascript的超集，typescript遵循了ES6标准，同时扩展了多方面的能力，而类和接口时Typescript两个十分重要的特性<br>","more":"</p>\n<h3 id=\"一-类\"><a href=\"#一-类\" class=\"headerlink\" title=\"一. 类\"></a>一. 类</h3><p>Typescript支持基于类的面向对象编程，类作为面向对象具有三大特性：封装性，继承性，多态</p>\n<p>1) 封装</p>\n<p>类将属性和方法封装成独立的个体，作为模板供实例化使用</p>\n<pre><code>class Car {\n\n    public engine : string;\n    private distance : number;\n    protected price : number;\n\n    constructor(engine : string,price : number) {\n        this.distance = 0;\n        this.engine = engine;\n        this.price = price;\n    }\n\n    drive(distance :number) {\n        this.distance = distance;\n    }\n}\nlet mycar = new Car(&apos;Aodi&apos;,200);\nmycar.drive(10);\n</code></pre><p>2) 继承</p>\n<p>基类可派生出多个子类，子类可继承基类的基本属性</p>\n<pre><code>class Moto extends Car {\n\n    constructor(engine : string,price : number) {\n        super(engine,price)\n    }\n}\nlet myMoto = new Moto(&apos;Aodi&apos;,30);\nmyMoto.drive(10);\n</code></pre><p>3) 多态</p>\n<pre><code>class Moto extends Car {\n\n    constructor(engine : string,price : number) {\n        super(engine,price)\n    }\n\n    drive(distance :number) {\n        this.distance = distance;\n    }\n}\nlet myMoto ： Car = new Moto(&apos;Aodi&apos;,30);\nmyMoto.drive(10); //调用子类方法\n</code></pre><p>4) 抽象类继承</p>\n<p>抽象类不能实例化，只提供子类继承，用于提炼声明一些公共的属性和方法</p>\n<pre><code>abstract class basicCar {\n    color : string;\n    abstract drive(distance :number) : void;\n}\nclass Car extends basicCar {\n    drive() : void {\n        ///...//\n    }\n}\n</code></pre><h3 id=\"二-接口\"><a href=\"#二-接口\" class=\"headerlink\" title=\"二. 接口\"></a>二. 接口</h3><p> 接口在面向对象设计中用来声明可复用的模板单位，比如：属性接口，类接口等，同时接口也只是用来严格限制类型使用的，是设计模式的一种设计方式，比如使用属性接口定义的变量需要严格进行参数检测的，而继承类接口的class必须实现接口里的方法，否则将会检测报错</p>\n<p>1) 属性接口</p>\n<p>属性型接口可将一些字段集合在一些以供声明，类似于结构体，但使用属性接口定义的变量在赋值时需要进行接口检查器的检测，所赋予的值里必须存在接口声明中存在的字段且类型一致，否则报错，十分严格</p>\n<pre><code>interface Name {\n    firstName : string;\n    secondName ?: string;\n}\n\nlet name : Name = {firstName: &apos;Mical&apos;,secondName: &apos;Jordon&apos;};\nlet name2 : Name = {firstName: &apos;Mical&apos;};\nlet name3 : Name = {firstName: &apos;Mical&apos;,secondName: &apos;Jordon&apos;,age: 33};\n//ok\n</code></pre><p>2) 函数接口</p>\n<p>函数型接口主要声明严格类型的方法原型，包括入参的个数/类型以及返回值的类型，使用此接口定义的变量可接受与声明方式一致的函数，不可接受其他类型的函数赋值</p>\n<pre><code>interface Function {\n    (aa : string,bb: number): string\n}\n\nlet myfun1 : Function = function(a : string,b : number) {\n    return a + b;\n}\nmyfun1(&apos;mybaby&apos;, 9); //ok\n\nlet myfun1 : Function = function(a : string,b : string) {\n    return a + b;\n} //No ok!!\n</code></pre><p>3) 索引接口</p>\n<p>索引型接口主要声明可又索引值来访问其中value值的结构性变量模板，包括数组和一般的接口</p>\n<pre><code>//Array\ninterface aRRAY {\n    [aa : number]: string\n}\nlet aa : aRRAY = [&apos;11&apos;,&apos;ddd&apos;];\n\n //interface\ninterface aRRAY {\n    [aa : string]: string\n}\nlet bbb : aRRAY = [&apos;name&apos;:&apos;ssas&apos;];\n</code></pre><p>3) 类接口</p>\n<p>类接口主要为了给引用的class来提供一些共有的属性和方法，本身并不实现这些方法，而class引用了它就必须实现这些，相当严格；相关类似于抽象类</p>\n<pre><code>interface basic {\n    name: string;\n    eat() : void;\n}\n\ninterface basic2 extends basic {\n    walk() : void;\n}\n\nclass IT implements basic2 {\n    name : string;\n    constructor(name : string) {\n        this.name = name;\n    }\n\n    eat() : void {\n     //eat\n    }\n\n    walk() : void {\n     //walk\n    }\n}\n</code></pre><h3 id=\"类和接口的区别\"><a href=\"#类和接口的区别\" class=\"headerlink\" title=\"类和接口的区别\"></a>类和接口的区别</h3><ul>\n<li>接口是为了数据声明而设计，拥有严格接口检测，而类是为了对象和数据封装</li>\n<li>类需要实例化且调用构造函数，接口不需要，类接口也不需要</li>\n<li>接口在使用上和类是本质不同的</li>\n<li>类的继承使用extends，而引用接口使用implements</li>\n<li>类可以实现自己的方法，类接口不行</li>\n</ul>"},{"title":"Angular-变更检测","date":"2017-10-15T10:34:55.000Z","comments":1,"_content":"\n前面讲了angular的一些属性绑定，事件绑定，以及双向绑定之类的语法，但angular时如何响应这些绑定操作并及时更新数据模型的呢？\n<!--more-->\n当然是事件驱动的，触发的来源有以下三大事件:\n\n- 用户操作\n- http交互\n- 定时器超时\n\n这几项形式不同，但都可以理解为事件的形式，而且还有一个共同点：都是异步的，而且我们进行的每一个动作都会转化为相应的事件\nangular通过NgZone来捕获这些时间的发生，并决定要不要通知检测机制进行变更检测，大概的示意图如下：\n![jianceqi-tree](/images/jianceqi-tree.jpg)\n\n如图所示：\n1） NgZone继承于开源的zone.js，并进行了响应的扩展，比如：可控制不通知变更检测等，zone通过”猴子补丁“的方式强制重写了浏览器关于时间的捕获处理，所以可以捕获几乎所有事件来处理想要的处理；\n2) NgZone会在每一次事件发生完之后通知angular检测机制执行变更检测，当然也提供了接口来控制通不通知，以及何时通知；\n\n- onTurnStart()： 事件开始事前发射，一个浏览器任务只处理一个\n- onTurnDone() ：当事件处理完，调度到其他任务钱发射\n- onEventDone()：当onTurnDone调用完发射，也就是发送检测通知的时间\n\n通过zone.runOutsideAngular()可以控制子zone不向parent-zone冒泡\n\n3) angular应用内部在创建每一个组件实例的同时，会使用变更检测器类创建一个对应的检测器实例，用来记录组件的数据变化状态，所以在应用形式组件树的同时，也形成了检测器实例的树型结构；\n变更检测类主要接口：\n```\nclass ChangeDetectorRef {\n    markForCheck() : void;\n    detach() : void;\n    reattach() : void;\n    detectChanges() : void;\n}\n```\n其中：\nmarkForCheck()：使用于子组件，将该子组件到根组件之间的路径标记起来，通知angular检测器下次变化检测时一定检查次路径上的组件;\ndetach()：将组件的检测器从检测器数中脱离，不再受检测机制的控制，除非重新attach上;\nreattach()：把脱离的检测器重新链接到检测器树上;\ndetectChanges():手动发起该组件到各个子组件的变更检测;\n通过这些接口我们可以手动控制变化检测\n```\n@component({\n  selector: 'hero-list',\n  template: `\n    <ul>\n      <li*ngFor=\"let hero of heroList\" (click)=\"select(hero)\">         {{hero.name}}</li>\n      <hero-detail [hero]=\"selectHero\"></hero-detail>\n    </ul>\n  `\n})\nexport class HeroListComponent implements OnInit,OnDestroy {\n  heroList : any[] = [];\n  refreshTimer : any;\n\n  constructor(private Cdr : ChangeDetectorRef,private heroServce : HeroServce) {\n    Cdr.detach();\n  }\n\n  ngOnInit() {\n    this.heroList = this.heroServce.getHeros();\n    this.refreshTimer = setInterval(() => {\n      this.Cdr.detectChanges();\n    },5000);\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.refreshTimer);\n    this.refreshTimer = undefined;\n  }\n}\n```\n\n4) 当angular接收到事件通知时，便从根组件对应的检测器实例开始，由上而下来遍历整个树，检测那些遍历发生了变化，并及时进行更新；\n5) 应用中可以注入ngzone和检测器实例来在逻辑上控制通知的发送以及检测器的行为;\n6) 变更检测还可以在组件里设置检测策略，有两种：\n\n- default: 每次变更检测都会检查组件的所有数据，包括引用型变量内部的字段值，效率不高;\n- Onpush: 每次变更检测只检查变量值是否变化，对于引用型变量如果地址不变的话不再检测;\n\n所以可根据使用的情况对部分组件的检测设置Onpush策略，提高效率\n\n```\n@component({\n  selector: 'hero-list',\n  changeDetection: ChangeDetectionStrategy.Onpush\n})\n\n```\n对于引用型变量可以通过拷贝改变他们的地址来加入检测，比如使用Immiutable变量声明,clone()等;","source":"_posts/2017-10-15-angular-jianceqi.md","raw":"---\ntitle: Angular-变更检测\ndate: 2017-10-15 18:34:55\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n前面讲了angular的一些属性绑定，事件绑定，以及双向绑定之类的语法，但angular时如何响应这些绑定操作并及时更新数据模型的呢？\n<!--more-->\n当然是事件驱动的，触发的来源有以下三大事件:\n\n- 用户操作\n- http交互\n- 定时器超时\n\n这几项形式不同，但都可以理解为事件的形式，而且还有一个共同点：都是异步的，而且我们进行的每一个动作都会转化为相应的事件\nangular通过NgZone来捕获这些时间的发生，并决定要不要通知检测机制进行变更检测，大概的示意图如下：\n![jianceqi-tree](/images/jianceqi-tree.jpg)\n\n如图所示：\n1） NgZone继承于开源的zone.js，并进行了响应的扩展，比如：可控制不通知变更检测等，zone通过”猴子补丁“的方式强制重写了浏览器关于时间的捕获处理，所以可以捕获几乎所有事件来处理想要的处理；\n2) NgZone会在每一次事件发生完之后通知angular检测机制执行变更检测，当然也提供了接口来控制通不通知，以及何时通知；\n\n- onTurnStart()： 事件开始事前发射，一个浏览器任务只处理一个\n- onTurnDone() ：当事件处理完，调度到其他任务钱发射\n- onEventDone()：当onTurnDone调用完发射，也就是发送检测通知的时间\n\n通过zone.runOutsideAngular()可以控制子zone不向parent-zone冒泡\n\n3) angular应用内部在创建每一个组件实例的同时，会使用变更检测器类创建一个对应的检测器实例，用来记录组件的数据变化状态，所以在应用形式组件树的同时，也形成了检测器实例的树型结构；\n变更检测类主要接口：\n```\nclass ChangeDetectorRef {\n    markForCheck() : void;\n    detach() : void;\n    reattach() : void;\n    detectChanges() : void;\n}\n```\n其中：\nmarkForCheck()：使用于子组件，将该子组件到根组件之间的路径标记起来，通知angular检测器下次变化检测时一定检查次路径上的组件;\ndetach()：将组件的检测器从检测器数中脱离，不再受检测机制的控制，除非重新attach上;\nreattach()：把脱离的检测器重新链接到检测器树上;\ndetectChanges():手动发起该组件到各个子组件的变更检测;\n通过这些接口我们可以手动控制变化检测\n```\n@component({\n  selector: 'hero-list',\n  template: `\n    <ul>\n      <li*ngFor=\"let hero of heroList\" (click)=\"select(hero)\">         {{hero.name}}</li>\n      <hero-detail [hero]=\"selectHero\"></hero-detail>\n    </ul>\n  `\n})\nexport class HeroListComponent implements OnInit,OnDestroy {\n  heroList : any[] = [];\n  refreshTimer : any;\n\n  constructor(private Cdr : ChangeDetectorRef,private heroServce : HeroServce) {\n    Cdr.detach();\n  }\n\n  ngOnInit() {\n    this.heroList = this.heroServce.getHeros();\n    this.refreshTimer = setInterval(() => {\n      this.Cdr.detectChanges();\n    },5000);\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.refreshTimer);\n    this.refreshTimer = undefined;\n  }\n}\n```\n\n4) 当angular接收到事件通知时，便从根组件对应的检测器实例开始，由上而下来遍历整个树，检测那些遍历发生了变化，并及时进行更新；\n5) 应用中可以注入ngzone和检测器实例来在逻辑上控制通知的发送以及检测器的行为;\n6) 变更检测还可以在组件里设置检测策略，有两种：\n\n- default: 每次变更检测都会检查组件的所有数据，包括引用型变量内部的字段值，效率不高;\n- Onpush: 每次变更检测只检查变量值是否变化，对于引用型变量如果地址不变的话不再检测;\n\n所以可根据使用的情况对部分组件的检测设置Onpush策略，提高效率\n\n```\n@component({\n  selector: 'hero-list',\n  changeDetection: ChangeDetectionStrategy.Onpush\n})\n\n```\n对于引用型变量可以通过拷贝改变他们的地址来加入检测，比如使用Immiutable变量声明,clone()等;","slug":"angular-jianceqi","published":1,"updated":"2017-10-16T15:44:05.582Z","layout":"post","photos":[],"link":"","_id":"cjqwe425o000yor0b8bj6riif","content":"<p>前面讲了angular的一些属性绑定，事件绑定，以及双向绑定之类的语法，但angular时如何响应这些绑定操作并及时更新数据模型的呢？<br><a id=\"more\"></a><br>当然是事件驱动的，触发的来源有以下三大事件:</p>\n<ul>\n<li>用户操作</li>\n<li>http交互</li>\n<li>定时器超时</li>\n</ul>\n<p>这几项形式不同，但都可以理解为事件的形式，而且还有一个共同点：都是异步的，而且我们进行的每一个动作都会转化为相应的事件<br>angular通过NgZone来捕获这些时间的发生，并决定要不要通知检测机制进行变更检测，大概的示意图如下：<br><img src=\"/images/jianceqi-tree.jpg\" alt=\"jianceqi-tree\"></p>\n<p>如图所示：<br>1） NgZone继承于开源的zone.js，并进行了响应的扩展，比如：可控制不通知变更检测等，zone通过”猴子补丁“的方式强制重写了浏览器关于时间的捕获处理，所以可以捕获几乎所有事件来处理想要的处理；<br>2) NgZone会在每一次事件发生完之后通知angular检测机制执行变更检测，当然也提供了接口来控制通不通知，以及何时通知；</p>\n<ul>\n<li>onTurnStart()： 事件开始事前发射，一个浏览器任务只处理一个</li>\n<li>onTurnDone() ：当事件处理完，调度到其他任务钱发射</li>\n<li>onEventDone()：当onTurnDone调用完发射，也就是发送检测通知的时间</li>\n</ul>\n<p>通过zone.runOutsideAngular()可以控制子zone不向parent-zone冒泡</p>\n<p>3) angular应用内部在创建每一个组件实例的同时，会使用变更检测器类创建一个对应的检测器实例，用来记录组件的数据变化状态，所以在应用形式组件树的同时，也形成了检测器实例的树型结构；<br>变更检测类主要接口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ChangeDetectorRef &#123;</div><div class=\"line\">    markForCheck() : void;</div><div class=\"line\">    detach() : void;</div><div class=\"line\">    reattach() : void;</div><div class=\"line\">    detectChanges() : void;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中：<br>markForCheck()：使用于子组件，将该子组件到根组件之间的路径标记起来，通知angular检测器下次变化检测时一定检查次路径上的组件;<br>detach()：将组件的检测器从检测器数中脱离，不再受检测机制的控制，除非重新attach上;<br>reattach()：把脱离的检测器重新链接到检测器树上;<br>detectChanges():手动发起该组件到各个子组件的变更检测;<br>通过这些接口我们可以手动控制变化检测<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">@component(&#123;</div><div class=\"line\">  selector: &apos;hero-list&apos;,</div><div class=\"line\">  template: `</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">      &lt;li*ngFor=&quot;let hero of heroList&quot; (click)=&quot;select(hero)&quot;&gt;         &#123;&#123;hero.name&#125;&#125;&lt;/li&gt;</div><div class=\"line\">      &lt;hero-detail [hero]=&quot;selectHero&quot;&gt;&lt;/hero-detail&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">  `</div><div class=\"line\">&#125;)</div><div class=\"line\">export class HeroListComponent implements OnInit,OnDestroy &#123;</div><div class=\"line\">  heroList : any[] = [];</div><div class=\"line\">  refreshTimer : any;</div><div class=\"line\"></div><div class=\"line\">  constructor(private Cdr : ChangeDetectorRef,private heroServce : HeroServce) &#123;</div><div class=\"line\">    Cdr.detach();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    this.heroList = this.heroServce.getHeros();</div><div class=\"line\">    this.refreshTimer = setInterval(() =&gt; &#123;</div><div class=\"line\">      this.Cdr.detectChanges();</div><div class=\"line\">    &#125;,5000);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnDestroy() &#123;</div><div class=\"line\">    clearInterval(this.refreshTimer);</div><div class=\"line\">    this.refreshTimer = undefined;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4) 当angular接收到事件通知时，便从根组件对应的检测器实例开始，由上而下来遍历整个树，检测那些遍历发生了变化，并及时进行更新；<br>5) 应用中可以注入ngzone和检测器实例来在逻辑上控制通知的发送以及检测器的行为;<br>6) 变更检测还可以在组件里设置检测策略，有两种：</p>\n<ul>\n<li>default: 每次变更检测都会检查组件的所有数据，包括引用型变量内部的字段值，效率不高;</li>\n<li>Onpush: 每次变更检测只检查变量值是否变化，对于引用型变量如果地址不变的话不再检测;</li>\n</ul>\n<p>所以可根据使用的情况对部分组件的检测设置Onpush策略，提高效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@component(&#123;</div><div class=\"line\">  selector: &apos;hero-list&apos;,</div><div class=\"line\">  changeDetection: ChangeDetectionStrategy.Onpush</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>对于引用型变量可以通过拷贝改变他们的地址来加入检测，比如使用Immiutable变量声明,clone()等;</p>\n","site":{"data":{}},"excerpt":"<p>前面讲了angular的一些属性绑定，事件绑定，以及双向绑定之类的语法，但angular时如何响应这些绑定操作并及时更新数据模型的呢？<br>","more":"<br>当然是事件驱动的，触发的来源有以下三大事件:</p>\n<ul>\n<li>用户操作</li>\n<li>http交互</li>\n<li>定时器超时</li>\n</ul>\n<p>这几项形式不同，但都可以理解为事件的形式，而且还有一个共同点：都是异步的，而且我们进行的每一个动作都会转化为相应的事件<br>angular通过NgZone来捕获这些时间的发生，并决定要不要通知检测机制进行变更检测，大概的示意图如下：<br><img src=\"/images/jianceqi-tree.jpg\" alt=\"jianceqi-tree\"></p>\n<p>如图所示：<br>1） NgZone继承于开源的zone.js，并进行了响应的扩展，比如：可控制不通知变更检测等，zone通过”猴子补丁“的方式强制重写了浏览器关于时间的捕获处理，所以可以捕获几乎所有事件来处理想要的处理；<br>2) NgZone会在每一次事件发生完之后通知angular检测机制执行变更检测，当然也提供了接口来控制通不通知，以及何时通知；</p>\n<ul>\n<li>onTurnStart()： 事件开始事前发射，一个浏览器任务只处理一个</li>\n<li>onTurnDone() ：当事件处理完，调度到其他任务钱发射</li>\n<li>onEventDone()：当onTurnDone调用完发射，也就是发送检测通知的时间</li>\n</ul>\n<p>通过zone.runOutsideAngular()可以控制子zone不向parent-zone冒泡</p>\n<p>3) angular应用内部在创建每一个组件实例的同时，会使用变更检测器类创建一个对应的检测器实例，用来记录组件的数据变化状态，所以在应用形式组件树的同时，也形成了检测器实例的树型结构；<br>变更检测类主要接口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ChangeDetectorRef &#123;</div><div class=\"line\">    markForCheck() : void;</div><div class=\"line\">    detach() : void;</div><div class=\"line\">    reattach() : void;</div><div class=\"line\">    detectChanges() : void;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中：<br>markForCheck()：使用于子组件，将该子组件到根组件之间的路径标记起来，通知angular检测器下次变化检测时一定检查次路径上的组件;<br>detach()：将组件的检测器从检测器数中脱离，不再受检测机制的控制，除非重新attach上;<br>reattach()：把脱离的检测器重新链接到检测器树上;<br>detectChanges():手动发起该组件到各个子组件的变更检测;<br>通过这些接口我们可以手动控制变化检测<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">@component(&#123;</div><div class=\"line\">  selector: &apos;hero-list&apos;,</div><div class=\"line\">  template: `</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">      &lt;li*ngFor=&quot;let hero of heroList&quot; (click)=&quot;select(hero)&quot;&gt;         &#123;&#123;hero.name&#125;&#125;&lt;/li&gt;</div><div class=\"line\">      &lt;hero-detail [hero]=&quot;selectHero&quot;&gt;&lt;/hero-detail&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">  `</div><div class=\"line\">&#125;)</div><div class=\"line\">export class HeroListComponent implements OnInit,OnDestroy &#123;</div><div class=\"line\">  heroList : any[] = [];</div><div class=\"line\">  refreshTimer : any;</div><div class=\"line\"></div><div class=\"line\">  constructor(private Cdr : ChangeDetectorRef,private heroServce : HeroServce) &#123;</div><div class=\"line\">    Cdr.detach();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    this.heroList = this.heroServce.getHeros();</div><div class=\"line\">    this.refreshTimer = setInterval(() =&gt; &#123;</div><div class=\"line\">      this.Cdr.detectChanges();</div><div class=\"line\">    &#125;,5000);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnDestroy() &#123;</div><div class=\"line\">    clearInterval(this.refreshTimer);</div><div class=\"line\">    this.refreshTimer = undefined;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4) 当angular接收到事件通知时，便从根组件对应的检测器实例开始，由上而下来遍历整个树，检测那些遍历发生了变化，并及时进行更新；<br>5) 应用中可以注入ngzone和检测器实例来在逻辑上控制通知的发送以及检测器的行为;<br>6) 变更检测还可以在组件里设置检测策略，有两种：</p>\n<ul>\n<li>default: 每次变更检测都会检查组件的所有数据，包括引用型变量内部的字段值，效率不高;</li>\n<li>Onpush: 每次变更检测只检查变量值是否变化，对于引用型变量如果地址不变的话不再检测;</li>\n</ul>\n<p>所以可根据使用的情况对部分组件的检测设置Onpush策略，提高效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@component(&#123;</div><div class=\"line\">  selector: &apos;hero-list&apos;,</div><div class=\"line\">  changeDetection: ChangeDetectionStrategy.Onpush</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>对于引用型变量可以通过拷贝改变他们的地址来加入检测，比如使用Immiutable变量声明,clone()等;</p>"},{"title":"Angular-组件通信","date":"2017-09-10T15:48:14.000Z","comments":1,"_content":"\n在应用组件过程中，很多时候需要不同的组件之间进行数据共享，或者数据通讯，尤其的父子组件之间，angular提供了几种典型的方式完成这类需求\n<!--more-->\n\n### 输入变量\n\n通过@Input()声明输入变量，来进行父组件对子组件的数据输入\n\n    import { Component, Input } from '@angular/core';\n\n    export class HeroChildComponent {\n      @Input() hero: Hero;\n      @Input('master') masterName: string; //定义别名\n    }\n\n### setter和getter\n\n使用一个输入属性的setter，可以拦截父组件中值的变化，并进行相关处理；使用getter，又可以将处理之后的数据返回给调用者\n\n    import { Component, Input } from '@angular/core';\n\n    export class NameChildComponent {\n      private _name = '';\n\n      @Input()\n      set name(name: string) {\n        this._name = (name && name.trim()) || '<no name set>';\n      }\n\n      get name(): string { return this._name + ‘AAA’; }\n    }\n\n### OnChanges\n\n使用OnChanges生命周期钩子接口的ngOnChanges()方法来监测输入属性值的变化并做出回应\n> 注意，此方法只能检测纯变量的输入变化，不能检测结构型变量（比如：数据/对象等）内容的变更\n\n    import { Component, Input, OnChanges, SimpleChange } from '@angular/core';\n\n    export class VersionChildComponent implements OnChanges {\n      @Input() major: number;\n      @Input() minor: number;\n      changeLog: string[] = [];\n\n      ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n        let log: string[] = [];\n        for (let propName in changes) {\n          let changedProp = changes[propName];\n          let to = JSON.stringify(changedProp.currentValue);\n          if (changedProp.isFirstChange()) {\n            log.push(`Initial value of ${propName} set to ${to}`);\n          } else {\n            let from = JSON.stringify(changedProp.previousValue);\n            log.push(`${propName} changed from ${from} to ${to}`);\n          }\n        }\n        this.changeLog.push(log.join(', '));\n      }\n    }\n\n变量SimpleChange时所有输入变量变更的一个对象，每个变量名作为key，value值是个对象，对象里有变量上一次值，当前值和是否首次变化；比如上面例子的变量内容时这样的：\n\n    {\n        ‘major’：{\n            ‘currentValue’:6,\n            'firstChange': true,\n            'previousValue':3\n        },\n        ‘minor’：{\n            ‘currentValue’:8,\n            'firstChange': false,\n            'previousValue':3\n        }\n    }\n\n### 事件监听\n\n子组件暴露一个EventEmitter属性，当事件发生时，子组件利用该属性emits(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应\n\n    import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n    export class VoterComponent {\n      @Input()  name: string;\n      @Output() onVoted = new EventEmitter<boolean>();\n\n      vote(agreed: boolean) {\n        this.onVoted.emit(agreed);\n      }\n    }\n\n    //父组件\n    import { Component }      from '@angular/core';\n    @Component({\n      selector: 'vote-taker',\n      template: `\n        <my-voter *ngFor=\"let voter of voters\"\n          [name]=\"voter\"\n          (onVoted)=\"onVoted($event)\">\n        </my-voter>\n      `\n    })\n    export class VoteTakerComponent {\n      agreed = 0;\n      disagreed = 0;\n      voters = ['Mr. IQ', 'Ms. Universe', 'Bombasto'];\n\n      onVoted(agreed: boolean) {\n        agreed ? this.agreed++ : this.disagreed++;\n      }\n    }\n\n> 输入和输出变量有两种写法，效果等价：\n组件类里声明:\n@Input(别名) a;\n@Output(别名) b;\n元数据里声明：\nInputs:['a : 别名']，\nOutputs:['b : 别名']，\n\n### 使用引用变量获取组件\n\n在父组件模板里，可以通过设置引用变量代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法\n> 模板引用变量的使用只限制于在模板中使用\n\n    //子组件\n    import { Component, OnDestroy, OnInit } from '@angular/core';\n    export class CountdownTimerComponent implements OnInit, OnDestroy {\n      intervalId = 0;\n      message = '';\n      seconds = 11;\n\n      clearTimer() { clearInterval(this.intervalId); }\n\n      ngOnInit()    { this.start(); }\n      ngOnDestroy() { this.clearTimer(); }\n\n      start() { this.countDown(); }\n      stop()  {\n        this.clearTimer();\n        this.message = `Holding at T-${this.seconds} seconds`;\n      }\n\n      private countDown() {}\n    }\n\n    //父组件\n    import { Component }                from '@angular/core';\n    import { CountdownTimerComponent }  from './countdown-timer.component';\n\n    @Component({\n      selector: 'countdown-parent-lv',\n      template: `\n      <h3>Countdown to Liftoff (via local variable)</h3>\n      <button (click)=\"timer.start()\">Start</button>\n      <button (click)=\"timer.stop()\">Stop</button>\n      <div class=\"seconds\">{{timer.seconds}}</div>\n      <countdown-timer #timer></countdown-timer>\n      `,\n      styleUrls: ['demo.css']\n    })\n    export class CountdownLocalVarParentComponent { }\n\n### ViewChild\n\n模板引用变量方法有局限性，只能在模板中进行，父组件本身的代码对子组件没有访问权；要让父组件直接访问子组件的变量或方法，可使用ViewChild将子组件注入到父组件里面\n\n    import { AfterViewInit, ViewChild } from '@angular/core';\n    import { Component }                from '@angular/core';\n    import { CountdownTimerComponent }  from './countdown-timer.component';\n\n    @Component({\n      selector: 'countdown-parent-vc',\n      template: `\n      <h3>Countdown to Liftoff (via ViewChild)</h3>\n      <button (click)=\"start()\">Start</button>\n      <button (click)=\"stop()\">Stop</button>\n      <div class=\"seconds\">{{ seconds() }}</div>\n      <countdown-timer></countdown-timer>\n      `\n    })\n    export class CountdownViewChildParentComponent implements AfterViewInit {\n      @ViewChild(CountdownTimerComponent)\n      private timerComponent: CountdownTimerComponent;\n\n      seconds() { return 0; }\n\n      ngAfterViewInit() {\n        setTimeout(() => this.seconds = () => this.timerComponent.seconds, 0);\n      }\n\n      start() { this.timerComponent.start(); }\n      stop() { this.timerComponent.stop(); }\n    }\n\n> 注意：ngAfterViewInit()生命周期钩子是非常重要的一步。被注入的计时器组件只有在Angular显示了父组件视图之后才能访问，所以我们先把秒数显示为0；然后Angular会调用ngAfterViewInit生命周期钩子，但这时候再更新父组件视图的倒计时就已经太晚了。\nAngular的单向数据流规则会阻止在同一个周期内更新父组件视图。我们在显示秒数之前会被迫再等一轮。\n使用setTimeout()来等下一轮，然后改写seconds()方法，这样它接下来就会从注入的这个计时器组件里获取秒数的值\n\n### 服务共享数据\n\n可以通过服务在父子组件之间来共享数据，因为在他们之间这个服务可以时单例的，父子组件使用服务的同一个实例，自然可以共享，这个在依赖注入里以及说的很多，这里不再阐述\n\n","source":"_posts/2017-09-10-angular-zujiantonxing.md","raw":"---\ntitle: Angular-组件通信\ndate: 2017-09-10 23:48:14\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n在应用组件过程中，很多时候需要不同的组件之间进行数据共享，或者数据通讯，尤其的父子组件之间，angular提供了几种典型的方式完成这类需求\n<!--more-->\n\n### 输入变量\n\n通过@Input()声明输入变量，来进行父组件对子组件的数据输入\n\n    import { Component, Input } from '@angular/core';\n\n    export class HeroChildComponent {\n      @Input() hero: Hero;\n      @Input('master') masterName: string; //定义别名\n    }\n\n### setter和getter\n\n使用一个输入属性的setter，可以拦截父组件中值的变化，并进行相关处理；使用getter，又可以将处理之后的数据返回给调用者\n\n    import { Component, Input } from '@angular/core';\n\n    export class NameChildComponent {\n      private _name = '';\n\n      @Input()\n      set name(name: string) {\n        this._name = (name && name.trim()) || '<no name set>';\n      }\n\n      get name(): string { return this._name + ‘AAA’; }\n    }\n\n### OnChanges\n\n使用OnChanges生命周期钩子接口的ngOnChanges()方法来监测输入属性值的变化并做出回应\n> 注意，此方法只能检测纯变量的输入变化，不能检测结构型变量（比如：数据/对象等）内容的变更\n\n    import { Component, Input, OnChanges, SimpleChange } from '@angular/core';\n\n    export class VersionChildComponent implements OnChanges {\n      @Input() major: number;\n      @Input() minor: number;\n      changeLog: string[] = [];\n\n      ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n        let log: string[] = [];\n        for (let propName in changes) {\n          let changedProp = changes[propName];\n          let to = JSON.stringify(changedProp.currentValue);\n          if (changedProp.isFirstChange()) {\n            log.push(`Initial value of ${propName} set to ${to}`);\n          } else {\n            let from = JSON.stringify(changedProp.previousValue);\n            log.push(`${propName} changed from ${from} to ${to}`);\n          }\n        }\n        this.changeLog.push(log.join(', '));\n      }\n    }\n\n变量SimpleChange时所有输入变量变更的一个对象，每个变量名作为key，value值是个对象，对象里有变量上一次值，当前值和是否首次变化；比如上面例子的变量内容时这样的：\n\n    {\n        ‘major’：{\n            ‘currentValue’:6,\n            'firstChange': true,\n            'previousValue':3\n        },\n        ‘minor’：{\n            ‘currentValue’:8,\n            'firstChange': false,\n            'previousValue':3\n        }\n    }\n\n### 事件监听\n\n子组件暴露一个EventEmitter属性，当事件发生时，子组件利用该属性emits(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应\n\n    import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n    export class VoterComponent {\n      @Input()  name: string;\n      @Output() onVoted = new EventEmitter<boolean>();\n\n      vote(agreed: boolean) {\n        this.onVoted.emit(agreed);\n      }\n    }\n\n    //父组件\n    import { Component }      from '@angular/core';\n    @Component({\n      selector: 'vote-taker',\n      template: `\n        <my-voter *ngFor=\"let voter of voters\"\n          [name]=\"voter\"\n          (onVoted)=\"onVoted($event)\">\n        </my-voter>\n      `\n    })\n    export class VoteTakerComponent {\n      agreed = 0;\n      disagreed = 0;\n      voters = ['Mr. IQ', 'Ms. Universe', 'Bombasto'];\n\n      onVoted(agreed: boolean) {\n        agreed ? this.agreed++ : this.disagreed++;\n      }\n    }\n\n> 输入和输出变量有两种写法，效果等价：\n组件类里声明:\n@Input(别名) a;\n@Output(别名) b;\n元数据里声明：\nInputs:['a : 别名']，\nOutputs:['b : 别名']，\n\n### 使用引用变量获取组件\n\n在父组件模板里，可以通过设置引用变量代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法\n> 模板引用变量的使用只限制于在模板中使用\n\n    //子组件\n    import { Component, OnDestroy, OnInit } from '@angular/core';\n    export class CountdownTimerComponent implements OnInit, OnDestroy {\n      intervalId = 0;\n      message = '';\n      seconds = 11;\n\n      clearTimer() { clearInterval(this.intervalId); }\n\n      ngOnInit()    { this.start(); }\n      ngOnDestroy() { this.clearTimer(); }\n\n      start() { this.countDown(); }\n      stop()  {\n        this.clearTimer();\n        this.message = `Holding at T-${this.seconds} seconds`;\n      }\n\n      private countDown() {}\n    }\n\n    //父组件\n    import { Component }                from '@angular/core';\n    import { CountdownTimerComponent }  from './countdown-timer.component';\n\n    @Component({\n      selector: 'countdown-parent-lv',\n      template: `\n      <h3>Countdown to Liftoff (via local variable)</h3>\n      <button (click)=\"timer.start()\">Start</button>\n      <button (click)=\"timer.stop()\">Stop</button>\n      <div class=\"seconds\">{{timer.seconds}}</div>\n      <countdown-timer #timer></countdown-timer>\n      `,\n      styleUrls: ['demo.css']\n    })\n    export class CountdownLocalVarParentComponent { }\n\n### ViewChild\n\n模板引用变量方法有局限性，只能在模板中进行，父组件本身的代码对子组件没有访问权；要让父组件直接访问子组件的变量或方法，可使用ViewChild将子组件注入到父组件里面\n\n    import { AfterViewInit, ViewChild } from '@angular/core';\n    import { Component }                from '@angular/core';\n    import { CountdownTimerComponent }  from './countdown-timer.component';\n\n    @Component({\n      selector: 'countdown-parent-vc',\n      template: `\n      <h3>Countdown to Liftoff (via ViewChild)</h3>\n      <button (click)=\"start()\">Start</button>\n      <button (click)=\"stop()\">Stop</button>\n      <div class=\"seconds\">{{ seconds() }}</div>\n      <countdown-timer></countdown-timer>\n      `\n    })\n    export class CountdownViewChildParentComponent implements AfterViewInit {\n      @ViewChild(CountdownTimerComponent)\n      private timerComponent: CountdownTimerComponent;\n\n      seconds() { return 0; }\n\n      ngAfterViewInit() {\n        setTimeout(() => this.seconds = () => this.timerComponent.seconds, 0);\n      }\n\n      start() { this.timerComponent.start(); }\n      stop() { this.timerComponent.stop(); }\n    }\n\n> 注意：ngAfterViewInit()生命周期钩子是非常重要的一步。被注入的计时器组件只有在Angular显示了父组件视图之后才能访问，所以我们先把秒数显示为0；然后Angular会调用ngAfterViewInit生命周期钩子，但这时候再更新父组件视图的倒计时就已经太晚了。\nAngular的单向数据流规则会阻止在同一个周期内更新父组件视图。我们在显示秒数之前会被迫再等一轮。\n使用setTimeout()来等下一轮，然后改写seconds()方法，这样它接下来就会从注入的这个计时器组件里获取秒数的值\n\n### 服务共享数据\n\n可以通过服务在父子组件之间来共享数据，因为在他们之间这个服务可以时单例的，父子组件使用服务的同一个实例，自然可以共享，这个在依赖注入里以及说的很多，这里不再阐述\n\n","slug":"angular-zujiantonxing","published":1,"updated":"2017-11-06T15:35:06.103Z","layout":"post","photos":[],"link":"","_id":"cjqwe425r0012or0b3pf74zg8","content":"<p>在应用组件过程中，很多时候需要不同的组件之间进行数据共享，或者数据通讯，尤其的父子组件之间，angular提供了几种典型的方式完成这类需求<br><a id=\"more\"></a></p>\n<h3 id=\"输入变量\"><a href=\"#输入变量\" class=\"headerlink\" title=\"输入变量\"></a>输入变量</h3><p>通过@Input()声明输入变量，来进行父组件对子组件的数据输入</p>\n<pre><code>import { Component, Input } from &apos;@angular/core&apos;;\n\nexport class HeroChildComponent {\n  @Input() hero: Hero;\n  @Input(&apos;master&apos;) masterName: string; //定义别名\n}\n</code></pre><h3 id=\"setter和getter\"><a href=\"#setter和getter\" class=\"headerlink\" title=\"setter和getter\"></a>setter和getter</h3><p>使用一个输入属性的setter，可以拦截父组件中值的变化，并进行相关处理；使用getter，又可以将处理之后的数据返回给调用者</p>\n<pre><code>import { Component, Input } from &apos;@angular/core&apos;;\n\nexport class NameChildComponent {\n  private _name = &apos;&apos;;\n\n  @Input()\n  set name(name: string) {\n    this._name = (name &amp;&amp; name.trim()) || &apos;&lt;no name set&gt;&apos;;\n  }\n\n  get name(): string { return this._name + ‘AAA’; }\n}\n</code></pre><h3 id=\"OnChanges\"><a href=\"#OnChanges\" class=\"headerlink\" title=\"OnChanges\"></a>OnChanges</h3><p>使用OnChanges生命周期钩子接口的ngOnChanges()方法来监测输入属性值的变化并做出回应</p>\n<blockquote>\n<p>注意，此方法只能检测纯变量的输入变化，不能检测结构型变量（比如：数据/对象等）内容的变更</p>\n</blockquote>\n<pre><code>import { Component, Input, OnChanges, SimpleChange } from &apos;@angular/core&apos;;\n\nexport class VersionChildComponent implements OnChanges {\n  @Input() major: number;\n  @Input() minor: number;\n  changeLog: string[] = [];\n\n  ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n    let log: string[] = [];\n    for (let propName in changes) {\n      let changedProp = changes[propName];\n      let to = JSON.stringify(changedProp.currentValue);\n      if (changedProp.isFirstChange()) {\n        log.push(`Initial value of ${propName} set to ${to}`);\n      } else {\n        let from = JSON.stringify(changedProp.previousValue);\n        log.push(`${propName} changed from ${from} to ${to}`);\n      }\n    }\n    this.changeLog.push(log.join(&apos;, &apos;));\n  }\n}\n</code></pre><p>变量SimpleChange时所有输入变量变更的一个对象，每个变量名作为key，value值是个对象，对象里有变量上一次值，当前值和是否首次变化；比如上面例子的变量内容时这样的：</p>\n<pre><code>{\n    ‘major’：{\n        ‘currentValue’:6,\n        &apos;firstChange&apos;: true,\n        &apos;previousValue&apos;:3\n    },\n    ‘minor’：{\n        ‘currentValue’:8,\n        &apos;firstChange&apos;: false,\n        &apos;previousValue&apos;:3\n    }\n}\n</code></pre><h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p>子组件暴露一个EventEmitter属性，当事件发生时，子组件利用该属性emits(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应</p>\n<pre><code>import { Component, EventEmitter, Input, Output } from &apos;@angular/core&apos;;\n\nexport class VoterComponent {\n  @Input()  name: string;\n  @Output() onVoted = new EventEmitter&lt;boolean&gt;();\n\n  vote(agreed: boolean) {\n    this.onVoted.emit(agreed);\n  }\n}\n\n//父组件\nimport { Component }      from &apos;@angular/core&apos;;\n@Component({\n  selector: &apos;vote-taker&apos;,\n  template: `\n    &lt;my-voter *ngFor=&quot;let voter of voters&quot;\n      [name]=&quot;voter&quot;\n      (onVoted)=&quot;onVoted($event)&quot;&gt;\n    &lt;/my-voter&gt;\n  `\n})\nexport class VoteTakerComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = [&apos;Mr. IQ&apos;, &apos;Ms. Universe&apos;, &apos;Bombasto&apos;];\n\n  onVoted(agreed: boolean) {\n    agreed ? this.agreed++ : this.disagreed++;\n  }\n}\n</code></pre><blockquote>\n<p>输入和输出变量有两种写法，效果等价：<br>组件类里声明:<br>@Input(别名) a;<br>@Output(别名) b;<br>元数据里声明：<br>Inputs:[‘a : 别名’]，<br>Outputs:[‘b : 别名’]，</p>\n</blockquote>\n<h3 id=\"使用引用变量获取组件\"><a href=\"#使用引用变量获取组件\" class=\"headerlink\" title=\"使用引用变量获取组件\"></a>使用引用变量获取组件</h3><p>在父组件模板里，可以通过设置引用变量代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法</p>\n<blockquote>\n<p>模板引用变量的使用只限制于在模板中使用</p>\n</blockquote>\n<pre><code>//子组件\nimport { Component, OnDestroy, OnInit } from &apos;@angular/core&apos;;\nexport class CountdownTimerComponent implements OnInit, OnDestroy {\n  intervalId = 0;\n  message = &apos;&apos;;\n  seconds = 11;\n\n  clearTimer() { clearInterval(this.intervalId); }\n\n  ngOnInit()    { this.start(); }\n  ngOnDestroy() { this.clearTimer(); }\n\n  start() { this.countDown(); }\n  stop()  {\n    this.clearTimer();\n    this.message = `Holding at T-${this.seconds} seconds`;\n  }\n\n  private countDown() {}\n}\n\n//父组件\nimport { Component }                from &apos;@angular/core&apos;;\nimport { CountdownTimerComponent }  from &apos;./countdown-timer.component&apos;;\n\n@Component({\n  selector: &apos;countdown-parent-lv&apos;,\n  template: `\n  &lt;h3&gt;Countdown to Liftoff (via local variable)&lt;/h3&gt;\n  &lt;button (click)=&quot;timer.start()&quot;&gt;Start&lt;/button&gt;\n  &lt;button (click)=&quot;timer.stop()&quot;&gt;Stop&lt;/button&gt;\n  &lt;div class=&quot;seconds&quot;&gt;{{timer.seconds}}&lt;/div&gt;\n  &lt;countdown-timer #timer&gt;&lt;/countdown-timer&gt;\n  `,\n  styleUrls: [&apos;demo.css&apos;]\n})\nexport class CountdownLocalVarParentComponent { }\n</code></pre><h3 id=\"ViewChild\"><a href=\"#ViewChild\" class=\"headerlink\" title=\"ViewChild\"></a>ViewChild</h3><p>模板引用变量方法有局限性，只能在模板中进行，父组件本身的代码对子组件没有访问权；要让父组件直接访问子组件的变量或方法，可使用ViewChild将子组件注入到父组件里面</p>\n<pre><code>import { AfterViewInit, ViewChild } from &apos;@angular/core&apos;;\nimport { Component }                from &apos;@angular/core&apos;;\nimport { CountdownTimerComponent }  from &apos;./countdown-timer.component&apos;;\n\n@Component({\n  selector: &apos;countdown-parent-vc&apos;,\n  template: `\n  &lt;h3&gt;Countdown to Liftoff (via ViewChild)&lt;/h3&gt;\n  &lt;button (click)=&quot;start()&quot;&gt;Start&lt;/button&gt;\n  &lt;button (click)=&quot;stop()&quot;&gt;Stop&lt;/button&gt;\n  &lt;div class=&quot;seconds&quot;&gt;{{ seconds() }}&lt;/div&gt;\n  &lt;countdown-timer&gt;&lt;/countdown-timer&gt;\n  `\n})\nexport class CountdownViewChildParentComponent implements AfterViewInit {\n  @ViewChild(CountdownTimerComponent)\n  private timerComponent: CountdownTimerComponent;\n\n  seconds() { return 0; }\n\n  ngAfterViewInit() {\n    setTimeout(() =&gt; this.seconds = () =&gt; this.timerComponent.seconds, 0);\n  }\n\n  start() { this.timerComponent.start(); }\n  stop() { this.timerComponent.stop(); }\n}\n</code></pre><blockquote>\n<p>注意：ngAfterViewInit()生命周期钩子是非常重要的一步。被注入的计时器组件只有在Angular显示了父组件视图之后才能访问，所以我们先把秒数显示为0；然后Angular会调用ngAfterViewInit生命周期钩子，但这时候再更新父组件视图的倒计时就已经太晚了。<br>Angular的单向数据流规则会阻止在同一个周期内更新父组件视图。我们在显示秒数之前会被迫再等一轮。<br>使用setTimeout()来等下一轮，然后改写seconds()方法，这样它接下来就会从注入的这个计时器组件里获取秒数的值</p>\n</blockquote>\n<h3 id=\"服务共享数据\"><a href=\"#服务共享数据\" class=\"headerlink\" title=\"服务共享数据\"></a>服务共享数据</h3><p>可以通过服务在父子组件之间来共享数据，因为在他们之间这个服务可以时单例的，父子组件使用服务的同一个实例，自然可以共享，这个在依赖注入里以及说的很多，这里不再阐述</p>\n","site":{"data":{}},"excerpt":"<p>在应用组件过程中，很多时候需要不同的组件之间进行数据共享，或者数据通讯，尤其的父子组件之间，angular提供了几种典型的方式完成这类需求<br>","more":"</p>\n<h3 id=\"输入变量\"><a href=\"#输入变量\" class=\"headerlink\" title=\"输入变量\"></a>输入变量</h3><p>通过@Input()声明输入变量，来进行父组件对子组件的数据输入</p>\n<pre><code>import { Component, Input } from &apos;@angular/core&apos;;\n\nexport class HeroChildComponent {\n  @Input() hero: Hero;\n  @Input(&apos;master&apos;) masterName: string; //定义别名\n}\n</code></pre><h3 id=\"setter和getter\"><a href=\"#setter和getter\" class=\"headerlink\" title=\"setter和getter\"></a>setter和getter</h3><p>使用一个输入属性的setter，可以拦截父组件中值的变化，并进行相关处理；使用getter，又可以将处理之后的数据返回给调用者</p>\n<pre><code>import { Component, Input } from &apos;@angular/core&apos;;\n\nexport class NameChildComponent {\n  private _name = &apos;&apos;;\n\n  @Input()\n  set name(name: string) {\n    this._name = (name &amp;&amp; name.trim()) || &apos;&lt;no name set&gt;&apos;;\n  }\n\n  get name(): string { return this._name + ‘AAA’; }\n}\n</code></pre><h3 id=\"OnChanges\"><a href=\"#OnChanges\" class=\"headerlink\" title=\"OnChanges\"></a>OnChanges</h3><p>使用OnChanges生命周期钩子接口的ngOnChanges()方法来监测输入属性值的变化并做出回应</p>\n<blockquote>\n<p>注意，此方法只能检测纯变量的输入变化，不能检测结构型变量（比如：数据/对象等）内容的变更</p>\n</blockquote>\n<pre><code>import { Component, Input, OnChanges, SimpleChange } from &apos;@angular/core&apos;;\n\nexport class VersionChildComponent implements OnChanges {\n  @Input() major: number;\n  @Input() minor: number;\n  changeLog: string[] = [];\n\n  ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n    let log: string[] = [];\n    for (let propName in changes) {\n      let changedProp = changes[propName];\n      let to = JSON.stringify(changedProp.currentValue);\n      if (changedProp.isFirstChange()) {\n        log.push(`Initial value of ${propName} set to ${to}`);\n      } else {\n        let from = JSON.stringify(changedProp.previousValue);\n        log.push(`${propName} changed from ${from} to ${to}`);\n      }\n    }\n    this.changeLog.push(log.join(&apos;, &apos;));\n  }\n}\n</code></pre><p>变量SimpleChange时所有输入变量变更的一个对象，每个变量名作为key，value值是个对象，对象里有变量上一次值，当前值和是否首次变化；比如上面例子的变量内容时这样的：</p>\n<pre><code>{\n    ‘major’：{\n        ‘currentValue’:6,\n        &apos;firstChange&apos;: true,\n        &apos;previousValue&apos;:3\n    },\n    ‘minor’：{\n        ‘currentValue’:8,\n        &apos;firstChange&apos;: false,\n        &apos;previousValue&apos;:3\n    }\n}\n</code></pre><h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p>子组件暴露一个EventEmitter属性，当事件发生时，子组件利用该属性emits(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应</p>\n<pre><code>import { Component, EventEmitter, Input, Output } from &apos;@angular/core&apos;;\n\nexport class VoterComponent {\n  @Input()  name: string;\n  @Output() onVoted = new EventEmitter&lt;boolean&gt;();\n\n  vote(agreed: boolean) {\n    this.onVoted.emit(agreed);\n  }\n}\n\n//父组件\nimport { Component }      from &apos;@angular/core&apos;;\n@Component({\n  selector: &apos;vote-taker&apos;,\n  template: `\n    &lt;my-voter *ngFor=&quot;let voter of voters&quot;\n      [name]=&quot;voter&quot;\n      (onVoted)=&quot;onVoted($event)&quot;&gt;\n    &lt;/my-voter&gt;\n  `\n})\nexport class VoteTakerComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = [&apos;Mr. IQ&apos;, &apos;Ms. Universe&apos;, &apos;Bombasto&apos;];\n\n  onVoted(agreed: boolean) {\n    agreed ? this.agreed++ : this.disagreed++;\n  }\n}\n</code></pre><blockquote>\n<p>输入和输出变量有两种写法，效果等价：<br>组件类里声明:<br>@Input(别名) a;<br>@Output(别名) b;<br>元数据里声明：<br>Inputs:[‘a : 别名’]，<br>Outputs:[‘b : 别名’]，</p>\n</blockquote>\n<h3 id=\"使用引用变量获取组件\"><a href=\"#使用引用变量获取组件\" class=\"headerlink\" title=\"使用引用变量获取组件\"></a>使用引用变量获取组件</h3><p>在父组件模板里，可以通过设置引用变量代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法</p>\n<blockquote>\n<p>模板引用变量的使用只限制于在模板中使用</p>\n</blockquote>\n<pre><code>//子组件\nimport { Component, OnDestroy, OnInit } from &apos;@angular/core&apos;;\nexport class CountdownTimerComponent implements OnInit, OnDestroy {\n  intervalId = 0;\n  message = &apos;&apos;;\n  seconds = 11;\n\n  clearTimer() { clearInterval(this.intervalId); }\n\n  ngOnInit()    { this.start(); }\n  ngOnDestroy() { this.clearTimer(); }\n\n  start() { this.countDown(); }\n  stop()  {\n    this.clearTimer();\n    this.message = `Holding at T-${this.seconds} seconds`;\n  }\n\n  private countDown() {}\n}\n\n//父组件\nimport { Component }                from &apos;@angular/core&apos;;\nimport { CountdownTimerComponent }  from &apos;./countdown-timer.component&apos;;\n\n@Component({\n  selector: &apos;countdown-parent-lv&apos;,\n  template: `\n  &lt;h3&gt;Countdown to Liftoff (via local variable)&lt;/h3&gt;\n  &lt;button (click)=&quot;timer.start()&quot;&gt;Start&lt;/button&gt;\n  &lt;button (click)=&quot;timer.stop()&quot;&gt;Stop&lt;/button&gt;\n  &lt;div class=&quot;seconds&quot;&gt;{{timer.seconds}}&lt;/div&gt;\n  &lt;countdown-timer #timer&gt;&lt;/countdown-timer&gt;\n  `,\n  styleUrls: [&apos;demo.css&apos;]\n})\nexport class CountdownLocalVarParentComponent { }\n</code></pre><h3 id=\"ViewChild\"><a href=\"#ViewChild\" class=\"headerlink\" title=\"ViewChild\"></a>ViewChild</h3><p>模板引用变量方法有局限性，只能在模板中进行，父组件本身的代码对子组件没有访问权；要让父组件直接访问子组件的变量或方法，可使用ViewChild将子组件注入到父组件里面</p>\n<pre><code>import { AfterViewInit, ViewChild } from &apos;@angular/core&apos;;\nimport { Component }                from &apos;@angular/core&apos;;\nimport { CountdownTimerComponent }  from &apos;./countdown-timer.component&apos;;\n\n@Component({\n  selector: &apos;countdown-parent-vc&apos;,\n  template: `\n  &lt;h3&gt;Countdown to Liftoff (via ViewChild)&lt;/h3&gt;\n  &lt;button (click)=&quot;start()&quot;&gt;Start&lt;/button&gt;\n  &lt;button (click)=&quot;stop()&quot;&gt;Stop&lt;/button&gt;\n  &lt;div class=&quot;seconds&quot;&gt;{{ seconds() }}&lt;/div&gt;\n  &lt;countdown-timer&gt;&lt;/countdown-timer&gt;\n  `\n})\nexport class CountdownViewChildParentComponent implements AfterViewInit {\n  @ViewChild(CountdownTimerComponent)\n  private timerComponent: CountdownTimerComponent;\n\n  seconds() { return 0; }\n\n  ngAfterViewInit() {\n    setTimeout(() =&gt; this.seconds = () =&gt; this.timerComponent.seconds, 0);\n  }\n\n  start() { this.timerComponent.start(); }\n  stop() { this.timerComponent.stop(); }\n}\n</code></pre><blockquote>\n<p>注意：ngAfterViewInit()生命周期钩子是非常重要的一步。被注入的计时器组件只有在Angular显示了父组件视图之后才能访问，所以我们先把秒数显示为0；然后Angular会调用ngAfterViewInit生命周期钩子，但这时候再更新父组件视图的倒计时就已经太晚了。<br>Angular的单向数据流规则会阻止在同一个周期内更新父组件视图。我们在显示秒数之前会被迫再等一轮。<br>使用setTimeout()来等下一轮，然后改写seconds()方法，这样它接下来就会从注入的这个计时器组件里获取秒数的值</p>\n</blockquote>\n<h3 id=\"服务共享数据\"><a href=\"#服务共享数据\" class=\"headerlink\" title=\"服务共享数据\"></a>服务共享数据</h3><p>可以通过服务在父子组件之间来共享数据，因为在他们之间这个服务可以时单例的，父子组件使用服务的同一个实例，自然可以共享，这个在依赖注入里以及说的很多，这里不再阐述</p>"},{"title":"Angular-指令","date":"2017-11-09T16:13:25.000Z","comments":1,"_content":"\n指令在angular里是一种主要的存在，它可以改变元素的结构，改变元素的属性，甚至改变元素的行为\nangular有许多内置的指令，我们也可以自定义指令，在属性指令和结构指令里面描述过，而组件作为一种特殊的指令，描述着带模板的指令\n<!--more-->\n下面主要介绍内置的一些常用指令：\n\n### 1.通用指令\n包含在CommonModule模块中\nngClass\nngStyle\nngIf\nngFor\nngSwitch,ngSwitchCase,ngSwitchDefault\nngTemplateOutlet\nngPlural,ngPluralCase\n\n这些是一些常用的结构和属性指令，之前介绍过\n\n### 2.路由指令\n包含在RouterModule模块中\nRouterOutlet：路由占位符，\n\n    <router-outlet></router-outlet>\n\nRouterlink: 路由url链接\n\n    <button routerLink=\"{{'/hero/' + crisis.id}}\" routerLinkActive=\"Active\">\n    </button>\n\nRouterlinkActive：属性绑定，用于在路由激活时把CSS类添加到该元素\n\n    <button [routerLink]=\"['/hero', hero.id]\"\n    [routerLinkActive]=\"['Active','classA']\"></button>\n\n### 3.表单指令\n\n**(1) 模板驱动表单指令**\n包含在FormModule模块中\nngModel：双向数据绑定\n\n    <input type=\"text\" id=\"name\" [(ngModel)]=\"model.name\" name=\"name\" required>\n\nngModelGroup:双向数据绑定组\n\nngForm：模板驱动表单是为form自动添加的指令\n\n    <form #heroForm=\"ngForm\">\n\n> Angular会在<form>标签上自动创建并附加一个NgForm指令。\nNgForm指令为form增补了一些额外特性。 它会控制那些带有ngModel指令和name属性的元素，监听他们的属性（包括其有效性）。 它还有自己的valid属性，这个属性只有在它包含的每个控件都有效时才是真。\n\n**(2) 响应式表单指令**\n包含在ReactiveFormModule模块中\nFormControlDirective\nFormControlName\nFormArrayName\nFormGroupDirective\nFormGroupName\n\n这些指令用户创建响应式表单，在表单一文中将详细描述\n> FormControl--用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。\nFormGroup--用于跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。 组件中的顶级表单就是一个FormGroup。\nFormArray--用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。\n\n**(3) 表单内置指令**\n包含在InternalFormSharedModule模块中\n\n单复选框选项指令和框状态控制指令\nngSelectOption,ngSelectMultipleOption\nngControlStatus,ngControlStatusGroup\n\n各种类型输入框的值控制指令\nDefaultValueAccessor,CheckboxControlValueAccessor,RadioControlValueAccessor,\nNumberValueAccessor,SelectControlAccessor\n\n输入约束指令\nRequiredValidator,MinLentthValidtor,MaxLengthValidtor,PatternValidtor\n\n以上指令是angular为表单建设而实现的一部分内部指令，在使用模板驱动或响应式构建表单和表单控件时angular自动对表单的一些调用和控制，用户不需要显式的使用她们，一般也不需要过多的了解实现细节，有兴趣的可上官网api文档库查看研究\n\n这里举几个例子：\nDefaultValueAccessor控制如下的值设定\n\n    <input type=\"text\" id=\"name\" [(ngModel)]=\"model.name\" name=\"name>\n\nRequiredValidator用于输入框的required属性实现，会有相应的非法状态，css类等\n\n    <input type=\"text\" [(ngModel)]=\"model.name\" name=\"name\" required>","source":"_posts/2017-11-10-angular-directive.md","raw":"---\ntitle: Angular-指令\ndate: 2017-11-10 00:13:25\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n指令在angular里是一种主要的存在，它可以改变元素的结构，改变元素的属性，甚至改变元素的行为\nangular有许多内置的指令，我们也可以自定义指令，在属性指令和结构指令里面描述过，而组件作为一种特殊的指令，描述着带模板的指令\n<!--more-->\n下面主要介绍内置的一些常用指令：\n\n### 1.通用指令\n包含在CommonModule模块中\nngClass\nngStyle\nngIf\nngFor\nngSwitch,ngSwitchCase,ngSwitchDefault\nngTemplateOutlet\nngPlural,ngPluralCase\n\n这些是一些常用的结构和属性指令，之前介绍过\n\n### 2.路由指令\n包含在RouterModule模块中\nRouterOutlet：路由占位符，\n\n    <router-outlet></router-outlet>\n\nRouterlink: 路由url链接\n\n    <button routerLink=\"{{'/hero/' + crisis.id}}\" routerLinkActive=\"Active\">\n    </button>\n\nRouterlinkActive：属性绑定，用于在路由激活时把CSS类添加到该元素\n\n    <button [routerLink]=\"['/hero', hero.id]\"\n    [routerLinkActive]=\"['Active','classA']\"></button>\n\n### 3.表单指令\n\n**(1) 模板驱动表单指令**\n包含在FormModule模块中\nngModel：双向数据绑定\n\n    <input type=\"text\" id=\"name\" [(ngModel)]=\"model.name\" name=\"name\" required>\n\nngModelGroup:双向数据绑定组\n\nngForm：模板驱动表单是为form自动添加的指令\n\n    <form #heroForm=\"ngForm\">\n\n> Angular会在<form>标签上自动创建并附加一个NgForm指令。\nNgForm指令为form增补了一些额外特性。 它会控制那些带有ngModel指令和name属性的元素，监听他们的属性（包括其有效性）。 它还有自己的valid属性，这个属性只有在它包含的每个控件都有效时才是真。\n\n**(2) 响应式表单指令**\n包含在ReactiveFormModule模块中\nFormControlDirective\nFormControlName\nFormArrayName\nFormGroupDirective\nFormGroupName\n\n这些指令用户创建响应式表单，在表单一文中将详细描述\n> FormControl--用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。\nFormGroup--用于跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。 组件中的顶级表单就是一个FormGroup。\nFormArray--用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。\n\n**(3) 表单内置指令**\n包含在InternalFormSharedModule模块中\n\n单复选框选项指令和框状态控制指令\nngSelectOption,ngSelectMultipleOption\nngControlStatus,ngControlStatusGroup\n\n各种类型输入框的值控制指令\nDefaultValueAccessor,CheckboxControlValueAccessor,RadioControlValueAccessor,\nNumberValueAccessor,SelectControlAccessor\n\n输入约束指令\nRequiredValidator,MinLentthValidtor,MaxLengthValidtor,PatternValidtor\n\n以上指令是angular为表单建设而实现的一部分内部指令，在使用模板驱动或响应式构建表单和表单控件时angular自动对表单的一些调用和控制，用户不需要显式的使用她们，一般也不需要过多的了解实现细节，有兴趣的可上官网api文档库查看研究\n\n这里举几个例子：\nDefaultValueAccessor控制如下的值设定\n\n    <input type=\"text\" id=\"name\" [(ngModel)]=\"model.name\" name=\"name>\n\nRequiredValidator用于输入框的required属性实现，会有相应的非法状态，css类等\n\n    <input type=\"text\" [(ngModel)]=\"model.name\" name=\"name\" required>","slug":"angular-directive","published":1,"updated":"2017-11-09T16:14:17.118Z","layout":"post","photos":[],"link":"","_id":"cjqwe42630015or0bkq3t9wl9","content":"<p>指令在angular里是一种主要的存在，它可以改变元素的结构，改变元素的属性，甚至改变元素的行为<br>angular有许多内置的指令，我们也可以自定义指令，在属性指令和结构指令里面描述过，而组件作为一种特殊的指令，描述着带模板的指令<br><a id=\"more\"></a><br>下面主要介绍内置的一些常用指令：</p>\n<h3 id=\"1-通用指令\"><a href=\"#1-通用指令\" class=\"headerlink\" title=\"1.通用指令\"></a>1.通用指令</h3><p>包含在CommonModule模块中<br>ngClass<br>ngStyle<br>ngIf<br>ngFor<br>ngSwitch,ngSwitchCase,ngSwitchDefault<br>ngTemplateOutlet<br>ngPlural,ngPluralCase</p>\n<p>这些是一些常用的结构和属性指令，之前介绍过</p>\n<h3 id=\"2-路由指令\"><a href=\"#2-路由指令\" class=\"headerlink\" title=\"2.路由指令\"></a>2.路由指令</h3><p>包含在RouterModule模块中<br>RouterOutlet：路由占位符，</p>\n<pre><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre><p>Routerlink: 路由url链接</p>\n<pre><code>&lt;button routerLink=&quot;{{'/hero/' + crisis.id}}&quot; routerLinkActive=&quot;Active&quot;&gt;\n&lt;/button&gt;\n</code></pre><p>RouterlinkActive：属性绑定，用于在路由激活时把CSS类添加到该元素</p>\n<pre><code>&lt;button [routerLink]=&quot;[&apos;/hero&apos;, hero.id]&quot;\n[routerLinkActive]=&quot;[&apos;Active&apos;,&apos;classA&apos;]&quot;&gt;&lt;/button&gt;\n</code></pre><h3 id=\"3-表单指令\"><a href=\"#3-表单指令\" class=\"headerlink\" title=\"3.表单指令\"></a>3.表单指令</h3><p><strong>(1) 模板驱动表单指令</strong><br>包含在FormModule模块中<br>ngModel：双向数据绑定</p>\n<pre><code>&lt;input type=&quot;text&quot; id=&quot;name&quot; [(ngModel)]=&quot;model.name&quot; name=&quot;name&quot; required&gt;\n</code></pre><p>ngModelGroup:双向数据绑定组</p>\n<p>ngForm：模板驱动表单是为form自动添加的指令</p>\n<pre><code>&lt;form #heroForm=&quot;ngForm&quot;&gt;\n</code></pre><blockquote>\n<p>Angular会在<form>标签上自动创建并附加一个NgForm指令。<br>NgForm指令为form增补了一些额外特性。 它会控制那些带有ngModel指令和name属性的元素，监听他们的属性（包括其有效性）。 它还有自己的valid属性，这个属性只有在它包含的每个控件都有效时才是真。</form></p>\n</blockquote>\n<p><strong>(2) 响应式表单指令</strong><br>包含在ReactiveFormModule模块中<br>FormControlDirective<br>FormControlName<br>FormArrayName<br>FormGroupDirective<br>FormGroupName</p>\n<p>这些指令用户创建响应式表单，在表单一文中将详细描述</p>\n<blockquote>\n<p>FormControl–用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。<br>FormGroup–用于跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。 组件中的顶级表单就是一个FormGroup。<br>FormArray–用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。</p>\n</blockquote>\n<p><strong>(3) 表单内置指令</strong><br>包含在InternalFormSharedModule模块中</p>\n<p>单复选框选项指令和框状态控制指令<br>ngSelectOption,ngSelectMultipleOption<br>ngControlStatus,ngControlStatusGroup</p>\n<p>各种类型输入框的值控制指令<br>DefaultValueAccessor,CheckboxControlValueAccessor,RadioControlValueAccessor,<br>NumberValueAccessor,SelectControlAccessor</p>\n<p>输入约束指令<br>RequiredValidator,MinLentthValidtor,MaxLengthValidtor,PatternValidtor</p>\n<p>以上指令是angular为表单建设而实现的一部分内部指令，在使用模板驱动或响应式构建表单和表单控件时angular自动对表单的一些调用和控制，用户不需要显式的使用她们，一般也不需要过多的了解实现细节，有兴趣的可上官网api文档库查看研究</p>\n<p>这里举几个例子：<br>DefaultValueAccessor控制如下的值设定</p>\n<pre><code>&lt;input type=&quot;text&quot; id=&quot;name&quot; [(ngModel)]=&quot;model.name&quot; name=&quot;name&gt;\n</code></pre><p>RequiredValidator用于输入框的required属性实现，会有相应的非法状态，css类等</p>\n<pre><code>&lt;input type=&quot;text&quot; [(ngModel)]=&quot;model.name&quot; name=&quot;name&quot; required&gt;\n</code></pre>","site":{"data":{}},"excerpt":"<p>指令在angular里是一种主要的存在，它可以改变元素的结构，改变元素的属性，甚至改变元素的行为<br>angular有许多内置的指令，我们也可以自定义指令，在属性指令和结构指令里面描述过，而组件作为一种特殊的指令，描述着带模板的指令<br>","more":"<br>下面主要介绍内置的一些常用指令：</p>\n<h3 id=\"1-通用指令\"><a href=\"#1-通用指令\" class=\"headerlink\" title=\"1.通用指令\"></a>1.通用指令</h3><p>包含在CommonModule模块中<br>ngClass<br>ngStyle<br>ngIf<br>ngFor<br>ngSwitch,ngSwitchCase,ngSwitchDefault<br>ngTemplateOutlet<br>ngPlural,ngPluralCase</p>\n<p>这些是一些常用的结构和属性指令，之前介绍过</p>\n<h3 id=\"2-路由指令\"><a href=\"#2-路由指令\" class=\"headerlink\" title=\"2.路由指令\"></a>2.路由指令</h3><p>包含在RouterModule模块中<br>RouterOutlet：路由占位符，</p>\n<pre><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre><p>Routerlink: 路由url链接</p>\n<pre><code>&lt;button routerLink=&quot;{{'/hero/' + crisis.id}}&quot; routerLinkActive=&quot;Active&quot;&gt;\n&lt;/button&gt;\n</code></pre><p>RouterlinkActive：属性绑定，用于在路由激活时把CSS类添加到该元素</p>\n<pre><code>&lt;button [routerLink]=&quot;[&apos;/hero&apos;, hero.id]&quot;\n[routerLinkActive]=&quot;[&apos;Active&apos;,&apos;classA&apos;]&quot;&gt;&lt;/button&gt;\n</code></pre><h3 id=\"3-表单指令\"><a href=\"#3-表单指令\" class=\"headerlink\" title=\"3.表单指令\"></a>3.表单指令</h3><p><strong>(1) 模板驱动表单指令</strong><br>包含在FormModule模块中<br>ngModel：双向数据绑定</p>\n<pre><code>&lt;input type=&quot;text&quot; id=&quot;name&quot; [(ngModel)]=&quot;model.name&quot; name=&quot;name&quot; required&gt;\n</code></pre><p>ngModelGroup:双向数据绑定组</p>\n<p>ngForm：模板驱动表单是为form自动添加的指令</p>\n<pre><code>&lt;form #heroForm=&quot;ngForm&quot;&gt;\n</code></pre><blockquote>\n<p>Angular会在<form>标签上自动创建并附加一个NgForm指令。<br>NgForm指令为form增补了一些额外特性。 它会控制那些带有ngModel指令和name属性的元素，监听他们的属性（包括其有效性）。 它还有自己的valid属性，这个属性只有在它包含的每个控件都有效时才是真。</form></p>\n</blockquote>\n<p><strong>(2) 响应式表单指令</strong><br>包含在ReactiveFormModule模块中<br>FormControlDirective<br>FormControlName<br>FormArrayName<br>FormGroupDirective<br>FormGroupName</p>\n<p>这些指令用户创建响应式表单，在表单一文中将详细描述</p>\n<blockquote>\n<p>FormControl–用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。<br>FormGroup–用于跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。 组件中的顶级表单就是一个FormGroup。<br>FormArray–用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。</p>\n</blockquote>\n<p><strong>(3) 表单内置指令</strong><br>包含在InternalFormSharedModule模块中</p>\n<p>单复选框选项指令和框状态控制指令<br>ngSelectOption,ngSelectMultipleOption<br>ngControlStatus,ngControlStatusGroup</p>\n<p>各种类型输入框的值控制指令<br>DefaultValueAccessor,CheckboxControlValueAccessor,RadioControlValueAccessor,<br>NumberValueAccessor,SelectControlAccessor</p>\n<p>输入约束指令<br>RequiredValidator,MinLentthValidtor,MaxLengthValidtor,PatternValidtor</p>\n<p>以上指令是angular为表单建设而实现的一部分内部指令，在使用模板驱动或响应式构建表单和表单控件时angular自动对表单的一些调用和控制，用户不需要显式的使用她们，一般也不需要过多的了解实现细节，有兴趣的可上官网api文档库查看研究</p>\n<p>这里举几个例子：<br>DefaultValueAccessor控制如下的值设定</p>\n<pre><code>&lt;input type=&quot;text&quot; id=&quot;name&quot; [(ngModel)]=&quot;model.name&quot; name=&quot;name&gt;\n</code></pre><p>RequiredValidator用于输入框的required属性实现，会有相应的非法状态，css类等</p>\n<pre><code>&lt;input type=&quot;text&quot; [(ngModel)]=&quot;model.name&quot; name=&quot;name&quot; required&gt;\n</code></pre>"},{"title":"Angular-表单","date":"2017-11-19T14:28:04.000Z","comments":1,"_content":"\n<style>\n.form-group {\n  display:block;\n}\n\n.form-group label {\n    display:inline-block;\n    width:60px;\n}\n\n.form-group label[name]:after {\n    content: \" : \";\n}\n\n.form-group .form-right {\n    display:inline-block;\n    width:260px;\n}\n</style>\n\n### 什么是表单\n表单主要是数据交互，主要变现为用户的输入和交互，应用场景十分广泛。我们的网络生活中几乎离不开表单，比如：用户注册，用户登录，问卷调查，等等都是表单使用的场景。\nAngular在表单构建这块很强大，它封装了很多表单相关的控件和指令，使得开发者可以很方便的构建一个复杂的表单，这也是很多网站软件在框架选型的时候选择angular的一个原因。\n<!--more-->\n### 表单特征\n\n表单一般都具备一些和用户交互的特点，比如：\n- 输入\n- 数据获取/处理\n- 输入提示\n- 错误提示\n- 表单校验\n- 表单提交\n\n后面将基于这些特点来个构建完整的表单\n\n### 表单构建方式\n\nAugular提供了两种构建表单的方式：模板驱动表单和响应式驱动表单，主要区别如下：\n- 模板驱动表单：使用angular内置的构建指令和校验指令来构建，比如：NgForm,NgModel;主要工作在模板搭建，一些指令实例化和校验的工作angular内部已经实现\n- 响应型驱动表单：使用angular提供的自定义表单额校验指令自由的进行构建，比如：FormGroup,FormControl等，主要工作在ts逻辑代码\n\n### 常用表单控件\n\n下面是一些常用表单控件的简单实现，后续将做成单独的控件\n\n###### 1.普通输入\n\n    <div class=\"form-group\">\n      <label>姓名</label>\n      <div class=\"form-right\">\n        <input type=\"text\" name=\"name\" [(ngModel)]=\"name\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"Name\">Name</label>\n  <div class=\"form-right\">\n    <input type=\"text\" name=\"name\" [(ngModel)]=\"name\" value=\"Jack\" />\n  </div>\n</div>\n\n###### 2.单选项-Radio\n\n    sexs : any[] = [{'name':'女','value':'famale'},\n                    {'name':'男','value':'male'}];\n    selectSex : any;\n\n    <div *ngFor=\"let sex of sexs;let i=index\" class=\"form-group\">\n      <label *ngIf=\"i === 0\" class=\"yes\">Sex</label>\n      <label *ngIf=\"i !== 0\" class=\"no\"></label>\n      <div  class=\"form-right\">\n        <input  type=\"radio\" [(ngModel)]=\"selectSex\" name=\"sex\" [value]=\"sex.value\" />{{sex.name}}\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"Sex\">性别</label>\n  <div  class=\"form-right\">\n    <input  type=\"radio\" value=\"male\" />男\n  </div>\n    <div  class=\"form-right\">\n      <input  type=\"radio\" value=\"famale\" />女\n    </div>\n</div>\n\n###### 3.复选框-Checkbox\n\n    likes : any[] = [{'name':'看电视','value':'Watch Tv','isChecked':false},\n                     {'name':'读书','value':'Book','isChecked':false}];\n    selectLike : any = '';\n    <div *ngFor=\"let like of likes;let i=index\" class=\"form-group\">\n      <label *ngIf=\"i === 0\" class=\"yes\">Likes</label>\n      <label *ngIf=\"i !== 0\" class=\"no\"></label>\n      <div  class=\"form-right\">\n        <input  type=\"checkbox\" [(ngModel)]=\"like.isChecked\" name=\"like\" (ngModelChange)=\"selectLikes()\" />{{like.name}}\n      </div>\n    </div>\n\n<div class=\"form-group\">\n    <label name=\"Likes\">爱好</label>\n    <div  class=\"form-right\">\n      <input  type=\"checkbox\" value=\"Watch Tv\" />看电视\n    </div>\n    <div  class=\"form-right\">\n      <input  type=\"checkbox\" value=\"Book\" />读书\n    </div>\n</div>\n\n###### 4.数字输入框-Number\n\n    <div class=\"form-group\">\n      <label>Age</label>\n      <div class=\"form-right\">\n        <input type=\"number\" name=\"age\" [(ngModel)]=\"age\" min=\"0\" max=\"100\" step=\"5\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"age\">年龄</label>\n  <div class=\"form-right\">\n    <input type=\"number\" value=\"18\" min=\"0\" max=\"100\" step=\"5\" />\n  </div>\n</div>\n\n###### 5.日期选择-Date\n\n    <div class=\"form-group\">\n      <label>生日</label>\n      <div class=\"form-right\">\n        <input type=\"date\" name=\"shengti\" [(ngModel)]=\"shengti\" [value]=\"shengti\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"date\">生日</label>\n  <div class=\"form-right\">\n    <input type=\"date\" value=\"1990-01-01\"/>\n  </div>\n</div>\n\n###### 6.下拉选择-Select\n\n    phones : any[] = [{'name':'Apple','value':'Apple'},\n                        {'name':'Oppo','value':'Oppo'},\n                        {'name':'Vivi','value':'Vivi'}];\n    <div class=\"form-group\">\n      <label>Phones</label>\n      <div  class=\"form-right\">\n        <select name=\"phone\" [(ngModel)]=\"myPhone\">\n          <option *ngFor=\"let phone of phones\" [value]=\"phone.value\">{{phone.name}}</option>\n        </select>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label>Phones</label>\n      <div  class=\"form-right\">\n        <select name=\"phone\" [(ngModel)]=\"myPhone2\">\n          <option *ngFor=\"let phone of phones\" [ngValue]=\"phone\">{{phone.name}}</option>\n        </select>\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"phone\">手机</label>\n  <div  class=\"form-right\">\n    <select name=\"phone\">\n      <option value=\"Apple\">Apple</option>\n      <option value=\"Oppo\">Oppo</option>\n      <option value=\"Vivi\">Vivi</option>\n    </select>\n  </div>\n</div>\n\n> [value]和[ngValue]的区别在于select最后返回ngModel数据的不同，value是得到值，ngValue的话得到的是所选择的整条记录\n\n###### 7.多选择-MutilSelect\n\n    <div class=\"form-group\">\n      <label>Phones</label>\n      <div  class=\"form-right\">\n        <select multiple name=\"phone\" [(ngModel)]=\"myPhone3\">\n          <option *ngFor=\"let phone of phones\" [value]=\"phone.value\">{{phone.name}}</option>\n        </select>\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"phone\">手机</label>\n  <div  class=\"form-right\">\n    <select multiple name=\"phone\">\n      <option value=\"Apple\">Apple</option>\n      <option value=\"Oppo\">Oppo</option>\n      <option value=\"Vivi\">Vivi</option>\n    </select>\n  </div>\n</div>\n\n###### 8.颜色选择-color\n\n    <div class=\"form-group\">\n      <label>Phones</label>\n      <div  class=\"form-right\">\n        <select multiple name=\"phone\" [(ngModel)]=\"myPhone3\">\n          <option *ngFor=\"let phone of phones\" [value]=\"phone.value\">{{phone.name}}</option>\n        </select>\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"color\">颜色</label>\n  <div class=\"form-right\">\n    <input type=\"color\" name=\"color\" value=\"#DD1015\" />\n  </div>\n</div>\n\n###### 9.文件选择-file\n\n    <div class=\"form-group\">\n      <label>生日</label>\n      <div class=\"form-right\">\n        <input type=\"file\" name=\"file\" [(ngModel)]=\"file\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"file\">文件</label>\n  <div class=\"form-right\">\n    <input type=\"file\" name=\"file\" />\n  </div>\n</div>\n\n###### 10.数字范围-Range\n\n    <div class=\"form-group\">\n      <label>生日</label>\n      <div class=\"form-right\">\n        <input type=\"range\" name=\"range\" [(ngModel)]=\"range\" min=\"5\" max=\"100\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name>生日</label>\n  <div class=\"form-right\">\n    <input type=\"range\" name=\"range\" value=\"30\" min=\"0\" max=\"100\" />\n  </div>\n</div>\n\n\n\n","source":"_posts/2017-11-19-Angular-Form.md","raw":"---\ntitle: Angular-表单\ndate: 2017-11-19 22:28:04\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n<style>\n.form-group {\n  display:block;\n}\n\n.form-group label {\n    display:inline-block;\n    width:60px;\n}\n\n.form-group label[name]:after {\n    content: \" : \";\n}\n\n.form-group .form-right {\n    display:inline-block;\n    width:260px;\n}\n</style>\n\n### 什么是表单\n表单主要是数据交互，主要变现为用户的输入和交互，应用场景十分广泛。我们的网络生活中几乎离不开表单，比如：用户注册，用户登录，问卷调查，等等都是表单使用的场景。\nAngular在表单构建这块很强大，它封装了很多表单相关的控件和指令，使得开发者可以很方便的构建一个复杂的表单，这也是很多网站软件在框架选型的时候选择angular的一个原因。\n<!--more-->\n### 表单特征\n\n表单一般都具备一些和用户交互的特点，比如：\n- 输入\n- 数据获取/处理\n- 输入提示\n- 错误提示\n- 表单校验\n- 表单提交\n\n后面将基于这些特点来个构建完整的表单\n\n### 表单构建方式\n\nAugular提供了两种构建表单的方式：模板驱动表单和响应式驱动表单，主要区别如下：\n- 模板驱动表单：使用angular内置的构建指令和校验指令来构建，比如：NgForm,NgModel;主要工作在模板搭建，一些指令实例化和校验的工作angular内部已经实现\n- 响应型驱动表单：使用angular提供的自定义表单额校验指令自由的进行构建，比如：FormGroup,FormControl等，主要工作在ts逻辑代码\n\n### 常用表单控件\n\n下面是一些常用表单控件的简单实现，后续将做成单独的控件\n\n###### 1.普通输入\n\n    <div class=\"form-group\">\n      <label>姓名</label>\n      <div class=\"form-right\">\n        <input type=\"text\" name=\"name\" [(ngModel)]=\"name\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"Name\">Name</label>\n  <div class=\"form-right\">\n    <input type=\"text\" name=\"name\" [(ngModel)]=\"name\" value=\"Jack\" />\n  </div>\n</div>\n\n###### 2.单选项-Radio\n\n    sexs : any[] = [{'name':'女','value':'famale'},\n                    {'name':'男','value':'male'}];\n    selectSex : any;\n\n    <div *ngFor=\"let sex of sexs;let i=index\" class=\"form-group\">\n      <label *ngIf=\"i === 0\" class=\"yes\">Sex</label>\n      <label *ngIf=\"i !== 0\" class=\"no\"></label>\n      <div  class=\"form-right\">\n        <input  type=\"radio\" [(ngModel)]=\"selectSex\" name=\"sex\" [value]=\"sex.value\" />{{sex.name}}\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"Sex\">性别</label>\n  <div  class=\"form-right\">\n    <input  type=\"radio\" value=\"male\" />男\n  </div>\n    <div  class=\"form-right\">\n      <input  type=\"radio\" value=\"famale\" />女\n    </div>\n</div>\n\n###### 3.复选框-Checkbox\n\n    likes : any[] = [{'name':'看电视','value':'Watch Tv','isChecked':false},\n                     {'name':'读书','value':'Book','isChecked':false}];\n    selectLike : any = '';\n    <div *ngFor=\"let like of likes;let i=index\" class=\"form-group\">\n      <label *ngIf=\"i === 0\" class=\"yes\">Likes</label>\n      <label *ngIf=\"i !== 0\" class=\"no\"></label>\n      <div  class=\"form-right\">\n        <input  type=\"checkbox\" [(ngModel)]=\"like.isChecked\" name=\"like\" (ngModelChange)=\"selectLikes()\" />{{like.name}}\n      </div>\n    </div>\n\n<div class=\"form-group\">\n    <label name=\"Likes\">爱好</label>\n    <div  class=\"form-right\">\n      <input  type=\"checkbox\" value=\"Watch Tv\" />看电视\n    </div>\n    <div  class=\"form-right\">\n      <input  type=\"checkbox\" value=\"Book\" />读书\n    </div>\n</div>\n\n###### 4.数字输入框-Number\n\n    <div class=\"form-group\">\n      <label>Age</label>\n      <div class=\"form-right\">\n        <input type=\"number\" name=\"age\" [(ngModel)]=\"age\" min=\"0\" max=\"100\" step=\"5\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"age\">年龄</label>\n  <div class=\"form-right\">\n    <input type=\"number\" value=\"18\" min=\"0\" max=\"100\" step=\"5\" />\n  </div>\n</div>\n\n###### 5.日期选择-Date\n\n    <div class=\"form-group\">\n      <label>生日</label>\n      <div class=\"form-right\">\n        <input type=\"date\" name=\"shengti\" [(ngModel)]=\"shengti\" [value]=\"shengti\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"date\">生日</label>\n  <div class=\"form-right\">\n    <input type=\"date\" value=\"1990-01-01\"/>\n  </div>\n</div>\n\n###### 6.下拉选择-Select\n\n    phones : any[] = [{'name':'Apple','value':'Apple'},\n                        {'name':'Oppo','value':'Oppo'},\n                        {'name':'Vivi','value':'Vivi'}];\n    <div class=\"form-group\">\n      <label>Phones</label>\n      <div  class=\"form-right\">\n        <select name=\"phone\" [(ngModel)]=\"myPhone\">\n          <option *ngFor=\"let phone of phones\" [value]=\"phone.value\">{{phone.name}}</option>\n        </select>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label>Phones</label>\n      <div  class=\"form-right\">\n        <select name=\"phone\" [(ngModel)]=\"myPhone2\">\n          <option *ngFor=\"let phone of phones\" [ngValue]=\"phone\">{{phone.name}}</option>\n        </select>\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"phone\">手机</label>\n  <div  class=\"form-right\">\n    <select name=\"phone\">\n      <option value=\"Apple\">Apple</option>\n      <option value=\"Oppo\">Oppo</option>\n      <option value=\"Vivi\">Vivi</option>\n    </select>\n  </div>\n</div>\n\n> [value]和[ngValue]的区别在于select最后返回ngModel数据的不同，value是得到值，ngValue的话得到的是所选择的整条记录\n\n###### 7.多选择-MutilSelect\n\n    <div class=\"form-group\">\n      <label>Phones</label>\n      <div  class=\"form-right\">\n        <select multiple name=\"phone\" [(ngModel)]=\"myPhone3\">\n          <option *ngFor=\"let phone of phones\" [value]=\"phone.value\">{{phone.name}}</option>\n        </select>\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"phone\">手机</label>\n  <div  class=\"form-right\">\n    <select multiple name=\"phone\">\n      <option value=\"Apple\">Apple</option>\n      <option value=\"Oppo\">Oppo</option>\n      <option value=\"Vivi\">Vivi</option>\n    </select>\n  </div>\n</div>\n\n###### 8.颜色选择-color\n\n    <div class=\"form-group\">\n      <label>Phones</label>\n      <div  class=\"form-right\">\n        <select multiple name=\"phone\" [(ngModel)]=\"myPhone3\">\n          <option *ngFor=\"let phone of phones\" [value]=\"phone.value\">{{phone.name}}</option>\n        </select>\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"color\">颜色</label>\n  <div class=\"form-right\">\n    <input type=\"color\" name=\"color\" value=\"#DD1015\" />\n  </div>\n</div>\n\n###### 9.文件选择-file\n\n    <div class=\"form-group\">\n      <label>生日</label>\n      <div class=\"form-right\">\n        <input type=\"file\" name=\"file\" [(ngModel)]=\"file\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name=\"file\">文件</label>\n  <div class=\"form-right\">\n    <input type=\"file\" name=\"file\" />\n  </div>\n</div>\n\n###### 10.数字范围-Range\n\n    <div class=\"form-group\">\n      <label>生日</label>\n      <div class=\"form-right\">\n        <input type=\"range\" name=\"range\" [(ngModel)]=\"range\" min=\"5\" max=\"100\" />\n      </div>\n    </div>\n\n<div class=\"form-group\">\n  <label name>生日</label>\n  <div class=\"form-right\">\n    <input type=\"range\" name=\"range\" value=\"30\" min=\"0\" max=\"100\" />\n  </div>\n</div>\n\n\n\n","slug":"Angular-Form","published":1,"updated":"2017-11-23T15:31:23.522Z","layout":"post","photos":[],"link":"","_id":"cjqwe4266001aor0b86erfn5l","content":"<style>\n.form-group {\n  display:block;\n}\n\n.form-group label {\n    display:inline-block;\n    width:60px;\n}\n\n.form-group label[name]:after {\n    content: \" : \";\n}\n\n.form-group .form-right {\n    display:inline-block;\n    width:260px;\n}\n</style>\n\n<h3 id=\"什么是表单\"><a href=\"#什么是表单\" class=\"headerlink\" title=\"什么是表单\"></a>什么是表单</h3><p>表单主要是数据交互，主要变现为用户的输入和交互，应用场景十分广泛。我们的网络生活中几乎离不开表单，比如：用户注册，用户登录，问卷调查，等等都是表单使用的场景。<br>Angular在表单构建这块很强大，它封装了很多表单相关的控件和指令，使得开发者可以很方便的构建一个复杂的表单，这也是很多网站软件在框架选型的时候选择angular的一个原因。<br><a id=\"more\"></a></p>\n<h3 id=\"表单特征\"><a href=\"#表单特征\" class=\"headerlink\" title=\"表单特征\"></a>表单特征</h3><p>表单一般都具备一些和用户交互的特点，比如：</p>\n<ul>\n<li>输入</li>\n<li>数据获取/处理</li>\n<li>输入提示</li>\n<li>错误提示</li>\n<li>表单校验</li>\n<li>表单提交</li>\n</ul>\n<p>后面将基于这些特点来个构建完整的表单</p>\n<h3 id=\"表单构建方式\"><a href=\"#表单构建方式\" class=\"headerlink\" title=\"表单构建方式\"></a>表单构建方式</h3><p>Augular提供了两种构建表单的方式：模板驱动表单和响应式驱动表单，主要区别如下：</p>\n<ul>\n<li>模板驱动表单：使用angular内置的构建指令和校验指令来构建，比如：NgForm,NgModel;主要工作在模板搭建，一些指令实例化和校验的工作angular内部已经实现</li>\n<li>响应型驱动表单：使用angular提供的自定义表单额校验指令自由的进行构建，比如：FormGroup,FormControl等，主要工作在ts逻辑代码</li>\n</ul>\n<h3 id=\"常用表单控件\"><a href=\"#常用表单控件\" class=\"headerlink\" title=\"常用表单控件\"></a>常用表单控件</h3><p>下面是一些常用表单控件的简单实现，后续将做成单独的控件</p>\n<h6 id=\"1-普通输入\"><a href=\"#1-普通输入\" class=\"headerlink\" title=\"1.普通输入\"></a>1.普通输入</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;姓名&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;name&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"Name\">Name</label><br>  <div class=\"form-right\"><br>    <input type=\"text\" name=\"name\" [(ngmodel)]=\"name\" value=\"Jack\"><br>  </div><br></div>\n\n<h6 id=\"2-单选项-Radio\"><a href=\"#2-单选项-Radio\" class=\"headerlink\" title=\"2.单选项-Radio\"></a>2.单选项-Radio</h6><pre><code>sexs : any[] = [{&apos;name&apos;:&apos;女&apos;,&apos;value&apos;:&apos;famale&apos;},\n                {&apos;name&apos;:&apos;男&apos;,&apos;value&apos;:&apos;male&apos;}];\nselectSex : any;\n\n&lt;div *ngFor=&quot;let sex of sexs;let i=index&quot; class=&quot;form-group&quot;&gt;\n  &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;Sex&lt;/label&gt;\n  &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;input  type=&quot;radio&quot; [(ngModel)]=&quot;selectSex&quot; name=&quot;sex&quot; [value]=&quot;sex.value&quot; /&gt;{{sex.name}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"Sex\">性别</label><br>  <div class=\"form-right\"><br>    <input type=\"radio\" value=\"male\">男<br>  </div><br>    <div class=\"form-right\"><br>      <input type=\"radio\" value=\"famale\">女<br>    </div><br></div>\n\n<h6 id=\"3-复选框-Checkbox\"><a href=\"#3-复选框-Checkbox\" class=\"headerlink\" title=\"3.复选框-Checkbox\"></a>3.复选框-Checkbox</h6><pre><code>likes : any[] = [{&apos;name&apos;:&apos;看电视&apos;,&apos;value&apos;:&apos;Watch Tv&apos;,&apos;isChecked&apos;:false},\n                 {&apos;name&apos;:&apos;读书&apos;,&apos;value&apos;:&apos;Book&apos;,&apos;isChecked&apos;:false}];\nselectLike : any = &apos;&apos;;\n&lt;div *ngFor=&quot;let like of likes;let i=index&quot; class=&quot;form-group&quot;&gt;\n  &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;Likes&lt;/label&gt;\n  &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;input  type=&quot;checkbox&quot; [(ngModel)]=&quot;like.isChecked&quot; name=&quot;like&quot; (ngModelChange)=&quot;selectLikes()&quot; /&gt;{{like.name}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>    <label name=\"Likes\">爱好</label><br>    <div class=\"form-right\"><br>      <input type=\"checkbox\" value=\"Watch Tv\">看电视<br>    </div><br>    <div class=\"form-right\"><br>      <input type=\"checkbox\" value=\"Book\">读书<br>    </div><br></div>\n\n<h6 id=\"4-数字输入框-Number\"><a href=\"#4-数字输入框-Number\" class=\"headerlink\" title=\"4.数字输入框-Number\"></a>4.数字输入框-Number</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Age&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;number&quot; name=&quot;age&quot; [(ngModel)]=&quot;age&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;5&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"age\">年龄</label><br>  <div class=\"form-right\"><br>    <input type=\"number\" value=\"18\" min=\"0\" max=\"100\" step=\"5\"><br>  </div><br></div>\n\n<h6 id=\"5-日期选择-Date\"><a href=\"#5-日期选择-Date\" class=\"headerlink\" title=\"5.日期选择-Date\"></a>5.日期选择-Date</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;生日&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;date&quot; name=&quot;shengti&quot; [(ngModel)]=&quot;shengti&quot; [value]=&quot;shengti&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"date\">生日</label><br>  <div class=\"form-right\"><br>    <input type=\"date\" value=\"1990-01-01\"><br>  </div><br></div>\n\n<h6 id=\"6-下拉选择-Select\"><a href=\"#6-下拉选择-Select\" class=\"headerlink\" title=\"6.下拉选择-Select\"></a>6.下拉选择-Select</h6><pre><code>phones : any[] = [{&apos;name&apos;:&apos;Apple&apos;,&apos;value&apos;:&apos;Apple&apos;},\n                    {&apos;name&apos;:&apos;Oppo&apos;,&apos;value&apos;:&apos;Oppo&apos;},\n                    {&apos;name&apos;:&apos;Vivi&apos;,&apos;value&apos;:&apos;Vivi&apos;}];\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Phones&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;select name=&quot;phone&quot; [(ngModel)]=&quot;myPhone&quot;&gt;\n      &lt;option *ngFor=&quot;let phone of phones&quot; [value]=&quot;phone.value&quot;&gt;{{phone.name}}&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Phones&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;select name=&quot;phone&quot; [(ngModel)]=&quot;myPhone2&quot;&gt;\n      &lt;option *ngFor=&quot;let phone of phones&quot; [ngValue]=&quot;phone&quot;&gt;{{phone.name}}&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"phone\">手机</label><br>  <div class=\"form-right\"><br>    <select name=\"phone\"><br>      <option value=\"Apple\">Apple</option><br>      <option value=\"Oppo\">Oppo</option><br>      <option value=\"Vivi\">Vivi</option><br>    </select><br>  </div><br></div>\n\n<blockquote>\n<p>[value]和[ngValue]的区别在于select最后返回ngModel数据的不同，value是得到值，ngValue的话得到的是所选择的整条记录</p>\n</blockquote>\n<h6 id=\"7-多选择-MutilSelect\"><a href=\"#7-多选择-MutilSelect\" class=\"headerlink\" title=\"7.多选择-MutilSelect\"></a>7.多选择-MutilSelect</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Phones&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;select multiple name=&quot;phone&quot; [(ngModel)]=&quot;myPhone3&quot;&gt;\n      &lt;option *ngFor=&quot;let phone of phones&quot; [value]=&quot;phone.value&quot;&gt;{{phone.name}}&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"phone\">手机</label><br>  <div class=\"form-right\"><br>    <select multiple name=\"phone\"><br>      <option value=\"Apple\">Apple</option><br>      <option value=\"Oppo\">Oppo</option><br>      <option value=\"Vivi\">Vivi</option><br>    </select><br>  </div><br></div>\n\n<h6 id=\"8-颜色选择-color\"><a href=\"#8-颜色选择-color\" class=\"headerlink\" title=\"8.颜色选择-color\"></a>8.颜色选择-color</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Phones&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;select multiple name=&quot;phone&quot; [(ngModel)]=&quot;myPhone3&quot;&gt;\n      &lt;option *ngFor=&quot;let phone of phones&quot; [value]=&quot;phone.value&quot;&gt;{{phone.name}}&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"color\">颜色</label><br>  <div class=\"form-right\"><br>    <input type=\"color\" name=\"color\" value=\"#DD1015\"><br>  </div><br></div>\n\n<h6 id=\"9-文件选择-file\"><a href=\"#9-文件选择-file\" class=\"headerlink\" title=\"9.文件选择-file\"></a>9.文件选择-file</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;生日&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;file&quot; [(ngModel)]=&quot;file&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"file\">文件</label><br>  <div class=\"form-right\"><br>    <input type=\"file\" name=\"file\"><br>  </div><br></div>\n\n<h6 id=\"10-数字范围-Range\"><a href=\"#10-数字范围-Range\" class=\"headerlink\" title=\"10.数字范围-Range\"></a>10.数字范围-Range</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;生日&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;range&quot; name=&quot;range&quot; [(ngModel)]=&quot;range&quot; min=&quot;5&quot; max=&quot;100&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"\">生日</label><br>  <div class=\"form-right\"><br>    <input type=\"range\" name=\"range\" value=\"30\" min=\"0\" max=\"100\"><br>  </div><br></div>\n\n\n\n","site":{"data":{}},"excerpt":"<style>\n.form-group {\n  display:block;\n}\n\n.form-group label {\n    display:inline-block;\n    width:60px;\n}\n\n.form-group label[name]:after {\n    content: \" : \";\n}\n\n.form-group .form-right {\n    display:inline-block;\n    width:260px;\n}\n</style>\n\n<h3 id=\"什么是表单\"><a href=\"#什么是表单\" class=\"headerlink\" title=\"什么是表单\"></a>什么是表单</h3><p>表单主要是数据交互，主要变现为用户的输入和交互，应用场景十分广泛。我们的网络生活中几乎离不开表单，比如：用户注册，用户登录，问卷调查，等等都是表单使用的场景。<br>Angular在表单构建这块很强大，它封装了很多表单相关的控件和指令，使得开发者可以很方便的构建一个复杂的表单，这也是很多网站软件在框架选型的时候选择angular的一个原因。<br>","more":"</p>\n<h3 id=\"表单特征\"><a href=\"#表单特征\" class=\"headerlink\" title=\"表单特征\"></a>表单特征</h3><p>表单一般都具备一些和用户交互的特点，比如：</p>\n<ul>\n<li>输入</li>\n<li>数据获取/处理</li>\n<li>输入提示</li>\n<li>错误提示</li>\n<li>表单校验</li>\n<li>表单提交</li>\n</ul>\n<p>后面将基于这些特点来个构建完整的表单</p>\n<h3 id=\"表单构建方式\"><a href=\"#表单构建方式\" class=\"headerlink\" title=\"表单构建方式\"></a>表单构建方式</h3><p>Augular提供了两种构建表单的方式：模板驱动表单和响应式驱动表单，主要区别如下：</p>\n<ul>\n<li>模板驱动表单：使用angular内置的构建指令和校验指令来构建，比如：NgForm,NgModel;主要工作在模板搭建，一些指令实例化和校验的工作angular内部已经实现</li>\n<li>响应型驱动表单：使用angular提供的自定义表单额校验指令自由的进行构建，比如：FormGroup,FormControl等，主要工作在ts逻辑代码</li>\n</ul>\n<h3 id=\"常用表单控件\"><a href=\"#常用表单控件\" class=\"headerlink\" title=\"常用表单控件\"></a>常用表单控件</h3><p>下面是一些常用表单控件的简单实现，后续将做成单独的控件</p>\n<h6 id=\"1-普通输入\"><a href=\"#1-普通输入\" class=\"headerlink\" title=\"1.普通输入\"></a>1.普通输入</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;姓名&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;name&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"Name\">Name</label><br>  <div class=\"form-right\"><br>    <input type=\"text\" name=\"name\" [(ngmodel)]=\"name\" value=\"Jack\"><br>  </div><br></div>\n\n<h6 id=\"2-单选项-Radio\"><a href=\"#2-单选项-Radio\" class=\"headerlink\" title=\"2.单选项-Radio\"></a>2.单选项-Radio</h6><pre><code>sexs : any[] = [{&apos;name&apos;:&apos;女&apos;,&apos;value&apos;:&apos;famale&apos;},\n                {&apos;name&apos;:&apos;男&apos;,&apos;value&apos;:&apos;male&apos;}];\nselectSex : any;\n\n&lt;div *ngFor=&quot;let sex of sexs;let i=index&quot; class=&quot;form-group&quot;&gt;\n  &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;Sex&lt;/label&gt;\n  &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;input  type=&quot;radio&quot; [(ngModel)]=&quot;selectSex&quot; name=&quot;sex&quot; [value]=&quot;sex.value&quot; /&gt;{{sex.name}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"Sex\">性别</label><br>  <div class=\"form-right\"><br>    <input type=\"radio\" value=\"male\">男<br>  </div><br>    <div class=\"form-right\"><br>      <input type=\"radio\" value=\"famale\">女<br>    </div><br></div>\n\n<h6 id=\"3-复选框-Checkbox\"><a href=\"#3-复选框-Checkbox\" class=\"headerlink\" title=\"3.复选框-Checkbox\"></a>3.复选框-Checkbox</h6><pre><code>likes : any[] = [{&apos;name&apos;:&apos;看电视&apos;,&apos;value&apos;:&apos;Watch Tv&apos;,&apos;isChecked&apos;:false},\n                 {&apos;name&apos;:&apos;读书&apos;,&apos;value&apos;:&apos;Book&apos;,&apos;isChecked&apos;:false}];\nselectLike : any = &apos;&apos;;\n&lt;div *ngFor=&quot;let like of likes;let i=index&quot; class=&quot;form-group&quot;&gt;\n  &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;Likes&lt;/label&gt;\n  &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;input  type=&quot;checkbox&quot; [(ngModel)]=&quot;like.isChecked&quot; name=&quot;like&quot; (ngModelChange)=&quot;selectLikes()&quot; /&gt;{{like.name}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>    <label name=\"Likes\">爱好</label><br>    <div class=\"form-right\"><br>      <input type=\"checkbox\" value=\"Watch Tv\">看电视<br>    </div><br>    <div class=\"form-right\"><br>      <input type=\"checkbox\" value=\"Book\">读书<br>    </div><br></div>\n\n<h6 id=\"4-数字输入框-Number\"><a href=\"#4-数字输入框-Number\" class=\"headerlink\" title=\"4.数字输入框-Number\"></a>4.数字输入框-Number</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Age&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;number&quot; name=&quot;age&quot; [(ngModel)]=&quot;age&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;5&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"age\">年龄</label><br>  <div class=\"form-right\"><br>    <input type=\"number\" value=\"18\" min=\"0\" max=\"100\" step=\"5\"><br>  </div><br></div>\n\n<h6 id=\"5-日期选择-Date\"><a href=\"#5-日期选择-Date\" class=\"headerlink\" title=\"5.日期选择-Date\"></a>5.日期选择-Date</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;生日&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;date&quot; name=&quot;shengti&quot; [(ngModel)]=&quot;shengti&quot; [value]=&quot;shengti&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"date\">生日</label><br>  <div class=\"form-right\"><br>    <input type=\"date\" value=\"1990-01-01\"><br>  </div><br></div>\n\n<h6 id=\"6-下拉选择-Select\"><a href=\"#6-下拉选择-Select\" class=\"headerlink\" title=\"6.下拉选择-Select\"></a>6.下拉选择-Select</h6><pre><code>phones : any[] = [{&apos;name&apos;:&apos;Apple&apos;,&apos;value&apos;:&apos;Apple&apos;},\n                    {&apos;name&apos;:&apos;Oppo&apos;,&apos;value&apos;:&apos;Oppo&apos;},\n                    {&apos;name&apos;:&apos;Vivi&apos;,&apos;value&apos;:&apos;Vivi&apos;}];\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Phones&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;select name=&quot;phone&quot; [(ngModel)]=&quot;myPhone&quot;&gt;\n      &lt;option *ngFor=&quot;let phone of phones&quot; [value]=&quot;phone.value&quot;&gt;{{phone.name}}&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Phones&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;select name=&quot;phone&quot; [(ngModel)]=&quot;myPhone2&quot;&gt;\n      &lt;option *ngFor=&quot;let phone of phones&quot; [ngValue]=&quot;phone&quot;&gt;{{phone.name}}&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"phone\">手机</label><br>  <div class=\"form-right\"><br>    <select name=\"phone\"><br>      <option value=\"Apple\">Apple</option><br>      <option value=\"Oppo\">Oppo</option><br>      <option value=\"Vivi\">Vivi</option><br>    </select><br>  </div><br></div>\n\n<blockquote>\n<p>[value]和[ngValue]的区别在于select最后返回ngModel数据的不同，value是得到值，ngValue的话得到的是所选择的整条记录</p>\n</blockquote>\n<h6 id=\"7-多选择-MutilSelect\"><a href=\"#7-多选择-MutilSelect\" class=\"headerlink\" title=\"7.多选择-MutilSelect\"></a>7.多选择-MutilSelect</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Phones&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;select multiple name=&quot;phone&quot; [(ngModel)]=&quot;myPhone3&quot;&gt;\n      &lt;option *ngFor=&quot;let phone of phones&quot; [value]=&quot;phone.value&quot;&gt;{{phone.name}}&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"phone\">手机</label><br>  <div class=\"form-right\"><br>    <select multiple name=\"phone\"><br>      <option value=\"Apple\">Apple</option><br>      <option value=\"Oppo\">Oppo</option><br>      <option value=\"Vivi\">Vivi</option><br>    </select><br>  </div><br></div>\n\n<h6 id=\"8-颜色选择-color\"><a href=\"#8-颜色选择-color\" class=\"headerlink\" title=\"8.颜色选择-color\"></a>8.颜色选择-color</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;Phones&lt;/label&gt;\n  &lt;div  class=&quot;form-right&quot;&gt;\n    &lt;select multiple name=&quot;phone&quot; [(ngModel)]=&quot;myPhone3&quot;&gt;\n      &lt;option *ngFor=&quot;let phone of phones&quot; [value]=&quot;phone.value&quot;&gt;{{phone.name}}&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"color\">颜色</label><br>  <div class=\"form-right\"><br>    <input type=\"color\" name=\"color\" value=\"#DD1015\"><br>  </div><br></div>\n\n<h6 id=\"9-文件选择-file\"><a href=\"#9-文件选择-file\" class=\"headerlink\" title=\"9.文件选择-file\"></a>9.文件选择-file</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;生日&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;file&quot; [(ngModel)]=&quot;file&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"file\">文件</label><br>  <div class=\"form-right\"><br>    <input type=\"file\" name=\"file\"><br>  </div><br></div>\n\n<h6 id=\"10-数字范围-Range\"><a href=\"#10-数字范围-Range\" class=\"headerlink\" title=\"10.数字范围-Range\"></a>10.数字范围-Range</h6><pre><code>&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label&gt;生日&lt;/label&gt;\n  &lt;div class=&quot;form-right&quot;&gt;\n    &lt;input type=&quot;range&quot; name=&quot;range&quot; [(ngModel)]=&quot;range&quot; min=&quot;5&quot; max=&quot;100&quot; /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class=\"form-group\"><br>  <label name=\"\">生日</label><br>  <div class=\"form-right\"><br>    <input type=\"range\" name=\"range\" value=\"30\" min=\"0\" max=\"100\"><br>  </div><br></div>"},{"title":"Angular-预编译和摇树","date":"2017-09-03T09:48:48.000Z","comments":1,"_content":"\n## AOT预编译\n\n使用AOT，编译器仅仅使用一组库在构建期间运行一次；使用JIT，编译器在每个用户的每次运行期间都要用不同的库运行一次，更适合实时开发\nAOT编译的好处：\n<!--more-->\n\n- 渲染得更快\n使用AOT，浏览器下载预编译版本的应用程序。 浏览器直接加载运行代码，所以它可以立即渲染该应用，而不用等应用完成首次编译。\n- 需要的异步请求更少\n编译器把外部HTML模板和CSS样式表内联到了该应用的JavaScript中。 消除了用来下载那些源文件的Ajax请求。\n- 需要下载的Angular框架体积更小\n如果应用已经编译过了，自然不需要再下载Angular编译器了。 该编译器差不多占了Angular自身体积的一半儿，所以，省略它可以显著减小应用的体积。\n- 提早检测模板错误\nAOT编译器在构建过程中检测和报告模板绑定错误，避免用户遇到这些错误。\n- 更安全\nAOT编译远在HTML模版和组件被服务到客户端之前，将它们编译到JavaScript文件。 没有模版可以阅读，没有高风险客户端HTML或JavaScript可利用，所以注入攻击的机会较少。\n\n### Aot设置\n\n首先,使用git clone https://github.com/angular/quickstart.git quickstart 设置本地简单的项目开发环境\n在项目根目录/quickstart，安装依赖\n\n    npm install @angular/compiler-cli @angular/platform-server --save\n\n复制原tsconfig.json到项目根目录tsconfig-aot.json文件，修改如下\n\n    //tsconfig-aot.json\n    {\n      \"compilerOptions\": {\n        \"target\": \"es5\",\n        \"module\": \"es2015\",\n        \"moduleResolution\": \"node\",\n        \"sourceMap\": true,\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"lib\": [\"es2015\", \"dom\"],\n        \"noImplicitAny\": true,\n        \"suppressImplicitAnyIndexErrors\": true,\n        \"typeRoots\": [\n          \"./node_modules/@types/\"\n        ]\n      },\n\n      \"files\": [\n        \"src/app/app.module.ts\",\n        \"src/main.ts\"\n      ],\n\n      \"angularCompilerOptions\": {\n       \"genDir\": \"aot\",\n       \"skipMetadataEmit\" : true\n     }\n    }\n\n执行命令ngc编译器来启动AOT编译\n\n    node_modules/.bin/ngc -p tsconfig-aot.json\n\nngc希望-p选项指向一个tsconfig.json文件，或者一个包含tsconfig.json文件的目录。\n在ngc完成时，会在aot目录下看到一组NgFactory文件（该目录是在tsconfig-aot.json的genDir属性中指定的）。\n这些工厂文件对于编译后的应用是必要的。 每个组件工厂都可以在运行时创建一个组件的实例，其中带有一个原始的类文件和一个用JavaScript表示的组件模板。注意，原始的组件类依然是由所生成的这个工厂进行内部引用的。\n\n**修改启动**\n备份原main.ts为main-jit.ts，将main.ts改为\n\n    import { platformBrowser }    from '@angular/platform-browser';\n    import { AppModuleNgFactory } from '../aot/src/app/app.module.ngfactory';\n\n    console.log('Running AOT compiled');\n    platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n\n重新编译应用\n\n### Rollup摇树优化\n\nRollup会通过跟踪import和export语句来对本应用进行静态分析。 它所生成的最终代码捆中会排除那些被导出过但又从未被导入的代码。\nRollup只能对ES2015模块摇树，因为那里有import和export语句\n安装Rollup依赖\n\n    npm install rollup rollup-plugin-node-resolve rollup-plugin-commonjs rollup-plugin-uglify --save-dev\n\n在项目根目录新建一个配置文件（rollup-config.js），来告诉Rollup如何处理应用\n\n    //rollup-config.js\n    import nodeResolve from 'rollup-plugin-node-resolve';\n    import commonjs    from 'rollup-plugin-commonjs';\n    import uglify      from 'rollup-plugin-uglify';\n\n    export default {\n      entry: 'src/main.js',\n      dest: 'src/build.js', // output a single application bundle\n      sourceMap: false,\n      format: 'iife',\n      onwarn: function(warning) {\n        // Skip certain warnings\n\n        // should intercept ... but doesn't in some rollup versions\n        if ( warning.code === 'THIS_IS_UNDEFINED' ) { return; }\n\n        // console.warn everything else\n        console.warn( warning.message );\n      },\n      plugins: [\n          nodeResolve({jsnext: true, module: true}),\n          commonjs({\n            include: 'node_modules/rxjs/**',\n          }),\n          uglify()\n      ]\n    };\n\n执行摇树优化\n\n    node_modules/.bin/rollup -c rollup-config.js\n\n备份原index.html为index-jit.html，修改脚本配置：\n\n    System.import('main-jit.js').catch(function(err){ console.error(err); });\n\n修改index.html\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Ahead of time compilation</title>\n        <base href=\"/\">\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link rel=\"stylesheet\" href=\"styles.css\">\n\n        <script src=\"node_modules/core-js/client/shim.min.js\"></script>\n        <script src=\"node_modules/zone.js/dist/zone.js\"></script>\n      </head>\n      <body>\n        <my-app>Loading...</my-app>\n      </body>\n      <script src=\"build.js\"></script>\n    </html>\n\n在package,json的scripts加上\n\n    \"build:aot\": \"ngc -p tsconfig-aot.json && rollup -c rollup-config.js\",\n\n可通过**npm run build:aot**同时进行编译和摇树优化\n\n此时，npm start可启动应用，但这时候时按AOT方式启动的，修改内容不会即时编译生效；在url后面加上index-jit.html，比如\n\n    http://localhost:3000/index-jit.html\n\n可切换值jit开发方式，可以实时编译，实现了aot和jit同时存在\n\n项目根目录添加文件copy-dist-files.js\n\n    var fs = require('fs');\n    var resources = [\n      'node_modules/core-js/client/shim.min.js',\n      'node_modules/zone.js/dist/zone.min.js',\n      'src/styles.css'\n    ];\n    resources.map(function(f) {\n      var path = f.split('/');\n      var t = 'aot/' + path[path.length-1];\n      fs.createReadStream(f).pipe(fs.createWriteStream(t));\n    });\n\n使用node copy-dist-files拷贝AOT发布文件到/aot/目录\n\n在package,json的scripts加上\n\n    \"serve:aot\": \"lite-server -c bs-config.aot.json\"\n\n使用\n\n    npm run build:aot && npm run serve:aot\n\n同时编译和启动应用，但这时是AOT预编译的，不能实时开发","source":"_posts/2017-09-03-angular-aot.md","raw":"---\ntitle: Angular-预编译和摇树\ndate: 2017-09-03 17:48:48\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n## AOT预编译\n\n使用AOT，编译器仅仅使用一组库在构建期间运行一次；使用JIT，编译器在每个用户的每次运行期间都要用不同的库运行一次，更适合实时开发\nAOT编译的好处：\n<!--more-->\n\n- 渲染得更快\n使用AOT，浏览器下载预编译版本的应用程序。 浏览器直接加载运行代码，所以它可以立即渲染该应用，而不用等应用完成首次编译。\n- 需要的异步请求更少\n编译器把外部HTML模板和CSS样式表内联到了该应用的JavaScript中。 消除了用来下载那些源文件的Ajax请求。\n- 需要下载的Angular框架体积更小\n如果应用已经编译过了，自然不需要再下载Angular编译器了。 该编译器差不多占了Angular自身体积的一半儿，所以，省略它可以显著减小应用的体积。\n- 提早检测模板错误\nAOT编译器在构建过程中检测和报告模板绑定错误，避免用户遇到这些错误。\n- 更安全\nAOT编译远在HTML模版和组件被服务到客户端之前，将它们编译到JavaScript文件。 没有模版可以阅读，没有高风险客户端HTML或JavaScript可利用，所以注入攻击的机会较少。\n\n### Aot设置\n\n首先,使用git clone https://github.com/angular/quickstart.git quickstart 设置本地简单的项目开发环境\n在项目根目录/quickstart，安装依赖\n\n    npm install @angular/compiler-cli @angular/platform-server --save\n\n复制原tsconfig.json到项目根目录tsconfig-aot.json文件，修改如下\n\n    //tsconfig-aot.json\n    {\n      \"compilerOptions\": {\n        \"target\": \"es5\",\n        \"module\": \"es2015\",\n        \"moduleResolution\": \"node\",\n        \"sourceMap\": true,\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"lib\": [\"es2015\", \"dom\"],\n        \"noImplicitAny\": true,\n        \"suppressImplicitAnyIndexErrors\": true,\n        \"typeRoots\": [\n          \"./node_modules/@types/\"\n        ]\n      },\n\n      \"files\": [\n        \"src/app/app.module.ts\",\n        \"src/main.ts\"\n      ],\n\n      \"angularCompilerOptions\": {\n       \"genDir\": \"aot\",\n       \"skipMetadataEmit\" : true\n     }\n    }\n\n执行命令ngc编译器来启动AOT编译\n\n    node_modules/.bin/ngc -p tsconfig-aot.json\n\nngc希望-p选项指向一个tsconfig.json文件，或者一个包含tsconfig.json文件的目录。\n在ngc完成时，会在aot目录下看到一组NgFactory文件（该目录是在tsconfig-aot.json的genDir属性中指定的）。\n这些工厂文件对于编译后的应用是必要的。 每个组件工厂都可以在运行时创建一个组件的实例，其中带有一个原始的类文件和一个用JavaScript表示的组件模板。注意，原始的组件类依然是由所生成的这个工厂进行内部引用的。\n\n**修改启动**\n备份原main.ts为main-jit.ts，将main.ts改为\n\n    import { platformBrowser }    from '@angular/platform-browser';\n    import { AppModuleNgFactory } from '../aot/src/app/app.module.ngfactory';\n\n    console.log('Running AOT compiled');\n    platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n\n重新编译应用\n\n### Rollup摇树优化\n\nRollup会通过跟踪import和export语句来对本应用进行静态分析。 它所生成的最终代码捆中会排除那些被导出过但又从未被导入的代码。\nRollup只能对ES2015模块摇树，因为那里有import和export语句\n安装Rollup依赖\n\n    npm install rollup rollup-plugin-node-resolve rollup-plugin-commonjs rollup-plugin-uglify --save-dev\n\n在项目根目录新建一个配置文件（rollup-config.js），来告诉Rollup如何处理应用\n\n    //rollup-config.js\n    import nodeResolve from 'rollup-plugin-node-resolve';\n    import commonjs    from 'rollup-plugin-commonjs';\n    import uglify      from 'rollup-plugin-uglify';\n\n    export default {\n      entry: 'src/main.js',\n      dest: 'src/build.js', // output a single application bundle\n      sourceMap: false,\n      format: 'iife',\n      onwarn: function(warning) {\n        // Skip certain warnings\n\n        // should intercept ... but doesn't in some rollup versions\n        if ( warning.code === 'THIS_IS_UNDEFINED' ) { return; }\n\n        // console.warn everything else\n        console.warn( warning.message );\n      },\n      plugins: [\n          nodeResolve({jsnext: true, module: true}),\n          commonjs({\n            include: 'node_modules/rxjs/**',\n          }),\n          uglify()\n      ]\n    };\n\n执行摇树优化\n\n    node_modules/.bin/rollup -c rollup-config.js\n\n备份原index.html为index-jit.html，修改脚本配置：\n\n    System.import('main-jit.js').catch(function(err){ console.error(err); });\n\n修改index.html\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Ahead of time compilation</title>\n        <base href=\"/\">\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link rel=\"stylesheet\" href=\"styles.css\">\n\n        <script src=\"node_modules/core-js/client/shim.min.js\"></script>\n        <script src=\"node_modules/zone.js/dist/zone.js\"></script>\n      </head>\n      <body>\n        <my-app>Loading...</my-app>\n      </body>\n      <script src=\"build.js\"></script>\n    </html>\n\n在package,json的scripts加上\n\n    \"build:aot\": \"ngc -p tsconfig-aot.json && rollup -c rollup-config.js\",\n\n可通过**npm run build:aot**同时进行编译和摇树优化\n\n此时，npm start可启动应用，但这时候时按AOT方式启动的，修改内容不会即时编译生效；在url后面加上index-jit.html，比如\n\n    http://localhost:3000/index-jit.html\n\n可切换值jit开发方式，可以实时编译，实现了aot和jit同时存在\n\n项目根目录添加文件copy-dist-files.js\n\n    var fs = require('fs');\n    var resources = [\n      'node_modules/core-js/client/shim.min.js',\n      'node_modules/zone.js/dist/zone.min.js',\n      'src/styles.css'\n    ];\n    resources.map(function(f) {\n      var path = f.split('/');\n      var t = 'aot/' + path[path.length-1];\n      fs.createReadStream(f).pipe(fs.createWriteStream(t));\n    });\n\n使用node copy-dist-files拷贝AOT发布文件到/aot/目录\n\n在package,json的scripts加上\n\n    \"serve:aot\": \"lite-server -c bs-config.aot.json\"\n\n使用\n\n    npm run build:aot && npm run serve:aot\n\n同时编译和启动应用，但这时是AOT预编译的，不能实时开发","slug":"angular-aot","published":1,"updated":"2017-09-03T09:52:29.927Z","layout":"post","photos":[],"link":"","_id":"cjqwe4269001dor0bmstq3q9c","content":"<h2 id=\"AOT预编译\"><a href=\"#AOT预编译\" class=\"headerlink\" title=\"AOT预编译\"></a>AOT预编译</h2><p>使用AOT，编译器仅仅使用一组库在构建期间运行一次；使用JIT，编译器在每个用户的每次运行期间都要用不同的库运行一次，更适合实时开发<br>AOT编译的好处：<br><a id=\"more\"></a></p>\n<ul>\n<li>渲染得更快<br>使用AOT，浏览器下载预编译版本的应用程序。 浏览器直接加载运行代码，所以它可以立即渲染该应用，而不用等应用完成首次编译。</li>\n<li>需要的异步请求更少<br>编译器把外部HTML模板和CSS样式表内联到了该应用的JavaScript中。 消除了用来下载那些源文件的Ajax请求。</li>\n<li>需要下载的Angular框架体积更小<br>如果应用已经编译过了，自然不需要再下载Angular编译器了。 该编译器差不多占了Angular自身体积的一半儿，所以，省略它可以显著减小应用的体积。</li>\n<li>提早检测模板错误<br>AOT编译器在构建过程中检测和报告模板绑定错误，避免用户遇到这些错误。</li>\n<li>更安全<br>AOT编译远在HTML模版和组件被服务到客户端之前，将它们编译到JavaScript文件。 没有模版可以阅读，没有高风险客户端HTML或JavaScript可利用，所以注入攻击的机会较少。</li>\n</ul>\n<h3 id=\"Aot设置\"><a href=\"#Aot设置\" class=\"headerlink\" title=\"Aot设置\"></a>Aot设置</h3><p>首先,使用git clone <a href=\"https://github.com/angular/quickstart.git\" target=\"_blank\" rel=\"external\">https://github.com/angular/quickstart.git</a> quickstart 设置本地简单的项目开发环境<br>在项目根目录/quickstart，安装依赖</p>\n<pre><code>npm install @angular/compiler-cli @angular/platform-server --save\n</code></pre><p>复制原tsconfig.json到项目根目录tsconfig-aot.json文件，修改如下</p>\n<pre><code>//tsconfig-aot.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;module&quot;: &quot;es2015&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;sourceMap&quot;: true,\n    &quot;emitDecoratorMetadata&quot;: true,\n    &quot;experimentalDecorators&quot;: true,\n    &quot;lib&quot;: [&quot;es2015&quot;, &quot;dom&quot;],\n    &quot;noImplicitAny&quot;: true,\n    &quot;suppressImplicitAnyIndexErrors&quot;: true,\n    &quot;typeRoots&quot;: [\n      &quot;./node_modules/@types/&quot;\n    ]\n  },\n\n  &quot;files&quot;: [\n    &quot;src/app/app.module.ts&quot;,\n    &quot;src/main.ts&quot;\n  ],\n\n  &quot;angularCompilerOptions&quot;: {\n   &quot;genDir&quot;: &quot;aot&quot;,\n   &quot;skipMetadataEmit&quot; : true\n }\n}\n</code></pre><p>执行命令ngc编译器来启动AOT编译</p>\n<pre><code>node_modules/.bin/ngc -p tsconfig-aot.json\n</code></pre><p>ngc希望-p选项指向一个tsconfig.json文件，或者一个包含tsconfig.json文件的目录。<br>在ngc完成时，会在aot目录下看到一组NgFactory文件（该目录是在tsconfig-aot.json的genDir属性中指定的）。<br>这些工厂文件对于编译后的应用是必要的。 每个组件工厂都可以在运行时创建一个组件的实例，其中带有一个原始的类文件和一个用JavaScript表示的组件模板。注意，原始的组件类依然是由所生成的这个工厂进行内部引用的。</p>\n<p><strong>修改启动</strong><br>备份原main.ts为main-jit.ts，将main.ts改为</p>\n<pre><code>import { platformBrowser }    from &apos;@angular/platform-browser&apos;;\nimport { AppModuleNgFactory } from &apos;../aot/src/app/app.module.ngfactory&apos;;\n\nconsole.log(&apos;Running AOT compiled&apos;);\nplatformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n</code></pre><p>重新编译应用</p>\n<h3 id=\"Rollup摇树优化\"><a href=\"#Rollup摇树优化\" class=\"headerlink\" title=\"Rollup摇树优化\"></a>Rollup摇树优化</h3><p>Rollup会通过跟踪import和export语句来对本应用进行静态分析。 它所生成的最终代码捆中会排除那些被导出过但又从未被导入的代码。<br>Rollup只能对ES2015模块摇树，因为那里有import和export语句<br>安装Rollup依赖</p>\n<pre><code>npm install rollup rollup-plugin-node-resolve rollup-plugin-commonjs rollup-plugin-uglify --save-dev\n</code></pre><p>在项目根目录新建一个配置文件（rollup-config.js），来告诉Rollup如何处理应用</p>\n<pre><code>//rollup-config.js\nimport nodeResolve from &apos;rollup-plugin-node-resolve&apos;;\nimport commonjs    from &apos;rollup-plugin-commonjs&apos;;\nimport uglify      from &apos;rollup-plugin-uglify&apos;;\n\nexport default {\n  entry: &apos;src/main.js&apos;,\n  dest: &apos;src/build.js&apos;, // output a single application bundle\n  sourceMap: false,\n  format: &apos;iife&apos;,\n  onwarn: function(warning) {\n    // Skip certain warnings\n\n    // should intercept ... but doesn&apos;t in some rollup versions\n    if ( warning.code === &apos;THIS_IS_UNDEFINED&apos; ) { return; }\n\n    // console.warn everything else\n    console.warn( warning.message );\n  },\n  plugins: [\n      nodeResolve({jsnext: true, module: true}),\n      commonjs({\n        include: &apos;node_modules/rxjs/**&apos;,\n      }),\n      uglify()\n  ]\n};\n</code></pre><p>执行摇树优化</p>\n<pre><code>node_modules/.bin/rollup -c rollup-config.js\n</code></pre><p>备份原index.html为index-jit.html，修改脚本配置：</p>\n<pre><code>System.import(&apos;main-jit.js&apos;).catch(function(err){ console.error(err); });\n</code></pre><p>修改index.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Ahead of time compilation&lt;/title&gt;\n    &lt;base href=&quot;/&quot;&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;\n\n    &lt;script src=&quot;node_modules/core-js/client/shim.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;node_modules/zone.js/dist/zone.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;my-app&gt;Loading...&lt;/my-app&gt;\n  &lt;/body&gt;\n  &lt;script src=&quot;build.js&quot;&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre><p>在package,json的scripts加上</p>\n<pre><code>&quot;build:aot&quot;: &quot;ngc -p tsconfig-aot.json &amp;&amp; rollup -c rollup-config.js&quot;,\n</code></pre><p>可通过<strong>npm run build:aot</strong>同时进行编译和摇树优化</p>\n<p>此时，npm start可启动应用，但这时候时按AOT方式启动的，修改内容不会即时编译生效；在url后面加上index-jit.html，比如</p>\n<pre><code>http://localhost:3000/index-jit.html\n</code></pre><p>可切换值jit开发方式，可以实时编译，实现了aot和jit同时存在</p>\n<p>项目根目录添加文件copy-dist-files.js</p>\n<pre><code>var fs = require(&apos;fs&apos;);\nvar resources = [\n  &apos;node_modules/core-js/client/shim.min.js&apos;,\n  &apos;node_modules/zone.js/dist/zone.min.js&apos;,\n  &apos;src/styles.css&apos;\n];\nresources.map(function(f) {\n  var path = f.split(&apos;/&apos;);\n  var t = &apos;aot/&apos; + path[path.length-1];\n  fs.createReadStream(f).pipe(fs.createWriteStream(t));\n});\n</code></pre><p>使用node copy-dist-files拷贝AOT发布文件到/aot/目录</p>\n<p>在package,json的scripts加上</p>\n<pre><code>&quot;serve:aot&quot;: &quot;lite-server -c bs-config.aot.json&quot;\n</code></pre><p>使用</p>\n<pre><code>npm run build:aot &amp;&amp; npm run serve:aot\n</code></pre><p>同时编译和启动应用，但这时是AOT预编译的，不能实时开发</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"AOT预编译\"><a href=\"#AOT预编译\" class=\"headerlink\" title=\"AOT预编译\"></a>AOT预编译</h2><p>使用AOT，编译器仅仅使用一组库在构建期间运行一次；使用JIT，编译器在每个用户的每次运行期间都要用不同的库运行一次，更适合实时开发<br>AOT编译的好处：<br>","more":"</p>\n<ul>\n<li>渲染得更快<br>使用AOT，浏览器下载预编译版本的应用程序。 浏览器直接加载运行代码，所以它可以立即渲染该应用，而不用等应用完成首次编译。</li>\n<li>需要的异步请求更少<br>编译器把外部HTML模板和CSS样式表内联到了该应用的JavaScript中。 消除了用来下载那些源文件的Ajax请求。</li>\n<li>需要下载的Angular框架体积更小<br>如果应用已经编译过了，自然不需要再下载Angular编译器了。 该编译器差不多占了Angular自身体积的一半儿，所以，省略它可以显著减小应用的体积。</li>\n<li>提早检测模板错误<br>AOT编译器在构建过程中检测和报告模板绑定错误，避免用户遇到这些错误。</li>\n<li>更安全<br>AOT编译远在HTML模版和组件被服务到客户端之前，将它们编译到JavaScript文件。 没有模版可以阅读，没有高风险客户端HTML或JavaScript可利用，所以注入攻击的机会较少。</li>\n</ul>\n<h3 id=\"Aot设置\"><a href=\"#Aot设置\" class=\"headerlink\" title=\"Aot设置\"></a>Aot设置</h3><p>首先,使用git clone <a href=\"https://github.com/angular/quickstart.git\" target=\"_blank\" rel=\"external\">https://github.com/angular/quickstart.git</a> quickstart 设置本地简单的项目开发环境<br>在项目根目录/quickstart，安装依赖</p>\n<pre><code>npm install @angular/compiler-cli @angular/platform-server --save\n</code></pre><p>复制原tsconfig.json到项目根目录tsconfig-aot.json文件，修改如下</p>\n<pre><code>//tsconfig-aot.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;module&quot;: &quot;es2015&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;sourceMap&quot;: true,\n    &quot;emitDecoratorMetadata&quot;: true,\n    &quot;experimentalDecorators&quot;: true,\n    &quot;lib&quot;: [&quot;es2015&quot;, &quot;dom&quot;],\n    &quot;noImplicitAny&quot;: true,\n    &quot;suppressImplicitAnyIndexErrors&quot;: true,\n    &quot;typeRoots&quot;: [\n      &quot;./node_modules/@types/&quot;\n    ]\n  },\n\n  &quot;files&quot;: [\n    &quot;src/app/app.module.ts&quot;,\n    &quot;src/main.ts&quot;\n  ],\n\n  &quot;angularCompilerOptions&quot;: {\n   &quot;genDir&quot;: &quot;aot&quot;,\n   &quot;skipMetadataEmit&quot; : true\n }\n}\n</code></pre><p>执行命令ngc编译器来启动AOT编译</p>\n<pre><code>node_modules/.bin/ngc -p tsconfig-aot.json\n</code></pre><p>ngc希望-p选项指向一个tsconfig.json文件，或者一个包含tsconfig.json文件的目录。<br>在ngc完成时，会在aot目录下看到一组NgFactory文件（该目录是在tsconfig-aot.json的genDir属性中指定的）。<br>这些工厂文件对于编译后的应用是必要的。 每个组件工厂都可以在运行时创建一个组件的实例，其中带有一个原始的类文件和一个用JavaScript表示的组件模板。注意，原始的组件类依然是由所生成的这个工厂进行内部引用的。</p>\n<p><strong>修改启动</strong><br>备份原main.ts为main-jit.ts，将main.ts改为</p>\n<pre><code>import { platformBrowser }    from &apos;@angular/platform-browser&apos;;\nimport { AppModuleNgFactory } from &apos;../aot/src/app/app.module.ngfactory&apos;;\n\nconsole.log(&apos;Running AOT compiled&apos;);\nplatformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n</code></pre><p>重新编译应用</p>\n<h3 id=\"Rollup摇树优化\"><a href=\"#Rollup摇树优化\" class=\"headerlink\" title=\"Rollup摇树优化\"></a>Rollup摇树优化</h3><p>Rollup会通过跟踪import和export语句来对本应用进行静态分析。 它所生成的最终代码捆中会排除那些被导出过但又从未被导入的代码。<br>Rollup只能对ES2015模块摇树，因为那里有import和export语句<br>安装Rollup依赖</p>\n<pre><code>npm install rollup rollup-plugin-node-resolve rollup-plugin-commonjs rollup-plugin-uglify --save-dev\n</code></pre><p>在项目根目录新建一个配置文件（rollup-config.js），来告诉Rollup如何处理应用</p>\n<pre><code>//rollup-config.js\nimport nodeResolve from &apos;rollup-plugin-node-resolve&apos;;\nimport commonjs    from &apos;rollup-plugin-commonjs&apos;;\nimport uglify      from &apos;rollup-plugin-uglify&apos;;\n\nexport default {\n  entry: &apos;src/main.js&apos;,\n  dest: &apos;src/build.js&apos;, // output a single application bundle\n  sourceMap: false,\n  format: &apos;iife&apos;,\n  onwarn: function(warning) {\n    // Skip certain warnings\n\n    // should intercept ... but doesn&apos;t in some rollup versions\n    if ( warning.code === &apos;THIS_IS_UNDEFINED&apos; ) { return; }\n\n    // console.warn everything else\n    console.warn( warning.message );\n  },\n  plugins: [\n      nodeResolve({jsnext: true, module: true}),\n      commonjs({\n        include: &apos;node_modules/rxjs/**&apos;,\n      }),\n      uglify()\n  ]\n};\n</code></pre><p>执行摇树优化</p>\n<pre><code>node_modules/.bin/rollup -c rollup-config.js\n</code></pre><p>备份原index.html为index-jit.html，修改脚本配置：</p>\n<pre><code>System.import(&apos;main-jit.js&apos;).catch(function(err){ console.error(err); });\n</code></pre><p>修改index.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Ahead of time compilation&lt;/title&gt;\n    &lt;base href=&quot;/&quot;&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;\n\n    &lt;script src=&quot;node_modules/core-js/client/shim.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;node_modules/zone.js/dist/zone.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;my-app&gt;Loading...&lt;/my-app&gt;\n  &lt;/body&gt;\n  &lt;script src=&quot;build.js&quot;&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre><p>在package,json的scripts加上</p>\n<pre><code>&quot;build:aot&quot;: &quot;ngc -p tsconfig-aot.json &amp;&amp; rollup -c rollup-config.js&quot;,\n</code></pre><p>可通过<strong>npm run build:aot</strong>同时进行编译和摇树优化</p>\n<p>此时，npm start可启动应用，但这时候时按AOT方式启动的，修改内容不会即时编译生效；在url后面加上index-jit.html，比如</p>\n<pre><code>http://localhost:3000/index-jit.html\n</code></pre><p>可切换值jit开发方式，可以实时编译，实现了aot和jit同时存在</p>\n<p>项目根目录添加文件copy-dist-files.js</p>\n<pre><code>var fs = require(&apos;fs&apos;);\nvar resources = [\n  &apos;node_modules/core-js/client/shim.min.js&apos;,\n  &apos;node_modules/zone.js/dist/zone.min.js&apos;,\n  &apos;src/styles.css&apos;\n];\nresources.map(function(f) {\n  var path = f.split(&apos;/&apos;);\n  var t = &apos;aot/&apos; + path[path.length-1];\n  fs.createReadStream(f).pipe(fs.createWriteStream(t));\n});\n</code></pre><p>使用node copy-dist-files拷贝AOT发布文件到/aot/目录</p>\n<p>在package,json的scripts加上</p>\n<pre><code>&quot;serve:aot&quot;: &quot;lite-server -c bs-config.aot.json&quot;\n</code></pre><p>使用</p>\n<pre><code>npm run build:aot &amp;&amp; npm run serve:aot\n</code></pre><p>同时编译和启动应用，但这时是AOT预编译的，不能实时开发</p>"},{"title":"Rxjs-forkjoin/zip/combineLatestde的相似与区别","date":"2018-01-11T15:18:00.000Z","comments":1,"_content":"\nforkJoin,ip,combineLatest都是Observable的静态组合方法，用来将多个Observable组合起来处理，在使用中有时候有点混，下面说一下它们的相似点和区别\n<!--more-->\n\n### forkJoin\n\nforkJoin合并的流，会在每个被合并的流都发出结束信号时发射一次也是唯一一次数据，数据即几个流对象的最后的一个发射值组成的数组\n\n    //延迟1s后发射自增值，每次发射间隔1s,取前3个\n    var obj1 = Observable.timer(1000,1000).take(3);\n    //延迟1s后发射自增值，每次发射间隔2s,取前5个\n    var obj2 = Observable.timer(1000,2000).take(5);\n    Observable.forkJoin(obj1,obj2).subscribe(data => console.log(data));\n    //输出：--> 9s --> [2, 4]\n\n等待全部发射完后去最后一个值构成输出数组对象\n> 操作符只是巡查最后一个Observable的complete信号来判断\n\n在Observable只有一个值的时候，比如HTTP使用就十分简单\n\n    Observable.forkJoin(http.getObject1(),http.getObject2())\n            .subscribe(data[0]= => console.log(data));\n    //data[0]=Object1;data[1]=Object2;\n\n### zip\nzip合并流的时候，是对每一个发射的值都进行合并输出;\n就比如，当每个传入zip的流都发射完毕第一次数据时，zip将这些数据合并为数组并发射出去；当这些流都发射完第二次数据时，zip再次将它们合并为数组并发射。以此类推**直到其中某个流发出结束信号**，整个被合并后的流结束\n还是上面的例子\n\n    var obj1 = Observable.timer(1000,1000).take(3);\n    var obj2 = Observable.timer(1000,2000).take(5);\n    Observable.forkJoin(obj1,obj2).subscribe(data => console.log(data));\n    //输出：->1s-> 0 ->1s-> 1 ->1s-> 2\n           ->1s-> 0 ->  2s       -> 1 ->   2s   ->  2 ->   2s   -> 3 .\n                 [0,0]            [1,1]            [2,2]\n\n可以看到，zip是每一次对应的值反射完成后都会组合起来输出的，直到一个流结束;\n例子中，obj1在3s处就发射完成，等待obj2对应的值反射后，输出最后一次组合值，然后结束，不管obj2后面是否还有值，总耗时: 1+2+2 = 5s\n\n在Observable只有一个值的时候，比如HTTP使用和forkJoin的效果一样\n\n    Observable.zip(http.getObject1(),http.getObject2())\n            .subscribe(data[0]= => console.log(data));\n    //data[0]=Object1;data[1]=Object2;\n\n### combineLatest\ncombineLatest使用每一次发射值与其他流的当前发射值进行合并输出，除了第一次要等到都完成有值以外\n就是说，子流1在等待其他流发射数据期间又发射了新数据，则使用子流1最新发射的数据和其他流的最后一次发射值进行合并;之后每当有某个流发射新数据，不再等待其他流同步发射数据，而是使用其他流之前的最近一次数据进行合并;以此类推，直到所以流都结束了，这是和zip不一样的地方\n\n    var obj1 = Observable.timer(1000,1000).take(3);\n    var obj2 = Observable.timer(1000,2000).take(5);\n    Observable.combineLatest(obj1,obj2).subscribe(data => console.log(data));\n    //输出：\n    ->1s-> 0 ->1s-> 1 ->1s-> 2\n    ->1s-> 0  -->   2s   --> 1 -->2s--> 2 -->2s--> 3 -->2s--> 4\n        [0,0]    [1,0]  [1,1][2,1]    [2,2]     [2,3]      [2,4]\n    总耗时：9s","source":"_posts/2018-01-11-forkjoin-zip.md","raw":"---\ntitle: Rxjs-forkjoin/zip/combineLatestde的相似与区别\ndate: 2018-01-11 23:18:00\ntags: rxjs\ncategories: 前端\ncomments: true\n---\n\nforkJoin,ip,combineLatest都是Observable的静态组合方法，用来将多个Observable组合起来处理，在使用中有时候有点混，下面说一下它们的相似点和区别\n<!--more-->\n\n### forkJoin\n\nforkJoin合并的流，会在每个被合并的流都发出结束信号时发射一次也是唯一一次数据，数据即几个流对象的最后的一个发射值组成的数组\n\n    //延迟1s后发射自增值，每次发射间隔1s,取前3个\n    var obj1 = Observable.timer(1000,1000).take(3);\n    //延迟1s后发射自增值，每次发射间隔2s,取前5个\n    var obj2 = Observable.timer(1000,2000).take(5);\n    Observable.forkJoin(obj1,obj2).subscribe(data => console.log(data));\n    //输出：--> 9s --> [2, 4]\n\n等待全部发射完后去最后一个值构成输出数组对象\n> 操作符只是巡查最后一个Observable的complete信号来判断\n\n在Observable只有一个值的时候，比如HTTP使用就十分简单\n\n    Observable.forkJoin(http.getObject1(),http.getObject2())\n            .subscribe(data[0]= => console.log(data));\n    //data[0]=Object1;data[1]=Object2;\n\n### zip\nzip合并流的时候，是对每一个发射的值都进行合并输出;\n就比如，当每个传入zip的流都发射完毕第一次数据时，zip将这些数据合并为数组并发射出去；当这些流都发射完第二次数据时，zip再次将它们合并为数组并发射。以此类推**直到其中某个流发出结束信号**，整个被合并后的流结束\n还是上面的例子\n\n    var obj1 = Observable.timer(1000,1000).take(3);\n    var obj2 = Observable.timer(1000,2000).take(5);\n    Observable.forkJoin(obj1,obj2).subscribe(data => console.log(data));\n    //输出：->1s-> 0 ->1s-> 1 ->1s-> 2\n           ->1s-> 0 ->  2s       -> 1 ->   2s   ->  2 ->   2s   -> 3 .\n                 [0,0]            [1,1]            [2,2]\n\n可以看到，zip是每一次对应的值反射完成后都会组合起来输出的，直到一个流结束;\n例子中，obj1在3s处就发射完成，等待obj2对应的值反射后，输出最后一次组合值，然后结束，不管obj2后面是否还有值，总耗时: 1+2+2 = 5s\n\n在Observable只有一个值的时候，比如HTTP使用和forkJoin的效果一样\n\n    Observable.zip(http.getObject1(),http.getObject2())\n            .subscribe(data[0]= => console.log(data));\n    //data[0]=Object1;data[1]=Object2;\n\n### combineLatest\ncombineLatest使用每一次发射值与其他流的当前发射值进行合并输出，除了第一次要等到都完成有值以外\n就是说，子流1在等待其他流发射数据期间又发射了新数据，则使用子流1最新发射的数据和其他流的最后一次发射值进行合并;之后每当有某个流发射新数据，不再等待其他流同步发射数据，而是使用其他流之前的最近一次数据进行合并;以此类推，直到所以流都结束了，这是和zip不一样的地方\n\n    var obj1 = Observable.timer(1000,1000).take(3);\n    var obj2 = Observable.timer(1000,2000).take(5);\n    Observable.combineLatest(obj1,obj2).subscribe(data => console.log(data));\n    //输出：\n    ->1s-> 0 ->1s-> 1 ->1s-> 2\n    ->1s-> 0  -->   2s   --> 1 -->2s--> 2 -->2s--> 3 -->2s--> 4\n        [0,0]    [1,0]  [1,1][2,1]    [2,2]     [2,3]      [2,4]\n    总耗时：9s","slug":"forkjoin-zip","published":1,"updated":"2018-01-11T15:20:55.026Z","layout":"post","photos":[],"link":"","_id":"cjqwe426c001ior0bn114zlhm","content":"<p>forkJoin,ip,combineLatest都是Observable的静态组合方法，用来将多个Observable组合起来处理，在使用中有时候有点混，下面说一下它们的相似点和区别<br><a id=\"more\"></a></p>\n<h3 id=\"forkJoin\"><a href=\"#forkJoin\" class=\"headerlink\" title=\"forkJoin\"></a>forkJoin</h3><p>forkJoin合并的流，会在每个被合并的流都发出结束信号时发射一次也是唯一一次数据，数据即几个流对象的最后的一个发射值组成的数组</p>\n<pre><code>//延迟1s后发射自增值，每次发射间隔1s,取前3个\nvar obj1 = Observable.timer(1000,1000).take(3);\n//延迟1s后发射自增值，每次发射间隔2s,取前5个\nvar obj2 = Observable.timer(1000,2000).take(5);\nObservable.forkJoin(obj1,obj2).subscribe(data =&gt; console.log(data));\n//输出：--&gt; 9s --&gt; [2, 4]\n</code></pre><p>等待全部发射完后去最后一个值构成输出数组对象</p>\n<blockquote>\n<p>操作符只是巡查最后一个Observable的complete信号来判断</p>\n</blockquote>\n<p>在Observable只有一个值的时候，比如HTTP使用就十分简单</p>\n<pre><code>Observable.forkJoin(http.getObject1(),http.getObject2())\n        .subscribe(data[0]= =&gt; console.log(data));\n//data[0]=Object1;data[1]=Object2;\n</code></pre><h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><p>zip合并流的时候，是对每一个发射的值都进行合并输出;<br>就比如，当每个传入zip的流都发射完毕第一次数据时，zip将这些数据合并为数组并发射出去；当这些流都发射完第二次数据时，zip再次将它们合并为数组并发射。以此类推<strong>直到其中某个流发出结束信号</strong>，整个被合并后的流结束<br>还是上面的例子</p>\n<pre><code>var obj1 = Observable.timer(1000,1000).take(3);\nvar obj2 = Observable.timer(1000,2000).take(5);\nObservable.forkJoin(obj1,obj2).subscribe(data =&gt; console.log(data));\n//输出：-&gt;1s-&gt; 0 -&gt;1s-&gt; 1 -&gt;1s-&gt; 2\n       -&gt;1s-&gt; 0 -&gt;  2s       -&gt; 1 -&gt;   2s   -&gt;  2 -&gt;   2s   -&gt; 3 .\n             [0,0]            [1,1]            [2,2]\n</code></pre><p>可以看到，zip是每一次对应的值反射完成后都会组合起来输出的，直到一个流结束;<br>例子中，obj1在3s处就发射完成，等待obj2对应的值反射后，输出最后一次组合值，然后结束，不管obj2后面是否还有值，总耗时: 1+2+2 = 5s</p>\n<p>在Observable只有一个值的时候，比如HTTP使用和forkJoin的效果一样</p>\n<pre><code>Observable.zip(http.getObject1(),http.getObject2())\n        .subscribe(data[0]= =&gt; console.log(data));\n//data[0]=Object1;data[1]=Object2;\n</code></pre><h3 id=\"combineLatest\"><a href=\"#combineLatest\" class=\"headerlink\" title=\"combineLatest\"></a>combineLatest</h3><p>combineLatest使用每一次发射值与其他流的当前发射值进行合并输出，除了第一次要等到都完成有值以外<br>就是说，子流1在等待其他流发射数据期间又发射了新数据，则使用子流1最新发射的数据和其他流的最后一次发射值进行合并;之后每当有某个流发射新数据，不再等待其他流同步发射数据，而是使用其他流之前的最近一次数据进行合并;以此类推，直到所以流都结束了，这是和zip不一样的地方</p>\n<pre><code>var obj1 = Observable.timer(1000,1000).take(3);\nvar obj2 = Observable.timer(1000,2000).take(5);\nObservable.combineLatest(obj1,obj2).subscribe(data =&gt; console.log(data));\n//输出：\n-&gt;1s-&gt; 0 -&gt;1s-&gt; 1 -&gt;1s-&gt; 2\n-&gt;1s-&gt; 0  --&gt;   2s   --&gt; 1 --&gt;2s--&gt; 2 --&gt;2s--&gt; 3 --&gt;2s--&gt; 4\n    [0,0]    [1,0]  [1,1][2,1]    [2,2]     [2,3]      [2,4]\n总耗时：9s\n</code></pre>","site":{"data":{}},"excerpt":"<p>forkJoin,ip,combineLatest都是Observable的静态组合方法，用来将多个Observable组合起来处理，在使用中有时候有点混，下面说一下它们的相似点和区别<br>","more":"</p>\n<h3 id=\"forkJoin\"><a href=\"#forkJoin\" class=\"headerlink\" title=\"forkJoin\"></a>forkJoin</h3><p>forkJoin合并的流，会在每个被合并的流都发出结束信号时发射一次也是唯一一次数据，数据即几个流对象的最后的一个发射值组成的数组</p>\n<pre><code>//延迟1s后发射自增值，每次发射间隔1s,取前3个\nvar obj1 = Observable.timer(1000,1000).take(3);\n//延迟1s后发射自增值，每次发射间隔2s,取前5个\nvar obj2 = Observable.timer(1000,2000).take(5);\nObservable.forkJoin(obj1,obj2).subscribe(data =&gt; console.log(data));\n//输出：--&gt; 9s --&gt; [2, 4]\n</code></pre><p>等待全部发射完后去最后一个值构成输出数组对象</p>\n<blockquote>\n<p>操作符只是巡查最后一个Observable的complete信号来判断</p>\n</blockquote>\n<p>在Observable只有一个值的时候，比如HTTP使用就十分简单</p>\n<pre><code>Observable.forkJoin(http.getObject1(),http.getObject2())\n        .subscribe(data[0]= =&gt; console.log(data));\n//data[0]=Object1;data[1]=Object2;\n</code></pre><h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><p>zip合并流的时候，是对每一个发射的值都进行合并输出;<br>就比如，当每个传入zip的流都发射完毕第一次数据时，zip将这些数据合并为数组并发射出去；当这些流都发射完第二次数据时，zip再次将它们合并为数组并发射。以此类推<strong>直到其中某个流发出结束信号</strong>，整个被合并后的流结束<br>还是上面的例子</p>\n<pre><code>var obj1 = Observable.timer(1000,1000).take(3);\nvar obj2 = Observable.timer(1000,2000).take(5);\nObservable.forkJoin(obj1,obj2).subscribe(data =&gt; console.log(data));\n//输出：-&gt;1s-&gt; 0 -&gt;1s-&gt; 1 -&gt;1s-&gt; 2\n       -&gt;1s-&gt; 0 -&gt;  2s       -&gt; 1 -&gt;   2s   -&gt;  2 -&gt;   2s   -&gt; 3 .\n             [0,0]            [1,1]            [2,2]\n</code></pre><p>可以看到，zip是每一次对应的值反射完成后都会组合起来输出的，直到一个流结束;<br>例子中，obj1在3s处就发射完成，等待obj2对应的值反射后，输出最后一次组合值，然后结束，不管obj2后面是否还有值，总耗时: 1+2+2 = 5s</p>\n<p>在Observable只有一个值的时候，比如HTTP使用和forkJoin的效果一样</p>\n<pre><code>Observable.zip(http.getObject1(),http.getObject2())\n        .subscribe(data[0]= =&gt; console.log(data));\n//data[0]=Object1;data[1]=Object2;\n</code></pre><h3 id=\"combineLatest\"><a href=\"#combineLatest\" class=\"headerlink\" title=\"combineLatest\"></a>combineLatest</h3><p>combineLatest使用每一次发射值与其他流的当前发射值进行合并输出，除了第一次要等到都完成有值以外<br>就是说，子流1在等待其他流发射数据期间又发射了新数据，则使用子流1最新发射的数据和其他流的最后一次发射值进行合并;之后每当有某个流发射新数据，不再等待其他流同步发射数据，而是使用其他流之前的最近一次数据进行合并;以此类推，直到所以流都结束了，这是和zip不一样的地方</p>\n<pre><code>var obj1 = Observable.timer(1000,1000).take(3);\nvar obj2 = Observable.timer(1000,2000).take(5);\nObservable.combineLatest(obj1,obj2).subscribe(data =&gt; console.log(data));\n//输出：\n-&gt;1s-&gt; 0 -&gt;1s-&gt; 1 -&gt;1s-&gt; 2\n-&gt;1s-&gt; 0  --&gt;   2s   --&gt; 1 --&gt;2s--&gt; 2 --&gt;2s--&gt; 3 --&gt;2s--&gt; 4\n    [0,0]    [1,0]  [1,1][2,1]    [2,2]     [2,3]      [2,4]\n总耗时：9s\n</code></pre>"},{"title":"css3-3D变换","date":"2018-01-14T13:14:19.000Z","comments":1,"_content":"\n3D转换，能够对元素进行3D变换\n<!--more-->\n\n#### transform\n\n    transform: none|transform-functions;\n其中变换方法如下：\n- matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)，定义 3D 转换，使用 16 个值的 4x4 矩阵。。\n- translate3d(x,y,z)，定义在三个坐标轴上的转换，包括：translateX(x)，translateY(y)，translateZ(z)\n- scale3d(x,y,z)，定义三个坐标轴上的缩放，包括：scaleX(x)，scaleY(y)，scaleZ(z)\n- rotate3d(x,y,z,angle)，定义 3D 旋转;\n- rotateX(angle)，沿着 X 轴旋转\n- rotateY(angle)，沿着 Y 轴旋转\n- rotateZ(angle)，沿着 Z 轴旋转\n\n其中rotate旋转并不是元素在旋转，而是基平面转动而造成的元素旋转的现象：rotateX是由于y-z平面的旋转，rotateY是由于x-z平面的旋转，rotateZ是由于x-y平面的旋转\n1. rotateX(angle)，从右向左看，angle为正值，顺时针旋转;为负值，逆时针旋转;\n2. rotateY(angle)，从下向上看，angle为正值，顺时针旋转;为负值，逆时针旋转;\n3. rotateZ(angle)，从前向后看，angle为正值，顺时针旋转;为负值，逆时针旋转;\n\nDemo请点击此处：[rotate-demo](http://sandbox.runjs.cn/show/mmxe84lk)\n\n#### transform-style\n规定子元素如何在3D空间中显现\n- flat，子元素将不保留其3D位置，以2D形式呈现\n- preserve-3d，子元素将保留其3D空间\n\n效果查看demo的ransform-style两项：[transform-style](http://sandbox.runjs.cn/show/mmxe84lk)\n\n#### perspective\n定义元素距视图的距离，以像素计;当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身;\n如下图所示，perspective实际是人的眼睛和屏幕元素的视距：\n![perspective-1](/images/2018-01-07_perspective.jpg)\n如上图，perspective距离于舞台元素尺寸一样，perspective-origin默认为舞台中心\n这时侯，假如三个子元素都逆时针旋转45deg,第三个元素在视图上将“消失”，因为其正好与视线平行，\n![perspective-1](/images/2018-01-07_perspective2.jpg)\n\n#### perspective-origin\n定义视图视线所关注的位置，从Z轴往x-y平面看去：\n\n    perspective-origin: x-axis y-axis;\n    //可能取值：left/center/right/length/%\n\n在perspective平面上，可以移动视线，关注点自然不一样，图解如下：\n![perspective-1](/images/2018-01-07_perspective4.jpg)\n其中，默认是沿着Z轴中心，1，2都是因为perspective-origin变化导致的关注点不同\n举个例子，加入视线看着元素上边沿，下面是origin移动时，视线和视图方向的变化：\n![perspective-1](/images/2018-01-07_perspective3.jpg)\n\n\n#### backface-visibility\n定义当元素不面向屏幕时是否可见\n当元素发生旋转，尤其是绕X轴和Y轴旋转，当旋转角度大于90deg以上时，就呈现的是元素的背面了;backface-visibility就是指示背面要不要被看到，其中：\n- visible，背面是可见的\n- hidden，背面是不可见的。相当于啥都看不到\n\n效果查看demo：[backface-visibility](http://sandbox.runjs.cn/show/mmxe84lk)\n\n几个2/3D变换的例子，猛击：\n[example-1](http://sandbox.runjs.cn/show/os8sws0d)\n[随意摆放的图片](http://sandbox.runjs.cn/show/vyz5hhhk)","source":"_posts/2018-01-14-css3-3D.md","raw":"---\ntitle: css3-3D变换\ndate: 2018-01-14 21:14:19\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\n3D转换，能够对元素进行3D变换\n<!--more-->\n\n#### transform\n\n    transform: none|transform-functions;\n其中变换方法如下：\n- matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)，定义 3D 转换，使用 16 个值的 4x4 矩阵。。\n- translate3d(x,y,z)，定义在三个坐标轴上的转换，包括：translateX(x)，translateY(y)，translateZ(z)\n- scale3d(x,y,z)，定义三个坐标轴上的缩放，包括：scaleX(x)，scaleY(y)，scaleZ(z)\n- rotate3d(x,y,z,angle)，定义 3D 旋转;\n- rotateX(angle)，沿着 X 轴旋转\n- rotateY(angle)，沿着 Y 轴旋转\n- rotateZ(angle)，沿着 Z 轴旋转\n\n其中rotate旋转并不是元素在旋转，而是基平面转动而造成的元素旋转的现象：rotateX是由于y-z平面的旋转，rotateY是由于x-z平面的旋转，rotateZ是由于x-y平面的旋转\n1. rotateX(angle)，从右向左看，angle为正值，顺时针旋转;为负值，逆时针旋转;\n2. rotateY(angle)，从下向上看，angle为正值，顺时针旋转;为负值，逆时针旋转;\n3. rotateZ(angle)，从前向后看，angle为正值，顺时针旋转;为负值，逆时针旋转;\n\nDemo请点击此处：[rotate-demo](http://sandbox.runjs.cn/show/mmxe84lk)\n\n#### transform-style\n规定子元素如何在3D空间中显现\n- flat，子元素将不保留其3D位置，以2D形式呈现\n- preserve-3d，子元素将保留其3D空间\n\n效果查看demo的ransform-style两项：[transform-style](http://sandbox.runjs.cn/show/mmxe84lk)\n\n#### perspective\n定义元素距视图的距离，以像素计;当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身;\n如下图所示，perspective实际是人的眼睛和屏幕元素的视距：\n![perspective-1](/images/2018-01-07_perspective.jpg)\n如上图，perspective距离于舞台元素尺寸一样，perspective-origin默认为舞台中心\n这时侯，假如三个子元素都逆时针旋转45deg,第三个元素在视图上将“消失”，因为其正好与视线平行，\n![perspective-1](/images/2018-01-07_perspective2.jpg)\n\n#### perspective-origin\n定义视图视线所关注的位置，从Z轴往x-y平面看去：\n\n    perspective-origin: x-axis y-axis;\n    //可能取值：left/center/right/length/%\n\n在perspective平面上，可以移动视线，关注点自然不一样，图解如下：\n![perspective-1](/images/2018-01-07_perspective4.jpg)\n其中，默认是沿着Z轴中心，1，2都是因为perspective-origin变化导致的关注点不同\n举个例子，加入视线看着元素上边沿，下面是origin移动时，视线和视图方向的变化：\n![perspective-1](/images/2018-01-07_perspective3.jpg)\n\n\n#### backface-visibility\n定义当元素不面向屏幕时是否可见\n当元素发生旋转，尤其是绕X轴和Y轴旋转，当旋转角度大于90deg以上时，就呈现的是元素的背面了;backface-visibility就是指示背面要不要被看到，其中：\n- visible，背面是可见的\n- hidden，背面是不可见的。相当于啥都看不到\n\n效果查看demo：[backface-visibility](http://sandbox.runjs.cn/show/mmxe84lk)\n\n几个2/3D变换的例子，猛击：\n[example-1](http://sandbox.runjs.cn/show/os8sws0d)\n[随意摆放的图片](http://sandbox.runjs.cn/show/vyz5hhhk)","slug":"css3-3D","published":1,"updated":"2018-01-14T14:45:16.092Z","layout":"post","photos":[],"link":"","_id":"cjqwe426e001lor0bz6b62agc","content":"<p>3D转换，能够对元素进行3D变换<br><a id=\"more\"></a></p>\n<h4 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h4><pre><code>transform: none|transform-functions;\n</code></pre><p>其中变换方法如下：</p>\n<ul>\n<li>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)，定义 3D 转换，使用 16 个值的 4x4 矩阵。。</li>\n<li>translate3d(x,y,z)，定义在三个坐标轴上的转换，包括：translateX(x)，translateY(y)，translateZ(z)</li>\n<li>scale3d(x,y,z)，定义三个坐标轴上的缩放，包括：scaleX(x)，scaleY(y)，scaleZ(z)</li>\n<li>rotate3d(x,y,z,angle)，定义 3D 旋转;</li>\n<li>rotateX(angle)，沿着 X 轴旋转</li>\n<li>rotateY(angle)，沿着 Y 轴旋转</li>\n<li>rotateZ(angle)，沿着 Z 轴旋转</li>\n</ul>\n<p>其中rotate旋转并不是元素在旋转，而是基平面转动而造成的元素旋转的现象：rotateX是由于y-z平面的旋转，rotateY是由于x-z平面的旋转，rotateZ是由于x-y平面的旋转</p>\n<ol>\n<li>rotateX(angle)，从右向左看，angle为正值，顺时针旋转;为负值，逆时针旋转;</li>\n<li>rotateY(angle)，从下向上看，angle为正值，顺时针旋转;为负值，逆时针旋转;</li>\n<li>rotateZ(angle)，从前向后看，angle为正值，顺时针旋转;为负值，逆时针旋转;</li>\n</ol>\n<p>Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/mmxe84lk\" target=\"_blank\" rel=\"external\">rotate-demo</a></p>\n<h4 id=\"transform-style\"><a href=\"#transform-style\" class=\"headerlink\" title=\"transform-style\"></a>transform-style</h4><p>规定子元素如何在3D空间中显现</p>\n<ul>\n<li>flat，子元素将不保留其3D位置，以2D形式呈现</li>\n<li>preserve-3d，子元素将保留其3D空间</li>\n</ul>\n<p>效果查看demo的ransform-style两项：<a href=\"http://sandbox.runjs.cn/show/mmxe84lk\" target=\"_blank\" rel=\"external\">transform-style</a></p>\n<h4 id=\"perspective\"><a href=\"#perspective\" class=\"headerlink\" title=\"perspective\"></a>perspective</h4><p>定义元素距视图的距离，以像素计;当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身;<br>如下图所示，perspective实际是人的眼睛和屏幕元素的视距：<br><img src=\"/images/2018-01-07_perspective.jpg\" alt=\"perspective-1\"><br>如上图，perspective距离于舞台元素尺寸一样，perspective-origin默认为舞台中心<br>这时侯，假如三个子元素都逆时针旋转45deg,第三个元素在视图上将“消失”，因为其正好与视线平行，<br><img src=\"/images/2018-01-07_perspective2.jpg\" alt=\"perspective-1\"></p>\n<h4 id=\"perspective-origin\"><a href=\"#perspective-origin\" class=\"headerlink\" title=\"perspective-origin\"></a>perspective-origin</h4><p>定义视图视线所关注的位置，从Z轴往x-y平面看去：</p>\n<pre><code>perspective-origin: x-axis y-axis;\n//可能取值：left/center/right/length/%\n</code></pre><p>在perspective平面上，可以移动视线，关注点自然不一样，图解如下：<br><img src=\"/images/2018-01-07_perspective4.jpg\" alt=\"perspective-1\"><br>其中，默认是沿着Z轴中心，1，2都是因为perspective-origin变化导致的关注点不同<br>举个例子，加入视线看着元素上边沿，下面是origin移动时，视线和视图方向的变化：<br><img src=\"/images/2018-01-07_perspective3.jpg\" alt=\"perspective-1\"></p>\n<h4 id=\"backface-visibility\"><a href=\"#backface-visibility\" class=\"headerlink\" title=\"backface-visibility\"></a>backface-visibility</h4><p>定义当元素不面向屏幕时是否可见<br>当元素发生旋转，尤其是绕X轴和Y轴旋转，当旋转角度大于90deg以上时，就呈现的是元素的背面了;backface-visibility就是指示背面要不要被看到，其中：</p>\n<ul>\n<li>visible，背面是可见的</li>\n<li>hidden，背面是不可见的。相当于啥都看不到</li>\n</ul>\n<p>效果查看demo：<a href=\"http://sandbox.runjs.cn/show/mmxe84lk\" target=\"_blank\" rel=\"external\">backface-visibility</a></p>\n<p>几个2/3D变换的例子，猛击：<br><a href=\"http://sandbox.runjs.cn/show/os8sws0d\" target=\"_blank\" rel=\"external\">example-1</a><br><a href=\"http://sandbox.runjs.cn/show/vyz5hhhk\" target=\"_blank\" rel=\"external\">随意摆放的图片</a></p>\n","site":{"data":{}},"excerpt":"<p>3D转换，能够对元素进行3D变换<br>","more":"</p>\n<h4 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h4><pre><code>transform: none|transform-functions;\n</code></pre><p>其中变换方法如下：</p>\n<ul>\n<li>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)，定义 3D 转换，使用 16 个值的 4x4 矩阵。。</li>\n<li>translate3d(x,y,z)，定义在三个坐标轴上的转换，包括：translateX(x)，translateY(y)，translateZ(z)</li>\n<li>scale3d(x,y,z)，定义三个坐标轴上的缩放，包括：scaleX(x)，scaleY(y)，scaleZ(z)</li>\n<li>rotate3d(x,y,z,angle)，定义 3D 旋转;</li>\n<li>rotateX(angle)，沿着 X 轴旋转</li>\n<li>rotateY(angle)，沿着 Y 轴旋转</li>\n<li>rotateZ(angle)，沿着 Z 轴旋转</li>\n</ul>\n<p>其中rotate旋转并不是元素在旋转，而是基平面转动而造成的元素旋转的现象：rotateX是由于y-z平面的旋转，rotateY是由于x-z平面的旋转，rotateZ是由于x-y平面的旋转</p>\n<ol>\n<li>rotateX(angle)，从右向左看，angle为正值，顺时针旋转;为负值，逆时针旋转;</li>\n<li>rotateY(angle)，从下向上看，angle为正值，顺时针旋转;为负值，逆时针旋转;</li>\n<li>rotateZ(angle)，从前向后看，angle为正值，顺时针旋转;为负值，逆时针旋转;</li>\n</ol>\n<p>Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/mmxe84lk\" target=\"_blank\" rel=\"external\">rotate-demo</a></p>\n<h4 id=\"transform-style\"><a href=\"#transform-style\" class=\"headerlink\" title=\"transform-style\"></a>transform-style</h4><p>规定子元素如何在3D空间中显现</p>\n<ul>\n<li>flat，子元素将不保留其3D位置，以2D形式呈现</li>\n<li>preserve-3d，子元素将保留其3D空间</li>\n</ul>\n<p>效果查看demo的ransform-style两项：<a href=\"http://sandbox.runjs.cn/show/mmxe84lk\" target=\"_blank\" rel=\"external\">transform-style</a></p>\n<h4 id=\"perspective\"><a href=\"#perspective\" class=\"headerlink\" title=\"perspective\"></a>perspective</h4><p>定义元素距视图的距离，以像素计;当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身;<br>如下图所示，perspective实际是人的眼睛和屏幕元素的视距：<br><img src=\"/images/2018-01-07_perspective.jpg\" alt=\"perspective-1\"><br>如上图，perspective距离于舞台元素尺寸一样，perspective-origin默认为舞台中心<br>这时侯，假如三个子元素都逆时针旋转45deg,第三个元素在视图上将“消失”，因为其正好与视线平行，<br><img src=\"/images/2018-01-07_perspective2.jpg\" alt=\"perspective-1\"></p>\n<h4 id=\"perspective-origin\"><a href=\"#perspective-origin\" class=\"headerlink\" title=\"perspective-origin\"></a>perspective-origin</h4><p>定义视图视线所关注的位置，从Z轴往x-y平面看去：</p>\n<pre><code>perspective-origin: x-axis y-axis;\n//可能取值：left/center/right/length/%\n</code></pre><p>在perspective平面上，可以移动视线，关注点自然不一样，图解如下：<br><img src=\"/images/2018-01-07_perspective4.jpg\" alt=\"perspective-1\"><br>其中，默认是沿着Z轴中心，1，2都是因为perspective-origin变化导致的关注点不同<br>举个例子，加入视线看着元素上边沿，下面是origin移动时，视线和视图方向的变化：<br><img src=\"/images/2018-01-07_perspective3.jpg\" alt=\"perspective-1\"></p>\n<h4 id=\"backface-visibility\"><a href=\"#backface-visibility\" class=\"headerlink\" title=\"backface-visibility\"></a>backface-visibility</h4><p>定义当元素不面向屏幕时是否可见<br>当元素发生旋转，尤其是绕X轴和Y轴旋转，当旋转角度大于90deg以上时，就呈现的是元素的背面了;backface-visibility就是指示背面要不要被看到，其中：</p>\n<ul>\n<li>visible，背面是可见的</li>\n<li>hidden，背面是不可见的。相当于啥都看不到</li>\n</ul>\n<p>效果查看demo：<a href=\"http://sandbox.runjs.cn/show/mmxe84lk\" target=\"_blank\" rel=\"external\">backface-visibility</a></p>\n<p>几个2/3D变换的例子，猛击：<br><a href=\"http://sandbox.runjs.cn/show/os8sws0d\" target=\"_blank\" rel=\"external\">example-1</a><br><a href=\"http://sandbox.runjs.cn/show/vyz5hhhk\" target=\"_blank\" rel=\"external\">随意摆放的图片</a></p>"},{"title":"css3-动画","date":"2018-01-14T14:50:03.000Z","comments":1,"_content":"\nCSS3中有两种制造动画效果的方式，一种是过渡transition，一种是animation\n<!--more-->\n\n### 过渡transition\n即transition系列属性，可以对CSS属性的变化定义一个过程效果，主要属性如下：\n\n- transition-property，应用过渡的CSS属性名\n- transition-duration，过渡效果总共花费的时间，可以是s或ms。默认是 0，无效果\n- transition-timing-function,规定过渡效果的时间曲线,可能取值：linear/ease/ease-in/ease-out/ease-in-out,默认是ease\n- transition-delay,过渡效果开始的延迟时间，默认是0\n\ntransition是几个属性的简写：\n\n    transition： property duration function delay;\n\n> 过渡的效果是一次性的，一次可以同时添加多个css属性的变化\n> 过渡需要事件的触发，包括：鼠标键盘事件，超时事件等\n\n点击这里有demo:[transition-demo](http://sandbox.runjs.cn/show/vyz5hhhk)\n\n### animation\nanimation也是基于css属性的变化来够造动画效果的，但是，与过渡不同，它可以构造多次动画效果，甚至可以一直动下去，也可作用于多个CSS属性\nanimation主要包括下面几个属性：\n\n- @keyframes,定义动画,按时间流动变化定义CSS变化\n- animation-name ，定义@keyframes 动画的名称\n- animation-duration，动画完成一个周期所花的总时长，单位：秒或毫秒，默认是 0;keyframes里的百分比就是这个时常的百分比，代表时间流动的间隔\n- animation-timing-function，动画的速度曲线，默认是 \"ease\"\n- animation-delay，动画开始的延迟，默认是0 \t3\n- animation-iteration-count，动画被播放的次数，默认是 1,infinite指无限次\n- animation-direction，声明动画是否在下一周期逆向地播放，默认是 \"normal\"，“alternate”指正反轮流播放\n- animation-play-state，规定动画是否正在运行或暂停，默认是 \"running\"，设置成“paused”，动画将暂停\n- animation-fill-mode，规定对象动画时间之外的状态\n\n声明animation动画很简单，就两部：\n1. 使用@keyframes定义动画，即按照时间流动的百分比例来规定css属性的变化\n2. 利用animation来使用动画，定义动画的时间，运动方式..等\n\nanimation是多个属性的简写：\n\n    animation：name duration function delay count direction;\n\n下面是一个例子：\n\n    @keyframes my-animation\n    {\n        0%   {background:red; left:0px; top:0px;}\n        25%  {background:yellow; left:200px; top:0px;}\n        50%  {background:blue; left:200px; top:200px;}\n        75%  {background:green; left:0px; top:200px;}\n        100% {background:red; left:0px; top:0px;}\n    }\n    //其他浏览器兼容需要定义多个，分别带前缀，比如@-moz-keyframes，..\n\n    div:hover\n    {\n        animation:myfirst 5s linear 2s infinite alternate;\n        -moz-animation:myfirst 5s linear 2s infinite alternate;\n        -webkit-animation:myfirst 5s linear 2s infinite alternate;\n        -o-animation:myfirst 5s linear 2s infinite alternate;\n    }\n\n相关demo请点击：\n[动画-demo](http://sandbox.runjs.cn/show/i34jqcjh)\n[旋转木马](http://sandbox.runjs.cn/show/qwjvyzt1)\n[怦然心动](http://sandbox.runjs.cn/show/rlimsdca)","source":"_posts/2018-01-14-css3-animation.md","raw":"---\ntitle: css3-动画\ndate: 2018-01-14 22:50:03\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\nCSS3中有两种制造动画效果的方式，一种是过渡transition，一种是animation\n<!--more-->\n\n### 过渡transition\n即transition系列属性，可以对CSS属性的变化定义一个过程效果，主要属性如下：\n\n- transition-property，应用过渡的CSS属性名\n- transition-duration，过渡效果总共花费的时间，可以是s或ms。默认是 0，无效果\n- transition-timing-function,规定过渡效果的时间曲线,可能取值：linear/ease/ease-in/ease-out/ease-in-out,默认是ease\n- transition-delay,过渡效果开始的延迟时间，默认是0\n\ntransition是几个属性的简写：\n\n    transition： property duration function delay;\n\n> 过渡的效果是一次性的，一次可以同时添加多个css属性的变化\n> 过渡需要事件的触发，包括：鼠标键盘事件，超时事件等\n\n点击这里有demo:[transition-demo](http://sandbox.runjs.cn/show/vyz5hhhk)\n\n### animation\nanimation也是基于css属性的变化来够造动画效果的，但是，与过渡不同，它可以构造多次动画效果，甚至可以一直动下去，也可作用于多个CSS属性\nanimation主要包括下面几个属性：\n\n- @keyframes,定义动画,按时间流动变化定义CSS变化\n- animation-name ，定义@keyframes 动画的名称\n- animation-duration，动画完成一个周期所花的总时长，单位：秒或毫秒，默认是 0;keyframes里的百分比就是这个时常的百分比，代表时间流动的间隔\n- animation-timing-function，动画的速度曲线，默认是 \"ease\"\n- animation-delay，动画开始的延迟，默认是0 \t3\n- animation-iteration-count，动画被播放的次数，默认是 1,infinite指无限次\n- animation-direction，声明动画是否在下一周期逆向地播放，默认是 \"normal\"，“alternate”指正反轮流播放\n- animation-play-state，规定动画是否正在运行或暂停，默认是 \"running\"，设置成“paused”，动画将暂停\n- animation-fill-mode，规定对象动画时间之外的状态\n\n声明animation动画很简单，就两部：\n1. 使用@keyframes定义动画，即按照时间流动的百分比例来规定css属性的变化\n2. 利用animation来使用动画，定义动画的时间，运动方式..等\n\nanimation是多个属性的简写：\n\n    animation：name duration function delay count direction;\n\n下面是一个例子：\n\n    @keyframes my-animation\n    {\n        0%   {background:red; left:0px; top:0px;}\n        25%  {background:yellow; left:200px; top:0px;}\n        50%  {background:blue; left:200px; top:200px;}\n        75%  {background:green; left:0px; top:200px;}\n        100% {background:red; left:0px; top:0px;}\n    }\n    //其他浏览器兼容需要定义多个，分别带前缀，比如@-moz-keyframes，..\n\n    div:hover\n    {\n        animation:myfirst 5s linear 2s infinite alternate;\n        -moz-animation:myfirst 5s linear 2s infinite alternate;\n        -webkit-animation:myfirst 5s linear 2s infinite alternate;\n        -o-animation:myfirst 5s linear 2s infinite alternate;\n    }\n\n相关demo请点击：\n[动画-demo](http://sandbox.runjs.cn/show/i34jqcjh)\n[旋转木马](http://sandbox.runjs.cn/show/qwjvyzt1)\n[怦然心动](http://sandbox.runjs.cn/show/rlimsdca)","slug":"css3-animation","published":1,"updated":"2018-11-04T15:30:10.257Z","layout":"post","photos":[],"link":"","_id":"cjqwe426h001por0bxkp3yz0s","content":"<p>CSS3中有两种制造动画效果的方式，一种是过渡transition，一种是animation<br><a id=\"more\"></a></p>\n<h3 id=\"过渡transition\"><a href=\"#过渡transition\" class=\"headerlink\" title=\"过渡transition\"></a>过渡transition</h3><p>即transition系列属性，可以对CSS属性的变化定义一个过程效果，主要属性如下：</p>\n<ul>\n<li>transition-property，应用过渡的CSS属性名</li>\n<li>transition-duration，过渡效果总共花费的时间，可以是s或ms。默认是 0，无效果</li>\n<li>transition-timing-function,规定过渡效果的时间曲线,可能取值：linear/ease/ease-in/ease-out/ease-in-out,默认是ease</li>\n<li>transition-delay,过渡效果开始的延迟时间，默认是0</li>\n</ul>\n<p>transition是几个属性的简写：</p>\n<pre><code>transition： property duration function delay;\n</code></pre><blockquote>\n<p>过渡的效果是一次性的，一次可以同时添加多个css属性的变化<br>过渡需要事件的触发，包括：鼠标键盘事件，超时事件等</p>\n</blockquote>\n<p>点击这里有demo:<a href=\"http://sandbox.runjs.cn/show/vyz5hhhk\" target=\"_blank\" rel=\"external\">transition-demo</a></p>\n<h3 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h3><p>animation也是基于css属性的变化来够造动画效果的，但是，与过渡不同，它可以构造多次动画效果，甚至可以一直动下去，也可作用于多个CSS属性<br>animation主要包括下面几个属性：</p>\n<ul>\n<li>@keyframes,定义动画,按时间流动变化定义CSS变化</li>\n<li>animation-name ，定义@keyframes 动画的名称</li>\n<li>animation-duration，动画完成一个周期所花的总时长，单位：秒或毫秒，默认是 0;keyframes里的百分比就是这个时常的百分比，代表时间流动的间隔</li>\n<li>animation-timing-function，动画的速度曲线，默认是 “ease”</li>\n<li>animation-delay，动画开始的延迟，默认是0     3</li>\n<li>animation-iteration-count，动画被播放的次数，默认是 1,infinite指无限次</li>\n<li>animation-direction，声明动画是否在下一周期逆向地播放，默认是 “normal”，“alternate”指正反轮流播放</li>\n<li>animation-play-state，规定动画是否正在运行或暂停，默认是 “running”，设置成“paused”，动画将暂停</li>\n<li>animation-fill-mode，规定对象动画时间之外的状态</li>\n</ul>\n<p>声明animation动画很简单，就两部：</p>\n<ol>\n<li>使用@keyframes定义动画，即按照时间流动的百分比例来规定css属性的变化</li>\n<li>利用animation来使用动画，定义动画的时间，运动方式..等</li>\n</ol>\n<p>animation是多个属性的简写：</p>\n<pre><code>animation：name duration function delay count direction;\n</code></pre><p>下面是一个例子：</p>\n<pre><code>@keyframes my-animation\n{\n    0%   {background:red; left:0px; top:0px;}\n    25%  {background:yellow; left:200px; top:0px;}\n    50%  {background:blue; left:200px; top:200px;}\n    75%  {background:green; left:0px; top:200px;}\n    100% {background:red; left:0px; top:0px;}\n}\n//其他浏览器兼容需要定义多个，分别带前缀，比如@-moz-keyframes，..\n\ndiv:hover\n{\n    animation:myfirst 5s linear 2s infinite alternate;\n    -moz-animation:myfirst 5s linear 2s infinite alternate;\n    -webkit-animation:myfirst 5s linear 2s infinite alternate;\n    -o-animation:myfirst 5s linear 2s infinite alternate;\n}\n</code></pre><p>相关demo请点击：<br><a href=\"http://sandbox.runjs.cn/show/i34jqcjh\" target=\"_blank\" rel=\"external\">动画-demo</a><br><a href=\"http://sandbox.runjs.cn/show/qwjvyzt1\" target=\"_blank\" rel=\"external\">旋转木马</a><br><a href=\"http://sandbox.runjs.cn/show/rlimsdca\" target=\"_blank\" rel=\"external\">怦然心动</a></p>\n","site":{"data":{}},"excerpt":"<p>CSS3中有两种制造动画效果的方式，一种是过渡transition，一种是animation<br>","more":"</p>\n<h3 id=\"过渡transition\"><a href=\"#过渡transition\" class=\"headerlink\" title=\"过渡transition\"></a>过渡transition</h3><p>即transition系列属性，可以对CSS属性的变化定义一个过程效果，主要属性如下：</p>\n<ul>\n<li>transition-property，应用过渡的CSS属性名</li>\n<li>transition-duration，过渡效果总共花费的时间，可以是s或ms。默认是 0，无效果</li>\n<li>transition-timing-function,规定过渡效果的时间曲线,可能取值：linear/ease/ease-in/ease-out/ease-in-out,默认是ease</li>\n<li>transition-delay,过渡效果开始的延迟时间，默认是0</li>\n</ul>\n<p>transition是几个属性的简写：</p>\n<pre><code>transition： property duration function delay;\n</code></pre><blockquote>\n<p>过渡的效果是一次性的，一次可以同时添加多个css属性的变化<br>过渡需要事件的触发，包括：鼠标键盘事件，超时事件等</p>\n</blockquote>\n<p>点击这里有demo:<a href=\"http://sandbox.runjs.cn/show/vyz5hhhk\" target=\"_blank\" rel=\"external\">transition-demo</a></p>\n<h3 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h3><p>animation也是基于css属性的变化来够造动画效果的，但是，与过渡不同，它可以构造多次动画效果，甚至可以一直动下去，也可作用于多个CSS属性<br>animation主要包括下面几个属性：</p>\n<ul>\n<li>@keyframes,定义动画,按时间流动变化定义CSS变化</li>\n<li>animation-name ，定义@keyframes 动画的名称</li>\n<li>animation-duration，动画完成一个周期所花的总时长，单位：秒或毫秒，默认是 0;keyframes里的百分比就是这个时常的百分比，代表时间流动的间隔</li>\n<li>animation-timing-function，动画的速度曲线，默认是 “ease”</li>\n<li>animation-delay，动画开始的延迟，默认是0     3</li>\n<li>animation-iteration-count，动画被播放的次数，默认是 1,infinite指无限次</li>\n<li>animation-direction，声明动画是否在下一周期逆向地播放，默认是 “normal”，“alternate”指正反轮流播放</li>\n<li>animation-play-state，规定动画是否正在运行或暂停，默认是 “running”，设置成“paused”，动画将暂停</li>\n<li>animation-fill-mode，规定对象动画时间之外的状态</li>\n</ul>\n<p>声明animation动画很简单，就两部：</p>\n<ol>\n<li>使用@keyframes定义动画，即按照时间流动的百分比例来规定css属性的变化</li>\n<li>利用animation来使用动画，定义动画的时间，运动方式..等</li>\n</ol>\n<p>animation是多个属性的简写：</p>\n<pre><code>animation：name duration function delay count direction;\n</code></pre><p>下面是一个例子：</p>\n<pre><code>@keyframes my-animation\n{\n    0%   {background:red; left:0px; top:0px;}\n    25%  {background:yellow; left:200px; top:0px;}\n    50%  {background:blue; left:200px; top:200px;}\n    75%  {background:green; left:0px; top:200px;}\n    100% {background:red; left:0px; top:0px;}\n}\n//其他浏览器兼容需要定义多个，分别带前缀，比如@-moz-keyframes，..\n\ndiv:hover\n{\n    animation:myfirst 5s linear 2s infinite alternate;\n    -moz-animation:myfirst 5s linear 2s infinite alternate;\n    -webkit-animation:myfirst 5s linear 2s infinite alternate;\n    -o-animation:myfirst 5s linear 2s infinite alternate;\n}\n</code></pre><p>相关demo请点击：<br><a href=\"http://sandbox.runjs.cn/show/i34jqcjh\" target=\"_blank\" rel=\"external\">动画-demo</a><br><a href=\"http://sandbox.runjs.cn/show/qwjvyzt1\" target=\"_blank\" rel=\"external\">旋转木马</a><br><a href=\"http://sandbox.runjs.cn/show/rlimsdca\" target=\"_blank\" rel=\"external\">怦然心动</a></p>"},{"title":"css3-渐变","date":"2018-01-18T15:28:32.000Z","comments":1,"_content":"\n# 线性渐变\n线性渐变是几个颜色沿着一定角度的“发射线”而形成的颜色过渡效果\n线性渐变声明方式：\n<!--more-->\n\n    linear-gradient(angle角度，color1-stop,color2-stop,...)\n\n其中：\n##### 1. angle角度\n指的是沿着元素中心的“射线”的角度，几个颜色点就是沿着这根射线的方向在变化和过渡的，**从下向上为0deg，顺时针为正，逆时针为负值**\n也可以使用关键字来指明方向，to top表示**从下往上**，to top left表示从**右下角往左上角**，当height=width的时候：\n\n    to top -> 0deg\n    to right -> 90deg\n    to bottom -> 180deg\n    to left -> -90deg(或270deg)\n    to top left -> -45deg(或315deg)\n    to top right -> 45deg\n    to bottom left -> -135deg(或225deg)\n    to bottom right -> 135deg\n\n效果见Demo:[linear-gradient-demo](http://sandbox.runjs.cn/show/mqjc0fli)\n\n##### 2. 色标\n色标就是上面的color-stop，指的是每个颜色的结束位置，包括颜色和位置，比如：\n\n    red 20% blue 50% //在20%->50%的位置范围内从red过渡到blue\n\n位置如果不写的话，默认平均分配，比如下面写法效果一样：\n\n    linear-gradient(red, green, blue)\n    linear-gradient(red 0%, green 50%, blue 100%)\n\nlinear-gradient(red n%, blue m%)表示：\n\n- 0%->n%，red\n- n%->m%，red到blue的过渡\n- n%->100%，blue\n\n当两个不同颜色位置写诚一样时，可形成边界分明的“颜色条”，比如：\n\n    linear-gradient(red 0%,red30%，green 30%，green 50%,blue 50%blue 100%)\n\n表示：0%->30%，red;30%->30%，red到green,一般显示一条边界线;30%->50%，green;50%->100%,blue\n\n效果见Demo:[linear-gradient-demo](http://sandbox.runjs.cn/show/mqjc0fli)\n\n##### 3. 重复渐变\n当首尾两颜色位置不在0%或100%时，可以进行重复渐变,使色标在渐变线方向上无限重复,形成特殊的排列效果\n例子：\n\n    background: -webkit-repeating-linear-gradient(blue 20%,green 50%);\n    background: repeating-linear-gradient(blue 20%,green 50%);\n\n#####4. 多次渐变组合背景\n颜色渐变可以定义多次，这些渐变效果将会重叠在一起，合理使用背景的其他属性，比如：size,repeat，可以构造处多个渐变的组合效果，这里不缀述，可以参考后面的demo\n\n本文所有的效果见:[linear-gradient-demo](http://sandbox.runjs.cn/show/mqjc0fli)\n\n参考文章：[深入理解线性渐变](https://www.cnblogs.com/xiaohuochai/archive/2016/04/12/5370446.html)\n\n# 径向渐变\n径向渐变从圆心点以椭圆形状向外扩散，渐变的实现由两部分组成：位置，形状，size和色标\n\n    radial-gradient(shape size ?at position ? color-stop，..)\n\n#####1.位置\n位置指的是径向椭圆的中心点的位置，可以使用关键字/百分比/整数来定义，比如：\n\n    at top left\n    at 200px 200px\n    at 30% 30%\n\n其中关键字的对应关系\n\n    top left：0% 0%\n    top right：100% 0%\n    center center：50% 50%\n    bottom left：0% 100%\n    bottom right：100% 100%\n\n#####2.形状\n形状指的是圆形还是椭圆：circle/ellipse，默认是椭圆，可以不用书写;\n不过好像circle不能和at position一起用，不知道怎么回事\n\n#####3.size\n这个主要是径向渐变发散的半径不同，可以参考文档：\n[深入理解径性渐变](http://www.cnblogs.com/xiaohuochai/p/5383285.html)\n\n本节所有demo可见：[径向渐变-demo](http://sandbox.runjs.cn/show/rnfvcray)","source":"_posts/2018-01-18-css3-gradients.md","raw":"---\ntitle: css3-渐变\ndate: 2018-01-18 23:28:32\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\n# 线性渐变\n线性渐变是几个颜色沿着一定角度的“发射线”而形成的颜色过渡效果\n线性渐变声明方式：\n<!--more-->\n\n    linear-gradient(angle角度，color1-stop,color2-stop,...)\n\n其中：\n##### 1. angle角度\n指的是沿着元素中心的“射线”的角度，几个颜色点就是沿着这根射线的方向在变化和过渡的，**从下向上为0deg，顺时针为正，逆时针为负值**\n也可以使用关键字来指明方向，to top表示**从下往上**，to top left表示从**右下角往左上角**，当height=width的时候：\n\n    to top -> 0deg\n    to right -> 90deg\n    to bottom -> 180deg\n    to left -> -90deg(或270deg)\n    to top left -> -45deg(或315deg)\n    to top right -> 45deg\n    to bottom left -> -135deg(或225deg)\n    to bottom right -> 135deg\n\n效果见Demo:[linear-gradient-demo](http://sandbox.runjs.cn/show/mqjc0fli)\n\n##### 2. 色标\n色标就是上面的color-stop，指的是每个颜色的结束位置，包括颜色和位置，比如：\n\n    red 20% blue 50% //在20%->50%的位置范围内从red过渡到blue\n\n位置如果不写的话，默认平均分配，比如下面写法效果一样：\n\n    linear-gradient(red, green, blue)\n    linear-gradient(red 0%, green 50%, blue 100%)\n\nlinear-gradient(red n%, blue m%)表示：\n\n- 0%->n%，red\n- n%->m%，red到blue的过渡\n- n%->100%，blue\n\n当两个不同颜色位置写诚一样时，可形成边界分明的“颜色条”，比如：\n\n    linear-gradient(red 0%,red30%，green 30%，green 50%,blue 50%blue 100%)\n\n表示：0%->30%，red;30%->30%，red到green,一般显示一条边界线;30%->50%，green;50%->100%,blue\n\n效果见Demo:[linear-gradient-demo](http://sandbox.runjs.cn/show/mqjc0fli)\n\n##### 3. 重复渐变\n当首尾两颜色位置不在0%或100%时，可以进行重复渐变,使色标在渐变线方向上无限重复,形成特殊的排列效果\n例子：\n\n    background: -webkit-repeating-linear-gradient(blue 20%,green 50%);\n    background: repeating-linear-gradient(blue 20%,green 50%);\n\n#####4. 多次渐变组合背景\n颜色渐变可以定义多次，这些渐变效果将会重叠在一起，合理使用背景的其他属性，比如：size,repeat，可以构造处多个渐变的组合效果，这里不缀述，可以参考后面的demo\n\n本文所有的效果见:[linear-gradient-demo](http://sandbox.runjs.cn/show/mqjc0fli)\n\n参考文章：[深入理解线性渐变](https://www.cnblogs.com/xiaohuochai/archive/2016/04/12/5370446.html)\n\n# 径向渐变\n径向渐变从圆心点以椭圆形状向外扩散，渐变的实现由两部分组成：位置，形状，size和色标\n\n    radial-gradient(shape size ?at position ? color-stop，..)\n\n#####1.位置\n位置指的是径向椭圆的中心点的位置，可以使用关键字/百分比/整数来定义，比如：\n\n    at top left\n    at 200px 200px\n    at 30% 30%\n\n其中关键字的对应关系\n\n    top left：0% 0%\n    top right：100% 0%\n    center center：50% 50%\n    bottom left：0% 100%\n    bottom right：100% 100%\n\n#####2.形状\n形状指的是圆形还是椭圆：circle/ellipse，默认是椭圆，可以不用书写;\n不过好像circle不能和at position一起用，不知道怎么回事\n\n#####3.size\n这个主要是径向渐变发散的半径不同，可以参考文档：\n[深入理解径性渐变](http://www.cnblogs.com/xiaohuochai/p/5383285.html)\n\n本节所有demo可见：[径向渐变-demo](http://sandbox.runjs.cn/show/rnfvcray)","slug":"css3-gradients","published":1,"updated":"2018-01-24T15:37:09.803Z","layout":"post","photos":[],"link":"","_id":"cjqwe426j001sor0bqlpi7xes","content":"<h1 id=\"线性渐变\"><a href=\"#线性渐变\" class=\"headerlink\" title=\"线性渐变\"></a>线性渐变</h1><p>线性渐变是几个颜色沿着一定角度的“发射线”而形成的颜色过渡效果<br>线性渐变声明方式：<br><a id=\"more\"></a></p>\n<pre><code>linear-gradient(angle角度，color1-stop,color2-stop,...)\n</code></pre><p>其中：</p>\n<h5 id=\"1-angle角度\"><a href=\"#1-angle角度\" class=\"headerlink\" title=\"1. angle角度\"></a>1. angle角度</h5><p>指的是沿着元素中心的“射线”的角度，几个颜色点就是沿着这根射线的方向在变化和过渡的，<strong>从下向上为0deg，顺时针为正，逆时针为负值</strong><br>也可以使用关键字来指明方向，to top表示<strong>从下往上</strong>，to top left表示从<strong>右下角往左上角</strong>，当height=width的时候：</p>\n<pre><code>to top -&gt; 0deg\nto right -&gt; 90deg\nto bottom -&gt; 180deg\nto left -&gt; -90deg(或270deg)\nto top left -&gt; -45deg(或315deg)\nto top right -&gt; 45deg\nto bottom left -&gt; -135deg(或225deg)\nto bottom right -&gt; 135deg\n</code></pre><p>效果见Demo:<a href=\"http://sandbox.runjs.cn/show/mqjc0fli\" target=\"_blank\" rel=\"external\">linear-gradient-demo</a></p>\n<h5 id=\"2-色标\"><a href=\"#2-色标\" class=\"headerlink\" title=\"2. 色标\"></a>2. 色标</h5><p>色标就是上面的color-stop，指的是每个颜色的结束位置，包括颜色和位置，比如：</p>\n<pre><code>red 20% blue 50% //在20%-&gt;50%的位置范围内从red过渡到blue\n</code></pre><p>位置如果不写的话，默认平均分配，比如下面写法效果一样：</p>\n<pre><code>linear-gradient(red, green, blue)\nlinear-gradient(red 0%, green 50%, blue 100%)\n</code></pre><p>linear-gradient(red n%, blue m%)表示：</p>\n<ul>\n<li>0%-&gt;n%，red</li>\n<li>n%-&gt;m%，red到blue的过渡</li>\n<li>n%-&gt;100%，blue</li>\n</ul>\n<p>当两个不同颜色位置写诚一样时，可形成边界分明的“颜色条”，比如：</p>\n<pre><code>linear-gradient(red 0%,red30%，green 30%，green 50%,blue 50%blue 100%)\n</code></pre><p>表示：0%-&gt;30%，red;30%-&gt;30%，red到green,一般显示一条边界线;30%-&gt;50%，green;50%-&gt;100%,blue</p>\n<p>效果见Demo:<a href=\"http://sandbox.runjs.cn/show/mqjc0fli\" target=\"_blank\" rel=\"external\">linear-gradient-demo</a></p>\n<h5 id=\"3-重复渐变\"><a href=\"#3-重复渐变\" class=\"headerlink\" title=\"3. 重复渐变\"></a>3. 重复渐变</h5><p>当首尾两颜色位置不在0%或100%时，可以进行重复渐变,使色标在渐变线方向上无限重复,形成特殊的排列效果<br>例子：</p>\n<pre><code>background: -webkit-repeating-linear-gradient(blue 20%,green 50%);\nbackground: repeating-linear-gradient(blue 20%,green 50%);\n</code></pre><p>#####4. 多次渐变组合背景<br>颜色渐变可以定义多次，这些渐变效果将会重叠在一起，合理使用背景的其他属性，比如：size,repeat，可以构造处多个渐变的组合效果，这里不缀述，可以参考后面的demo</p>\n<p>本文所有的效果见:<a href=\"http://sandbox.runjs.cn/show/mqjc0fli\" target=\"_blank\" rel=\"external\">linear-gradient-demo</a></p>\n<p>参考文章：<a href=\"https://www.cnblogs.com/xiaohuochai/archive/2016/04/12/5370446.html\" target=\"_blank\" rel=\"external\">深入理解线性渐变</a></p>\n<h1 id=\"径向渐变\"><a href=\"#径向渐变\" class=\"headerlink\" title=\"径向渐变\"></a>径向渐变</h1><p>径向渐变从圆心点以椭圆形状向外扩散，渐变的实现由两部分组成：位置，形状，size和色标</p>\n<pre><code>radial-gradient(shape size ?at position ? color-stop，..)\n</code></pre><p>#####1.位置<br>位置指的是径向椭圆的中心点的位置，可以使用关键字/百分比/整数来定义，比如：</p>\n<pre><code>at top left\nat 200px 200px\nat 30% 30%\n</code></pre><p>其中关键字的对应关系</p>\n<pre><code>top left：0% 0%\ntop right：100% 0%\ncenter center：50% 50%\nbottom left：0% 100%\nbottom right：100% 100%\n</code></pre><p>#####2.形状<br>形状指的是圆形还是椭圆：circle/ellipse，默认是椭圆，可以不用书写;<br>不过好像circle不能和at position一起用，不知道怎么回事</p>\n<p>#####3.size<br>这个主要是径向渐变发散的半径不同，可以参考文档：<br><a href=\"http://www.cnblogs.com/xiaohuochai/p/5383285.html\" target=\"_blank\" rel=\"external\">深入理解径性渐变</a></p>\n<p>本节所有demo可见：<a href=\"http://sandbox.runjs.cn/show/rnfvcray\" target=\"_blank\" rel=\"external\">径向渐变-demo</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"线性渐变\"><a href=\"#线性渐变\" class=\"headerlink\" title=\"线性渐变\"></a>线性渐变</h1><p>线性渐变是几个颜色沿着一定角度的“发射线”而形成的颜色过渡效果<br>线性渐变声明方式：<br>","more":"</p>\n<pre><code>linear-gradient(angle角度，color1-stop,color2-stop,...)\n</code></pre><p>其中：</p>\n<h5 id=\"1-angle角度\"><a href=\"#1-angle角度\" class=\"headerlink\" title=\"1. angle角度\"></a>1. angle角度</h5><p>指的是沿着元素中心的“射线”的角度，几个颜色点就是沿着这根射线的方向在变化和过渡的，<strong>从下向上为0deg，顺时针为正，逆时针为负值</strong><br>也可以使用关键字来指明方向，to top表示<strong>从下往上</strong>，to top left表示从<strong>右下角往左上角</strong>，当height=width的时候：</p>\n<pre><code>to top -&gt; 0deg\nto right -&gt; 90deg\nto bottom -&gt; 180deg\nto left -&gt; -90deg(或270deg)\nto top left -&gt; -45deg(或315deg)\nto top right -&gt; 45deg\nto bottom left -&gt; -135deg(或225deg)\nto bottom right -&gt; 135deg\n</code></pre><p>效果见Demo:<a href=\"http://sandbox.runjs.cn/show/mqjc0fli\" target=\"_blank\" rel=\"external\">linear-gradient-demo</a></p>\n<h5 id=\"2-色标\"><a href=\"#2-色标\" class=\"headerlink\" title=\"2. 色标\"></a>2. 色标</h5><p>色标就是上面的color-stop，指的是每个颜色的结束位置，包括颜色和位置，比如：</p>\n<pre><code>red 20% blue 50% //在20%-&gt;50%的位置范围内从red过渡到blue\n</code></pre><p>位置如果不写的话，默认平均分配，比如下面写法效果一样：</p>\n<pre><code>linear-gradient(red, green, blue)\nlinear-gradient(red 0%, green 50%, blue 100%)\n</code></pre><p>linear-gradient(red n%, blue m%)表示：</p>\n<ul>\n<li>0%-&gt;n%，red</li>\n<li>n%-&gt;m%，red到blue的过渡</li>\n<li>n%-&gt;100%，blue</li>\n</ul>\n<p>当两个不同颜色位置写诚一样时，可形成边界分明的“颜色条”，比如：</p>\n<pre><code>linear-gradient(red 0%,red30%，green 30%，green 50%,blue 50%blue 100%)\n</code></pre><p>表示：0%-&gt;30%，red;30%-&gt;30%，red到green,一般显示一条边界线;30%-&gt;50%，green;50%-&gt;100%,blue</p>\n<p>效果见Demo:<a href=\"http://sandbox.runjs.cn/show/mqjc0fli\" target=\"_blank\" rel=\"external\">linear-gradient-demo</a></p>\n<h5 id=\"3-重复渐变\"><a href=\"#3-重复渐变\" class=\"headerlink\" title=\"3. 重复渐变\"></a>3. 重复渐变</h5><p>当首尾两颜色位置不在0%或100%时，可以进行重复渐变,使色标在渐变线方向上无限重复,形成特殊的排列效果<br>例子：</p>\n<pre><code>background: -webkit-repeating-linear-gradient(blue 20%,green 50%);\nbackground: repeating-linear-gradient(blue 20%,green 50%);\n</code></pre><p>#####4. 多次渐变组合背景<br>颜色渐变可以定义多次，这些渐变效果将会重叠在一起，合理使用背景的其他属性，比如：size,repeat，可以构造处多个渐变的组合效果，这里不缀述，可以参考后面的demo</p>\n<p>本文所有的效果见:<a href=\"http://sandbox.runjs.cn/show/mqjc0fli\" target=\"_blank\" rel=\"external\">linear-gradient-demo</a></p>\n<p>参考文章：<a href=\"https://www.cnblogs.com/xiaohuochai/archive/2016/04/12/5370446.html\" target=\"_blank\" rel=\"external\">深入理解线性渐变</a></p>\n<h1 id=\"径向渐变\"><a href=\"#径向渐变\" class=\"headerlink\" title=\"径向渐变\"></a>径向渐变</h1><p>径向渐变从圆心点以椭圆形状向外扩散，渐变的实现由两部分组成：位置，形状，size和色标</p>\n<pre><code>radial-gradient(shape size ?at position ? color-stop，..)\n</code></pre><p>#####1.位置<br>位置指的是径向椭圆的中心点的位置，可以使用关键字/百分比/整数来定义，比如：</p>\n<pre><code>at top left\nat 200px 200px\nat 30% 30%\n</code></pre><p>其中关键字的对应关系</p>\n<pre><code>top left：0% 0%\ntop right：100% 0%\ncenter center：50% 50%\nbottom left：0% 100%\nbottom right：100% 100%\n</code></pre><p>#####2.形状<br>形状指的是圆形还是椭圆：circle/ellipse，默认是椭圆，可以不用书写;<br>不过好像circle不能和at position一起用，不知道怎么回事</p>\n<p>#####3.size<br>这个主要是径向渐变发散的半径不同，可以参考文档：<br><a href=\"http://www.cnblogs.com/xiaohuochai/p/5383285.html\" target=\"_blank\" rel=\"external\">深入理解径性渐变</a></p>\n<p>本节所有demo可见：<a href=\"http://sandbox.runjs.cn/show/rnfvcray\" target=\"_blank\" rel=\"external\">径向渐变-demo</a></p>"},{"title":"css3-Box弹性框","date":"2018-01-21T05:40:43.000Z","comments":1,"_content":"\nBox是一种弹性可伸缩框，能够实现灵活的元素布局，几乎可以替代传统的“盒子模型”和浮动等，灵活方便\n<!--more-->\n\nBox的声明如下：\n\n    display:-moz-box;\n    display:-webkit-box;\n    display:box;\n\nbox布局有一些属性加以辅助，是灵活布局的关键\n\n### box-orient\nbox-orient规定子元素的排列方向，同时也设定了**主轴和次轴**的方向，默认是水平方向\n\n<div class=\"father\">\n  <div class=\"son1\">主轴</div>\n  <div class=\"son2\">次轴</div>\n</div>\n\n如图所示，蓝色为主轴方向，紫色的为次轴方向，这是默认的排列方式\norient有四种取值：\n- horizontal，子元素沿水平方向从左向右排列，水平方向为主轴，垂直方向为次轴\n- vertical，子元素沿垂直方向从上向下排列，垂直方向为主轴，水平方向为次轴\n- inline-axis，映射为 horizontal\n- block-axis，映射为 vertical\n\n效果见[box-demo-01](http://sandbox.runjs.cn/show/g8cm4ufc)\n\n### box-direction\nbox-direction规定子元素在**主轴**上是否根据书写顺序，以正序还是反序来显示，默认是正序，呈现方式会随着主轴不同而不同;同时也会规定了主轴和次轴的延伸方向\n举个例子：\n\n    <div>\n     <div>1</div>\n     <div>2</div>\n     <div>3</div>\n    </div>\n\n书写顺序为1 2 3，正序显示为:1 2 3,反序为：3 2 1\ndirection有2种取值\n- normal,以默认方向显示子元素,正方向\n- reverse,以反方向显示子元素\n\n主轴的延伸方向\n- 水平 + 正向 排列，延伸方向：左-->右\n- 水平 + 反向 排列，延伸方向：右-->左\n- 垂直 + 正向 排列，延伸方向：上-->下\n- 垂直 + 反向 排列，延伸方向：下-->上\n\n次轴的延伸方向\n- 水平 + 正向 排列，延伸方向：上-->下\n- 水平 + 反向 排列，延伸方向：上-->下\n- 垂直 + 正向 排列，延伸方向：左-->右\n- 垂直 + 反向 排列，延伸方向：左-->右\n\n效果见[box-demo-01](http://sandbox.runjs.cn/show/g8cm4ufc)\n\n### box-pack\nbox-pack规定子元素在**主轴**方向上放置方式，默认为:start,沿着**主轴的延伸方向**在起点处放置\ndirection有4种取值\n- start，子元素放置于主轴延伸方向的起点处，比如：正向水平排列时，在左边;反向水平排列时，在右边;垂直正向排列时，在上边;以此类推\n- end，子元素放置于主轴延伸方向的终点处，比如：正向水平排列时，在右边;反向水平排列时，在左边;垂直正向排列时，在下边;以此类推\n- center，子元素放置于主轴延伸方向的中点处，两边的剩余空间平均分布\n- justify，两边最边上的2个子元素分别在起点和终点处，中间其他元素分散分布，中间元素之间的间隔均等\n\n效果见[box-demo-01](http://sandbox.runjs.cn/show/g8cm4ufc)\n\n### box-align\nbox-align规定子元素在**次轴**方向上放置方式，默认为:start,沿着**次轴的延伸方向**在起点处放置\nalign有4种取值\n- start，子元素放置于次轴延伸方向的起点处，比如：正向水平排列时，在上边;垂直正向排列时，在左边;以此类推\n- end，子元素放置于次轴延伸方向的起终点处，比如：正向水平排列时，在下边;垂直正向排列时，在右边;以此类推\n- center，子元素放置于次轴延伸方向的中点处，两边的剩余空间平均分布\n- baseline，如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐\n- stretch ，拉伸子元素以填充包含块\n\n效果见：\n[box-demo-01](http://sandbox.runjs.cn/show/g8cm4ufc)\n[box-demo-02](http://sandbox.runjs.cn/show/mwsaubl2)\n\n### box-lines\nbox-lines 规定如果列超出了父框中的空间，是否要换行显示，但是目前并没有浏览器支持，我试了也没有看到效果\n\n### box-ordinal-group\nbox-ordinal-group 属性规定框中子元素的显示次序，使用方式：\n\n    box-ordinal-group: N; //正整数，不可负值\n\n此属性可以突破子元素的书写顺序，根据需要将元素按照规定顺序排列，N值越小，排列越靠前\n\n效果见：[box-demo-03](http://sandbox.runjs.cn/show/egitfvpr)\n\n### box-flex\nbox-flex规定各个子元素对父框剩余空间的分配比例，有三种情况：\n\n1. 父框存在剩余，剩余空间在子元素上按设置的比例分配\n2. 父框存在剩余，其中有几个子元素占用固定空间;如果还有剩余，则剩余空间在其他子元素上按设置的比例分配\n3. 父框不存在剩余，设置的比例分配无效果\n\n效果见：[box-demo-03](http://sandbox.runjs.cn/show/egitfvpr)\n\n<style>\n.father{\n  height:120px;\n  width:240px;\n  border:solid 1px;\n  margin:auto;\n  margin-top:20px;\n  position:relative;\n}\n.son1{\n height:0px;\n width:100%;\n border:solid 1px #0000ff;\n position:absolute;\n top:50%;\n}\n.son1::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:97%;\n top:-6px;\n border-width: 6px 12px;\n border-style: solid;\n border-color: transparent transparent transparent #0000ff;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n.son2{\n height:100%;\n width:0;\n border:solid 1px #8a00e6;\n position:absolute;\n left:50%;\n top:0%;\n}\n.son2::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:-5px;\n top:-14px;\n border-width: 12px 6px;\n border-style: solid;\n border-color: transparent transparent #8a00e6 transparent;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n</style>\n\n","source":"_posts/2018-01-21-css3-box.md","raw":"---\ntitle: css3-Box弹性框\ndate: 2018-01-21 13:40:43\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\nBox是一种弹性可伸缩框，能够实现灵活的元素布局，几乎可以替代传统的“盒子模型”和浮动等，灵活方便\n<!--more-->\n\nBox的声明如下：\n\n    display:-moz-box;\n    display:-webkit-box;\n    display:box;\n\nbox布局有一些属性加以辅助，是灵活布局的关键\n\n### box-orient\nbox-orient规定子元素的排列方向，同时也设定了**主轴和次轴**的方向，默认是水平方向\n\n<div class=\"father\">\n  <div class=\"son1\">主轴</div>\n  <div class=\"son2\">次轴</div>\n</div>\n\n如图所示，蓝色为主轴方向，紫色的为次轴方向，这是默认的排列方式\norient有四种取值：\n- horizontal，子元素沿水平方向从左向右排列，水平方向为主轴，垂直方向为次轴\n- vertical，子元素沿垂直方向从上向下排列，垂直方向为主轴，水平方向为次轴\n- inline-axis，映射为 horizontal\n- block-axis，映射为 vertical\n\n效果见[box-demo-01](http://sandbox.runjs.cn/show/g8cm4ufc)\n\n### box-direction\nbox-direction规定子元素在**主轴**上是否根据书写顺序，以正序还是反序来显示，默认是正序，呈现方式会随着主轴不同而不同;同时也会规定了主轴和次轴的延伸方向\n举个例子：\n\n    <div>\n     <div>1</div>\n     <div>2</div>\n     <div>3</div>\n    </div>\n\n书写顺序为1 2 3，正序显示为:1 2 3,反序为：3 2 1\ndirection有2种取值\n- normal,以默认方向显示子元素,正方向\n- reverse,以反方向显示子元素\n\n主轴的延伸方向\n- 水平 + 正向 排列，延伸方向：左-->右\n- 水平 + 反向 排列，延伸方向：右-->左\n- 垂直 + 正向 排列，延伸方向：上-->下\n- 垂直 + 反向 排列，延伸方向：下-->上\n\n次轴的延伸方向\n- 水平 + 正向 排列，延伸方向：上-->下\n- 水平 + 反向 排列，延伸方向：上-->下\n- 垂直 + 正向 排列，延伸方向：左-->右\n- 垂直 + 反向 排列，延伸方向：左-->右\n\n效果见[box-demo-01](http://sandbox.runjs.cn/show/g8cm4ufc)\n\n### box-pack\nbox-pack规定子元素在**主轴**方向上放置方式，默认为:start,沿着**主轴的延伸方向**在起点处放置\ndirection有4种取值\n- start，子元素放置于主轴延伸方向的起点处，比如：正向水平排列时，在左边;反向水平排列时，在右边;垂直正向排列时，在上边;以此类推\n- end，子元素放置于主轴延伸方向的终点处，比如：正向水平排列时，在右边;反向水平排列时，在左边;垂直正向排列时，在下边;以此类推\n- center，子元素放置于主轴延伸方向的中点处，两边的剩余空间平均分布\n- justify，两边最边上的2个子元素分别在起点和终点处，中间其他元素分散分布，中间元素之间的间隔均等\n\n效果见[box-demo-01](http://sandbox.runjs.cn/show/g8cm4ufc)\n\n### box-align\nbox-align规定子元素在**次轴**方向上放置方式，默认为:start,沿着**次轴的延伸方向**在起点处放置\nalign有4种取值\n- start，子元素放置于次轴延伸方向的起点处，比如：正向水平排列时，在上边;垂直正向排列时，在左边;以此类推\n- end，子元素放置于次轴延伸方向的起终点处，比如：正向水平排列时，在下边;垂直正向排列时，在右边;以此类推\n- center，子元素放置于次轴延伸方向的中点处，两边的剩余空间平均分布\n- baseline，如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐\n- stretch ，拉伸子元素以填充包含块\n\n效果见：\n[box-demo-01](http://sandbox.runjs.cn/show/g8cm4ufc)\n[box-demo-02](http://sandbox.runjs.cn/show/mwsaubl2)\n\n### box-lines\nbox-lines 规定如果列超出了父框中的空间，是否要换行显示，但是目前并没有浏览器支持，我试了也没有看到效果\n\n### box-ordinal-group\nbox-ordinal-group 属性规定框中子元素的显示次序，使用方式：\n\n    box-ordinal-group: N; //正整数，不可负值\n\n此属性可以突破子元素的书写顺序，根据需要将元素按照规定顺序排列，N值越小，排列越靠前\n\n效果见：[box-demo-03](http://sandbox.runjs.cn/show/egitfvpr)\n\n### box-flex\nbox-flex规定各个子元素对父框剩余空间的分配比例，有三种情况：\n\n1. 父框存在剩余，剩余空间在子元素上按设置的比例分配\n2. 父框存在剩余，其中有几个子元素占用固定空间;如果还有剩余，则剩余空间在其他子元素上按设置的比例分配\n3. 父框不存在剩余，设置的比例分配无效果\n\n效果见：[box-demo-03](http://sandbox.runjs.cn/show/egitfvpr)\n\n<style>\n.father{\n  height:120px;\n  width:240px;\n  border:solid 1px;\n  margin:auto;\n  margin-top:20px;\n  position:relative;\n}\n.son1{\n height:0px;\n width:100%;\n border:solid 1px #0000ff;\n position:absolute;\n top:50%;\n}\n.son1::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:97%;\n top:-6px;\n border-width: 6px 12px;\n border-style: solid;\n border-color: transparent transparent transparent #0000ff;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n.son2{\n height:100%;\n width:0;\n border:solid 1px #8a00e6;\n position:absolute;\n left:50%;\n top:0%;\n}\n.son2::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:-5px;\n top:-14px;\n border-width: 12px 6px;\n border-style: solid;\n border-color: transparent transparent #8a00e6 transparent;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n</style>\n\n","slug":"css3-box","published":1,"updated":"2018-01-21T07:58:19.917Z","layout":"post","photos":[],"link":"","_id":"cjqwe426p001wor0bufawwums","content":"<p>Box是一种弹性可伸缩框，能够实现灵活的元素布局，几乎可以替代传统的“盒子模型”和浮动等，灵活方便<br><a id=\"more\"></a></p>\n<p>Box的声明如下：</p>\n<pre><code>display:-moz-box;\ndisplay:-webkit-box;\ndisplay:box;\n</code></pre><p>box布局有一些属性加以辅助，是灵活布局的关键</p>\n<h3 id=\"box-orient\"><a href=\"#box-orient\" class=\"headerlink\" title=\"box-orient\"></a>box-orient</h3><p>box-orient规定子元素的排列方向，同时也设定了<strong>主轴和次轴</strong>的方向，默认是水平方向</p>\n<div class=\"father\"><br>  <div class=\"son1\">主轴</div><br>  <div class=\"son2\">次轴</div><br></div>\n\n<p>如图所示，蓝色为主轴方向，紫色的为次轴方向，这是默认的排列方式<br>orient有四种取值：</p>\n<ul>\n<li>horizontal，子元素沿水平方向从左向右排列，水平方向为主轴，垂直方向为次轴</li>\n<li>vertical，子元素沿垂直方向从上向下排列，垂直方向为主轴，水平方向为次轴</li>\n<li>inline-axis，映射为 horizontal</li>\n<li>block-axis，映射为 vertical</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/g8cm4ufc\" target=\"_blank\" rel=\"external\">box-demo-01</a></p>\n<h3 id=\"box-direction\"><a href=\"#box-direction\" class=\"headerlink\" title=\"box-direction\"></a>box-direction</h3><p>box-direction规定子元素在<strong>主轴</strong>上是否根据书写顺序，以正序还是反序来显示，默认是正序，呈现方式会随着主轴不同而不同;同时也会规定了主轴和次轴的延伸方向<br>举个例子：</p>\n<pre><code>&lt;div&gt;\n &lt;div&gt;1&lt;/div&gt;\n &lt;div&gt;2&lt;/div&gt;\n &lt;div&gt;3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>书写顺序为1 2 3，正序显示为:1 2 3,反序为：3 2 1<br>direction有2种取值</p>\n<ul>\n<li>normal,以默认方向显示子元素,正方向</li>\n<li>reverse,以反方向显示子元素</li>\n</ul>\n<p>主轴的延伸方向</p>\n<ul>\n<li>水平 + 正向 排列，延伸方向：左–&gt;右</li>\n<li>水平 + 反向 排列，延伸方向：右–&gt;左</li>\n<li>垂直 + 正向 排列，延伸方向：上–&gt;下</li>\n<li>垂直 + 反向 排列，延伸方向：下–&gt;上</li>\n</ul>\n<p>次轴的延伸方向</p>\n<ul>\n<li>水平 + 正向 排列，延伸方向：上–&gt;下</li>\n<li>水平 + 反向 排列，延伸方向：上–&gt;下</li>\n<li>垂直 + 正向 排列，延伸方向：左–&gt;右</li>\n<li>垂直 + 反向 排列，延伸方向：左–&gt;右</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/g8cm4ufc\" target=\"_blank\" rel=\"external\">box-demo-01</a></p>\n<h3 id=\"box-pack\"><a href=\"#box-pack\" class=\"headerlink\" title=\"box-pack\"></a>box-pack</h3><p>box-pack规定子元素在<strong>主轴</strong>方向上放置方式，默认为:start,沿着<strong>主轴的延伸方向</strong>在起点处放置<br>direction有4种取值</p>\n<ul>\n<li>start，子元素放置于主轴延伸方向的起点处，比如：正向水平排列时，在左边;反向水平排列时，在右边;垂直正向排列时，在上边;以此类推</li>\n<li>end，子元素放置于主轴延伸方向的终点处，比如：正向水平排列时，在右边;反向水平排列时，在左边;垂直正向排列时，在下边;以此类推</li>\n<li>center，子元素放置于主轴延伸方向的中点处，两边的剩余空间平均分布</li>\n<li>justify，两边最边上的2个子元素分别在起点和终点处，中间其他元素分散分布，中间元素之间的间隔均等</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/g8cm4ufc\" target=\"_blank\" rel=\"external\">box-demo-01</a></p>\n<h3 id=\"box-align\"><a href=\"#box-align\" class=\"headerlink\" title=\"box-align\"></a>box-align</h3><p>box-align规定子元素在<strong>次轴</strong>方向上放置方式，默认为:start,沿着<strong>次轴的延伸方向</strong>在起点处放置<br>align有4种取值</p>\n<ul>\n<li>start，子元素放置于次轴延伸方向的起点处，比如：正向水平排列时，在上边;垂直正向排列时，在左边;以此类推</li>\n<li>end，子元素放置于次轴延伸方向的起终点处，比如：正向水平排列时，在下边;垂直正向排列时，在右边;以此类推</li>\n<li>center，子元素放置于次轴延伸方向的中点处，两边的剩余空间平均分布</li>\n<li>baseline，如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐</li>\n<li>stretch ，拉伸子元素以填充包含块</li>\n</ul>\n<p>效果见：<br><a href=\"http://sandbox.runjs.cn/show/g8cm4ufc\" target=\"_blank\" rel=\"external\">box-demo-01</a><br><a href=\"http://sandbox.runjs.cn/show/mwsaubl2\" target=\"_blank\" rel=\"external\">box-demo-02</a></p>\n<h3 id=\"box-lines\"><a href=\"#box-lines\" class=\"headerlink\" title=\"box-lines\"></a>box-lines</h3><p>box-lines 规定如果列超出了父框中的空间，是否要换行显示，但是目前并没有浏览器支持，我试了也没有看到效果</p>\n<h3 id=\"box-ordinal-group\"><a href=\"#box-ordinal-group\" class=\"headerlink\" title=\"box-ordinal-group\"></a>box-ordinal-group</h3><p>box-ordinal-group 属性规定框中子元素的显示次序，使用方式：</p>\n<pre><code>box-ordinal-group: N; //正整数，不可负值\n</code></pre><p>此属性可以突破子元素的书写顺序，根据需要将元素按照规定顺序排列，N值越小，排列越靠前</p>\n<p>效果见：<a href=\"http://sandbox.runjs.cn/show/egitfvpr\" target=\"_blank\" rel=\"external\">box-demo-03</a></p>\n<h3 id=\"box-flex\"><a href=\"#box-flex\" class=\"headerlink\" title=\"box-flex\"></a>box-flex</h3><p>box-flex规定各个子元素对父框剩余空间的分配比例，有三种情况：</p>\n<ol>\n<li>父框存在剩余，剩余空间在子元素上按设置的比例分配</li>\n<li>父框存在剩余，其中有几个子元素占用固定空间;如果还有剩余，则剩余空间在其他子元素上按设置的比例分配</li>\n<li>父框不存在剩余，设置的比例分配无效果</li>\n</ol>\n<p>效果见：<a href=\"http://sandbox.runjs.cn/show/egitfvpr\" target=\"_blank\" rel=\"external\">box-demo-03</a></p>\n<style>\n.father{\n  height:120px;\n  width:240px;\n  border:solid 1px;\n  margin:auto;\n  margin-top:20px;\n  position:relative;\n}\n.son1{\n height:0px;\n width:100%;\n border:solid 1px #0000ff;\n position:absolute;\n top:50%;\n}\n.son1::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:97%;\n top:-6px;\n border-width: 6px 12px;\n border-style: solid;\n border-color: transparent transparent transparent #0000ff;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n.son2{\n height:100%;\n width:0;\n border:solid 1px #8a00e6;\n position:absolute;\n left:50%;\n top:0%;\n}\n.son2::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:-5px;\n top:-14px;\n border-width: 12px 6px;\n border-style: solid;\n border-color: transparent transparent #8a00e6 transparent;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n</style>\n\n","site":{"data":{}},"excerpt":"<p>Box是一种弹性可伸缩框，能够实现灵活的元素布局，几乎可以替代传统的“盒子模型”和浮动等，灵活方便<br>","more":"</p>\n<p>Box的声明如下：</p>\n<pre><code>display:-moz-box;\ndisplay:-webkit-box;\ndisplay:box;\n</code></pre><p>box布局有一些属性加以辅助，是灵活布局的关键</p>\n<h3 id=\"box-orient\"><a href=\"#box-orient\" class=\"headerlink\" title=\"box-orient\"></a>box-orient</h3><p>box-orient规定子元素的排列方向，同时也设定了<strong>主轴和次轴</strong>的方向，默认是水平方向</p>\n<div class=\"father\"><br>  <div class=\"son1\">主轴</div><br>  <div class=\"son2\">次轴</div><br></div>\n\n<p>如图所示，蓝色为主轴方向，紫色的为次轴方向，这是默认的排列方式<br>orient有四种取值：</p>\n<ul>\n<li>horizontal，子元素沿水平方向从左向右排列，水平方向为主轴，垂直方向为次轴</li>\n<li>vertical，子元素沿垂直方向从上向下排列，垂直方向为主轴，水平方向为次轴</li>\n<li>inline-axis，映射为 horizontal</li>\n<li>block-axis，映射为 vertical</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/g8cm4ufc\" target=\"_blank\" rel=\"external\">box-demo-01</a></p>\n<h3 id=\"box-direction\"><a href=\"#box-direction\" class=\"headerlink\" title=\"box-direction\"></a>box-direction</h3><p>box-direction规定子元素在<strong>主轴</strong>上是否根据书写顺序，以正序还是反序来显示，默认是正序，呈现方式会随着主轴不同而不同;同时也会规定了主轴和次轴的延伸方向<br>举个例子：</p>\n<pre><code>&lt;div&gt;\n &lt;div&gt;1&lt;/div&gt;\n &lt;div&gt;2&lt;/div&gt;\n &lt;div&gt;3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>书写顺序为1 2 3，正序显示为:1 2 3,反序为：3 2 1<br>direction有2种取值</p>\n<ul>\n<li>normal,以默认方向显示子元素,正方向</li>\n<li>reverse,以反方向显示子元素</li>\n</ul>\n<p>主轴的延伸方向</p>\n<ul>\n<li>水平 + 正向 排列，延伸方向：左–&gt;右</li>\n<li>水平 + 反向 排列，延伸方向：右–&gt;左</li>\n<li>垂直 + 正向 排列，延伸方向：上–&gt;下</li>\n<li>垂直 + 反向 排列，延伸方向：下–&gt;上</li>\n</ul>\n<p>次轴的延伸方向</p>\n<ul>\n<li>水平 + 正向 排列，延伸方向：上–&gt;下</li>\n<li>水平 + 反向 排列，延伸方向：上–&gt;下</li>\n<li>垂直 + 正向 排列，延伸方向：左–&gt;右</li>\n<li>垂直 + 反向 排列，延伸方向：左–&gt;右</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/g8cm4ufc\" target=\"_blank\" rel=\"external\">box-demo-01</a></p>\n<h3 id=\"box-pack\"><a href=\"#box-pack\" class=\"headerlink\" title=\"box-pack\"></a>box-pack</h3><p>box-pack规定子元素在<strong>主轴</strong>方向上放置方式，默认为:start,沿着<strong>主轴的延伸方向</strong>在起点处放置<br>direction有4种取值</p>\n<ul>\n<li>start，子元素放置于主轴延伸方向的起点处，比如：正向水平排列时，在左边;反向水平排列时，在右边;垂直正向排列时，在上边;以此类推</li>\n<li>end，子元素放置于主轴延伸方向的终点处，比如：正向水平排列时，在右边;反向水平排列时，在左边;垂直正向排列时，在下边;以此类推</li>\n<li>center，子元素放置于主轴延伸方向的中点处，两边的剩余空间平均分布</li>\n<li>justify，两边最边上的2个子元素分别在起点和终点处，中间其他元素分散分布，中间元素之间的间隔均等</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/g8cm4ufc\" target=\"_blank\" rel=\"external\">box-demo-01</a></p>\n<h3 id=\"box-align\"><a href=\"#box-align\" class=\"headerlink\" title=\"box-align\"></a>box-align</h3><p>box-align规定子元素在<strong>次轴</strong>方向上放置方式，默认为:start,沿着<strong>次轴的延伸方向</strong>在起点处放置<br>align有4种取值</p>\n<ul>\n<li>start，子元素放置于次轴延伸方向的起点处，比如：正向水平排列时，在上边;垂直正向排列时，在左边;以此类推</li>\n<li>end，子元素放置于次轴延伸方向的起终点处，比如：正向水平排列时，在下边;垂直正向排列时，在右边;以此类推</li>\n<li>center，子元素放置于次轴延伸方向的中点处，两边的剩余空间平均分布</li>\n<li>baseline，如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐</li>\n<li>stretch ，拉伸子元素以填充包含块</li>\n</ul>\n<p>效果见：<br><a href=\"http://sandbox.runjs.cn/show/g8cm4ufc\" target=\"_blank\" rel=\"external\">box-demo-01</a><br><a href=\"http://sandbox.runjs.cn/show/mwsaubl2\" target=\"_blank\" rel=\"external\">box-demo-02</a></p>\n<h3 id=\"box-lines\"><a href=\"#box-lines\" class=\"headerlink\" title=\"box-lines\"></a>box-lines</h3><p>box-lines 规定如果列超出了父框中的空间，是否要换行显示，但是目前并没有浏览器支持，我试了也没有看到效果</p>\n<h3 id=\"box-ordinal-group\"><a href=\"#box-ordinal-group\" class=\"headerlink\" title=\"box-ordinal-group\"></a>box-ordinal-group</h3><p>box-ordinal-group 属性规定框中子元素的显示次序，使用方式：</p>\n<pre><code>box-ordinal-group: N; //正整数，不可负值\n</code></pre><p>此属性可以突破子元素的书写顺序，根据需要将元素按照规定顺序排列，N值越小，排列越靠前</p>\n<p>效果见：<a href=\"http://sandbox.runjs.cn/show/egitfvpr\" target=\"_blank\" rel=\"external\">box-demo-03</a></p>\n<h3 id=\"box-flex\"><a href=\"#box-flex\" class=\"headerlink\" title=\"box-flex\"></a>box-flex</h3><p>box-flex规定各个子元素对父框剩余空间的分配比例，有三种情况：</p>\n<ol>\n<li>父框存在剩余，剩余空间在子元素上按设置的比例分配</li>\n<li>父框存在剩余，其中有几个子元素占用固定空间;如果还有剩余，则剩余空间在其他子元素上按设置的比例分配</li>\n<li>父框不存在剩余，设置的比例分配无效果</li>\n</ol>\n<p>效果见：<a href=\"http://sandbox.runjs.cn/show/egitfvpr\" target=\"_blank\" rel=\"external\">box-demo-03</a></p>\n<style>\n.father{\n  height:120px;\n  width:240px;\n  border:solid 1px;\n  margin:auto;\n  margin-top:20px;\n  position:relative;\n}\n.son1{\n height:0px;\n width:100%;\n border:solid 1px #0000ff;\n position:absolute;\n top:50%;\n}\n.son1::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:97%;\n top:-6px;\n border-width: 6px 12px;\n border-style: solid;\n border-color: transparent transparent transparent #0000ff;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n.son2{\n height:100%;\n width:0;\n border:solid 1px #8a00e6;\n position:absolute;\n left:50%;\n top:0%;\n}\n.son2::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:-5px;\n top:-14px;\n border-width: 12px 6px;\n border-style: solid;\n border-color: transparent transparent #8a00e6 transparent;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n</style>"},{"title":"CSS3-边框和文本","date":"2018-01-14T07:27:46.000Z","comments":1,"_content":"\n### 边框\n###### border-radius\n顺序设置元素每个角的圆角边框\n<!--more-->\n\n    border-radius: 1-4 length|% / 1-4 length|%;\n    -webkit-border-radius: 1-4 length|% / 1-4 length|%;\n    -moz-border-radius: 1-4 length|% / 1-4 length|%;\n    -o-border-radius: 1-4 length|% / 1-4 length|%;\n\n其中1-4就是四个角处的半径，单位可以是：N或%，若省略了部分值，则以对角的设置为准，如下图：\n![border-radius](/images/2018-01-08_borde-radius.jpg)\n\n以下都是合法的写法：\n\n    border-radius:1px 2px 3px 4px / 2px 3px 4px 5px;\n\n    border-radius:1px 2px 3px 4px / 2px 3px 4px;\n    同 border-radius:1px 2px 3px 4px / 2px 3px 4px 3px;\n\n    border-radius:1px 2px 3px 4px / 2px 3px;\n    同 border-radius:1px 2px 3px 4px / 2px 3px 2px 3px;\n\n    border-radius:1px 2px 3px 4px / 2px;\n    同 border-radius:1px 2px 3px 4px / 2px 2px 2px 2px;\n\n    border-radius:1px 2px / 2px 3px;\n    同 border-radius:1px 2px 1px 2px / 2px 3px 2px 3px;\n\n    border-radius:1px 2px;\n    同 border-radius:1px 2px / 1px 2px;\n\n    border-radius:2px;\n    同 border-radius:2px 2px 2px 2px / 2px 2px 2px 2px;\n\n以下分开写的属性：\n\n    border-top-left-radius:a b; //length或%，定义了左上角的弧度\n    border-top-right-radius   //定义了右上角的弧度\n    border-bottom-right-radius   //定义了右下角的弧度\n    border-bottom-left-radius   //定义了左下角的弧度\n    \n\n具体Demo请点击此处：[border-radius-demo](http://sandbox.runjs.cn/show/7vitapay)\n\n###### box-shadow\n向框添加一个或多个阴影\n\n    box-shadow: x-shadow y-shadow blur spread color inset;\n\n- x-shadow,水平阴影的位置。为正值时，阴影在右边框往右;负值时，阴影在左边框往左。但当inset内阴影时，正值时阴影在左边框往右，负值时阴影在右边框往左。\n- y-shadow,垂直阴影的位置。为正值时，阴影在下边框往下;负值时，阴影在上边框往上。但当inset内阴影时，正值时阴影在上边框往下，负值时阴影在下边框往上。\n- blur,模糊距离\n- spread，阴影的尺寸\n- color，阴影的颜色\n- 将外部阴影 (outset) 改为内部阴影\n\n具体Demo请点击此处：[box-shadow-demo](http://sandbox.runjs.cn/show/qcbishon)\n\n###### border-image\n图片边框,几种属性的简写\n\n    border-image：border-image-source border-image-slice border-image-width fill border-image-outset border-image-repeat\n\n其中：\n- border-image-source，用在边框的图片的路径\n- border-image-slice，4个边框向内切割的偏移量\n- border-image-width，边框宽度\n- border-image-outset，图像边框和内容框的间距偏移距离\n- border-image-repeat，切割后的图片在边框拉伸中的实现方式，平铺(repeated)、铺满(rounded)或拉伸(stretched)\n- fill，指示中间部分是否显示，fill则显示，否则不显示\n\n简单写来：\n\n    border-image：image-source (slice1 slice2 slice3 slice) (width1 width2 width3 width4) fill outset repeat;\n\n其中：\n**width1-4**是“上右下左”顺序四个图片边框的宽度，省略时以对面为准，同border其他属性的设置方式\n**slice1-4**是“上右下左”顺序四个切割的宽度，切割出来的图片被用来显示成边框，如下图，类似于9宫格的切片方式\n![border-image](/images/2018-01-08_border-images.jpg)\n\n四个角用作图边框的角，四边切出来的图片用作image边框4边的填充图\n\n### 文本\n###### white-space\n设置如何处理元素内的空白，值\n- normal，默认，空白会被浏览器忽略。\n- pre，空白会被浏览器保留。\n- nowrap，文本不会换行，文本会在在同一行上继续，直到遇到br\n- pre-wrap，保留空白符序列，但是正常地进行换行\n- pre-line，合并空白符序列，但是保留换行符\n- inherit，规定应该从父元素继承 white-space 属性的值\n\n###### text-shadow\n向文本添加一个或多个阴影\n\n    text-shadow: h-shadow v-shadow blur color;\n其中：\n- h-shadow，水平阴影的位置。正值阴影在右边，负值阴影在左边\n- v-shadow，垂直阴影的位置。正值阴影在下边，负值阴影在上边\n- blur，可选，模糊的距离\n- color，阴影的颜色\n\n具体Demo请点击此处：[text-shadow](http://sandbox.runjs.cn/show/zapn5yh5)\n\n###### text-overflow\n规定当文本溢出包含元素时发生的事情\n- clip，修剪文本\n- ellipsis，显示省略符号来代表被修剪的文本\n- string，使用给定的字符串来代表被修剪的文本\n\n具体Demo请点击此处：[text-overflow](http://sandbox.runjs.cn/show/zapn5yh5)\n\n###### word-wrap\n属性允许长单词或 URL 地址换行到下一行\n- normal，只在允许的断字点换行（浏览器保持默认处理）。\n- break-word，在长单词或 URL 地址内部进行换行，使用时整个长单词都换行到下一行\n\n###### word-break\n属性规定自动换行的处理方法\n- normal，使用浏览器默认的换行规则。\n- break-all，允许在单词内换行。\n- keep-all，只能在半角空格或连字符处换行。\n\n具体Demo请点击此处：[word-break](http://sandbox.runjs.cn/show/zapn5yh5)","source":"_posts/2018-01-14-css3-border-box.md","raw":"---\ntitle: CSS3-边框和文本\ndate: 2018-01-14 15:27:46\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\n### 边框\n###### border-radius\n顺序设置元素每个角的圆角边框\n<!--more-->\n\n    border-radius: 1-4 length|% / 1-4 length|%;\n    -webkit-border-radius: 1-4 length|% / 1-4 length|%;\n    -moz-border-radius: 1-4 length|% / 1-4 length|%;\n    -o-border-radius: 1-4 length|% / 1-4 length|%;\n\n其中1-4就是四个角处的半径，单位可以是：N或%，若省略了部分值，则以对角的设置为准，如下图：\n![border-radius](/images/2018-01-08_borde-radius.jpg)\n\n以下都是合法的写法：\n\n    border-radius:1px 2px 3px 4px / 2px 3px 4px 5px;\n\n    border-radius:1px 2px 3px 4px / 2px 3px 4px;\n    同 border-radius:1px 2px 3px 4px / 2px 3px 4px 3px;\n\n    border-radius:1px 2px 3px 4px / 2px 3px;\n    同 border-radius:1px 2px 3px 4px / 2px 3px 2px 3px;\n\n    border-radius:1px 2px 3px 4px / 2px;\n    同 border-radius:1px 2px 3px 4px / 2px 2px 2px 2px;\n\n    border-radius:1px 2px / 2px 3px;\n    同 border-radius:1px 2px 1px 2px / 2px 3px 2px 3px;\n\n    border-radius:1px 2px;\n    同 border-radius:1px 2px / 1px 2px;\n\n    border-radius:2px;\n    同 border-radius:2px 2px 2px 2px / 2px 2px 2px 2px;\n\n以下分开写的属性：\n\n    border-top-left-radius:a b; //length或%，定义了左上角的弧度\n    border-top-right-radius   //定义了右上角的弧度\n    border-bottom-right-radius   //定义了右下角的弧度\n    border-bottom-left-radius   //定义了左下角的弧度\n    \n\n具体Demo请点击此处：[border-radius-demo](http://sandbox.runjs.cn/show/7vitapay)\n\n###### box-shadow\n向框添加一个或多个阴影\n\n    box-shadow: x-shadow y-shadow blur spread color inset;\n\n- x-shadow,水平阴影的位置。为正值时，阴影在右边框往右;负值时，阴影在左边框往左。但当inset内阴影时，正值时阴影在左边框往右，负值时阴影在右边框往左。\n- y-shadow,垂直阴影的位置。为正值时，阴影在下边框往下;负值时，阴影在上边框往上。但当inset内阴影时，正值时阴影在上边框往下，负值时阴影在下边框往上。\n- blur,模糊距离\n- spread，阴影的尺寸\n- color，阴影的颜色\n- 将外部阴影 (outset) 改为内部阴影\n\n具体Demo请点击此处：[box-shadow-demo](http://sandbox.runjs.cn/show/qcbishon)\n\n###### border-image\n图片边框,几种属性的简写\n\n    border-image：border-image-source border-image-slice border-image-width fill border-image-outset border-image-repeat\n\n其中：\n- border-image-source，用在边框的图片的路径\n- border-image-slice，4个边框向内切割的偏移量\n- border-image-width，边框宽度\n- border-image-outset，图像边框和内容框的间距偏移距离\n- border-image-repeat，切割后的图片在边框拉伸中的实现方式，平铺(repeated)、铺满(rounded)或拉伸(stretched)\n- fill，指示中间部分是否显示，fill则显示，否则不显示\n\n简单写来：\n\n    border-image：image-source (slice1 slice2 slice3 slice) (width1 width2 width3 width4) fill outset repeat;\n\n其中：\n**width1-4**是“上右下左”顺序四个图片边框的宽度，省略时以对面为准，同border其他属性的设置方式\n**slice1-4**是“上右下左”顺序四个切割的宽度，切割出来的图片被用来显示成边框，如下图，类似于9宫格的切片方式\n![border-image](/images/2018-01-08_border-images.jpg)\n\n四个角用作图边框的角，四边切出来的图片用作image边框4边的填充图\n\n### 文本\n###### white-space\n设置如何处理元素内的空白，值\n- normal，默认，空白会被浏览器忽略。\n- pre，空白会被浏览器保留。\n- nowrap，文本不会换行，文本会在在同一行上继续，直到遇到br\n- pre-wrap，保留空白符序列，但是正常地进行换行\n- pre-line，合并空白符序列，但是保留换行符\n- inherit，规定应该从父元素继承 white-space 属性的值\n\n###### text-shadow\n向文本添加一个或多个阴影\n\n    text-shadow: h-shadow v-shadow blur color;\n其中：\n- h-shadow，水平阴影的位置。正值阴影在右边，负值阴影在左边\n- v-shadow，垂直阴影的位置。正值阴影在下边，负值阴影在上边\n- blur，可选，模糊的距离\n- color，阴影的颜色\n\n具体Demo请点击此处：[text-shadow](http://sandbox.runjs.cn/show/zapn5yh5)\n\n###### text-overflow\n规定当文本溢出包含元素时发生的事情\n- clip，修剪文本\n- ellipsis，显示省略符号来代表被修剪的文本\n- string，使用给定的字符串来代表被修剪的文本\n\n具体Demo请点击此处：[text-overflow](http://sandbox.runjs.cn/show/zapn5yh5)\n\n###### word-wrap\n属性允许长单词或 URL 地址换行到下一行\n- normal，只在允许的断字点换行（浏览器保持默认处理）。\n- break-word，在长单词或 URL 地址内部进行换行，使用时整个长单词都换行到下一行\n\n###### word-break\n属性规定自动换行的处理方法\n- normal，使用浏览器默认的换行规则。\n- break-all，允许在单词内换行。\n- keep-all，只能在半角空格或连字符处换行。\n\n具体Demo请点击此处：[word-break](http://sandbox.runjs.cn/show/zapn5yh5)","slug":"css3-border-box","published":1,"updated":"2018-01-16T15:15:57.842Z","layout":"post","photos":[],"link":"","_id":"cjqwe426q001zor0b7v3u0a3g","content":"<h3 id=\"边框\"><a href=\"#边框\" class=\"headerlink\" title=\"边框\"></a>边框</h3><h6 id=\"border-radius\"><a href=\"#border-radius\" class=\"headerlink\" title=\"border-radius\"></a>border-radius</h6><p>顺序设置元素每个角的圆角边框<br><a id=\"more\"></a></p>\n<pre><code>border-radius: 1-4 length|% / 1-4 length|%;\n-webkit-border-radius: 1-4 length|% / 1-4 length|%;\n-moz-border-radius: 1-4 length|% / 1-4 length|%;\n-o-border-radius: 1-4 length|% / 1-4 length|%;\n</code></pre><p>其中1-4就是四个角处的半径，单位可以是：N或%，若省略了部分值，则以对角的设置为准，如下图：<br><img src=\"/images/2018-01-08_borde-radius.jpg\" alt=\"border-radius\"></p>\n<p>以下都是合法的写法：</p>\n<pre><code>border-radius:1px 2px 3px 4px / 2px 3px 4px 5px;\n\nborder-radius:1px 2px 3px 4px / 2px 3px 4px;\n同 border-radius:1px 2px 3px 4px / 2px 3px 4px 3px;\n\nborder-radius:1px 2px 3px 4px / 2px 3px;\n同 border-radius:1px 2px 3px 4px / 2px 3px 2px 3px;\n\nborder-radius:1px 2px 3px 4px / 2px;\n同 border-radius:1px 2px 3px 4px / 2px 2px 2px 2px;\n\nborder-radius:1px 2px / 2px 3px;\n同 border-radius:1px 2px 1px 2px / 2px 3px 2px 3px;\n\nborder-radius:1px 2px;\n同 border-radius:1px 2px / 1px 2px;\n\nborder-radius:2px;\n同 border-radius:2px 2px 2px 2px / 2px 2px 2px 2px;\n</code></pre><p>以下分开写的属性：</p>\n<pre><code>border-top-left-radius:a b; //length或%，定义了左上角的弧度\nborder-top-right-radius   //定义了右上角的弧度\nborder-bottom-right-radius   //定义了右下角的弧度\nborder-bottom-left-radius   //定义了左下角的弧度\n</code></pre><p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/7vitapay\" target=\"_blank\" rel=\"external\">border-radius-demo</a></p>\n<h6 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h6><p>向框添加一个或多个阴影</p>\n<pre><code>box-shadow: x-shadow y-shadow blur spread color inset;\n</code></pre><ul>\n<li>x-shadow,水平阴影的位置。为正值时，阴影在右边框往右;负值时，阴影在左边框往左。但当inset内阴影时，正值时阴影在左边框往右，负值时阴影在右边框往左。</li>\n<li>y-shadow,垂直阴影的位置。为正值时，阴影在下边框往下;负值时，阴影在上边框往上。但当inset内阴影时，正值时阴影在上边框往下，负值时阴影在下边框往上。</li>\n<li>blur,模糊距离</li>\n<li>spread，阴影的尺寸</li>\n<li>color，阴影的颜色</li>\n<li>将外部阴影 (outset) 改为内部阴影</li>\n</ul>\n<p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/qcbishon\" target=\"_blank\" rel=\"external\">box-shadow-demo</a></p>\n<h6 id=\"border-image\"><a href=\"#border-image\" class=\"headerlink\" title=\"border-image\"></a>border-image</h6><p>图片边框,几种属性的简写</p>\n<pre><code>border-image：border-image-source border-image-slice border-image-width fill border-image-outset border-image-repeat\n</code></pre><p>其中：</p>\n<ul>\n<li>border-image-source，用在边框的图片的路径</li>\n<li>border-image-slice，4个边框向内切割的偏移量</li>\n<li>border-image-width，边框宽度</li>\n<li>border-image-outset，图像边框和内容框的间距偏移距离</li>\n<li>border-image-repeat，切割后的图片在边框拉伸中的实现方式，平铺(repeated)、铺满(rounded)或拉伸(stretched)</li>\n<li>fill，指示中间部分是否显示，fill则显示，否则不显示</li>\n</ul>\n<p>简单写来：</p>\n<pre><code>border-image：image-source (slice1 slice2 slice3 slice) (width1 width2 width3 width4) fill outset repeat;\n</code></pre><p>其中：<br><strong>width1-4</strong>是“上右下左”顺序四个图片边框的宽度，省略时以对面为准，同border其他属性的设置方式<br><strong>slice1-4</strong>是“上右下左”顺序四个切割的宽度，切割出来的图片被用来显示成边框，如下图，类似于9宫格的切片方式<br><img src=\"/images/2018-01-08_border-images.jpg\" alt=\"border-image\"></p>\n<p>四个角用作图边框的角，四边切出来的图片用作image边框4边的填充图</p>\n<h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><h6 id=\"white-space\"><a href=\"#white-space\" class=\"headerlink\" title=\"white-space\"></a>white-space</h6><p>设置如何处理元素内的空白，值</p>\n<ul>\n<li>normal，默认，空白会被浏览器忽略。</li>\n<li>pre，空白会被浏览器保留。</li>\n<li>nowrap，文本不会换行，文本会在在同一行上继续，直到遇到br</li>\n<li>pre-wrap，保留空白符序列，但是正常地进行换行</li>\n<li>pre-line，合并空白符序列，但是保留换行符</li>\n<li>inherit，规定应该从父元素继承 white-space 属性的值</li>\n</ul>\n<h6 id=\"text-shadow\"><a href=\"#text-shadow\" class=\"headerlink\" title=\"text-shadow\"></a>text-shadow</h6><p>向文本添加一个或多个阴影</p>\n<pre><code>text-shadow: h-shadow v-shadow blur color;\n</code></pre><p>其中：</p>\n<ul>\n<li>h-shadow，水平阴影的位置。正值阴影在右边，负值阴影在左边</li>\n<li>v-shadow，垂直阴影的位置。正值阴影在下边，负值阴影在上边</li>\n<li>blur，可选，模糊的距离</li>\n<li>color，阴影的颜色</li>\n</ul>\n<p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/zapn5yh5\" target=\"_blank\" rel=\"external\">text-shadow</a></p>\n<h6 id=\"text-overflow\"><a href=\"#text-overflow\" class=\"headerlink\" title=\"text-overflow\"></a>text-overflow</h6><p>规定当文本溢出包含元素时发生的事情</p>\n<ul>\n<li>clip，修剪文本</li>\n<li>ellipsis，显示省略符号来代表被修剪的文本</li>\n<li>string，使用给定的字符串来代表被修剪的文本</li>\n</ul>\n<p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/zapn5yh5\" target=\"_blank\" rel=\"external\">text-overflow</a></p>\n<h6 id=\"word-wrap\"><a href=\"#word-wrap\" class=\"headerlink\" title=\"word-wrap\"></a>word-wrap</h6><p>属性允许长单词或 URL 地址换行到下一行</p>\n<ul>\n<li>normal，只在允许的断字点换行（浏览器保持默认处理）。</li>\n<li>break-word，在长单词或 URL 地址内部进行换行，使用时整个长单词都换行到下一行</li>\n</ul>\n<h6 id=\"word-break\"><a href=\"#word-break\" class=\"headerlink\" title=\"word-break\"></a>word-break</h6><p>属性规定自动换行的处理方法</p>\n<ul>\n<li>normal，使用浏览器默认的换行规则。</li>\n<li>break-all，允许在单词内换行。</li>\n<li>keep-all，只能在半角空格或连字符处换行。</li>\n</ul>\n<p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/zapn5yh5\" target=\"_blank\" rel=\"external\">word-break</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"边框\"><a href=\"#边框\" class=\"headerlink\" title=\"边框\"></a>边框</h3><h6 id=\"border-radius\"><a href=\"#border-radius\" class=\"headerlink\" title=\"border-radius\"></a>border-radius</h6><p>顺序设置元素每个角的圆角边框<br>","more":"</p>\n<pre><code>border-radius: 1-4 length|% / 1-4 length|%;\n-webkit-border-radius: 1-4 length|% / 1-4 length|%;\n-moz-border-radius: 1-4 length|% / 1-4 length|%;\n-o-border-radius: 1-4 length|% / 1-4 length|%;\n</code></pre><p>其中1-4就是四个角处的半径，单位可以是：N或%，若省略了部分值，则以对角的设置为准，如下图：<br><img src=\"/images/2018-01-08_borde-radius.jpg\" alt=\"border-radius\"></p>\n<p>以下都是合法的写法：</p>\n<pre><code>border-radius:1px 2px 3px 4px / 2px 3px 4px 5px;\n\nborder-radius:1px 2px 3px 4px / 2px 3px 4px;\n同 border-radius:1px 2px 3px 4px / 2px 3px 4px 3px;\n\nborder-radius:1px 2px 3px 4px / 2px 3px;\n同 border-radius:1px 2px 3px 4px / 2px 3px 2px 3px;\n\nborder-radius:1px 2px 3px 4px / 2px;\n同 border-radius:1px 2px 3px 4px / 2px 2px 2px 2px;\n\nborder-radius:1px 2px / 2px 3px;\n同 border-radius:1px 2px 1px 2px / 2px 3px 2px 3px;\n\nborder-radius:1px 2px;\n同 border-radius:1px 2px / 1px 2px;\n\nborder-radius:2px;\n同 border-radius:2px 2px 2px 2px / 2px 2px 2px 2px;\n</code></pre><p>以下分开写的属性：</p>\n<pre><code>border-top-left-radius:a b; //length或%，定义了左上角的弧度\nborder-top-right-radius   //定义了右上角的弧度\nborder-bottom-right-radius   //定义了右下角的弧度\nborder-bottom-left-radius   //定义了左下角的弧度\n</code></pre><p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/7vitapay\" target=\"_blank\" rel=\"external\">border-radius-demo</a></p>\n<h6 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h6><p>向框添加一个或多个阴影</p>\n<pre><code>box-shadow: x-shadow y-shadow blur spread color inset;\n</code></pre><ul>\n<li>x-shadow,水平阴影的位置。为正值时，阴影在右边框往右;负值时，阴影在左边框往左。但当inset内阴影时，正值时阴影在左边框往右，负值时阴影在右边框往左。</li>\n<li>y-shadow,垂直阴影的位置。为正值时，阴影在下边框往下;负值时，阴影在上边框往上。但当inset内阴影时，正值时阴影在上边框往下，负值时阴影在下边框往上。</li>\n<li>blur,模糊距离</li>\n<li>spread，阴影的尺寸</li>\n<li>color，阴影的颜色</li>\n<li>将外部阴影 (outset) 改为内部阴影</li>\n</ul>\n<p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/qcbishon\" target=\"_blank\" rel=\"external\">box-shadow-demo</a></p>\n<h6 id=\"border-image\"><a href=\"#border-image\" class=\"headerlink\" title=\"border-image\"></a>border-image</h6><p>图片边框,几种属性的简写</p>\n<pre><code>border-image：border-image-source border-image-slice border-image-width fill border-image-outset border-image-repeat\n</code></pre><p>其中：</p>\n<ul>\n<li>border-image-source，用在边框的图片的路径</li>\n<li>border-image-slice，4个边框向内切割的偏移量</li>\n<li>border-image-width，边框宽度</li>\n<li>border-image-outset，图像边框和内容框的间距偏移距离</li>\n<li>border-image-repeat，切割后的图片在边框拉伸中的实现方式，平铺(repeated)、铺满(rounded)或拉伸(stretched)</li>\n<li>fill，指示中间部分是否显示，fill则显示，否则不显示</li>\n</ul>\n<p>简单写来：</p>\n<pre><code>border-image：image-source (slice1 slice2 slice3 slice) (width1 width2 width3 width4) fill outset repeat;\n</code></pre><p>其中：<br><strong>width1-4</strong>是“上右下左”顺序四个图片边框的宽度，省略时以对面为准，同border其他属性的设置方式<br><strong>slice1-4</strong>是“上右下左”顺序四个切割的宽度，切割出来的图片被用来显示成边框，如下图，类似于9宫格的切片方式<br><img src=\"/images/2018-01-08_border-images.jpg\" alt=\"border-image\"></p>\n<p>四个角用作图边框的角，四边切出来的图片用作image边框4边的填充图</p>\n<h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><h6 id=\"white-space\"><a href=\"#white-space\" class=\"headerlink\" title=\"white-space\"></a>white-space</h6><p>设置如何处理元素内的空白，值</p>\n<ul>\n<li>normal，默认，空白会被浏览器忽略。</li>\n<li>pre，空白会被浏览器保留。</li>\n<li>nowrap，文本不会换行，文本会在在同一行上继续，直到遇到br</li>\n<li>pre-wrap，保留空白符序列，但是正常地进行换行</li>\n<li>pre-line，合并空白符序列，但是保留换行符</li>\n<li>inherit，规定应该从父元素继承 white-space 属性的值</li>\n</ul>\n<h6 id=\"text-shadow\"><a href=\"#text-shadow\" class=\"headerlink\" title=\"text-shadow\"></a>text-shadow</h6><p>向文本添加一个或多个阴影</p>\n<pre><code>text-shadow: h-shadow v-shadow blur color;\n</code></pre><p>其中：</p>\n<ul>\n<li>h-shadow，水平阴影的位置。正值阴影在右边，负值阴影在左边</li>\n<li>v-shadow，垂直阴影的位置。正值阴影在下边，负值阴影在上边</li>\n<li>blur，可选，模糊的距离</li>\n<li>color，阴影的颜色</li>\n</ul>\n<p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/zapn5yh5\" target=\"_blank\" rel=\"external\">text-shadow</a></p>\n<h6 id=\"text-overflow\"><a href=\"#text-overflow\" class=\"headerlink\" title=\"text-overflow\"></a>text-overflow</h6><p>规定当文本溢出包含元素时发生的事情</p>\n<ul>\n<li>clip，修剪文本</li>\n<li>ellipsis，显示省略符号来代表被修剪的文本</li>\n<li>string，使用给定的字符串来代表被修剪的文本</li>\n</ul>\n<p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/zapn5yh5\" target=\"_blank\" rel=\"external\">text-overflow</a></p>\n<h6 id=\"word-wrap\"><a href=\"#word-wrap\" class=\"headerlink\" title=\"word-wrap\"></a>word-wrap</h6><p>属性允许长单词或 URL 地址换行到下一行</p>\n<ul>\n<li>normal，只在允许的断字点换行（浏览器保持默认处理）。</li>\n<li>break-word，在长单词或 URL 地址内部进行换行，使用时整个长单词都换行到下一行</li>\n</ul>\n<h6 id=\"word-break\"><a href=\"#word-break\" class=\"headerlink\" title=\"word-break\"></a>word-break</h6><p>属性规定自动换行的处理方法</p>\n<ul>\n<li>normal，使用浏览器默认的换行规则。</li>\n<li>break-all，允许在单词内换行。</li>\n<li>keep-all，只能在半角空格或连字符处换行。</li>\n</ul>\n<p>具体Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/zapn5yh5\" target=\"_blank\" rel=\"external\">word-break</a></p>"},{"title":"css3-媒体查询与响应式设计","date":"2018-01-24T15:40:30.000Z","comments":1,"_content":"\n说起响应式设计，从字面上看比较难以理解，其实简单来说就是网页的设计根据设备的不同，窗口大小的变化等动态适配页面的布局和样式，以免出现变形和错乱，体验过差\n<!--more-->\n\n可以结合媒体查询，设备窗口和媒体查询一起进行页面的响应式设计\n\n## 媒体查询\n\n媒体查询可以根据媒体类型和特性条件来改变元素的样式，从而使得页面能够在不同设备下可以良好的呈现\n媒体查询声明方式：\n\n    @media ([and|not|only]? media_type? （[and]? (featrue1)) ...[and]? (featrueN))),... {\n        CSS样式\n    }\n\n这是使用正则表达式的规则表示的媒体查询的用法，**可以以定义多个查询表达式，中间使用逗号相隔，只要一个表达式满足，其中的CSS样式便生效**，每个“查询表达式”由类似的几部分组成\n##### media_type\n这是支持的媒体类型或设备，比如：\n\n- all，适用所有设备，默认值\n- print，打印媒介\n- screen，屏幕\n- speech，语言\n\n##### 修饰连接符\nand，not，only都是表达式的修饰符，可以修饰整个查询表达式，也可以修饰单个表达式，甚至链接多个表达式或特性来形成辅助的媒体查询\n**（1）and**\nand用户连接媒体类型和特性featrue,或者连接多个featrue，比如：\n\n    @media screen and (min-width: 700px) {\n      CSS...\n    }\n    //媒介是screen且宽度大于700px生效\n\n    @media screen and (min-width: 700px) and (max-width: 1000px) {\n      CSS...\n    }\n    //媒介是screen，且700px<= width <= 1000px时生效\n\n当不指定媒体类型时默认all,前面可以省略\n\n    @media (min-width: 700px) {\n      CSS...\n    }\n    效果同下\n    @media all and (min-width: 700px) {\n      CSS...\n    }\n\n**（2）not**\nnot用于对整个表达式进行逻辑去反，且**使用not操作符必须指定设备类型**，比如：\n\n    @media not screen and (min-width:500px) {\n      CSS\n    }\n\n指的对后面整个and表达式取反，就是说：当不是screen屏幕或者宽度大于500px，CSS都生效\n\n> not操作符仅能用于一个完整的媒体查询\n\n说到这，得先说一下另一个特殊的操作-**逗号操作符**，用于将多个查询表达式连接在一起，只要其中一个表达式满足，即生效，看下面：\n\n    @media screen and (min-width:500px)，print and (max-width:700px) {\n      CSS\n    }\n\n这就宽泛很多了，CSS生效的条件可以是：\n\n1. screen 且 width>=500px\n2. print 且 width<=700px\n\n好，下面把not加入进去，因为只能用于一个查询表达式，所以下面几种写法是一样的：\n\n    @media not screen and (min-width:500px)，print and (max-width:700px) {\n      CSS\n    }\n\n    @media (not screen and (min-width:500px))，print and (max-width:700px) {\n      CSS\n    }\n\n    @media print and (max-width:700px),not screen and (min-width:500px) {\n      CSS\n    }\n\n**（3）only**\nonly操作符用于防止老的不支持媒体查询的浏览器不读取余下的媒体查询，同时一并忽略链接的样式表,比如：\n\n    <link rel=\"stylesheet\" media=\"only screen and (width:700px)\" href=\"example.css\" />\n\n##### featrue\nfeatrue指的是除了媒体类型以外的限制条件，比如：height，width,常用的有：\n\n- width,min-width,max-width\n- height,min-height,max-height\n- device-height,device-width\n\n更多可参看菜鸟教程：[modia](http://www.runoob.com/cssref/css3-pr-mediaquery.html)\n\n使用方式：(featrue: value),比如：\n\n   @media screen and (min-width:500px) and (min-device-height:300px) {\n      CSS\n    }\n\n媒体查询相关demo: [媒体查询-demo](http://sandbox.runjs.cn/show/nq9no0uj)\n\n###### 方向：横屏/竖屏\norientation：portrait | landscape\n\n- portrait：指定输出设备中的页面可见区域高度大于或等于宽度\n- landscape： 除portrait值情况外，都是landscape\n\n作为特性使用：\n\n    @media screen and (orientation: landscape) {\n        CSS\n    }\n\n\n## Viewport\nviewport是用户网页的可视区域\n比如，手机浏览器是把页面放在一个虚拟的\"窗口\"（viewport）中，通常这个虚拟的\"窗口\"（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分\n下面是一个常用的针对移动网页优化过的页面的meta标签：\n\n    <meta name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1.0,minimum-scale=0.5,maximum-scale:5.0, user-scalable:true\">\n\n其中：\n- width/heght：控制 viewport 的大小，可以指定的一个值，比如600;或者关键字，比如device-width\n- initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例\n- maximum-scale：允许用户缩放到的最大比例\n- minimum-scale：允许用户缩放到的最小比。\n- user-scalable：用户是否可以手动缩放，默认为true\n\n\n## 珊格视图\n珊格其实是把视图根据比例分成等量宽度，根据设计时使用，事先\n\n    * {\n        box-sizing: border-box;\n    }\n\n最常见的是将视区分为12份\n\n    .col-1 {width: 8.33%;}\n    .col-2 {width: 16.66%;}\n    .col-3 {width: 25%;}\n    .col-4 {width: 33.33%;}\n    .col-5 {width: 41.66%;}\n    .col-6 {width: 50%;}\n    .col-7 {width: 58.33%;}\n    .col-8 {width: 66.66%;}\n    .col-9 {width: 75%;}\n    .col-10 {width: 83.33%;}\n    .col-11 {width: 91.66%;}\n    .col-12 {width: 100%;}\n\n    [class*=\"col-\"] {\n        float: left;\n        padding: 15px;\n        border: 1px solid red;\n    }\n\n使用：\n\n    <header class=\"col-12\">手机展现</header>\n    <aside class=\"col-3\">\n        <ul>\n            <li onclick=\"selectMenu(1)\">Oppo</li>\n            <li onclick=\"selectMenu(2)\">Vivo</li>\n            <li onclick=\"selectMenu(3)\">小米</li>\n        </ul>\n    </aside>\n    <article id=\"oppo\" class=\"col-9\" style=\"display:block;\">\n        OPPO 更多年轻人选择的拍照手机\n    </article>\n    <footer class=\"col-12\">\n        <details>\n        <summary>Copyright 1999-2011.</summary>\n        <p>by Refsnes Data. All Rights Reserved.</p>\n        <p>datetime=\"2012-03-01\".</p>\n        </details>\n    </footer>\n\n结合媒体查询，可以根据页面变化进行响应式设计，动态改变样式\n\n    @media only screen and (min-width: 800px) {\n        .col-1 {width: 8.33%;}\n        .col-2 {width: 16.66%;}\n        .col-3 {width: 25%;}\n        .col-4 {width: 33.33%;}\n        .col-5 {width: 41.66%;}\n        .col-6 {width: 50%;}\n        .col-7 {width: 58.33%;}\n        .col-8 {width: 66.66%;}\n        .col-9 {width: 75%;}\n        .col-10 {width: 83.33%;}\n        .col-11 {width: 91.66%;}\n        .col-12 {width: 100%;}\n        [class*=\"col-\"] {\n            float: left;\n            border: 0px solid red;\n        }\n    }\n\n    @media only screen and (max-width: 799px) {\n      [class*=\"col-\"] {\n          float: left;\n          border: 0px solid red;\n          width:100%;\n      }\n      article{\n          background:#ccff33;\n          padding:16px;\n          height:auto;\n      }\n    }\n\n相应效果见demo: [珊格](http://sandbox.runjs.cn/show/wj1h5jsf)\n\n","source":"_posts/2018-01-24-css3-modia.md","raw":"---\ntitle: css3-媒体查询与响应式设计\ndate: 2018-01-24 23:40:30\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\n说起响应式设计，从字面上看比较难以理解，其实简单来说就是网页的设计根据设备的不同，窗口大小的变化等动态适配页面的布局和样式，以免出现变形和错乱，体验过差\n<!--more-->\n\n可以结合媒体查询，设备窗口和媒体查询一起进行页面的响应式设计\n\n## 媒体查询\n\n媒体查询可以根据媒体类型和特性条件来改变元素的样式，从而使得页面能够在不同设备下可以良好的呈现\n媒体查询声明方式：\n\n    @media ([and|not|only]? media_type? （[and]? (featrue1)) ...[and]? (featrueN))),... {\n        CSS样式\n    }\n\n这是使用正则表达式的规则表示的媒体查询的用法，**可以以定义多个查询表达式，中间使用逗号相隔，只要一个表达式满足，其中的CSS样式便生效**，每个“查询表达式”由类似的几部分组成\n##### media_type\n这是支持的媒体类型或设备，比如：\n\n- all，适用所有设备，默认值\n- print，打印媒介\n- screen，屏幕\n- speech，语言\n\n##### 修饰连接符\nand，not，only都是表达式的修饰符，可以修饰整个查询表达式，也可以修饰单个表达式，甚至链接多个表达式或特性来形成辅助的媒体查询\n**（1）and**\nand用户连接媒体类型和特性featrue,或者连接多个featrue，比如：\n\n    @media screen and (min-width: 700px) {\n      CSS...\n    }\n    //媒介是screen且宽度大于700px生效\n\n    @media screen and (min-width: 700px) and (max-width: 1000px) {\n      CSS...\n    }\n    //媒介是screen，且700px<= width <= 1000px时生效\n\n当不指定媒体类型时默认all,前面可以省略\n\n    @media (min-width: 700px) {\n      CSS...\n    }\n    效果同下\n    @media all and (min-width: 700px) {\n      CSS...\n    }\n\n**（2）not**\nnot用于对整个表达式进行逻辑去反，且**使用not操作符必须指定设备类型**，比如：\n\n    @media not screen and (min-width:500px) {\n      CSS\n    }\n\n指的对后面整个and表达式取反，就是说：当不是screen屏幕或者宽度大于500px，CSS都生效\n\n> not操作符仅能用于一个完整的媒体查询\n\n说到这，得先说一下另一个特殊的操作-**逗号操作符**，用于将多个查询表达式连接在一起，只要其中一个表达式满足，即生效，看下面：\n\n    @media screen and (min-width:500px)，print and (max-width:700px) {\n      CSS\n    }\n\n这就宽泛很多了，CSS生效的条件可以是：\n\n1. screen 且 width>=500px\n2. print 且 width<=700px\n\n好，下面把not加入进去，因为只能用于一个查询表达式，所以下面几种写法是一样的：\n\n    @media not screen and (min-width:500px)，print and (max-width:700px) {\n      CSS\n    }\n\n    @media (not screen and (min-width:500px))，print and (max-width:700px) {\n      CSS\n    }\n\n    @media print and (max-width:700px),not screen and (min-width:500px) {\n      CSS\n    }\n\n**（3）only**\nonly操作符用于防止老的不支持媒体查询的浏览器不读取余下的媒体查询，同时一并忽略链接的样式表,比如：\n\n    <link rel=\"stylesheet\" media=\"only screen and (width:700px)\" href=\"example.css\" />\n\n##### featrue\nfeatrue指的是除了媒体类型以外的限制条件，比如：height，width,常用的有：\n\n- width,min-width,max-width\n- height,min-height,max-height\n- device-height,device-width\n\n更多可参看菜鸟教程：[modia](http://www.runoob.com/cssref/css3-pr-mediaquery.html)\n\n使用方式：(featrue: value),比如：\n\n   @media screen and (min-width:500px) and (min-device-height:300px) {\n      CSS\n    }\n\n媒体查询相关demo: [媒体查询-demo](http://sandbox.runjs.cn/show/nq9no0uj)\n\n###### 方向：横屏/竖屏\norientation：portrait | landscape\n\n- portrait：指定输出设备中的页面可见区域高度大于或等于宽度\n- landscape： 除portrait值情况外，都是landscape\n\n作为特性使用：\n\n    @media screen and (orientation: landscape) {\n        CSS\n    }\n\n\n## Viewport\nviewport是用户网页的可视区域\n比如，手机浏览器是把页面放在一个虚拟的\"窗口\"（viewport）中，通常这个虚拟的\"窗口\"（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分\n下面是一个常用的针对移动网页优化过的页面的meta标签：\n\n    <meta name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1.0,minimum-scale=0.5,maximum-scale:5.0, user-scalable:true\">\n\n其中：\n- width/heght：控制 viewport 的大小，可以指定的一个值，比如600;或者关键字，比如device-width\n- initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例\n- maximum-scale：允许用户缩放到的最大比例\n- minimum-scale：允许用户缩放到的最小比。\n- user-scalable：用户是否可以手动缩放，默认为true\n\n\n## 珊格视图\n珊格其实是把视图根据比例分成等量宽度，根据设计时使用，事先\n\n    * {\n        box-sizing: border-box;\n    }\n\n最常见的是将视区分为12份\n\n    .col-1 {width: 8.33%;}\n    .col-2 {width: 16.66%;}\n    .col-3 {width: 25%;}\n    .col-4 {width: 33.33%;}\n    .col-5 {width: 41.66%;}\n    .col-6 {width: 50%;}\n    .col-7 {width: 58.33%;}\n    .col-8 {width: 66.66%;}\n    .col-9 {width: 75%;}\n    .col-10 {width: 83.33%;}\n    .col-11 {width: 91.66%;}\n    .col-12 {width: 100%;}\n\n    [class*=\"col-\"] {\n        float: left;\n        padding: 15px;\n        border: 1px solid red;\n    }\n\n使用：\n\n    <header class=\"col-12\">手机展现</header>\n    <aside class=\"col-3\">\n        <ul>\n            <li onclick=\"selectMenu(1)\">Oppo</li>\n            <li onclick=\"selectMenu(2)\">Vivo</li>\n            <li onclick=\"selectMenu(3)\">小米</li>\n        </ul>\n    </aside>\n    <article id=\"oppo\" class=\"col-9\" style=\"display:block;\">\n        OPPO 更多年轻人选择的拍照手机\n    </article>\n    <footer class=\"col-12\">\n        <details>\n        <summary>Copyright 1999-2011.</summary>\n        <p>by Refsnes Data. All Rights Reserved.</p>\n        <p>datetime=\"2012-03-01\".</p>\n        </details>\n    </footer>\n\n结合媒体查询，可以根据页面变化进行响应式设计，动态改变样式\n\n    @media only screen and (min-width: 800px) {\n        .col-1 {width: 8.33%;}\n        .col-2 {width: 16.66%;}\n        .col-3 {width: 25%;}\n        .col-4 {width: 33.33%;}\n        .col-5 {width: 41.66%;}\n        .col-6 {width: 50%;}\n        .col-7 {width: 58.33%;}\n        .col-8 {width: 66.66%;}\n        .col-9 {width: 75%;}\n        .col-10 {width: 83.33%;}\n        .col-11 {width: 91.66%;}\n        .col-12 {width: 100%;}\n        [class*=\"col-\"] {\n            float: left;\n            border: 0px solid red;\n        }\n    }\n\n    @media only screen and (max-width: 799px) {\n      [class*=\"col-\"] {\n          float: left;\n          border: 0px solid red;\n          width:100%;\n      }\n      article{\n          background:#ccff33;\n          padding:16px;\n          height:auto;\n      }\n    }\n\n相应效果见demo: [珊格](http://sandbox.runjs.cn/show/wj1h5jsf)\n\n","slug":"css3-modia","published":1,"updated":"2018-01-27T11:04:03.838Z","layout":"post","photos":[],"link":"","_id":"cjqwe426t0023or0b1iimr8sh","content":"<p>说起响应式设计，从字面上看比较难以理解，其实简单来说就是网页的设计根据设备的不同，窗口大小的变化等动态适配页面的布局和样式，以免出现变形和错乱，体验过差<br><a id=\"more\"></a></p>\n<p>可以结合媒体查询，设备窗口和媒体查询一起进行页面的响应式设计</p>\n<h2 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h2><p>媒体查询可以根据媒体类型和特性条件来改变元素的样式，从而使得页面能够在不同设备下可以良好的呈现<br>媒体查询声明方式：</p>\n<pre><code>@media ([and|not|only]? media_type? （[and]? (featrue1)) ...[and]? (featrueN))),... {\n    CSS样式\n}\n</code></pre><p>这是使用正则表达式的规则表示的媒体查询的用法，<strong>可以以定义多个查询表达式，中间使用逗号相隔，只要一个表达式满足，其中的CSS样式便生效</strong>，每个“查询表达式”由类似的几部分组成</p>\n<h5 id=\"media-type\"><a href=\"#media-type\" class=\"headerlink\" title=\"media_type\"></a>media_type</h5><p>这是支持的媒体类型或设备，比如：</p>\n<ul>\n<li>all，适用所有设备，默认值</li>\n<li>print，打印媒介</li>\n<li>screen，屏幕</li>\n<li>speech，语言</li>\n</ul>\n<h5 id=\"修饰连接符\"><a href=\"#修饰连接符\" class=\"headerlink\" title=\"修饰连接符\"></a>修饰连接符</h5><p>and，not，only都是表达式的修饰符，可以修饰整个查询表达式，也可以修饰单个表达式，甚至链接多个表达式或特性来形成辅助的媒体查询<br><strong>（1）and</strong><br>and用户连接媒体类型和特性featrue,或者连接多个featrue，比如：</p>\n<pre><code>@media screen and (min-width: 700px) {\n  CSS...\n}\n//媒介是screen且宽度大于700px生效\n\n@media screen and (min-width: 700px) and (max-width: 1000px) {\n  CSS...\n}\n//媒介是screen，且700px&lt;= width &lt;= 1000px时生效\n</code></pre><p>当不指定媒体类型时默认all,前面可以省略</p>\n<pre><code>@media (min-width: 700px) {\n  CSS...\n}\n效果同下\n@media all and (min-width: 700px) {\n  CSS...\n}\n</code></pre><p><strong>（2）not</strong><br>not用于对整个表达式进行逻辑去反，且<strong>使用not操作符必须指定设备类型</strong>，比如：</p>\n<pre><code>@media not screen and (min-width:500px) {\n  CSS\n}\n</code></pre><p>指的对后面整个and表达式取反，就是说：当不是screen屏幕或者宽度大于500px，CSS都生效</p>\n<blockquote>\n<p>not操作符仅能用于一个完整的媒体查询</p>\n</blockquote>\n<p>说到这，得先说一下另一个特殊的操作-<strong>逗号操作符</strong>，用于将多个查询表达式连接在一起，只要其中一个表达式满足，即生效，看下面：</p>\n<pre><code>@media screen and (min-width:500px)，print and (max-width:700px) {\n  CSS\n}\n</code></pre><p>这就宽泛很多了，CSS生效的条件可以是：</p>\n<ol>\n<li>screen 且 width&gt;=500px</li>\n<li>print 且 width&lt;=700px</li>\n</ol>\n<p>好，下面把not加入进去，因为只能用于一个查询表达式，所以下面几种写法是一样的：</p>\n<pre><code>@media not screen and (min-width:500px)，print and (max-width:700px) {\n  CSS\n}\n\n@media (not screen and (min-width:500px))，print and (max-width:700px) {\n  CSS\n}\n\n@media print and (max-width:700px),not screen and (min-width:500px) {\n  CSS\n}\n</code></pre><p><strong>（3）only</strong><br>only操作符用于防止老的不支持媒体查询的浏览器不读取余下的媒体查询，同时一并忽略链接的样式表,比如：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;only screen and (width:700px)&quot; href=&quot;example.css&quot; /&gt;\n</code></pre><h5 id=\"featrue\"><a href=\"#featrue\" class=\"headerlink\" title=\"featrue\"></a>featrue</h5><p>featrue指的是除了媒体类型以外的限制条件，比如：height，width,常用的有：</p>\n<ul>\n<li>width,min-width,max-width</li>\n<li>height,min-height,max-height</li>\n<li>device-height,device-width</li>\n</ul>\n<p>更多可参看菜鸟教程：<a href=\"http://www.runoob.com/cssref/css3-pr-mediaquery.html\" target=\"_blank\" rel=\"external\">modia</a></p>\n<p>使用方式：(featrue: value),比如：</p>\n<p>   @media screen and (min-width:500px) and (min-device-height:300px) {<br>      CSS<br>    }</p>\n<p>媒体查询相关demo: <a href=\"http://sandbox.runjs.cn/show/nq9no0uj\" target=\"_blank\" rel=\"external\">媒体查询-demo</a></p>\n<h6 id=\"方向：横屏-竖屏\"><a href=\"#方向：横屏-竖屏\" class=\"headerlink\" title=\"方向：横屏/竖屏\"></a>方向：横屏/竖屏</h6><p>orientation：portrait | landscape</p>\n<ul>\n<li>portrait：指定输出设备中的页面可见区域高度大于或等于宽度</li>\n<li>landscape： 除portrait值情况外，都是landscape</li>\n</ul>\n<p>作为特性使用：</p>\n<pre><code>@media screen and (orientation: landscape) {\n    CSS\n}\n</code></pre><h2 id=\"Viewport\"><a href=\"#Viewport\" class=\"headerlink\" title=\"Viewport\"></a>Viewport</h2><p>viewport是用户网页的可视区域<br>比如，手机浏览器是把页面放在一个虚拟的”窗口”（viewport）中，通常这个虚拟的”窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分<br>下面是一个常用的针对移动网页优化过的页面的meta标签：</p>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, height=device-height, initial-scale=1.0,minimum-scale=0.5,maximum-scale:5.0, user-scalable:true&quot;&gt;\n</code></pre><p>其中：</p>\n<ul>\n<li>width/heght：控制 viewport 的大小，可以指定的一个值，比如600;或者关键字，比如device-width</li>\n<li>initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例</li>\n<li>maximum-scale：允许用户缩放到的最大比例</li>\n<li>minimum-scale：允许用户缩放到的最小比。</li>\n<li>user-scalable：用户是否可以手动缩放，默认为true</li>\n</ul>\n<h2 id=\"珊格视图\"><a href=\"#珊格视图\" class=\"headerlink\" title=\"珊格视图\"></a>珊格视图</h2><p>珊格其实是把视图根据比例分成等量宽度，根据设计时使用，事先</p>\n<pre><code>* {\n    box-sizing: border-box;\n}\n</code></pre><p>最常见的是将视区分为12份</p>\n<pre><code>.col-1 {width: 8.33%;}\n.col-2 {width: 16.66%;}\n.col-3 {width: 25%;}\n.col-4 {width: 33.33%;}\n.col-5 {width: 41.66%;}\n.col-6 {width: 50%;}\n.col-7 {width: 58.33%;}\n.col-8 {width: 66.66%;}\n.col-9 {width: 75%;}\n.col-10 {width: 83.33%;}\n.col-11 {width: 91.66%;}\n.col-12 {width: 100%;}\n\n[class*=&quot;col-&quot;] {\n    float: left;\n    padding: 15px;\n    border: 1px solid red;\n}\n</code></pre><p>使用：</p>\n<pre><code>&lt;header class=&quot;col-12&quot;&gt;手机展现&lt;/header&gt;\n&lt;aside class=&quot;col-3&quot;&gt;\n    &lt;ul&gt;\n        &lt;li onclick=&quot;selectMenu(1)&quot;&gt;Oppo&lt;/li&gt;\n        &lt;li onclick=&quot;selectMenu(2)&quot;&gt;Vivo&lt;/li&gt;\n        &lt;li onclick=&quot;selectMenu(3)&quot;&gt;小米&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/aside&gt;\n&lt;article id=&quot;oppo&quot; class=&quot;col-9&quot; style=&quot;display:block;&quot;&gt;\n    OPPO 更多年轻人选择的拍照手机\n&lt;/article&gt;\n&lt;footer class=&quot;col-12&quot;&gt;\n    &lt;details&gt;\n    &lt;summary&gt;Copyright 1999-2011.&lt;/summary&gt;\n    &lt;p&gt;by Refsnes Data. All Rights Reserved.&lt;/p&gt;\n    &lt;p&gt;datetime=&quot;2012-03-01&quot;.&lt;/p&gt;\n    &lt;/details&gt;\n&lt;/footer&gt;\n</code></pre><p>结合媒体查询，可以根据页面变化进行响应式设计，动态改变样式</p>\n<pre><code>@media only screen and (min-width: 800px) {\n    .col-1 {width: 8.33%;}\n    .col-2 {width: 16.66%;}\n    .col-3 {width: 25%;}\n    .col-4 {width: 33.33%;}\n    .col-5 {width: 41.66%;}\n    .col-6 {width: 50%;}\n    .col-7 {width: 58.33%;}\n    .col-8 {width: 66.66%;}\n    .col-9 {width: 75%;}\n    .col-10 {width: 83.33%;}\n    .col-11 {width: 91.66%;}\n    .col-12 {width: 100%;}\n    [class*=&quot;col-&quot;] {\n        float: left;\n        border: 0px solid red;\n    }\n}\n\n@media only screen and (max-width: 799px) {\n  [class*=&quot;col-&quot;] {\n      float: left;\n      border: 0px solid red;\n      width:100%;\n  }\n  article{\n      background:#ccff33;\n      padding:16px;\n      height:auto;\n  }\n}\n</code></pre><p>相应效果见demo: <a href=\"http://sandbox.runjs.cn/show/wj1h5jsf\" target=\"_blank\" rel=\"external\">珊格</a></p>\n","site":{"data":{}},"excerpt":"<p>说起响应式设计，从字面上看比较难以理解，其实简单来说就是网页的设计根据设备的不同，窗口大小的变化等动态适配页面的布局和样式，以免出现变形和错乱，体验过差<br>","more":"</p>\n<p>可以结合媒体查询，设备窗口和媒体查询一起进行页面的响应式设计</p>\n<h2 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h2><p>媒体查询可以根据媒体类型和特性条件来改变元素的样式，从而使得页面能够在不同设备下可以良好的呈现<br>媒体查询声明方式：</p>\n<pre><code>@media ([and|not|only]? media_type? （[and]? (featrue1)) ...[and]? (featrueN))),... {\n    CSS样式\n}\n</code></pre><p>这是使用正则表达式的规则表示的媒体查询的用法，<strong>可以以定义多个查询表达式，中间使用逗号相隔，只要一个表达式满足，其中的CSS样式便生效</strong>，每个“查询表达式”由类似的几部分组成</p>\n<h5 id=\"media-type\"><a href=\"#media-type\" class=\"headerlink\" title=\"media_type\"></a>media_type</h5><p>这是支持的媒体类型或设备，比如：</p>\n<ul>\n<li>all，适用所有设备，默认值</li>\n<li>print，打印媒介</li>\n<li>screen，屏幕</li>\n<li>speech，语言</li>\n</ul>\n<h5 id=\"修饰连接符\"><a href=\"#修饰连接符\" class=\"headerlink\" title=\"修饰连接符\"></a>修饰连接符</h5><p>and，not，only都是表达式的修饰符，可以修饰整个查询表达式，也可以修饰单个表达式，甚至链接多个表达式或特性来形成辅助的媒体查询<br><strong>（1）and</strong><br>and用户连接媒体类型和特性featrue,或者连接多个featrue，比如：</p>\n<pre><code>@media screen and (min-width: 700px) {\n  CSS...\n}\n//媒介是screen且宽度大于700px生效\n\n@media screen and (min-width: 700px) and (max-width: 1000px) {\n  CSS...\n}\n//媒介是screen，且700px&lt;= width &lt;= 1000px时生效\n</code></pre><p>当不指定媒体类型时默认all,前面可以省略</p>\n<pre><code>@media (min-width: 700px) {\n  CSS...\n}\n效果同下\n@media all and (min-width: 700px) {\n  CSS...\n}\n</code></pre><p><strong>（2）not</strong><br>not用于对整个表达式进行逻辑去反，且<strong>使用not操作符必须指定设备类型</strong>，比如：</p>\n<pre><code>@media not screen and (min-width:500px) {\n  CSS\n}\n</code></pre><p>指的对后面整个and表达式取反，就是说：当不是screen屏幕或者宽度大于500px，CSS都生效</p>\n<blockquote>\n<p>not操作符仅能用于一个完整的媒体查询</p>\n</blockquote>\n<p>说到这，得先说一下另一个特殊的操作-<strong>逗号操作符</strong>，用于将多个查询表达式连接在一起，只要其中一个表达式满足，即生效，看下面：</p>\n<pre><code>@media screen and (min-width:500px)，print and (max-width:700px) {\n  CSS\n}\n</code></pre><p>这就宽泛很多了，CSS生效的条件可以是：</p>\n<ol>\n<li>screen 且 width&gt;=500px</li>\n<li>print 且 width&lt;=700px</li>\n</ol>\n<p>好，下面把not加入进去，因为只能用于一个查询表达式，所以下面几种写法是一样的：</p>\n<pre><code>@media not screen and (min-width:500px)，print and (max-width:700px) {\n  CSS\n}\n\n@media (not screen and (min-width:500px))，print and (max-width:700px) {\n  CSS\n}\n\n@media print and (max-width:700px),not screen and (min-width:500px) {\n  CSS\n}\n</code></pre><p><strong>（3）only</strong><br>only操作符用于防止老的不支持媒体查询的浏览器不读取余下的媒体查询，同时一并忽略链接的样式表,比如：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;only screen and (width:700px)&quot; href=&quot;example.css&quot; /&gt;\n</code></pre><h5 id=\"featrue\"><a href=\"#featrue\" class=\"headerlink\" title=\"featrue\"></a>featrue</h5><p>featrue指的是除了媒体类型以外的限制条件，比如：height，width,常用的有：</p>\n<ul>\n<li>width,min-width,max-width</li>\n<li>height,min-height,max-height</li>\n<li>device-height,device-width</li>\n</ul>\n<p>更多可参看菜鸟教程：<a href=\"http://www.runoob.com/cssref/css3-pr-mediaquery.html\" target=\"_blank\" rel=\"external\">modia</a></p>\n<p>使用方式：(featrue: value),比如：</p>\n<p>   @media screen and (min-width:500px) and (min-device-height:300px) {<br>      CSS<br>    }</p>\n<p>媒体查询相关demo: <a href=\"http://sandbox.runjs.cn/show/nq9no0uj\" target=\"_blank\" rel=\"external\">媒体查询-demo</a></p>\n<h6 id=\"方向：横屏-竖屏\"><a href=\"#方向：横屏-竖屏\" class=\"headerlink\" title=\"方向：横屏/竖屏\"></a>方向：横屏/竖屏</h6><p>orientation：portrait | landscape</p>\n<ul>\n<li>portrait：指定输出设备中的页面可见区域高度大于或等于宽度</li>\n<li>landscape： 除portrait值情况外，都是landscape</li>\n</ul>\n<p>作为特性使用：</p>\n<pre><code>@media screen and (orientation: landscape) {\n    CSS\n}\n</code></pre><h2 id=\"Viewport\"><a href=\"#Viewport\" class=\"headerlink\" title=\"Viewport\"></a>Viewport</h2><p>viewport是用户网页的可视区域<br>比如，手机浏览器是把页面放在一个虚拟的”窗口”（viewport）中，通常这个虚拟的”窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分<br>下面是一个常用的针对移动网页优化过的页面的meta标签：</p>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, height=device-height, initial-scale=1.0,minimum-scale=0.5,maximum-scale:5.0, user-scalable:true&quot;&gt;\n</code></pre><p>其中：</p>\n<ul>\n<li>width/heght：控制 viewport 的大小，可以指定的一个值，比如600;或者关键字，比如device-width</li>\n<li>initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例</li>\n<li>maximum-scale：允许用户缩放到的最大比例</li>\n<li>minimum-scale：允许用户缩放到的最小比。</li>\n<li>user-scalable：用户是否可以手动缩放，默认为true</li>\n</ul>\n<h2 id=\"珊格视图\"><a href=\"#珊格视图\" class=\"headerlink\" title=\"珊格视图\"></a>珊格视图</h2><p>珊格其实是把视图根据比例分成等量宽度，根据设计时使用，事先</p>\n<pre><code>* {\n    box-sizing: border-box;\n}\n</code></pre><p>最常见的是将视区分为12份</p>\n<pre><code>.col-1 {width: 8.33%;}\n.col-2 {width: 16.66%;}\n.col-3 {width: 25%;}\n.col-4 {width: 33.33%;}\n.col-5 {width: 41.66%;}\n.col-6 {width: 50%;}\n.col-7 {width: 58.33%;}\n.col-8 {width: 66.66%;}\n.col-9 {width: 75%;}\n.col-10 {width: 83.33%;}\n.col-11 {width: 91.66%;}\n.col-12 {width: 100%;}\n\n[class*=&quot;col-&quot;] {\n    float: left;\n    padding: 15px;\n    border: 1px solid red;\n}\n</code></pre><p>使用：</p>\n<pre><code>&lt;header class=&quot;col-12&quot;&gt;手机展现&lt;/header&gt;\n&lt;aside class=&quot;col-3&quot;&gt;\n    &lt;ul&gt;\n        &lt;li onclick=&quot;selectMenu(1)&quot;&gt;Oppo&lt;/li&gt;\n        &lt;li onclick=&quot;selectMenu(2)&quot;&gt;Vivo&lt;/li&gt;\n        &lt;li onclick=&quot;selectMenu(3)&quot;&gt;小米&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/aside&gt;\n&lt;article id=&quot;oppo&quot; class=&quot;col-9&quot; style=&quot;display:block;&quot;&gt;\n    OPPO 更多年轻人选择的拍照手机\n&lt;/article&gt;\n&lt;footer class=&quot;col-12&quot;&gt;\n    &lt;details&gt;\n    &lt;summary&gt;Copyright 1999-2011.&lt;/summary&gt;\n    &lt;p&gt;by Refsnes Data. All Rights Reserved.&lt;/p&gt;\n    &lt;p&gt;datetime=&quot;2012-03-01&quot;.&lt;/p&gt;\n    &lt;/details&gt;\n&lt;/footer&gt;\n</code></pre><p>结合媒体查询，可以根据页面变化进行响应式设计，动态改变样式</p>\n<pre><code>@media only screen and (min-width: 800px) {\n    .col-1 {width: 8.33%;}\n    .col-2 {width: 16.66%;}\n    .col-3 {width: 25%;}\n    .col-4 {width: 33.33%;}\n    .col-5 {width: 41.66%;}\n    .col-6 {width: 50%;}\n    .col-7 {width: 58.33%;}\n    .col-8 {width: 66.66%;}\n    .col-9 {width: 75%;}\n    .col-10 {width: 83.33%;}\n    .col-11 {width: 91.66%;}\n    .col-12 {width: 100%;}\n    [class*=&quot;col-&quot;] {\n        float: left;\n        border: 0px solid red;\n    }\n}\n\n@media only screen and (max-width: 799px) {\n  [class*=&quot;col-&quot;] {\n      float: left;\n      border: 0px solid red;\n      width:100%;\n  }\n  article{\n      background:#ccff33;\n      padding:16px;\n      height:auto;\n  }\n}\n</code></pre><p>相应效果见demo: <a href=\"http://sandbox.runjs.cn/show/wj1h5jsf\" target=\"_blank\" rel=\"external\">珊格</a></p>"},{"title":"css3-Flex布局","date":"2018-01-21T05:40:48.000Z","comments":1,"_content":"\nFlex是一种弹性布局框，和上一篇讲的box特别像，可以说是Box的增强版，能够实现box支持的所有，也增加和简化了部分属性功能\n<!--more-->\n\nFlex的声明如下：\n\n    display: -webkit-flex; /* Safari */\n    display: flex;\n\n> 设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效\n\n### flex-direction\nflex-direction规定子元素的排列方向和顺序，同时也设定了**主轴和次轴**的方向，默认是水平方向\n***相当于box-orient + box-direction***\n\n<div class=\"father\">\n  <div class=\"son1\">主轴</div>\n  <div class=\"son2\">次轴</div>\n</div>\n\n如图所示，蓝色为主轴方向，紫色的为次轴方向，这是默认的排列方式\nflex-direction有四种取值：\n- row，默认水平方向从左向右排列，水平为主轴，垂直为次轴，主轴延伸方向：左–>右\n- row-reverse，水平方向反向排列，水平为主轴，垂直为次轴，主轴延伸方向：右–>左\n- column，垂直方向从上向下排列，垂直方向为主轴，水平方向为次轴，主轴延伸方向：上–>下\n- column-reverse，垂直方向反向排列，垂直方向为主轴，水平方向为次轴，主轴延伸方向：下–>上\n\n效果见[flex-demo-01](http://sandbox.runjs.cn/show/mf8negpu)\n\n### flex-wrap\nflex-wrap规定子元素在**主轴**上如果排不下的时候，如何换行，默认都排在一条轴线上\n***类似于box-lines，只不过box不被支持***\nflex-direction有四种取值：\n- nowrap， 默认， 不换行\n- wrap，换行，第一行在上方\n- wrap-reverse，换行，第一行在下方\n\n效果见[flex-demo-01](http://sandbox.runjs.cn/show/mf8negpu)\n\n### flex-flow\nflex-flow是flex-direction和flex-wrap的简写形式，默认值为：row nowrap\n\n    flex-flow: flex-direction  flex-wrap\n\n### justify-content\njustify-content规定子元素在**主轴**方向上对齐方式，默认为:flex-start,沿着**主轴的延伸方向**在起点处放置\n***类似于box-pack***\njustify-content有5种取值\n- flex-start，子元素放置于主轴延伸方向的起点处，比如：正向水平排列时，在左边;反向水平排列时，在右边;垂直正向排列时，在上边;以此类推\n- flex-end，子元素放置于主轴延伸方向的终点处，比如：正向水平排列时，在右边;反向水平排列时，在左边;垂直正向排列时，在下边;以此类推\n- center，子元素放置于主轴延伸方向的中点处，两边的剩余空间平均分布\n- space-between，两端对齐，元素之间的间隔都相等，与box-pack=justify类似\n- space-around，每个元素两侧的间隔相等，项目之间的间隔比项目与边框的间隔大一倍\n\n效果见[flex-demo-01](http://sandbox.runjs.cn/show/mf8negpu)\n\n### align-items\nalign-items规定子元素在**次轴**方向上对齐方式，默认为:start,沿着**次轴的延伸方向**在起点处放置\n***类似于box-align***\nalign-items有5种取值\n- flex-start，子元素放置于次轴延伸方向的起点处，比如：正向水平排列时，在上边;垂直正向排列时，在左边;以此类推\n- flex-end，子元素放置于次轴延伸方向的起终点处，比如：正向水平排列时，在下边;垂直正向排列时，在右边;以此类推\n- center，子元素放置于次轴延伸方向的中点处，两边的剩余空间平均分布\n- baseline，如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐\n- stretch ，默认，拉伸子元素以填充包含块,\n\n效果见：\n[flex-demo-01](http://sandbox.runjs.cn/show/mf8negpu)\n[flex-demo-02](http://sandbox.runjs.cn/show/jzn8ccbn)\n\n### align-content\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用\n\n### order\norder属性规定框中子元素的显示次序，数值越小，排列越靠前，默认为0\n***类似于box-ordinal-group***\n\n    box-ordinal-group: N; //正整数，不可负值\n\n此属性可以突破子元素的书写顺序，根据需要将元素按照规定顺序排列，N值越小，排列越靠前\n\n### flex-grow\nflex-grow规定各个子元素对父框剩余空间的分配比例\n***类似于box-flex***\n\n    flex-grow: N;\n\n默认为0，即如果存在剩余空间，不要空间来填充\n\n### flex-shrink\nflex-shrink定义了元素的缩小比例，默认为1，即如果空间不足，该项目将缩小\n\n    flex-shrink: N;\n\n- 如果所有元素的flex-shrink属性都为1，当空间不足时，都将等比例缩小\n- 如果一个项目的flex-shrink属性为0，则空间不足时，不缩小\n\n### flex-basis\nflex-basis定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间。\n默认值为auto，即项目的本来大小\n***类似于box-flex中设置固定尺寸***\n\n    flex-basis: Npx 或 auto;\n\n### flex\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写\n\n    flex：flex-grow flex-shrink flex-basis;\n\n默认值为0 1 auto,后两个属性可选\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)\n\n### align-self\nalign-self属性允许单个元素有不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n\n效果见：[flex-demo-03](http://sandbox.runjs.cn/show/0anfzaii)\n\n参考：\n[Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n<style>\n.father{\n  height:120px;\n  width:240px;\n  border:solid 1px;\n  margin:auto;\n  margin-top:20px;\n  position:relative;\n}\n.son1{\n height:0px;\n width:100%;\n border:solid 1px #0000ff;\n position:absolute;\n top:50%;\n}\n.son1::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:97%;\n top:-6px;\n border-width: 6px 12px;\n border-style: solid;\n border-color: transparent transparent transparent #0000ff;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n.son2{\n height:100%;\n width:0;\n border:solid 1px #8a00e6;\n position:absolute;\n left:50%;\n top:0%;\n}\n.son2::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:-5px;\n top:-14px;\n border-width: 12px 6px;\n border-style: solid;\n border-color: transparent transparent #8a00e6 transparent;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n</style>\n\n","source":"_posts/2018-01-21-css3-flex.md","raw":"---\ntitle: css3-Flex布局\ndate: 2018-01-21 13:40:48\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\nFlex是一种弹性布局框，和上一篇讲的box特别像，可以说是Box的增强版，能够实现box支持的所有，也增加和简化了部分属性功能\n<!--more-->\n\nFlex的声明如下：\n\n    display: -webkit-flex; /* Safari */\n    display: flex;\n\n> 设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效\n\n### flex-direction\nflex-direction规定子元素的排列方向和顺序，同时也设定了**主轴和次轴**的方向，默认是水平方向\n***相当于box-orient + box-direction***\n\n<div class=\"father\">\n  <div class=\"son1\">主轴</div>\n  <div class=\"son2\">次轴</div>\n</div>\n\n如图所示，蓝色为主轴方向，紫色的为次轴方向，这是默认的排列方式\nflex-direction有四种取值：\n- row，默认水平方向从左向右排列，水平为主轴，垂直为次轴，主轴延伸方向：左–>右\n- row-reverse，水平方向反向排列，水平为主轴，垂直为次轴，主轴延伸方向：右–>左\n- column，垂直方向从上向下排列，垂直方向为主轴，水平方向为次轴，主轴延伸方向：上–>下\n- column-reverse，垂直方向反向排列，垂直方向为主轴，水平方向为次轴，主轴延伸方向：下–>上\n\n效果见[flex-demo-01](http://sandbox.runjs.cn/show/mf8negpu)\n\n### flex-wrap\nflex-wrap规定子元素在**主轴**上如果排不下的时候，如何换行，默认都排在一条轴线上\n***类似于box-lines，只不过box不被支持***\nflex-direction有四种取值：\n- nowrap， 默认， 不换行\n- wrap，换行，第一行在上方\n- wrap-reverse，换行，第一行在下方\n\n效果见[flex-demo-01](http://sandbox.runjs.cn/show/mf8negpu)\n\n### flex-flow\nflex-flow是flex-direction和flex-wrap的简写形式，默认值为：row nowrap\n\n    flex-flow: flex-direction  flex-wrap\n\n### justify-content\njustify-content规定子元素在**主轴**方向上对齐方式，默认为:flex-start,沿着**主轴的延伸方向**在起点处放置\n***类似于box-pack***\njustify-content有5种取值\n- flex-start，子元素放置于主轴延伸方向的起点处，比如：正向水平排列时，在左边;反向水平排列时，在右边;垂直正向排列时，在上边;以此类推\n- flex-end，子元素放置于主轴延伸方向的终点处，比如：正向水平排列时，在右边;反向水平排列时，在左边;垂直正向排列时，在下边;以此类推\n- center，子元素放置于主轴延伸方向的中点处，两边的剩余空间平均分布\n- space-between，两端对齐，元素之间的间隔都相等，与box-pack=justify类似\n- space-around，每个元素两侧的间隔相等，项目之间的间隔比项目与边框的间隔大一倍\n\n效果见[flex-demo-01](http://sandbox.runjs.cn/show/mf8negpu)\n\n### align-items\nalign-items规定子元素在**次轴**方向上对齐方式，默认为:start,沿着**次轴的延伸方向**在起点处放置\n***类似于box-align***\nalign-items有5种取值\n- flex-start，子元素放置于次轴延伸方向的起点处，比如：正向水平排列时，在上边;垂直正向排列时，在左边;以此类推\n- flex-end，子元素放置于次轴延伸方向的起终点处，比如：正向水平排列时，在下边;垂直正向排列时，在右边;以此类推\n- center，子元素放置于次轴延伸方向的中点处，两边的剩余空间平均分布\n- baseline，如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐\n- stretch ，默认，拉伸子元素以填充包含块,\n\n效果见：\n[flex-demo-01](http://sandbox.runjs.cn/show/mf8negpu)\n[flex-demo-02](http://sandbox.runjs.cn/show/jzn8ccbn)\n\n### align-content\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用\n\n### order\norder属性规定框中子元素的显示次序，数值越小，排列越靠前，默认为0\n***类似于box-ordinal-group***\n\n    box-ordinal-group: N; //正整数，不可负值\n\n此属性可以突破子元素的书写顺序，根据需要将元素按照规定顺序排列，N值越小，排列越靠前\n\n### flex-grow\nflex-grow规定各个子元素对父框剩余空间的分配比例\n***类似于box-flex***\n\n    flex-grow: N;\n\n默认为0，即如果存在剩余空间，不要空间来填充\n\n### flex-shrink\nflex-shrink定义了元素的缩小比例，默认为1，即如果空间不足，该项目将缩小\n\n    flex-shrink: N;\n\n- 如果所有元素的flex-shrink属性都为1，当空间不足时，都将等比例缩小\n- 如果一个项目的flex-shrink属性为0，则空间不足时，不缩小\n\n### flex-basis\nflex-basis定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间。\n默认值为auto，即项目的本来大小\n***类似于box-flex中设置固定尺寸***\n\n    flex-basis: Npx 或 auto;\n\n### flex\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写\n\n    flex：flex-grow flex-shrink flex-basis;\n\n默认值为0 1 auto,后两个属性可选\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)\n\n### align-self\nalign-self属性允许单个元素有不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n\n效果见：[flex-demo-03](http://sandbox.runjs.cn/show/0anfzaii)\n\n参考：\n[Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n<style>\n.father{\n  height:120px;\n  width:240px;\n  border:solid 1px;\n  margin:auto;\n  margin-top:20px;\n  position:relative;\n}\n.son1{\n height:0px;\n width:100%;\n border:solid 1px #0000ff;\n position:absolute;\n top:50%;\n}\n.son1::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:97%;\n top:-6px;\n border-width: 6px 12px;\n border-style: solid;\n border-color: transparent transparent transparent #0000ff;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n.son2{\n height:100%;\n width:0;\n border:solid 1px #8a00e6;\n position:absolute;\n left:50%;\n top:0%;\n}\n.son2::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:-5px;\n top:-14px;\n border-width: 12px 6px;\n border-style: solid;\n border-color: transparent transparent #8a00e6 transparent;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n</style>\n\n","slug":"css3-flex","published":1,"updated":"2018-01-21T08:58:24.829Z","layout":"post","photos":[],"link":"","_id":"cjqwe426v0026or0blarj4yos","content":"<p>Flex是一种弹性布局框，和上一篇讲的box特别像，可以说是Box的增强版，能够实现box支持的所有，也增加和简化了部分属性功能<br><a id=\"more\"></a></p>\n<p>Flex的声明如下：</p>\n<pre><code>display: -webkit-flex; /* Safari */\ndisplay: flex;\n</code></pre><blockquote>\n<p>设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效</p>\n</blockquote>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>flex-direction规定子元素的排列方向和顺序，同时也设定了<strong>主轴和次轴</strong>的方向，默认是水平方向<br><strong><em>相当于box-orient + box-direction</em></strong></p>\n<div class=\"father\"><br>  <div class=\"son1\">主轴</div><br>  <div class=\"son2\">次轴</div><br></div>\n\n<p>如图所示，蓝色为主轴方向，紫色的为次轴方向，这是默认的排列方式<br>flex-direction有四种取值：</p>\n<ul>\n<li>row，默认水平方向从左向右排列，水平为主轴，垂直为次轴，主轴延伸方向：左–&gt;右</li>\n<li>row-reverse，水平方向反向排列，水平为主轴，垂直为次轴，主轴延伸方向：右–&gt;左</li>\n<li>column，垂直方向从上向下排列，垂直方向为主轴，水平方向为次轴，主轴延伸方向：上–&gt;下</li>\n<li>column-reverse，垂直方向反向排列，垂直方向为主轴，水平方向为次轴，主轴延伸方向：下–&gt;上</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/mf8negpu\" target=\"_blank\" rel=\"external\">flex-demo-01</a></p>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><p>flex-wrap规定子元素在<strong>主轴</strong>上如果排不下的时候，如何换行，默认都排在一条轴线上<br><strong><em>类似于box-lines，只不过box不被支持</em></strong><br>flex-direction有四种取值：</p>\n<ul>\n<li>nowrap， 默认， 不换行</li>\n<li>wrap，换行，第一行在上方</li>\n<li>wrap-reverse，换行，第一行在下方</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/mf8negpu\" target=\"_blank\" rel=\"external\">flex-demo-01</a></p>\n<h3 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h3><p>flex-flow是flex-direction和flex-wrap的简写形式，默认值为：row nowrap</p>\n<pre><code>flex-flow: flex-direction  flex-wrap\n</code></pre><h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h3><p>justify-content规定子元素在<strong>主轴</strong>方向上对齐方式，默认为:flex-start,沿着<strong>主轴的延伸方向</strong>在起点处放置<br><strong><em>类似于box-pack</em></strong><br>justify-content有5种取值</p>\n<ul>\n<li>flex-start，子元素放置于主轴延伸方向的起点处，比如：正向水平排列时，在左边;反向水平排列时，在右边;垂直正向排列时，在上边;以此类推</li>\n<li>flex-end，子元素放置于主轴延伸方向的终点处，比如：正向水平排列时，在右边;反向水平排列时，在左边;垂直正向排列时，在下边;以此类推</li>\n<li>center，子元素放置于主轴延伸方向的中点处，两边的剩余空间平均分布</li>\n<li>space-between，两端对齐，元素之间的间隔都相等，与box-pack=justify类似</li>\n<li>space-around，每个元素两侧的间隔相等，项目之间的间隔比项目与边框的间隔大一倍</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/mf8negpu\" target=\"_blank\" rel=\"external\">flex-demo-01</a></p>\n<h3 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h3><p>align-items规定子元素在<strong>次轴</strong>方向上对齐方式，默认为:start,沿着<strong>次轴的延伸方向</strong>在起点处放置<br><strong><em>类似于box-align</em></strong><br>align-items有5种取值</p>\n<ul>\n<li>flex-start，子元素放置于次轴延伸方向的起点处，比如：正向水平排列时，在上边;垂直正向排列时，在左边;以此类推</li>\n<li>flex-end，子元素放置于次轴延伸方向的起终点处，比如：正向水平排列时，在下边;垂直正向排列时，在右边;以此类推</li>\n<li>center，子元素放置于次轴延伸方向的中点处，两边的剩余空间平均分布</li>\n<li>baseline，如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐</li>\n<li>stretch ，默认，拉伸子元素以填充包含块,</li>\n</ul>\n<p>效果见：<br><a href=\"http://sandbox.runjs.cn/show/mf8negpu\" target=\"_blank\" rel=\"external\">flex-demo-01</a><br><a href=\"http://sandbox.runjs.cn/show/jzn8ccbn\" target=\"_blank\" rel=\"external\">flex-demo-02</a></p>\n<h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p>order属性规定框中子元素的显示次序，数值越小，排列越靠前，默认为0<br><strong><em>类似于box-ordinal-group</em></strong></p>\n<pre><code>box-ordinal-group: N; //正整数，不可负值\n</code></pre><p>此属性可以突破子元素的书写顺序，根据需要将元素按照规定顺序排列，N值越小，排列越靠前</p>\n<h3 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h3><p>flex-grow规定各个子元素对父框剩余空间的分配比例<br><strong><em>类似于box-flex</em></strong></p>\n<pre><code>flex-grow: N;\n</code></pre><p>默认为0，即如果存在剩余空间，不要空间来填充</p>\n<h3 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h3><p>flex-shrink定义了元素的缩小比例，默认为1，即如果空间不足，该项目将缩小</p>\n<pre><code>flex-shrink: N;\n</code></pre><ul>\n<li>如果所有元素的flex-shrink属性都为1，当空间不足时，都将等比例缩小</li>\n<li>如果一个项目的flex-shrink属性为0，则空间不足时，不缩小</li>\n</ul>\n<h3 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h3><p>flex-basis定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间。<br>默认值为auto，即项目的本来大小<br><strong><em>类似于box-flex中设置固定尺寸</em></strong></p>\n<pre><code>flex-basis: Npx 或 auto;\n</code></pre><h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写</p>\n<pre><code>flex：flex-grow flex-shrink flex-basis;\n</code></pre><p>默认值为0 1 auto,后两个属性可选<br>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)</p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p>align-self属性允许单个元素有不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n<pre><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;\n</code></pre><p>效果见：<a href=\"http://sandbox.runjs.cn/show/0anfzaii\" target=\"_blank\" rel=\"external\">flex-demo-03</a></p>\n<p>参考：<br><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">Flex 布局教程：语法篇</a></p>\n<style>\n.father{\n  height:120px;\n  width:240px;\n  border:solid 1px;\n  margin:auto;\n  margin-top:20px;\n  position:relative;\n}\n.son1{\n height:0px;\n width:100%;\n border:solid 1px #0000ff;\n position:absolute;\n top:50%;\n}\n.son1::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:97%;\n top:-6px;\n border-width: 6px 12px;\n border-style: solid;\n border-color: transparent transparent transparent #0000ff;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n.son2{\n height:100%;\n width:0;\n border:solid 1px #8a00e6;\n position:absolute;\n left:50%;\n top:0%;\n}\n.son2::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:-5px;\n top:-14px;\n border-width: 12px 6px;\n border-style: solid;\n border-color: transparent transparent #8a00e6 transparent;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n</style>\n\n","site":{"data":{}},"excerpt":"<p>Flex是一种弹性布局框，和上一篇讲的box特别像，可以说是Box的增强版，能够实现box支持的所有，也增加和简化了部分属性功能<br>","more":"</p>\n<p>Flex的声明如下：</p>\n<pre><code>display: -webkit-flex; /* Safari */\ndisplay: flex;\n</code></pre><blockquote>\n<p>设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效</p>\n</blockquote>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>flex-direction规定子元素的排列方向和顺序，同时也设定了<strong>主轴和次轴</strong>的方向，默认是水平方向<br><strong><em>相当于box-orient + box-direction</em></strong></p>\n<div class=\"father\"><br>  <div class=\"son1\">主轴</div><br>  <div class=\"son2\">次轴</div><br></div>\n\n<p>如图所示，蓝色为主轴方向，紫色的为次轴方向，这是默认的排列方式<br>flex-direction有四种取值：</p>\n<ul>\n<li>row，默认水平方向从左向右排列，水平为主轴，垂直为次轴，主轴延伸方向：左–&gt;右</li>\n<li>row-reverse，水平方向反向排列，水平为主轴，垂直为次轴，主轴延伸方向：右–&gt;左</li>\n<li>column，垂直方向从上向下排列，垂直方向为主轴，水平方向为次轴，主轴延伸方向：上–&gt;下</li>\n<li>column-reverse，垂直方向反向排列，垂直方向为主轴，水平方向为次轴，主轴延伸方向：下–&gt;上</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/mf8negpu\" target=\"_blank\" rel=\"external\">flex-demo-01</a></p>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><p>flex-wrap规定子元素在<strong>主轴</strong>上如果排不下的时候，如何换行，默认都排在一条轴线上<br><strong><em>类似于box-lines，只不过box不被支持</em></strong><br>flex-direction有四种取值：</p>\n<ul>\n<li>nowrap， 默认， 不换行</li>\n<li>wrap，换行，第一行在上方</li>\n<li>wrap-reverse，换行，第一行在下方</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/mf8negpu\" target=\"_blank\" rel=\"external\">flex-demo-01</a></p>\n<h3 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h3><p>flex-flow是flex-direction和flex-wrap的简写形式，默认值为：row nowrap</p>\n<pre><code>flex-flow: flex-direction  flex-wrap\n</code></pre><h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h3><p>justify-content规定子元素在<strong>主轴</strong>方向上对齐方式，默认为:flex-start,沿着<strong>主轴的延伸方向</strong>在起点处放置<br><strong><em>类似于box-pack</em></strong><br>justify-content有5种取值</p>\n<ul>\n<li>flex-start，子元素放置于主轴延伸方向的起点处，比如：正向水平排列时，在左边;反向水平排列时，在右边;垂直正向排列时，在上边;以此类推</li>\n<li>flex-end，子元素放置于主轴延伸方向的终点处，比如：正向水平排列时，在右边;反向水平排列时，在左边;垂直正向排列时，在下边;以此类推</li>\n<li>center，子元素放置于主轴延伸方向的中点处，两边的剩余空间平均分布</li>\n<li>space-between，两端对齐，元素之间的间隔都相等，与box-pack=justify类似</li>\n<li>space-around，每个元素两侧的间隔相等，项目之间的间隔比项目与边框的间隔大一倍</li>\n</ul>\n<p>效果见<a href=\"http://sandbox.runjs.cn/show/mf8negpu\" target=\"_blank\" rel=\"external\">flex-demo-01</a></p>\n<h3 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h3><p>align-items规定子元素在<strong>次轴</strong>方向上对齐方式，默认为:start,沿着<strong>次轴的延伸方向</strong>在起点处放置<br><strong><em>类似于box-align</em></strong><br>align-items有5种取值</p>\n<ul>\n<li>flex-start，子元素放置于次轴延伸方向的起点处，比如：正向水平排列时，在上边;垂直正向排列时，在左边;以此类推</li>\n<li>flex-end，子元素放置于次轴延伸方向的起终点处，比如：正向水平排列时，在下边;垂直正向排列时，在右边;以此类推</li>\n<li>center，子元素放置于次轴延伸方向的中点处，两边的剩余空间平均分布</li>\n<li>baseline，如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐</li>\n<li>stretch ，默认，拉伸子元素以填充包含块,</li>\n</ul>\n<p>效果见：<br><a href=\"http://sandbox.runjs.cn/show/mf8negpu\" target=\"_blank\" rel=\"external\">flex-demo-01</a><br><a href=\"http://sandbox.runjs.cn/show/jzn8ccbn\" target=\"_blank\" rel=\"external\">flex-demo-02</a></p>\n<h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p>order属性规定框中子元素的显示次序，数值越小，排列越靠前，默认为0<br><strong><em>类似于box-ordinal-group</em></strong></p>\n<pre><code>box-ordinal-group: N; //正整数，不可负值\n</code></pre><p>此属性可以突破子元素的书写顺序，根据需要将元素按照规定顺序排列，N值越小，排列越靠前</p>\n<h3 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h3><p>flex-grow规定各个子元素对父框剩余空间的分配比例<br><strong><em>类似于box-flex</em></strong></p>\n<pre><code>flex-grow: N;\n</code></pre><p>默认为0，即如果存在剩余空间，不要空间来填充</p>\n<h3 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h3><p>flex-shrink定义了元素的缩小比例，默认为1，即如果空间不足，该项目将缩小</p>\n<pre><code>flex-shrink: N;\n</code></pre><ul>\n<li>如果所有元素的flex-shrink属性都为1，当空间不足时，都将等比例缩小</li>\n<li>如果一个项目的flex-shrink属性为0，则空间不足时，不缩小</li>\n</ul>\n<h3 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h3><p>flex-basis定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间。<br>默认值为auto，即项目的本来大小<br><strong><em>类似于box-flex中设置固定尺寸</em></strong></p>\n<pre><code>flex-basis: Npx 或 auto;\n</code></pre><h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写</p>\n<pre><code>flex：flex-grow flex-shrink flex-basis;\n</code></pre><p>默认值为0 1 auto,后两个属性可选<br>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)</p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p>align-self属性允许单个元素有不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n<pre><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;\n</code></pre><p>效果见：<a href=\"http://sandbox.runjs.cn/show/0anfzaii\" target=\"_blank\" rel=\"external\">flex-demo-03</a></p>\n<p>参考：<br><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">Flex 布局教程：语法篇</a></p>\n<style>\n.father{\n  height:120px;\n  width:240px;\n  border:solid 1px;\n  margin:auto;\n  margin-top:20px;\n  position:relative;\n}\n.son1{\n height:0px;\n width:100%;\n border:solid 1px #0000ff;\n position:absolute;\n top:50%;\n}\n.son1::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:97%;\n top:-6px;\n border-width: 6px 12px;\n border-style: solid;\n border-color: transparent transparent transparent #0000ff;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n.son2{\n height:100%;\n width:0;\n border:solid 1px #8a00e6;\n position:absolute;\n left:50%;\n top:0%;\n}\n.son2::after{\n content:\"\";\n display:inline-block;\n position:absolute;\n left:-5px;\n top:-14px;\n border-width: 12px 6px;\n border-style: solid;\n border-color: transparent transparent #8a00e6 transparent;\n border-radius: 4px 0 0 4px/4px 0 0 4px;\n}\n</style>"},{"title":"设计模式三","date":"2018-03-18T12:08:42.000Z","comments":1,"_content":"\n本节介绍几种结构型模式，看着比较相似，比较容易混淆，在此描述希望有所区分\n<!--more-->\n\n### 装饰器模式\n装饰器模式主要是为了复用现有对象和类，在不修改现有类的前提下添加新功能。\n一般扩展类功能通常采用继承来实现，而装饰器可直接扩展新功能，防止继承造成的子类膨胀\n下面以X战警的例子来举个例子，X-man是变异人，是在普通人类的基础上拥有特殊能力的一类人：\n\n    class Person {\n        string name;\n\n        Person(string name) {name = name;}\n        ~Person() {name = \"\";}\n\n        void display() {\n            cout << \"===名字：\" << name << endl;\n        }\n    }\n    class Man: public Person {\n        Man(string name): Person(name) {}\n        ~Man() {}\n    }\n    class Woman: public Person {\n        Woman(string name): Person(name) {}\n        ~Woman() {}\n    }\n    class Skill{\n        string m_skill;\n        Skill(string skill) {m_skill = skill;}\n        ~Skill() {m_skill = \"\";}\n        void display() {\n            cout << m_skill << \" ; \";\n        }\n    }\n\n    class XMan {\n        Person m_tPerson;\n        Skill m_skillList = [];\n\n        XMan(Person person) {\n            m_tPerson = person;\n        }\n        ~XMan() {m_skillList = [];}\n\n        void addSkill(Skill skill) {\n            m_skillList.push(skill);\n        }\n        void display() {\n            m_tPerson.display();\n            cout << \"技能：\" << endl;\n            for(int index=0;index < m_skillList.length;index++) {\n                m_skillList[index].display();\n            }\n            cout << endl;\n        }\n    }\n    //暴风女\n    class Storm: public XMan {\n        Storm(Person person): XMan(person) {}\n        ~Storm() {}\n    }\n    //镭射眼\n    class Cyclops: public XMan {\n        Cyclops(Person person): XMan(person) {}\n        ~Cyclops() {}\n    }\n    //金刚狼\n    class Wolverine: public XMan {\n        Wolverine(Person person): XMan(person) {}\n        ~Wolverine() {}\n    }\n\n    int main() {\n        XMan storm = new Storm(new Woman(\"暴风女\"));\n        storm.addSkill(new Skill(\"操纵雷电\"));\n        storm.addSkill(new Skill(\"操纵暴风\"));\n        storm.addSkill(new Skill(\"操纵龙卷风\"));\n        storm.display();\n        XMan cyclops = new Storm(new Man(\"镭射眼\"));\n        cyclops.addSkill(new Skill(\"发射冲击波\"));\n        cyclops.display();\n        XMan wolverine = new Wolverine(new Man(\"金刚狼\"));\n        wolverine.addSkill(new Skill(\"延缓衰老\"));\n        wolverine.addSkill(new Skill(\"自愈\"));\n        wolverine.addSkill(new Skill(\"金刚爪\"));\n        wolverine.display();\n    }\n\n输出：\n===名字：暴风女\n技能 ： 操纵雷电; 操纵暴风; 操纵龙卷风;\n===名字：镭射眼\n技能 ： 发射冲击波;\n===名字：金刚狼\n技能 ： 延缓衰老; 自愈; 金刚爪;\n\n### 代理模式\n代理模式是新增代理类来对基础类进行访问控制的一种设计手段，由代理类提供调用接口，隐藏基础类的直接访问，此外还可以完成其他事物处理，包括：\n\n- 隐藏基础类访问的复杂性\n- 控制外部用户对基础类的直接访问，比如：进行访问算法优化\n- 中间代理层可以对访问方式进行转化，比如：用户加解密\n\n以访问数据库的代理处理为例：\n\n    class DataBase {\n        OracleDB m_db;\n        DataBase() {}\n        ~DataBase() {}\n\n        object getData(string id) {\n            return m_db.get(id);\n        }\n\n        void writeData(object data) {\n            m_db.write(data);\n        }\n\n        void deleteData(string id) {\n            m_db.delete(id);\n        }\n    }\n    class UserService {\n        string userName;\n        string password;\n        UserService(string name,string pwd) {\n            userName = name;\n            password = pwd;\n        }\n        ~UserService() {}\n\n        boolean testUser(string name,string pwd) {\n            return (userName == name) && (password == pwd);\n        }\n    }\n    class DataBaseService {\n        DataBase m_database;\n        UserService m_user = new UserService(\"aaa\",\"123456\");\n        DataBaseService() {}\n        ~DataBaseService() {}\n\n        object get(string id) {\n            m_database.getData(id);\n        }\n\n        void del(string id,string name,string pwd) {\n            if(m_user.testUser(name,pwd)) {\n                m_database.deleteData(id);\n            }\n        }\n\n        void post(object data,string name,string pwd) {\n            if(m_user.testUser(name,pwd)) {\n                m_database.writeData(id);\n            }\n        }\n    }\n\n    int main() {\n        DataBaseService dbService.;\n        dbService.post(data,\"aaa\",\"123456\");\n        dbService.get(\"aaa\");\n        dbService.del(\"aaa\");\n    }\n\n\n### 外观模式\n\n### 代理模式","source":"_posts/2018-03-18-design-pattern-3.md","raw":"---\ntitle: 设计模式三\ndate: 2018-03-18 20:08:42\ntags: 设计\ncategories: 后端\ncomments: true\n---\n\n本节介绍几种结构型模式，看着比较相似，比较容易混淆，在此描述希望有所区分\n<!--more-->\n\n### 装饰器模式\n装饰器模式主要是为了复用现有对象和类，在不修改现有类的前提下添加新功能。\n一般扩展类功能通常采用继承来实现，而装饰器可直接扩展新功能，防止继承造成的子类膨胀\n下面以X战警的例子来举个例子，X-man是变异人，是在普通人类的基础上拥有特殊能力的一类人：\n\n    class Person {\n        string name;\n\n        Person(string name) {name = name;}\n        ~Person() {name = \"\";}\n\n        void display() {\n            cout << \"===名字：\" << name << endl;\n        }\n    }\n    class Man: public Person {\n        Man(string name): Person(name) {}\n        ~Man() {}\n    }\n    class Woman: public Person {\n        Woman(string name): Person(name) {}\n        ~Woman() {}\n    }\n    class Skill{\n        string m_skill;\n        Skill(string skill) {m_skill = skill;}\n        ~Skill() {m_skill = \"\";}\n        void display() {\n            cout << m_skill << \" ; \";\n        }\n    }\n\n    class XMan {\n        Person m_tPerson;\n        Skill m_skillList = [];\n\n        XMan(Person person) {\n            m_tPerson = person;\n        }\n        ~XMan() {m_skillList = [];}\n\n        void addSkill(Skill skill) {\n            m_skillList.push(skill);\n        }\n        void display() {\n            m_tPerson.display();\n            cout << \"技能：\" << endl;\n            for(int index=0;index < m_skillList.length;index++) {\n                m_skillList[index].display();\n            }\n            cout << endl;\n        }\n    }\n    //暴风女\n    class Storm: public XMan {\n        Storm(Person person): XMan(person) {}\n        ~Storm() {}\n    }\n    //镭射眼\n    class Cyclops: public XMan {\n        Cyclops(Person person): XMan(person) {}\n        ~Cyclops() {}\n    }\n    //金刚狼\n    class Wolverine: public XMan {\n        Wolverine(Person person): XMan(person) {}\n        ~Wolverine() {}\n    }\n\n    int main() {\n        XMan storm = new Storm(new Woman(\"暴风女\"));\n        storm.addSkill(new Skill(\"操纵雷电\"));\n        storm.addSkill(new Skill(\"操纵暴风\"));\n        storm.addSkill(new Skill(\"操纵龙卷风\"));\n        storm.display();\n        XMan cyclops = new Storm(new Man(\"镭射眼\"));\n        cyclops.addSkill(new Skill(\"发射冲击波\"));\n        cyclops.display();\n        XMan wolverine = new Wolverine(new Man(\"金刚狼\"));\n        wolverine.addSkill(new Skill(\"延缓衰老\"));\n        wolverine.addSkill(new Skill(\"自愈\"));\n        wolverine.addSkill(new Skill(\"金刚爪\"));\n        wolverine.display();\n    }\n\n输出：\n===名字：暴风女\n技能 ： 操纵雷电; 操纵暴风; 操纵龙卷风;\n===名字：镭射眼\n技能 ： 发射冲击波;\n===名字：金刚狼\n技能 ： 延缓衰老; 自愈; 金刚爪;\n\n### 代理模式\n代理模式是新增代理类来对基础类进行访问控制的一种设计手段，由代理类提供调用接口，隐藏基础类的直接访问，此外还可以完成其他事物处理，包括：\n\n- 隐藏基础类访问的复杂性\n- 控制外部用户对基础类的直接访问，比如：进行访问算法优化\n- 中间代理层可以对访问方式进行转化，比如：用户加解密\n\n以访问数据库的代理处理为例：\n\n    class DataBase {\n        OracleDB m_db;\n        DataBase() {}\n        ~DataBase() {}\n\n        object getData(string id) {\n            return m_db.get(id);\n        }\n\n        void writeData(object data) {\n            m_db.write(data);\n        }\n\n        void deleteData(string id) {\n            m_db.delete(id);\n        }\n    }\n    class UserService {\n        string userName;\n        string password;\n        UserService(string name,string pwd) {\n            userName = name;\n            password = pwd;\n        }\n        ~UserService() {}\n\n        boolean testUser(string name,string pwd) {\n            return (userName == name) && (password == pwd);\n        }\n    }\n    class DataBaseService {\n        DataBase m_database;\n        UserService m_user = new UserService(\"aaa\",\"123456\");\n        DataBaseService() {}\n        ~DataBaseService() {}\n\n        object get(string id) {\n            m_database.getData(id);\n        }\n\n        void del(string id,string name,string pwd) {\n            if(m_user.testUser(name,pwd)) {\n                m_database.deleteData(id);\n            }\n        }\n\n        void post(object data,string name,string pwd) {\n            if(m_user.testUser(name,pwd)) {\n                m_database.writeData(id);\n            }\n        }\n    }\n\n    int main() {\n        DataBaseService dbService.;\n        dbService.post(data,\"aaa\",\"123456\");\n        dbService.get(\"aaa\");\n        dbService.del(\"aaa\");\n    }\n\n\n### 外观模式\n\n### 代理模式","slug":"design-pattern-3","published":1,"updated":"2018-03-22T15:48:53.876Z","layout":"post","photos":[],"link":"","_id":"cjqwe426x0029or0brfvhgc3q","content":"<p>本节介绍几种结构型模式，看着比较相似，比较容易混淆，在此描述希望有所区分<br><a id=\"more\"></a></p>\n<h3 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h3><p>装饰器模式主要是为了复用现有对象和类，在不修改现有类的前提下添加新功能。<br>一般扩展类功能通常采用继承来实现，而装饰器可直接扩展新功能，防止继承造成的子类膨胀<br>下面以X战警的例子来举个例子，X-man是变异人，是在普通人类的基础上拥有特殊能力的一类人：</p>\n<pre><code>class Person {\n    string name;\n\n    Person(string name) {name = name;}\n    ~Person() {name = &quot;&quot;;}\n\n    void display() {\n        cout &lt;&lt; &quot;===名字：&quot; &lt;&lt; name &lt;&lt; endl;\n    }\n}\nclass Man: public Person {\n    Man(string name): Person(name) {}\n    ~Man() {}\n}\nclass Woman: public Person {\n    Woman(string name): Person(name) {}\n    ~Woman() {}\n}\nclass Skill{\n    string m_skill;\n    Skill(string skill) {m_skill = skill;}\n    ~Skill() {m_skill = &quot;&quot;;}\n    void display() {\n        cout &lt;&lt; m_skill &lt;&lt; &quot; ; &quot;;\n    }\n}\n\nclass XMan {\n    Person m_tPerson;\n    Skill m_skillList = [];\n\n    XMan(Person person) {\n        m_tPerson = person;\n    }\n    ~XMan() {m_skillList = [];}\n\n    void addSkill(Skill skill) {\n        m_skillList.push(skill);\n    }\n    void display() {\n        m_tPerson.display();\n        cout &lt;&lt; &quot;技能：&quot; &lt;&lt; endl;\n        for(int index=0;index &lt; m_skillList.length;index++) {\n            m_skillList[index].display();\n        }\n        cout &lt;&lt; endl;\n    }\n}\n//暴风女\nclass Storm: public XMan {\n    Storm(Person person): XMan(person) {}\n    ~Storm() {}\n}\n//镭射眼\nclass Cyclops: public XMan {\n    Cyclops(Person person): XMan(person) {}\n    ~Cyclops() {}\n}\n//金刚狼\nclass Wolverine: public XMan {\n    Wolverine(Person person): XMan(person) {}\n    ~Wolverine() {}\n}\n\nint main() {\n    XMan storm = new Storm(new Woman(&quot;暴风女&quot;));\n    storm.addSkill(new Skill(&quot;操纵雷电&quot;));\n    storm.addSkill(new Skill(&quot;操纵暴风&quot;));\n    storm.addSkill(new Skill(&quot;操纵龙卷风&quot;));\n    storm.display();\n    XMan cyclops = new Storm(new Man(&quot;镭射眼&quot;));\n    cyclops.addSkill(new Skill(&quot;发射冲击波&quot;));\n    cyclops.display();\n    XMan wolverine = new Wolverine(new Man(&quot;金刚狼&quot;));\n    wolverine.addSkill(new Skill(&quot;延缓衰老&quot;));\n    wolverine.addSkill(new Skill(&quot;自愈&quot;));\n    wolverine.addSkill(new Skill(&quot;金刚爪&quot;));\n    wolverine.display();\n}\n</code></pre><p>输出：<br>===名字：暴风女<br>技能 ： 操纵雷电; 操纵暴风; 操纵龙卷风;<br>===名字：镭射眼<br>技能 ： 发射冲击波;<br>===名字：金刚狼<br>技能 ： 延缓衰老; 自愈; 金刚爪;</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>代理模式是新增代理类来对基础类进行访问控制的一种设计手段，由代理类提供调用接口，隐藏基础类的直接访问，此外还可以完成其他事物处理，包括：</p>\n<ul>\n<li>隐藏基础类访问的复杂性</li>\n<li>控制外部用户对基础类的直接访问，比如：进行访问算法优化</li>\n<li>中间代理层可以对访问方式进行转化，比如：用户加解密</li>\n</ul>\n<p>以访问数据库的代理处理为例：</p>\n<pre><code>class DataBase {\n    OracleDB m_db;\n    DataBase() {}\n    ~DataBase() {}\n\n    object getData(string id) {\n        return m_db.get(id);\n    }\n\n    void writeData(object data) {\n        m_db.write(data);\n    }\n\n    void deleteData(string id) {\n        m_db.delete(id);\n    }\n}\nclass UserService {\n    string userName;\n    string password;\n    UserService(string name,string pwd) {\n        userName = name;\n        password = pwd;\n    }\n    ~UserService() {}\n\n    boolean testUser(string name,string pwd) {\n        return (userName == name) &amp;&amp; (password == pwd);\n    }\n}\nclass DataBaseService {\n    DataBase m_database;\n    UserService m_user = new UserService(&quot;aaa&quot;,&quot;123456&quot;);\n    DataBaseService() {}\n    ~DataBaseService() {}\n\n    object get(string id) {\n        m_database.getData(id);\n    }\n\n    void del(string id,string name,string pwd) {\n        if(m_user.testUser(name,pwd)) {\n            m_database.deleteData(id);\n        }\n    }\n\n    void post(object data,string name,string pwd) {\n        if(m_user.testUser(name,pwd)) {\n            m_database.writeData(id);\n        }\n    }\n}\n\nint main() {\n    DataBaseService dbService.;\n    dbService.post(data,&quot;aaa&quot;,&quot;123456&quot;);\n    dbService.get(&quot;aaa&quot;);\n    dbService.del(&quot;aaa&quot;);\n}\n</code></pre><h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><h3 id=\"代理模式-1\"><a href=\"#代理模式-1\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3>","site":{"data":{}},"excerpt":"<p>本节介绍几种结构型模式，看着比较相似，比较容易混淆，在此描述希望有所区分<br>","more":"</p>\n<h3 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h3><p>装饰器模式主要是为了复用现有对象和类，在不修改现有类的前提下添加新功能。<br>一般扩展类功能通常采用继承来实现，而装饰器可直接扩展新功能，防止继承造成的子类膨胀<br>下面以X战警的例子来举个例子，X-man是变异人，是在普通人类的基础上拥有特殊能力的一类人：</p>\n<pre><code>class Person {\n    string name;\n\n    Person(string name) {name = name;}\n    ~Person() {name = &quot;&quot;;}\n\n    void display() {\n        cout &lt;&lt; &quot;===名字：&quot; &lt;&lt; name &lt;&lt; endl;\n    }\n}\nclass Man: public Person {\n    Man(string name): Person(name) {}\n    ~Man() {}\n}\nclass Woman: public Person {\n    Woman(string name): Person(name) {}\n    ~Woman() {}\n}\nclass Skill{\n    string m_skill;\n    Skill(string skill) {m_skill = skill;}\n    ~Skill() {m_skill = &quot;&quot;;}\n    void display() {\n        cout &lt;&lt; m_skill &lt;&lt; &quot; ; &quot;;\n    }\n}\n\nclass XMan {\n    Person m_tPerson;\n    Skill m_skillList = [];\n\n    XMan(Person person) {\n        m_tPerson = person;\n    }\n    ~XMan() {m_skillList = [];}\n\n    void addSkill(Skill skill) {\n        m_skillList.push(skill);\n    }\n    void display() {\n        m_tPerson.display();\n        cout &lt;&lt; &quot;技能：&quot; &lt;&lt; endl;\n        for(int index=0;index &lt; m_skillList.length;index++) {\n            m_skillList[index].display();\n        }\n        cout &lt;&lt; endl;\n    }\n}\n//暴风女\nclass Storm: public XMan {\n    Storm(Person person): XMan(person) {}\n    ~Storm() {}\n}\n//镭射眼\nclass Cyclops: public XMan {\n    Cyclops(Person person): XMan(person) {}\n    ~Cyclops() {}\n}\n//金刚狼\nclass Wolverine: public XMan {\n    Wolverine(Person person): XMan(person) {}\n    ~Wolverine() {}\n}\n\nint main() {\n    XMan storm = new Storm(new Woman(&quot;暴风女&quot;));\n    storm.addSkill(new Skill(&quot;操纵雷电&quot;));\n    storm.addSkill(new Skill(&quot;操纵暴风&quot;));\n    storm.addSkill(new Skill(&quot;操纵龙卷风&quot;));\n    storm.display();\n    XMan cyclops = new Storm(new Man(&quot;镭射眼&quot;));\n    cyclops.addSkill(new Skill(&quot;发射冲击波&quot;));\n    cyclops.display();\n    XMan wolverine = new Wolverine(new Man(&quot;金刚狼&quot;));\n    wolverine.addSkill(new Skill(&quot;延缓衰老&quot;));\n    wolverine.addSkill(new Skill(&quot;自愈&quot;));\n    wolverine.addSkill(new Skill(&quot;金刚爪&quot;));\n    wolverine.display();\n}\n</code></pre><p>输出：<br>===名字：暴风女<br>技能 ： 操纵雷电; 操纵暴风; 操纵龙卷风;<br>===名字：镭射眼<br>技能 ： 发射冲击波;<br>===名字：金刚狼<br>技能 ： 延缓衰老; 自愈; 金刚爪;</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>代理模式是新增代理类来对基础类进行访问控制的一种设计手段，由代理类提供调用接口，隐藏基础类的直接访问，此外还可以完成其他事物处理，包括：</p>\n<ul>\n<li>隐藏基础类访问的复杂性</li>\n<li>控制外部用户对基础类的直接访问，比如：进行访问算法优化</li>\n<li>中间代理层可以对访问方式进行转化，比如：用户加解密</li>\n</ul>\n<p>以访问数据库的代理处理为例：</p>\n<pre><code>class DataBase {\n    OracleDB m_db;\n    DataBase() {}\n    ~DataBase() {}\n\n    object getData(string id) {\n        return m_db.get(id);\n    }\n\n    void writeData(object data) {\n        m_db.write(data);\n    }\n\n    void deleteData(string id) {\n        m_db.delete(id);\n    }\n}\nclass UserService {\n    string userName;\n    string password;\n    UserService(string name,string pwd) {\n        userName = name;\n        password = pwd;\n    }\n    ~UserService() {}\n\n    boolean testUser(string name,string pwd) {\n        return (userName == name) &amp;&amp; (password == pwd);\n    }\n}\nclass DataBaseService {\n    DataBase m_database;\n    UserService m_user = new UserService(&quot;aaa&quot;,&quot;123456&quot;);\n    DataBaseService() {}\n    ~DataBaseService() {}\n\n    object get(string id) {\n        m_database.getData(id);\n    }\n\n    void del(string id,string name,string pwd) {\n        if(m_user.testUser(name,pwd)) {\n            m_database.deleteData(id);\n        }\n    }\n\n    void post(object data,string name,string pwd) {\n        if(m_user.testUser(name,pwd)) {\n            m_database.writeData(id);\n        }\n    }\n}\n\nint main() {\n    DataBaseService dbService.;\n    dbService.post(data,&quot;aaa&quot;,&quot;123456&quot;);\n    dbService.get(&quot;aaa&quot;);\n    dbService.del(&quot;aaa&quot;);\n}\n</code></pre><h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><h3 id=\"代理模式-1\"><a href=\"#代理模式-1\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3>"},{"title":"Javascript-ECMAScript基础","date":"2018-04-24T16:08:35.000Z","comments":1,"_content":"\nECMAscript是Javascript的一部分，主要规定脚本的语法相关集合，和其他编程语言一样具有类型,运算符等组成部分\n<!--more-->\n\n### 1 数据类型\njs的变量是动态的，没有其他语言严格的变量类型规定，也就是变量可以被赋予任何类型的变量对象\njs有6大基本类型：\n\n- String\n- Boolean\n- Number\n- Null\n- Undefined\n- Function\n\n可以使用typeOf来测试变量的基本类型，比如：\n\n    typeOf \"I love\"  --> String\n    typeOf 123  --> Number\n    typeOf () => {}  --> Function\n\n### 运算符\njs也有其他语言的类似运算符，也有特殊的情况，比如：\n\n- == 和 !=,比较时会进行自动类型转换\n- === 和 !==，全等比较，比较时不会转换类型，换言之就是值和类型一起参与比较\n\n### 2 语句\njs的语句借鉴C语言特点，大部分语句规则和C类似，也有特殊的语言标签，比如：for-in，label标签等\n\n### 3 函数\njs中的函数是对象，函数名是对象实例名，定义方式有好几个：\n\n    function fun(x,y) { return x + y; }\n\n    var fun = function(x,y) { return x + y; };\n\n    var fun = (x,y) => { return x + y; };\n\n    var fun = new Function('x','y','return x + y;');\n\n既然函数是对象，则函数可以作为参数，变量进行赋值，甚至作为返回值，比如：\n\n    var fun2 = function fun(x,y) {\n        return (x,y) => { return 5 * x + y; };\n    }\n\n    fun2(2,3);\n    或\n    （(x,y) => {\n        return (x,y) => { return 5 * x + y; };\n     })(4,5);\n     或\n     （function() => {\n         return 123;\n      })();\n\n### 4 对象\n在js中，一切皆是对象，包括我们常用的数值，函数等，主要关系如下图：\n\n![image-2018-03-02_160947](/images/2018-03-02_160947.jpg)\n\n1.所有的对象都继承于object，所以其他子对象都具有object的公共方法，包括：toString(),valueOf()等\n2.每种基本类型都对应一种引用型对象，比如：\n\n    var a = 'hello world!'; //string - String\n\n在定义变量表达式是js引擎自动在内存创建基本类型对应的引用类型变量，所以变量自然拥有对象的方法，因为当调用方法时js引擎会自动查找对象是否有可用的方法，当变量使用完后该对象自动销毁\n3.基本类型对应的内置对象可以当作是通过“构造函数方式”利用Function/原型构建的，所以这些对象的原型constructor都是构造函数，比如:\n\n    Array => function Array() { ... }\n    Number => function Number() { ... }\n\n4.基本类型和引用类型对象的检测方式不同，基本类型使用typeOf，引用类型使用instanceOf，比如：\n\n    typeOf 123 => Number\n    typeOf '123' => String\n    typeOf [1,2,3] => object\n    typeOf null => object\n    typeOf undefined => Undefined\n    typeOf ()=> {} => Function\n\n    [1,2,3] instanceOf Array => true\n    /[0-9a-z]*/gi instanceOf RegExp => true\n\n5.既然对象都是继承于object,则可以使用object直接构造内置对象，比如：\n\n    var str = new Object(\"123\")\n    str instanceOf String = true\n\n    var num = new Object(123)\n    num instanceOf Number = true\n\n","source":"_posts/2018-04-25-Javascript-ECMAScript.md","raw":"---\ntitle: Javascript-ECMAScript基础\ndate: 2018-04-25 00:08:35\ntags: js\ncategories: 前端\ncomments: true\n---\n\nECMAscript是Javascript的一部分，主要规定脚本的语法相关集合，和其他编程语言一样具有类型,运算符等组成部分\n<!--more-->\n\n### 1 数据类型\njs的变量是动态的，没有其他语言严格的变量类型规定，也就是变量可以被赋予任何类型的变量对象\njs有6大基本类型：\n\n- String\n- Boolean\n- Number\n- Null\n- Undefined\n- Function\n\n可以使用typeOf来测试变量的基本类型，比如：\n\n    typeOf \"I love\"  --> String\n    typeOf 123  --> Number\n    typeOf () => {}  --> Function\n\n### 运算符\njs也有其他语言的类似运算符，也有特殊的情况，比如：\n\n- == 和 !=,比较时会进行自动类型转换\n- === 和 !==，全等比较，比较时不会转换类型，换言之就是值和类型一起参与比较\n\n### 2 语句\njs的语句借鉴C语言特点，大部分语句规则和C类似，也有特殊的语言标签，比如：for-in，label标签等\n\n### 3 函数\njs中的函数是对象，函数名是对象实例名，定义方式有好几个：\n\n    function fun(x,y) { return x + y; }\n\n    var fun = function(x,y) { return x + y; };\n\n    var fun = (x,y) => { return x + y; };\n\n    var fun = new Function('x','y','return x + y;');\n\n既然函数是对象，则函数可以作为参数，变量进行赋值，甚至作为返回值，比如：\n\n    var fun2 = function fun(x,y) {\n        return (x,y) => { return 5 * x + y; };\n    }\n\n    fun2(2,3);\n    或\n    （(x,y) => {\n        return (x,y) => { return 5 * x + y; };\n     })(4,5);\n     或\n     （function() => {\n         return 123;\n      })();\n\n### 4 对象\n在js中，一切皆是对象，包括我们常用的数值，函数等，主要关系如下图：\n\n![image-2018-03-02_160947](/images/2018-03-02_160947.jpg)\n\n1.所有的对象都继承于object，所以其他子对象都具有object的公共方法，包括：toString(),valueOf()等\n2.每种基本类型都对应一种引用型对象，比如：\n\n    var a = 'hello world!'; //string - String\n\n在定义变量表达式是js引擎自动在内存创建基本类型对应的引用类型变量，所以变量自然拥有对象的方法，因为当调用方法时js引擎会自动查找对象是否有可用的方法，当变量使用完后该对象自动销毁\n3.基本类型对应的内置对象可以当作是通过“构造函数方式”利用Function/原型构建的，所以这些对象的原型constructor都是构造函数，比如:\n\n    Array => function Array() { ... }\n    Number => function Number() { ... }\n\n4.基本类型和引用类型对象的检测方式不同，基本类型使用typeOf，引用类型使用instanceOf，比如：\n\n    typeOf 123 => Number\n    typeOf '123' => String\n    typeOf [1,2,3] => object\n    typeOf null => object\n    typeOf undefined => Undefined\n    typeOf ()=> {} => Function\n\n    [1,2,3] instanceOf Array => true\n    /[0-9a-z]*/gi instanceOf RegExp => true\n\n5.既然对象都是继承于object,则可以使用object直接构造内置对象，比如：\n\n    var str = new Object(\"123\")\n    str instanceOf String = true\n\n    var num = new Object(123)\n    num instanceOf Number = true\n\n","slug":"Javascript-ECMAScript","published":1,"updated":"2018-05-06T09:11:52.751Z","layout":"post","photos":[],"link":"","_id":"cjqwe426z002cor0b5op7d5kk","content":"<p>ECMAscript是Javascript的一部分，主要规定脚本的语法相关集合，和其他编程语言一样具有类型,运算符等组成部分<br><a id=\"more\"></a></p>\n<h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1 数据类型\"></a>1 数据类型</h3><p>js的变量是动态的，没有其他语言严格的变量类型规定，也就是变量可以被赋予任何类型的变量对象<br>js有6大基本类型：</p>\n<ul>\n<li>String</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Function</li>\n</ul>\n<p>可以使用typeOf来测试变量的基本类型，比如：</p>\n<pre><code>typeOf &quot;I love&quot;  --&gt; String\ntypeOf 123  --&gt; Number\ntypeOf () =&gt; {}  --&gt; Function\n</code></pre><h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>js也有其他语言的类似运算符，也有特殊的情况，比如：</p>\n<ul>\n<li>== 和 !=,比较时会进行自动类型转换</li>\n<li>=== 和 !==，全等比较，比较时不会转换类型，换言之就是值和类型一起参与比较</li>\n</ul>\n<h3 id=\"2-语句\"><a href=\"#2-语句\" class=\"headerlink\" title=\"2 语句\"></a>2 语句</h3><p>js的语句借鉴C语言特点，大部分语句规则和C类似，也有特殊的语言标签，比如：for-in，label标签等</p>\n<h3 id=\"3-函数\"><a href=\"#3-函数\" class=\"headerlink\" title=\"3 函数\"></a>3 函数</h3><p>js中的函数是对象，函数名是对象实例名，定义方式有好几个：</p>\n<pre><code>function fun(x,y) { return x + y; }\n\nvar fun = function(x,y) { return x + y; };\n\nvar fun = (x,y) =&gt; { return x + y; };\n\nvar fun = new Function(&apos;x&apos;,&apos;y&apos;,&apos;return x + y;&apos;);\n</code></pre><p>既然函数是对象，则函数可以作为参数，变量进行赋值，甚至作为返回值，比如：</p>\n<pre><code>var fun2 = function fun(x,y) {\n    return (x,y) =&gt; { return 5 * x + y; };\n}\n\nfun2(2,3);\n或\n（(x,y) =&gt; {\n    return (x,y) =&gt; { return 5 * x + y; };\n })(4,5);\n 或\n （function() =&gt; {\n     return 123;\n  })();\n</code></pre><h3 id=\"4-对象\"><a href=\"#4-对象\" class=\"headerlink\" title=\"4 对象\"></a>4 对象</h3><p>在js中，一切皆是对象，包括我们常用的数值，函数等，主要关系如下图：</p>\n<p><img src=\"/images/2018-03-02_160947.jpg\" alt=\"image-2018-03-02_160947\"></p>\n<p>1.所有的对象都继承于object，所以其他子对象都具有object的公共方法，包括：toString(),valueOf()等<br>2.每种基本类型都对应一种引用型对象，比如：</p>\n<pre><code>var a = &apos;hello world!&apos;; //string - String\n</code></pre><p>在定义变量表达式是js引擎自动在内存创建基本类型对应的引用类型变量，所以变量自然拥有对象的方法，因为当调用方法时js引擎会自动查找对象是否有可用的方法，当变量使用完后该对象自动销毁<br>3.基本类型对应的内置对象可以当作是通过“构造函数方式”利用Function/原型构建的，所以这些对象的原型constructor都是构造函数，比如:</p>\n<pre><code>Array =&gt; function Array() { ... }\nNumber =&gt; function Number() { ... }\n</code></pre><p>4.基本类型和引用类型对象的检测方式不同，基本类型使用typeOf，引用类型使用instanceOf，比如：</p>\n<pre><code>typeOf 123 =&gt; Number\ntypeOf &apos;123&apos; =&gt; String\ntypeOf [1,2,3] =&gt; object\ntypeOf null =&gt; object\ntypeOf undefined =&gt; Undefined\ntypeOf ()=&gt; {} =&gt; Function\n\n[1,2,3] instanceOf Array =&gt; true\n/[0-9a-z]*/gi instanceOf RegExp =&gt; true\n</code></pre><p>5.既然对象都是继承于object,则可以使用object直接构造内置对象，比如：</p>\n<pre><code>var str = new Object(&quot;123&quot;)\nstr instanceOf String = true\n\nvar num = new Object(123)\nnum instanceOf Number = true\n</code></pre>","site":{"data":{}},"excerpt":"<p>ECMAscript是Javascript的一部分，主要规定脚本的语法相关集合，和其他编程语言一样具有类型,运算符等组成部分<br>","more":"</p>\n<h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1 数据类型\"></a>1 数据类型</h3><p>js的变量是动态的，没有其他语言严格的变量类型规定，也就是变量可以被赋予任何类型的变量对象<br>js有6大基本类型：</p>\n<ul>\n<li>String</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Function</li>\n</ul>\n<p>可以使用typeOf来测试变量的基本类型，比如：</p>\n<pre><code>typeOf &quot;I love&quot;  --&gt; String\ntypeOf 123  --&gt; Number\ntypeOf () =&gt; {}  --&gt; Function\n</code></pre><h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>js也有其他语言的类似运算符，也有特殊的情况，比如：</p>\n<ul>\n<li>== 和 !=,比较时会进行自动类型转换</li>\n<li>=== 和 !==，全等比较，比较时不会转换类型，换言之就是值和类型一起参与比较</li>\n</ul>\n<h3 id=\"2-语句\"><a href=\"#2-语句\" class=\"headerlink\" title=\"2 语句\"></a>2 语句</h3><p>js的语句借鉴C语言特点，大部分语句规则和C类似，也有特殊的语言标签，比如：for-in，label标签等</p>\n<h3 id=\"3-函数\"><a href=\"#3-函数\" class=\"headerlink\" title=\"3 函数\"></a>3 函数</h3><p>js中的函数是对象，函数名是对象实例名，定义方式有好几个：</p>\n<pre><code>function fun(x,y) { return x + y; }\n\nvar fun = function(x,y) { return x + y; };\n\nvar fun = (x,y) =&gt; { return x + y; };\n\nvar fun = new Function(&apos;x&apos;,&apos;y&apos;,&apos;return x + y;&apos;);\n</code></pre><p>既然函数是对象，则函数可以作为参数，变量进行赋值，甚至作为返回值，比如：</p>\n<pre><code>var fun2 = function fun(x,y) {\n    return (x,y) =&gt; { return 5 * x + y; };\n}\n\nfun2(2,3);\n或\n（(x,y) =&gt; {\n    return (x,y) =&gt; { return 5 * x + y; };\n })(4,5);\n 或\n （function() =&gt; {\n     return 123;\n  })();\n</code></pre><h3 id=\"4-对象\"><a href=\"#4-对象\" class=\"headerlink\" title=\"4 对象\"></a>4 对象</h3><p>在js中，一切皆是对象，包括我们常用的数值，函数等，主要关系如下图：</p>\n<p><img src=\"/images/2018-03-02_160947.jpg\" alt=\"image-2018-03-02_160947\"></p>\n<p>1.所有的对象都继承于object，所以其他子对象都具有object的公共方法，包括：toString(),valueOf()等<br>2.每种基本类型都对应一种引用型对象，比如：</p>\n<pre><code>var a = &apos;hello world!&apos;; //string - String\n</code></pre><p>在定义变量表达式是js引擎自动在内存创建基本类型对应的引用类型变量，所以变量自然拥有对象的方法，因为当调用方法时js引擎会自动查找对象是否有可用的方法，当变量使用完后该对象自动销毁<br>3.基本类型对应的内置对象可以当作是通过“构造函数方式”利用Function/原型构建的，所以这些对象的原型constructor都是构造函数，比如:</p>\n<pre><code>Array =&gt; function Array() { ... }\nNumber =&gt; function Number() { ... }\n</code></pre><p>4.基本类型和引用类型对象的检测方式不同，基本类型使用typeOf，引用类型使用instanceOf，比如：</p>\n<pre><code>typeOf 123 =&gt; Number\ntypeOf &apos;123&apos; =&gt; String\ntypeOf [1,2,3] =&gt; object\ntypeOf null =&gt; object\ntypeOf undefined =&gt; Undefined\ntypeOf ()=&gt; {} =&gt; Function\n\n[1,2,3] instanceOf Array =&gt; true\n/[0-9a-z]*/gi instanceOf RegExp =&gt; true\n</code></pre><p>5.既然对象都是继承于object,则可以使用object直接构造内置对象，比如：</p>\n<pre><code>var str = new Object(&quot;123&quot;)\nstr instanceOf String = true\n\nvar num = new Object(123)\nnum instanceOf Number = true\n</code></pre>"},{"title":"JQuery","date":"2018-07-27T14:23:04.000Z","comments":1,"_content":"\nJQurey是一个javascript库，用与简化开发人员的工作，感兴趣的同学可进一步去学习和使用\n<!--more-->\n\n### JQurey的特点\n\n简化js操作文档的复杂度，写的更少，做的更多，这得益于jqurey的几大特点：\n\n- 集合操作，大部分的元素操作都是集合操作，比如：$(\"p\")就是p元素的集合\n- 链式写法，对元素的操作无限叠加，典型的函数式编程\n  $(\"p\").addClass(\"active\")...\n- Dom操作和事件的混合，降低了代码复杂度\n- 优秀的浏览器兼容性，js在操作时遇到了太多浏览器兼容性问题，一个操作有时候需要写一堆的代码，而jq很好的封装了这种差异性，提供了统一的接口\n\n典型的Jquery语法：\n\n    $(\"p\").removeClass(\"BBB\").filter(\".AAA\")\n        .addClass(\"active\")\n        .click(function() {...});\n\n### 关于$\n$符号是JQurey的标志，所有的jq操作都已$开始，就连开发者对JQurey对象的命名也是以$开头，比如：\n\n    var $volume = $(\"p\");\n\n$只是JQurey的代号，使用$的地方都可以使用JQurey代替，比如：\n\n    $(\"p\") 同 JQurey(\"p\")\n    $.ajax() 同 JQurey.ajax()\n\n### JQurey对象和Dom对象\nJQurey是对js操作的封装库，JQurey对象自然也是Dom对象的封装，两种可以相互转换\nDom对象 --> JQ对象：\n\n    var cr=document.getElementByid(\"aa\");\n    var $cr = $(cr);\n\nJQ对象 --> Dom对象：\n\n    var $cr = $(\"#aa\");\n    var cr = $cr[0] 或 $cr.get(0)\n\nJQ对象方法多样，可以完成大部分Dom操作，但是有时候也有判断不了的问题，比如:判断页面是否存在p元素，由于JQ总是会生成一个封装对象，故无法直接判断，这时候需要转化成dom对象\n\n    var $cr = $(\"#aa\");\n    if($cr[0]) {\n        alert('页面没有这个元素');\n    }\n\n### JQurey的核心操作\nJQurey的核心操作，我觉得就是三个方面的内容：\n- 元素获取\n- 元素操作\n\n###### 1 元素获取\n主要通过选择器和各种遍历方法来获取元素的个体或集合，比如：\n\n    $(\"p\")\n    $(\"div > span.classA\")\n\n    $(\"p\").parent().find(\"span\");\n    $(\"div\").children();\n\n具体的选择器和DOM方法和javascript类似\n**注意**\n\n> Jquery对于父子标签组合的合理性有过检查，对于不合理的子标签查找不出\n\n比如：我们div放进了table里\n\n    <table>\n        <div>\n            <input type=\"text\" />\n        </div>\n    </table>\n\n使用$(”table div input“)无法匹配到input元素,但是$(”div input“)可以\n\n###### 2 元素操作\n\n（1）事件、动画的添加\n\n    $(\"p\").click(function() {\n        alert(\"click it!!\");\n    });\n    $(\"p\").hover(function() {...},\n                function() {...});\n\n    $(\"p\").fadeIn('slow',function() {...});\n    $(\"p\").animate({left: '200px'},'slow');\n\n（2）Dom操作\n\n**节点操作**,节点的get/del/add/update/copy\n\n    $(\"div p\")\n    $(\"div p\").remove();\n\n    var newSpan = $(\"<span>newSpan</span>\");\n    $(\"div p\").append(newSpan);\n\n    $(\"div p\").replacewith(newSpan);\n\n    $(\"div p\").clone();\n\n**属性操作**，get/del/update/add\n\n    $(\"div p\").attr(\"title\");\n    $(\"div p\").attr(\"title\",\"I am title!!\");\n    $(\"div p\").removeAttr(\"title\");\n\n**样式操作**，get/add/del\n\n    $(\"div p\").css(\"width\");\n    $(\"div p\").css(\"font-weight\",\"bolder\");\n    $(\"div p\").css({\n        \"font-weight\": \"bolder\",\n        \"color\": \"red\"\n    });\n\n    $(\"div p\").addClass(\"AAA\");\n    $(\"div p\").removeClass(\"AAA\");\n    $(\"div p\").toggleClass(\"AAA\");\n    $(\"div p\").hasClass(\"AAA\");\n\n> 三元操作符很实用\n\n    if(isActive) {\n        $(\"p\").addClass(\"AAA\");\n    } else {\n        $(\"p\").removeClass(\"AAA\");\n    }\n    //使用三元操作符书写\n    $(\"p\")[isActive ? \"addClass\" : \"removeClass\"](\"AAA\");\n\n**文本操作**，get/update\n\n    $(\"div p\").text();\n    $(\"div p\").text(\"javascript中的ajax书写复杂\");\n    $(\"div p\").html();\n    $(\"div p\").html(\"<span>newSpan</span>\");\n    $(\"div input\").val();\n    $(\"div input#name\").val(\"jack\");\n\n**标签包裹**，add\n\n    $(\"p span\").wrap(\"<div></div>\");\n\n### 3 Ajax\njavascript中的ajax书写复杂，而且在不同浏览器之间有差异，开发者要详细考虑兼容各个浏览器的写法\n在JQuery中，封装了这种差异，提供了统一的ajax方法，简单易用\n\n**$().load()**\n对象方法，load方法可根据url直接加载页面并添加到指定元素中，也可加载目标页面的部分元素\n\n    $(selector).load(url,[data],[callback])\n\n其中url为加载地址，data为可选入参数据，callback为可选加载完成的回调函数\n\n    $(\"#target\").load(url);\n    $(\"#target\").load(\"url selector\");\n    $(\"#target\").load(url，{name: 'jack'},\n        function(reponseText,textStatus,XMLHttpRequest) {\n            ...\n        });\n\n使用load方法带与不带data，将对应调用get和post方法\n\n**$.get()**\n使用get方法可进行异步数据请求\n\n    $.get(url,[data],[callback],[type])\n\n其中type为请求的返回数据的规定格式，有：xml,html,script,json,text等，不填默认为xml\n\n    $(\"button.send\").click(function() {\n        $.get(url,{name: 'jack'},function(data,textStatus) {\n            ...\n        });\n     });\n     //data响应数据，textStatus请求状态\n\n    $(\"button.send\").click(function() {\n        $.get(url,{name: 'jack'},function(data,textStatus) {\n            ...\n        },\"json\");\n     });\n\n**$.post()**\n使用post方法可向服务器发送数据\n\n    $.post(url,[data],[callback])\n\n使用post也能获取数据，且隐秘性更强，但一般用于数据写操作\n\n    $(\"button.send\").click(function() {\n        $.post(url,{name: 'jack'},function(data,textStatus) {\n            ...\n        });\n     });\n\n**$.getScript()**\ngetScript方法用于动态加载js脚本，并且加载成功立即执行\n\n    $.getScript(\"text.js\");\n\n**$.getJSON()**\ngetJSON方法用于动态JSON数据或文档，并且加载成功立通过回调函数处理\n\n    $.getJSON(\"text.json\",function(data) {\n        ....\n    });\n\n**$.ajax()**\najax()方法是jquery-ajax的核心方法，有很多的参数配置，可以设置错误处理，超时处理等，功能强大，前面几种方法都是基于此方法来实现的\n\n    $.ajax({\n        type: \"GET\",\n        url: \"temp.json\"，\n        dataType: \"json\",\n        success: function(data) {\n            ....\n        }\n    });\n\n这是ajax()的一般用法，具体了解可参考jquery的官方文档\n\n本文之作简单的导入介绍，了解更多可在网上资源学习，当然还需要一定的练习\n附：使用jquery改造过的一些组件，之前有js书写\n[jquery-组件改造](https://runjs.cn/code/igehlguh)","source":"_posts/2018-07-27-jquery-daoru.md","raw":"---\ntitle: JQuery\ndate: 2018-07-27 22:23:04\ntags: Jqury\ncategories: 前端\ncomments: true\n---\n\nJQurey是一个javascript库，用与简化开发人员的工作，感兴趣的同学可进一步去学习和使用\n<!--more-->\n\n### JQurey的特点\n\n简化js操作文档的复杂度，写的更少，做的更多，这得益于jqurey的几大特点：\n\n- 集合操作，大部分的元素操作都是集合操作，比如：$(\"p\")就是p元素的集合\n- 链式写法，对元素的操作无限叠加，典型的函数式编程\n  $(\"p\").addClass(\"active\")...\n- Dom操作和事件的混合，降低了代码复杂度\n- 优秀的浏览器兼容性，js在操作时遇到了太多浏览器兼容性问题，一个操作有时候需要写一堆的代码，而jq很好的封装了这种差异性，提供了统一的接口\n\n典型的Jquery语法：\n\n    $(\"p\").removeClass(\"BBB\").filter(\".AAA\")\n        .addClass(\"active\")\n        .click(function() {...});\n\n### 关于$\n$符号是JQurey的标志，所有的jq操作都已$开始，就连开发者对JQurey对象的命名也是以$开头，比如：\n\n    var $volume = $(\"p\");\n\n$只是JQurey的代号，使用$的地方都可以使用JQurey代替，比如：\n\n    $(\"p\") 同 JQurey(\"p\")\n    $.ajax() 同 JQurey.ajax()\n\n### JQurey对象和Dom对象\nJQurey是对js操作的封装库，JQurey对象自然也是Dom对象的封装，两种可以相互转换\nDom对象 --> JQ对象：\n\n    var cr=document.getElementByid(\"aa\");\n    var $cr = $(cr);\n\nJQ对象 --> Dom对象：\n\n    var $cr = $(\"#aa\");\n    var cr = $cr[0] 或 $cr.get(0)\n\nJQ对象方法多样，可以完成大部分Dom操作，但是有时候也有判断不了的问题，比如:判断页面是否存在p元素，由于JQ总是会生成一个封装对象，故无法直接判断，这时候需要转化成dom对象\n\n    var $cr = $(\"#aa\");\n    if($cr[0]) {\n        alert('页面没有这个元素');\n    }\n\n### JQurey的核心操作\nJQurey的核心操作，我觉得就是三个方面的内容：\n- 元素获取\n- 元素操作\n\n###### 1 元素获取\n主要通过选择器和各种遍历方法来获取元素的个体或集合，比如：\n\n    $(\"p\")\n    $(\"div > span.classA\")\n\n    $(\"p\").parent().find(\"span\");\n    $(\"div\").children();\n\n具体的选择器和DOM方法和javascript类似\n**注意**\n\n> Jquery对于父子标签组合的合理性有过检查，对于不合理的子标签查找不出\n\n比如：我们div放进了table里\n\n    <table>\n        <div>\n            <input type=\"text\" />\n        </div>\n    </table>\n\n使用$(”table div input“)无法匹配到input元素,但是$(”div input“)可以\n\n###### 2 元素操作\n\n（1）事件、动画的添加\n\n    $(\"p\").click(function() {\n        alert(\"click it!!\");\n    });\n    $(\"p\").hover(function() {...},\n                function() {...});\n\n    $(\"p\").fadeIn('slow',function() {...});\n    $(\"p\").animate({left: '200px'},'slow');\n\n（2）Dom操作\n\n**节点操作**,节点的get/del/add/update/copy\n\n    $(\"div p\")\n    $(\"div p\").remove();\n\n    var newSpan = $(\"<span>newSpan</span>\");\n    $(\"div p\").append(newSpan);\n\n    $(\"div p\").replacewith(newSpan);\n\n    $(\"div p\").clone();\n\n**属性操作**，get/del/update/add\n\n    $(\"div p\").attr(\"title\");\n    $(\"div p\").attr(\"title\",\"I am title!!\");\n    $(\"div p\").removeAttr(\"title\");\n\n**样式操作**，get/add/del\n\n    $(\"div p\").css(\"width\");\n    $(\"div p\").css(\"font-weight\",\"bolder\");\n    $(\"div p\").css({\n        \"font-weight\": \"bolder\",\n        \"color\": \"red\"\n    });\n\n    $(\"div p\").addClass(\"AAA\");\n    $(\"div p\").removeClass(\"AAA\");\n    $(\"div p\").toggleClass(\"AAA\");\n    $(\"div p\").hasClass(\"AAA\");\n\n> 三元操作符很实用\n\n    if(isActive) {\n        $(\"p\").addClass(\"AAA\");\n    } else {\n        $(\"p\").removeClass(\"AAA\");\n    }\n    //使用三元操作符书写\n    $(\"p\")[isActive ? \"addClass\" : \"removeClass\"](\"AAA\");\n\n**文本操作**，get/update\n\n    $(\"div p\").text();\n    $(\"div p\").text(\"javascript中的ajax书写复杂\");\n    $(\"div p\").html();\n    $(\"div p\").html(\"<span>newSpan</span>\");\n    $(\"div input\").val();\n    $(\"div input#name\").val(\"jack\");\n\n**标签包裹**，add\n\n    $(\"p span\").wrap(\"<div></div>\");\n\n### 3 Ajax\njavascript中的ajax书写复杂，而且在不同浏览器之间有差异，开发者要详细考虑兼容各个浏览器的写法\n在JQuery中，封装了这种差异，提供了统一的ajax方法，简单易用\n\n**$().load()**\n对象方法，load方法可根据url直接加载页面并添加到指定元素中，也可加载目标页面的部分元素\n\n    $(selector).load(url,[data],[callback])\n\n其中url为加载地址，data为可选入参数据，callback为可选加载完成的回调函数\n\n    $(\"#target\").load(url);\n    $(\"#target\").load(\"url selector\");\n    $(\"#target\").load(url，{name: 'jack'},\n        function(reponseText,textStatus,XMLHttpRequest) {\n            ...\n        });\n\n使用load方法带与不带data，将对应调用get和post方法\n\n**$.get()**\n使用get方法可进行异步数据请求\n\n    $.get(url,[data],[callback],[type])\n\n其中type为请求的返回数据的规定格式，有：xml,html,script,json,text等，不填默认为xml\n\n    $(\"button.send\").click(function() {\n        $.get(url,{name: 'jack'},function(data,textStatus) {\n            ...\n        });\n     });\n     //data响应数据，textStatus请求状态\n\n    $(\"button.send\").click(function() {\n        $.get(url,{name: 'jack'},function(data,textStatus) {\n            ...\n        },\"json\");\n     });\n\n**$.post()**\n使用post方法可向服务器发送数据\n\n    $.post(url,[data],[callback])\n\n使用post也能获取数据，且隐秘性更强，但一般用于数据写操作\n\n    $(\"button.send\").click(function() {\n        $.post(url,{name: 'jack'},function(data,textStatus) {\n            ...\n        });\n     });\n\n**$.getScript()**\ngetScript方法用于动态加载js脚本，并且加载成功立即执行\n\n    $.getScript(\"text.js\");\n\n**$.getJSON()**\ngetJSON方法用于动态JSON数据或文档，并且加载成功立通过回调函数处理\n\n    $.getJSON(\"text.json\",function(data) {\n        ....\n    });\n\n**$.ajax()**\najax()方法是jquery-ajax的核心方法，有很多的参数配置，可以设置错误处理，超时处理等，功能强大，前面几种方法都是基于此方法来实现的\n\n    $.ajax({\n        type: \"GET\",\n        url: \"temp.json\"，\n        dataType: \"json\",\n        success: function(data) {\n            ....\n        }\n    });\n\n这是ajax()的一般用法，具体了解可参考jquery的官方文档\n\n本文之作简单的导入介绍，了解更多可在网上资源学习，当然还需要一定的练习\n附：使用jquery改造过的一些组件，之前有js书写\n[jquery-组件改造](https://runjs.cn/code/igehlguh)","slug":"jquery-daoru","published":1,"updated":"2018-08-03T14:03:56.645Z","layout":"post","photos":[],"link":"","_id":"cjqwe4271002for0bqijvomui","content":"<p>JQurey是一个javascript库，用与简化开发人员的工作，感兴趣的同学可进一步去学习和使用<br><a id=\"more\"></a></p>\n<h3 id=\"JQurey的特点\"><a href=\"#JQurey的特点\" class=\"headerlink\" title=\"JQurey的特点\"></a>JQurey的特点</h3><p>简化js操作文档的复杂度，写的更少，做的更多，这得益于jqurey的几大特点：</p>\n<ul>\n<li>集合操作，大部分的元素操作都是集合操作，比如：$(“p”)就是p元素的集合</li>\n<li>链式写法，对元素的操作无限叠加，典型的函数式编程<br>$(“p”).addClass(“active”)…</li>\n<li>Dom操作和事件的混合，降低了代码复杂度</li>\n<li>优秀的浏览器兼容性，js在操作时遇到了太多浏览器兼容性问题，一个操作有时候需要写一堆的代码，而jq很好的封装了这种差异性，提供了统一的接口</li>\n</ul>\n<p>典型的Jquery语法：</p>\n<pre><code>$(&quot;p&quot;).removeClass(&quot;BBB&quot;).filter(&quot;.AAA&quot;)\n    .addClass(&quot;active&quot;)\n    .click(function() {...});\n</code></pre><h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于$\"></a>关于$</h3><p>$符号是JQurey的标志，所有的jq操作都已$开始，就连开发者对JQurey对象的命名也是以$开头，比如：</p>\n<pre><code>var $volume = $(&quot;p&quot;);\n</code></pre><p>$只是JQurey的代号，使用$的地方都可以使用JQurey代替，比如：</p>\n<pre><code>$(&quot;p&quot;) 同 JQurey(&quot;p&quot;)\n$.ajax() 同 JQurey.ajax()\n</code></pre><h3 id=\"JQurey对象和Dom对象\"><a href=\"#JQurey对象和Dom对象\" class=\"headerlink\" title=\"JQurey对象和Dom对象\"></a>JQurey对象和Dom对象</h3><p>JQurey是对js操作的封装库，JQurey对象自然也是Dom对象的封装，两种可以相互转换<br>Dom对象 –&gt; JQ对象：</p>\n<pre><code>var cr=document.getElementByid(&quot;aa&quot;);\nvar $cr = $(cr);\n</code></pre><p>JQ对象 –&gt; Dom对象：</p>\n<pre><code>var $cr = $(&quot;#aa&quot;);\nvar cr = $cr[0] 或 $cr.get(0)\n</code></pre><p>JQ对象方法多样，可以完成大部分Dom操作，但是有时候也有判断不了的问题，比如:判断页面是否存在p元素，由于JQ总是会生成一个封装对象，故无法直接判断，这时候需要转化成dom对象</p>\n<pre><code>var $cr = $(&quot;#aa&quot;);\nif($cr[0]) {\n    alert(&apos;页面没有这个元素&apos;);\n}\n</code></pre><h3 id=\"JQurey的核心操作\"><a href=\"#JQurey的核心操作\" class=\"headerlink\" title=\"JQurey的核心操作\"></a>JQurey的核心操作</h3><p>JQurey的核心操作，我觉得就是三个方面的内容：</p>\n<ul>\n<li>元素获取</li>\n<li>元素操作</li>\n</ul>\n<h6 id=\"1-元素获取\"><a href=\"#1-元素获取\" class=\"headerlink\" title=\"1 元素获取\"></a>1 元素获取</h6><p>主要通过选择器和各种遍历方法来获取元素的个体或集合，比如：</p>\n<pre><code>$(&quot;p&quot;)\n$(&quot;div &gt; span.classA&quot;)\n\n$(&quot;p&quot;).parent().find(&quot;span&quot;);\n$(&quot;div&quot;).children();\n</code></pre><p>具体的选择器和DOM方法和javascript类似<br><strong>注意</strong></p>\n<blockquote>\n<p>Jquery对于父子标签组合的合理性有过检查，对于不合理的子标签查找不出</p>\n</blockquote>\n<p>比如：我们div放进了table里</p>\n<pre><code>&lt;table&gt;\n    &lt;div&gt;\n        &lt;input type=&quot;text&quot; /&gt;\n    &lt;/div&gt;\n&lt;/table&gt;\n</code></pre><p>使用$(”table div input“)无法匹配到input元素,但是$(”div input“)可以</p>\n<h6 id=\"2-元素操作\"><a href=\"#2-元素操作\" class=\"headerlink\" title=\"2 元素操作\"></a>2 元素操作</h6><p>（1）事件、动画的添加</p>\n<pre><code>$(&quot;p&quot;).click(function() {\n    alert(&quot;click it!!&quot;);\n});\n$(&quot;p&quot;).hover(function() {...},\n            function() {...});\n\n$(&quot;p&quot;).fadeIn(&apos;slow&apos;,function() {...});\n$(&quot;p&quot;).animate({left: &apos;200px&apos;},&apos;slow&apos;);\n</code></pre><p>（2）Dom操作</p>\n<p><strong>节点操作</strong>,节点的get/del/add/update/copy</p>\n<pre><code>$(&quot;div p&quot;)\n$(&quot;div p&quot;).remove();\n\nvar newSpan = $(&quot;&lt;span&gt;newSpan&lt;/span&gt;&quot;);\n$(&quot;div p&quot;).append(newSpan);\n\n$(&quot;div p&quot;).replacewith(newSpan);\n\n$(&quot;div p&quot;).clone();\n</code></pre><p><strong>属性操作</strong>，get/del/update/add</p>\n<pre><code>$(&quot;div p&quot;).attr(&quot;title&quot;);\n$(&quot;div p&quot;).attr(&quot;title&quot;,&quot;I am title!!&quot;);\n$(&quot;div p&quot;).removeAttr(&quot;title&quot;);\n</code></pre><p><strong>样式操作</strong>，get/add/del</p>\n<pre><code>$(&quot;div p&quot;).css(&quot;width&quot;);\n$(&quot;div p&quot;).css(&quot;font-weight&quot;,&quot;bolder&quot;);\n$(&quot;div p&quot;).css({\n    &quot;font-weight&quot;: &quot;bolder&quot;,\n    &quot;color&quot;: &quot;red&quot;\n});\n\n$(&quot;div p&quot;).addClass(&quot;AAA&quot;);\n$(&quot;div p&quot;).removeClass(&quot;AAA&quot;);\n$(&quot;div p&quot;).toggleClass(&quot;AAA&quot;);\n$(&quot;div p&quot;).hasClass(&quot;AAA&quot;);\n</code></pre><blockquote>\n<p>三元操作符很实用</p>\n</blockquote>\n<pre><code>if(isActive) {\n    $(&quot;p&quot;).addClass(&quot;AAA&quot;);\n} else {\n    $(&quot;p&quot;).removeClass(&quot;AAA&quot;);\n}\n//使用三元操作符书写\n$(&quot;p&quot;)[isActive ? &quot;addClass&quot; : &quot;removeClass&quot;](&quot;AAA&quot;);\n</code></pre><p><strong>文本操作</strong>，get/update</p>\n<pre><code>$(&quot;div p&quot;).text();\n$(&quot;div p&quot;).text(&quot;javascript中的ajax书写复杂&quot;);\n$(&quot;div p&quot;).html();\n$(&quot;div p&quot;).html(&quot;&lt;span&gt;newSpan&lt;/span&gt;&quot;);\n$(&quot;div input&quot;).val();\n$(&quot;div input#name&quot;).val(&quot;jack&quot;);\n</code></pre><p><strong>标签包裹</strong>，add</p>\n<pre><code>$(&quot;p span&quot;).wrap(&quot;&lt;div&gt;&lt;/div&gt;&quot;);\n</code></pre><h3 id=\"3-Ajax\"><a href=\"#3-Ajax\" class=\"headerlink\" title=\"3 Ajax\"></a>3 Ajax</h3><p>javascript中的ajax书写复杂，而且在不同浏览器之间有差异，开发者要详细考虑兼容各个浏览器的写法<br>在JQuery中，封装了这种差异，提供了统一的ajax方法，简单易用</p>\n<p><strong>$().load()</strong><br>对象方法，load方法可根据url直接加载页面并添加到指定元素中，也可加载目标页面的部分元素</p>\n<pre><code>$(selector).load(url,[data],[callback])\n</code></pre><p>其中url为加载地址，data为可选入参数据，callback为可选加载完成的回调函数</p>\n<pre><code>$(&quot;#target&quot;).load(url);\n$(&quot;#target&quot;).load(&quot;url selector&quot;);\n$(&quot;#target&quot;).load(url，{name: &apos;jack&apos;},\n    function(reponseText,textStatus,XMLHttpRequest) {\n        ...\n    });\n</code></pre><p>使用load方法带与不带data，将对应调用get和post方法</p>\n<p><strong>$.get()</strong><br>使用get方法可进行异步数据请求</p>\n<pre><code>$.get(url,[data],[callback],[type])\n</code></pre><p>其中type为请求的返回数据的规定格式，有：xml,html,script,json,text等，不填默认为xml</p>\n<pre><code>$(&quot;button.send&quot;).click(function() {\n    $.get(url,{name: &apos;jack&apos;},function(data,textStatus) {\n        ...\n    });\n });\n //data响应数据，textStatus请求状态\n\n$(&quot;button.send&quot;).click(function() {\n    $.get(url,{name: &apos;jack&apos;},function(data,textStatus) {\n        ...\n    },&quot;json&quot;);\n });\n</code></pre><p><strong>$.post()</strong><br>使用post方法可向服务器发送数据</p>\n<pre><code>$.post(url,[data],[callback])\n</code></pre><p>使用post也能获取数据，且隐秘性更强，但一般用于数据写操作</p>\n<pre><code>$(&quot;button.send&quot;).click(function() {\n    $.post(url,{name: &apos;jack&apos;},function(data,textStatus) {\n        ...\n    });\n });\n</code></pre><p><strong>$.getScript()</strong><br>getScript方法用于动态加载js脚本，并且加载成功立即执行</p>\n<pre><code>$.getScript(&quot;text.js&quot;);\n</code></pre><p><strong>$.getJSON()</strong><br>getJSON方法用于动态JSON数据或文档，并且加载成功立通过回调函数处理</p>\n<pre><code>$.getJSON(&quot;text.json&quot;,function(data) {\n    ....\n});\n</code></pre><p><strong>$.ajax()</strong><br>ajax()方法是jquery-ajax的核心方法，有很多的参数配置，可以设置错误处理，超时处理等，功能强大，前面几种方法都是基于此方法来实现的</p>\n<pre><code>$.ajax({\n    type: &quot;GET&quot;,\n    url: &quot;temp.json&quot;，\n    dataType: &quot;json&quot;,\n    success: function(data) {\n        ....\n    }\n});\n</code></pre><p>这是ajax()的一般用法，具体了解可参考jquery的官方文档</p>\n<p>本文之作简单的导入介绍，了解更多可在网上资源学习，当然还需要一定的练习<br>附：使用jquery改造过的一些组件，之前有js书写<br><a href=\"https://runjs.cn/code/igehlguh\" target=\"_blank\" rel=\"external\">jquery-组件改造</a></p>\n","site":{"data":{}},"excerpt":"<p>JQurey是一个javascript库，用与简化开发人员的工作，感兴趣的同学可进一步去学习和使用<br>","more":"</p>\n<h3 id=\"JQurey的特点\"><a href=\"#JQurey的特点\" class=\"headerlink\" title=\"JQurey的特点\"></a>JQurey的特点</h3><p>简化js操作文档的复杂度，写的更少，做的更多，这得益于jqurey的几大特点：</p>\n<ul>\n<li>集合操作，大部分的元素操作都是集合操作，比如：$(“p”)就是p元素的集合</li>\n<li>链式写法，对元素的操作无限叠加，典型的函数式编程<br>$(“p”).addClass(“active”)…</li>\n<li>Dom操作和事件的混合，降低了代码复杂度</li>\n<li>优秀的浏览器兼容性，js在操作时遇到了太多浏览器兼容性问题，一个操作有时候需要写一堆的代码，而jq很好的封装了这种差异性，提供了统一的接口</li>\n</ul>\n<p>典型的Jquery语法：</p>\n<pre><code>$(&quot;p&quot;).removeClass(&quot;BBB&quot;).filter(&quot;.AAA&quot;)\n    .addClass(&quot;active&quot;)\n    .click(function() {...});\n</code></pre><h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于$\"></a>关于$</h3><p>$符号是JQurey的标志，所有的jq操作都已$开始，就连开发者对JQurey对象的命名也是以$开头，比如：</p>\n<pre><code>var $volume = $(&quot;p&quot;);\n</code></pre><p>$只是JQurey的代号，使用$的地方都可以使用JQurey代替，比如：</p>\n<pre><code>$(&quot;p&quot;) 同 JQurey(&quot;p&quot;)\n$.ajax() 同 JQurey.ajax()\n</code></pre><h3 id=\"JQurey对象和Dom对象\"><a href=\"#JQurey对象和Dom对象\" class=\"headerlink\" title=\"JQurey对象和Dom对象\"></a>JQurey对象和Dom对象</h3><p>JQurey是对js操作的封装库，JQurey对象自然也是Dom对象的封装，两种可以相互转换<br>Dom对象 –&gt; JQ对象：</p>\n<pre><code>var cr=document.getElementByid(&quot;aa&quot;);\nvar $cr = $(cr);\n</code></pre><p>JQ对象 –&gt; Dom对象：</p>\n<pre><code>var $cr = $(&quot;#aa&quot;);\nvar cr = $cr[0] 或 $cr.get(0)\n</code></pre><p>JQ对象方法多样，可以完成大部分Dom操作，但是有时候也有判断不了的问题，比如:判断页面是否存在p元素，由于JQ总是会生成一个封装对象，故无法直接判断，这时候需要转化成dom对象</p>\n<pre><code>var $cr = $(&quot;#aa&quot;);\nif($cr[0]) {\n    alert(&apos;页面没有这个元素&apos;);\n}\n</code></pre><h3 id=\"JQurey的核心操作\"><a href=\"#JQurey的核心操作\" class=\"headerlink\" title=\"JQurey的核心操作\"></a>JQurey的核心操作</h3><p>JQurey的核心操作，我觉得就是三个方面的内容：</p>\n<ul>\n<li>元素获取</li>\n<li>元素操作</li>\n</ul>\n<h6 id=\"1-元素获取\"><a href=\"#1-元素获取\" class=\"headerlink\" title=\"1 元素获取\"></a>1 元素获取</h6><p>主要通过选择器和各种遍历方法来获取元素的个体或集合，比如：</p>\n<pre><code>$(&quot;p&quot;)\n$(&quot;div &gt; span.classA&quot;)\n\n$(&quot;p&quot;).parent().find(&quot;span&quot;);\n$(&quot;div&quot;).children();\n</code></pre><p>具体的选择器和DOM方法和javascript类似<br><strong>注意</strong></p>\n<blockquote>\n<p>Jquery对于父子标签组合的合理性有过检查，对于不合理的子标签查找不出</p>\n</blockquote>\n<p>比如：我们div放进了table里</p>\n<pre><code>&lt;table&gt;\n    &lt;div&gt;\n        &lt;input type=&quot;text&quot; /&gt;\n    &lt;/div&gt;\n&lt;/table&gt;\n</code></pre><p>使用$(”table div input“)无法匹配到input元素,但是$(”div input“)可以</p>\n<h6 id=\"2-元素操作\"><a href=\"#2-元素操作\" class=\"headerlink\" title=\"2 元素操作\"></a>2 元素操作</h6><p>（1）事件、动画的添加</p>\n<pre><code>$(&quot;p&quot;).click(function() {\n    alert(&quot;click it!!&quot;);\n});\n$(&quot;p&quot;).hover(function() {...},\n            function() {...});\n\n$(&quot;p&quot;).fadeIn(&apos;slow&apos;,function() {...});\n$(&quot;p&quot;).animate({left: &apos;200px&apos;},&apos;slow&apos;);\n</code></pre><p>（2）Dom操作</p>\n<p><strong>节点操作</strong>,节点的get/del/add/update/copy</p>\n<pre><code>$(&quot;div p&quot;)\n$(&quot;div p&quot;).remove();\n\nvar newSpan = $(&quot;&lt;span&gt;newSpan&lt;/span&gt;&quot;);\n$(&quot;div p&quot;).append(newSpan);\n\n$(&quot;div p&quot;).replacewith(newSpan);\n\n$(&quot;div p&quot;).clone();\n</code></pre><p><strong>属性操作</strong>，get/del/update/add</p>\n<pre><code>$(&quot;div p&quot;).attr(&quot;title&quot;);\n$(&quot;div p&quot;).attr(&quot;title&quot;,&quot;I am title!!&quot;);\n$(&quot;div p&quot;).removeAttr(&quot;title&quot;);\n</code></pre><p><strong>样式操作</strong>，get/add/del</p>\n<pre><code>$(&quot;div p&quot;).css(&quot;width&quot;);\n$(&quot;div p&quot;).css(&quot;font-weight&quot;,&quot;bolder&quot;);\n$(&quot;div p&quot;).css({\n    &quot;font-weight&quot;: &quot;bolder&quot;,\n    &quot;color&quot;: &quot;red&quot;\n});\n\n$(&quot;div p&quot;).addClass(&quot;AAA&quot;);\n$(&quot;div p&quot;).removeClass(&quot;AAA&quot;);\n$(&quot;div p&quot;).toggleClass(&quot;AAA&quot;);\n$(&quot;div p&quot;).hasClass(&quot;AAA&quot;);\n</code></pre><blockquote>\n<p>三元操作符很实用</p>\n</blockquote>\n<pre><code>if(isActive) {\n    $(&quot;p&quot;).addClass(&quot;AAA&quot;);\n} else {\n    $(&quot;p&quot;).removeClass(&quot;AAA&quot;);\n}\n//使用三元操作符书写\n$(&quot;p&quot;)[isActive ? &quot;addClass&quot; : &quot;removeClass&quot;](&quot;AAA&quot;);\n</code></pre><p><strong>文本操作</strong>，get/update</p>\n<pre><code>$(&quot;div p&quot;).text();\n$(&quot;div p&quot;).text(&quot;javascript中的ajax书写复杂&quot;);\n$(&quot;div p&quot;).html();\n$(&quot;div p&quot;).html(&quot;&lt;span&gt;newSpan&lt;/span&gt;&quot;);\n$(&quot;div input&quot;).val();\n$(&quot;div input#name&quot;).val(&quot;jack&quot;);\n</code></pre><p><strong>标签包裹</strong>，add</p>\n<pre><code>$(&quot;p span&quot;).wrap(&quot;&lt;div&gt;&lt;/div&gt;&quot;);\n</code></pre><h3 id=\"3-Ajax\"><a href=\"#3-Ajax\" class=\"headerlink\" title=\"3 Ajax\"></a>3 Ajax</h3><p>javascript中的ajax书写复杂，而且在不同浏览器之间有差异，开发者要详细考虑兼容各个浏览器的写法<br>在JQuery中，封装了这种差异，提供了统一的ajax方法，简单易用</p>\n<p><strong>$().load()</strong><br>对象方法，load方法可根据url直接加载页面并添加到指定元素中，也可加载目标页面的部分元素</p>\n<pre><code>$(selector).load(url,[data],[callback])\n</code></pre><p>其中url为加载地址，data为可选入参数据，callback为可选加载完成的回调函数</p>\n<pre><code>$(&quot;#target&quot;).load(url);\n$(&quot;#target&quot;).load(&quot;url selector&quot;);\n$(&quot;#target&quot;).load(url，{name: &apos;jack&apos;},\n    function(reponseText,textStatus,XMLHttpRequest) {\n        ...\n    });\n</code></pre><p>使用load方法带与不带data，将对应调用get和post方法</p>\n<p><strong>$.get()</strong><br>使用get方法可进行异步数据请求</p>\n<pre><code>$.get(url,[data],[callback],[type])\n</code></pre><p>其中type为请求的返回数据的规定格式，有：xml,html,script,json,text等，不填默认为xml</p>\n<pre><code>$(&quot;button.send&quot;).click(function() {\n    $.get(url,{name: &apos;jack&apos;},function(data,textStatus) {\n        ...\n    });\n });\n //data响应数据，textStatus请求状态\n\n$(&quot;button.send&quot;).click(function() {\n    $.get(url,{name: &apos;jack&apos;},function(data,textStatus) {\n        ...\n    },&quot;json&quot;);\n });\n</code></pre><p><strong>$.post()</strong><br>使用post方法可向服务器发送数据</p>\n<pre><code>$.post(url,[data],[callback])\n</code></pre><p>使用post也能获取数据，且隐秘性更强，但一般用于数据写操作</p>\n<pre><code>$(&quot;button.send&quot;).click(function() {\n    $.post(url,{name: &apos;jack&apos;},function(data,textStatus) {\n        ...\n    });\n });\n</code></pre><p><strong>$.getScript()</strong><br>getScript方法用于动态加载js脚本，并且加载成功立即执行</p>\n<pre><code>$.getScript(&quot;text.js&quot;);\n</code></pre><p><strong>$.getJSON()</strong><br>getJSON方法用于动态JSON数据或文档，并且加载成功立通过回调函数处理</p>\n<pre><code>$.getJSON(&quot;text.json&quot;,function(data) {\n    ....\n});\n</code></pre><p><strong>$.ajax()</strong><br>ajax()方法是jquery-ajax的核心方法，有很多的参数配置，可以设置错误处理，超时处理等，功能强大，前面几种方法都是基于此方法来实现的</p>\n<pre><code>$.ajax({\n    type: &quot;GET&quot;,\n    url: &quot;temp.json&quot;，\n    dataType: &quot;json&quot;,\n    success: function(data) {\n        ....\n    }\n});\n</code></pre><p>这是ajax()的一般用法，具体了解可参考jquery的官方文档</p>\n<p>本文之作简单的导入介绍，了解更多可在网上资源学习，当然还需要一定的练习<br>附：使用jquery改造过的一些组件，之前有js书写<br><a href=\"https://runjs.cn/code/igehlguh\" target=\"_blank\" rel=\"external\">jquery-组件改造</a></p>"},{"title":"css3-2D变换","date":"2018-01-14T10:22:27.000Z","comments":1,"_content":"\n2D变换，能够对元素进行移动、缩放、转动、拉长或拉伸\n<!--more-->\n\n#### transform\n\n    transform: none|transform-functions;\n其中变换方法如下：\n- matrix(n,n,n,n,n,n)，定义 2D 转换，使用六个值的矩阵。\n- translate(x,y)，定义 2D 转换，沿着 X 和 Y 轴移动元素。\n- translateX(n) ，定义 2D 转换，沿着 X 轴移动元素。\n- translateY(n) ，定义 2D 转换，沿着 Y 轴移动元素。\n- scale(x,y) ，定义 2D 缩放转换，改变元素的宽度和高度。\n- scaleX(n) ，定义 2D 缩放转换，改变元素的宽度。\n- scaleY(n) ，定义 2D 缩放转换，改变元素的高度。\n- rotate(angle) ，定义 2D 旋转，在参数中规定角度。\n- skew(x-angle,y-angle) ，定义 2D 倾斜转换，沿着 X 和 Y 轴。\n- skewX(angle) ，定义 2D 倾斜转换，沿着 X 轴。\n- skewY(angle) ，定义 2D 倾斜转换，沿着 Y 轴。\n\n###### 1.translate（x,y）\n元素平移，其中\n- x是水平移动，正值向右，负值向左\n- y是水平移动，正值向下，负值向上\n\n例子：\n\n\ttransform: translate(50px,20px);\n\t-ms-transform: translate(50px,20px);\t\t/* IE 9 */\n\t-webkit-transform: translate(50px,20px);\t/* Safari and Chrome */\n\t-o-transform: translate(50px,20px);\t\t/* Opera */\n\t-moz-transform: translate(50px,20px);\t\t/* Firefox */\n\n###### 2.scale(x,y)\n元素尺寸大小缩放，可为小数，其中\n- x是宽度缩放\n- y是高度缩放\n\n例子：\n\n\ttransform: scale(2,2.4);\n\t-ms-transform: scale(2,2.4);\n\t-webkit-transform: scale(2,2.4);\n\t-o-transform: scale(2,2.4);\n\t-moz-transform: scale(2,2.4);\n\n###### 3.rotate(angle)\n元素旋转一定角度，正值沿顺时针旋转，负值沿逆时针旋转\n例子：\n\n\ttransform: skewX(30deg);\n\t-ms-transform: skewX(30deg);\n\t-webkit-transform: skewX(30deg);\n\t-o-transform: skewX(30deg);\n\t-moz-transform: skewX(30deg);\n\n###### 4.skew(x-angle,y-angle)\n沿着 X 和 Y 轴的 2D 倾斜转换\n先按照元素两个中轴倾斜固定的角度，再将2根中轴线向两边平移形成\n\n    transform: skewY(30deg);\n    -ms-transform: skewY(30deg);\n    -webkit-transform: skewY(30deg);\n    -o-transform: skewY(30deg);\n    -moz-transform: skewY(30deg);\n\n![skew1](/images/2018-01-07_skew1.jpg)\n两个中轴只有一根倾斜：\n\n    transform: skewX(30deg);\n    -ms-transform: skewX(30deg);\n    -webkit-transform: skewX(30deg);\n    -o-transform: skewX(30deg);\n    -moz-transform: skewX(30deg);\n\n    transform: skewY(30deg);\n    -ms-transform: skewY(30deg);\n    -webkit-transform: skewY(30deg);\n    -o-transform: skewY(30deg);\n    -moz-transform: skewY(30deg);\n\n![skew2](/images/2018-01-07_skew2.jpg)\n\nDemo请点击此处：[2D-demo](http://sandbox.runjs.cn/show/teqbdfr2)\n\n#### transform-origin\n属性允许您改变被转换元素的位置","source":"_posts/2018-01-14-css3-2D.md","raw":"---\ntitle: css3-2D变换\ndate: 2018-01-14 18:22:27\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\n2D变换，能够对元素进行移动、缩放、转动、拉长或拉伸\n<!--more-->\n\n#### transform\n\n    transform: none|transform-functions;\n其中变换方法如下：\n- matrix(n,n,n,n,n,n)，定义 2D 转换，使用六个值的矩阵。\n- translate(x,y)，定义 2D 转换，沿着 X 和 Y 轴移动元素。\n- translateX(n) ，定义 2D 转换，沿着 X 轴移动元素。\n- translateY(n) ，定义 2D 转换，沿着 Y 轴移动元素。\n- scale(x,y) ，定义 2D 缩放转换，改变元素的宽度和高度。\n- scaleX(n) ，定义 2D 缩放转换，改变元素的宽度。\n- scaleY(n) ，定义 2D 缩放转换，改变元素的高度。\n- rotate(angle) ，定义 2D 旋转，在参数中规定角度。\n- skew(x-angle,y-angle) ，定义 2D 倾斜转换，沿着 X 和 Y 轴。\n- skewX(angle) ，定义 2D 倾斜转换，沿着 X 轴。\n- skewY(angle) ，定义 2D 倾斜转换，沿着 Y 轴。\n\n###### 1.translate（x,y）\n元素平移，其中\n- x是水平移动，正值向右，负值向左\n- y是水平移动，正值向下，负值向上\n\n例子：\n\n\ttransform: translate(50px,20px);\n\t-ms-transform: translate(50px,20px);\t\t/* IE 9 */\n\t-webkit-transform: translate(50px,20px);\t/* Safari and Chrome */\n\t-o-transform: translate(50px,20px);\t\t/* Opera */\n\t-moz-transform: translate(50px,20px);\t\t/* Firefox */\n\n###### 2.scale(x,y)\n元素尺寸大小缩放，可为小数，其中\n- x是宽度缩放\n- y是高度缩放\n\n例子：\n\n\ttransform: scale(2,2.4);\n\t-ms-transform: scale(2,2.4);\n\t-webkit-transform: scale(2,2.4);\n\t-o-transform: scale(2,2.4);\n\t-moz-transform: scale(2,2.4);\n\n###### 3.rotate(angle)\n元素旋转一定角度，正值沿顺时针旋转，负值沿逆时针旋转\n例子：\n\n\ttransform: skewX(30deg);\n\t-ms-transform: skewX(30deg);\n\t-webkit-transform: skewX(30deg);\n\t-o-transform: skewX(30deg);\n\t-moz-transform: skewX(30deg);\n\n###### 4.skew(x-angle,y-angle)\n沿着 X 和 Y 轴的 2D 倾斜转换\n先按照元素两个中轴倾斜固定的角度，再将2根中轴线向两边平移形成\n\n    transform: skewY(30deg);\n    -ms-transform: skewY(30deg);\n    -webkit-transform: skewY(30deg);\n    -o-transform: skewY(30deg);\n    -moz-transform: skewY(30deg);\n\n![skew1](/images/2018-01-07_skew1.jpg)\n两个中轴只有一根倾斜：\n\n    transform: skewX(30deg);\n    -ms-transform: skewX(30deg);\n    -webkit-transform: skewX(30deg);\n    -o-transform: skewX(30deg);\n    -moz-transform: skewX(30deg);\n\n    transform: skewY(30deg);\n    -ms-transform: skewY(30deg);\n    -webkit-transform: skewY(30deg);\n    -o-transform: skewY(30deg);\n    -moz-transform: skewY(30deg);\n\n![skew2](/images/2018-01-07_skew2.jpg)\n\nDemo请点击此处：[2D-demo](http://sandbox.runjs.cn/show/teqbdfr2)\n\n#### transform-origin\n属性允许您改变被转换元素的位置","slug":"css3-2D","published":1,"updated":"2018-01-14T10:50:54.222Z","layout":"post","photos":[],"link":"","_id":"cjqwe4273002jor0bd0mgfhnv","content":"<p>2D变换，能够对元素进行移动、缩放、转动、拉长或拉伸<br><a id=\"more\"></a></p>\n<h4 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h4><pre><code>transform: none|transform-functions;\n</code></pre><p>其中变换方法如下：</p>\n<ul>\n<li>matrix(n,n,n,n,n,n)，定义 2D 转换，使用六个值的矩阵。</li>\n<li>translate(x,y)，定义 2D 转换，沿着 X 和 Y 轴移动元素。</li>\n<li>translateX(n) ，定义 2D 转换，沿着 X 轴移动元素。</li>\n<li>translateY(n) ，定义 2D 转换，沿着 Y 轴移动元素。</li>\n<li>scale(x,y) ，定义 2D 缩放转换，改变元素的宽度和高度。</li>\n<li>scaleX(n) ，定义 2D 缩放转换，改变元素的宽度。</li>\n<li>scaleY(n) ，定义 2D 缩放转换，改变元素的高度。</li>\n<li>rotate(angle) ，定义 2D 旋转，在参数中规定角度。</li>\n<li>skew(x-angle,y-angle) ，定义 2D 倾斜转换，沿着 X 和 Y 轴。</li>\n<li>skewX(angle) ，定义 2D 倾斜转换，沿着 X 轴。</li>\n<li>skewY(angle) ，定义 2D 倾斜转换，沿着 Y 轴。</li>\n</ul>\n<h6 id=\"1-translate（x-y）\"><a href=\"#1-translate（x-y）\" class=\"headerlink\" title=\"1.translate（x,y）\"></a>1.translate（x,y）</h6><p>元素平移，其中</p>\n<ul>\n<li>x是水平移动，正值向右，负值向左</li>\n<li>y是水平移动，正值向下，负值向上</li>\n</ul>\n<p>例子：</p>\n<pre><code>transform: translate(50px,20px);\n-ms-transform: translate(50px,20px);        /* IE 9 */\n-webkit-transform: translate(50px,20px);    /* Safari and Chrome */\n-o-transform: translate(50px,20px);        /* Opera */\n-moz-transform: translate(50px,20px);        /* Firefox */\n</code></pre><h6 id=\"2-scale-x-y\"><a href=\"#2-scale-x-y\" class=\"headerlink\" title=\"2.scale(x,y)\"></a>2.scale(x,y)</h6><p>元素尺寸大小缩放，可为小数，其中</p>\n<ul>\n<li>x是宽度缩放</li>\n<li>y是高度缩放</li>\n</ul>\n<p>例子：</p>\n<pre><code>transform: scale(2,2.4);\n-ms-transform: scale(2,2.4);\n-webkit-transform: scale(2,2.4);\n-o-transform: scale(2,2.4);\n-moz-transform: scale(2,2.4);\n</code></pre><h6 id=\"3-rotate-angle\"><a href=\"#3-rotate-angle\" class=\"headerlink\" title=\"3.rotate(angle)\"></a>3.rotate(angle)</h6><p>元素旋转一定角度，正值沿顺时针旋转，负值沿逆时针旋转<br>例子：</p>\n<pre><code>transform: skewX(30deg);\n-ms-transform: skewX(30deg);\n-webkit-transform: skewX(30deg);\n-o-transform: skewX(30deg);\n-moz-transform: skewX(30deg);\n</code></pre><h6 id=\"4-skew-x-angle-y-angle\"><a href=\"#4-skew-x-angle-y-angle\" class=\"headerlink\" title=\"4.skew(x-angle,y-angle)\"></a>4.skew(x-angle,y-angle)</h6><p>沿着 X 和 Y 轴的 2D 倾斜转换<br>先按照元素两个中轴倾斜固定的角度，再将2根中轴线向两边平移形成</p>\n<pre><code>transform: skewY(30deg);\n-ms-transform: skewY(30deg);\n-webkit-transform: skewY(30deg);\n-o-transform: skewY(30deg);\n-moz-transform: skewY(30deg);\n</code></pre><p><img src=\"/images/2018-01-07_skew1.jpg\" alt=\"skew1\"><br>两个中轴只有一根倾斜：</p>\n<pre><code>transform: skewX(30deg);\n-ms-transform: skewX(30deg);\n-webkit-transform: skewX(30deg);\n-o-transform: skewX(30deg);\n-moz-transform: skewX(30deg);\n\ntransform: skewY(30deg);\n-ms-transform: skewY(30deg);\n-webkit-transform: skewY(30deg);\n-o-transform: skewY(30deg);\n-moz-transform: skewY(30deg);\n</code></pre><p><img src=\"/images/2018-01-07_skew2.jpg\" alt=\"skew2\"></p>\n<p>Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/teqbdfr2\" target=\"_blank\" rel=\"external\">2D-demo</a></p>\n<h4 id=\"transform-origin\"><a href=\"#transform-origin\" class=\"headerlink\" title=\"transform-origin\"></a>transform-origin</h4><p>属性允许您改变被转换元素的位置</p>\n","site":{"data":{}},"excerpt":"<p>2D变换，能够对元素进行移动、缩放、转动、拉长或拉伸<br>","more":"</p>\n<h4 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h4><pre><code>transform: none|transform-functions;\n</code></pre><p>其中变换方法如下：</p>\n<ul>\n<li>matrix(n,n,n,n,n,n)，定义 2D 转换，使用六个值的矩阵。</li>\n<li>translate(x,y)，定义 2D 转换，沿着 X 和 Y 轴移动元素。</li>\n<li>translateX(n) ，定义 2D 转换，沿着 X 轴移动元素。</li>\n<li>translateY(n) ，定义 2D 转换，沿着 Y 轴移动元素。</li>\n<li>scale(x,y) ，定义 2D 缩放转换，改变元素的宽度和高度。</li>\n<li>scaleX(n) ，定义 2D 缩放转换，改变元素的宽度。</li>\n<li>scaleY(n) ，定义 2D 缩放转换，改变元素的高度。</li>\n<li>rotate(angle) ，定义 2D 旋转，在参数中规定角度。</li>\n<li>skew(x-angle,y-angle) ，定义 2D 倾斜转换，沿着 X 和 Y 轴。</li>\n<li>skewX(angle) ，定义 2D 倾斜转换，沿着 X 轴。</li>\n<li>skewY(angle) ，定义 2D 倾斜转换，沿着 Y 轴。</li>\n</ul>\n<h6 id=\"1-translate（x-y）\"><a href=\"#1-translate（x-y）\" class=\"headerlink\" title=\"1.translate（x,y）\"></a>1.translate（x,y）</h6><p>元素平移，其中</p>\n<ul>\n<li>x是水平移动，正值向右，负值向左</li>\n<li>y是水平移动，正值向下，负值向上</li>\n</ul>\n<p>例子：</p>\n<pre><code>transform: translate(50px,20px);\n-ms-transform: translate(50px,20px);        /* IE 9 */\n-webkit-transform: translate(50px,20px);    /* Safari and Chrome */\n-o-transform: translate(50px,20px);        /* Opera */\n-moz-transform: translate(50px,20px);        /* Firefox */\n</code></pre><h6 id=\"2-scale-x-y\"><a href=\"#2-scale-x-y\" class=\"headerlink\" title=\"2.scale(x,y)\"></a>2.scale(x,y)</h6><p>元素尺寸大小缩放，可为小数，其中</p>\n<ul>\n<li>x是宽度缩放</li>\n<li>y是高度缩放</li>\n</ul>\n<p>例子：</p>\n<pre><code>transform: scale(2,2.4);\n-ms-transform: scale(2,2.4);\n-webkit-transform: scale(2,2.4);\n-o-transform: scale(2,2.4);\n-moz-transform: scale(2,2.4);\n</code></pre><h6 id=\"3-rotate-angle\"><a href=\"#3-rotate-angle\" class=\"headerlink\" title=\"3.rotate(angle)\"></a>3.rotate(angle)</h6><p>元素旋转一定角度，正值沿顺时针旋转，负值沿逆时针旋转<br>例子：</p>\n<pre><code>transform: skewX(30deg);\n-ms-transform: skewX(30deg);\n-webkit-transform: skewX(30deg);\n-o-transform: skewX(30deg);\n-moz-transform: skewX(30deg);\n</code></pre><h6 id=\"4-skew-x-angle-y-angle\"><a href=\"#4-skew-x-angle-y-angle\" class=\"headerlink\" title=\"4.skew(x-angle,y-angle)\"></a>4.skew(x-angle,y-angle)</h6><p>沿着 X 和 Y 轴的 2D 倾斜转换<br>先按照元素两个中轴倾斜固定的角度，再将2根中轴线向两边平移形成</p>\n<pre><code>transform: skewY(30deg);\n-ms-transform: skewY(30deg);\n-webkit-transform: skewY(30deg);\n-o-transform: skewY(30deg);\n-moz-transform: skewY(30deg);\n</code></pre><p><img src=\"/images/2018-01-07_skew1.jpg\" alt=\"skew1\"><br>两个中轴只有一根倾斜：</p>\n<pre><code>transform: skewX(30deg);\n-ms-transform: skewX(30deg);\n-webkit-transform: skewX(30deg);\n-o-transform: skewX(30deg);\n-moz-transform: skewX(30deg);\n\ntransform: skewY(30deg);\n-ms-transform: skewY(30deg);\n-webkit-transform: skewY(30deg);\n-o-transform: skewY(30deg);\n-moz-transform: skewY(30deg);\n</code></pre><p><img src=\"/images/2018-01-07_skew2.jpg\" alt=\"skew2\"></p>\n<p>Demo请点击此处：<a href=\"http://sandbox.runjs.cn/show/teqbdfr2\" target=\"_blank\" rel=\"external\">2D-demo</a></p>\n<h4 id=\"transform-origin\"><a href=\"#transform-origin\" class=\"headerlink\" title=\"transform-origin\"></a>transform-origin</h4><p>属性允许您改变被转换元素的位置</p>"},{"title":"JQuery-插件","date":"2018-07-31T04:15:45.000Z","comments":1,"_content":"\nJQuery插件是对jquery函数库的一种扩展，以便在不同地方可以复用\nJQuery插件主要有三种：\n<!--more-->\n\n- 对象方法的插件：封装对象的操作，插件函数可直接应用与jq对象，改变对象的外观和行为等\n- 全局方法的插件：封装操作进jquery命名空间，可理解为给jquery添加静态函数，处理能力和一般的全局函数差不多,典型的是$.ajax()方法\n- 选择器插件：封装属于自己的新的jquery选择器\n\n在编写插件之前，先介绍一下两个重要的方法，在后面的插件书写中有重要的作用\n\n### 闭包注册\n闭包是js的特色，相比大家比较熟悉，在插件中有着很好的应用\n\n    ;(function($) {\n        ....插件扩展代码\n     })(JQuery);\n\n这里有两个作用：\n\n- 闭包函数自运行，将插件方注册金jquery里\n- 以$为入参，传入jquery，这样在插件内部就可以直接使用$\n\n### $.extend\n$.extend方法用于合并扩展对象\n\n    $.extend(targetObj,object1,object2,...)\n\n后面的对象同名成员将覆盖前面对象的成员，否则就合并起来,targetObj是合并后的对象，举个例子：\n\n    $.extend({},{name:'jack',age:18,sex:'man'});\n    结果：{name:'jack',age:18,sex:'man'}\n\n    $.extend({name:'jack',age:18},{name:'tom',sex:'man'});\n    结果：{name:'tom',age:18,sex:'man'}\n\n## 插件\n\n### 1 对象方法的插件\n此类插件使用$.fn来扩展，比如：\n\n    $.fn.valitor = function(object) {...} 或\n    $.fn.extend({valitor: function(object) {...}))\n\n其实查看jquery的源码，可以看到\n\n    $.fn = $.prototype\n\n所以这样做就相当于添加方法到jquery的原型对象上，所有对象都可使用这些方法\n下面是一个简单的例子，给元素添加颜色\n\n    ;(function($) {\n        $.fn.color = function(value) {\n            return this.css(\"color\",value);\n        }\n\n        $.fn.extend({\n            back: function(value) {\n                return this.css(\"background\",value);\n            },\n            border: function(value) {\n                return this.css(\"border\",value);\n            }\n        });\n    })(jQuery);\n\n使用方式：\n\n    <div class=\"tagcontain\">\n    <button>改变颜色</button>\n    </div>\n    <span class=\"blue\">速率类</span>\n    <span class=\"red\">百分比</span>\n    <span class=\"black\">峰值比</span>\n\n    $(function() {\n        $(\"button\").click(function() {\n            $(\"span\").back(\"#999\").color(\"black\")\n                    .border(\"solid 2px red\");\n         });\n    });\n\n效果见：[color插件](https://sandbox.runjs.cn/show/jpnvtrkv)\n\n**注意：**\n\n> 在插件方法内部的this值得是应用此插件的jq对象，可以使用jq的一些方法，比如：this.each();\n> 最后要返回jq对象本身，为了后续的链式调用\n\n此外，还可以暴露插件的一些属性和方法，供使用者自定义，比如：\n\n    $.fn.default = {..};\n    $.fn.format = function() {..}\n\n这里也有个例子，是模仿bootstrapTable插件渲染表格的\n使用方式：\n\n    <table id=\"table1\"></table>\n\n    $(function() {\n        var columnDefs = [{checkbox: true},\n                                            {field: 'name',title: '姓名'},\n                                            {field: 'sex',title: '性别'},\n                                            {field: 'address',title: '地址'}];\n        var rowData = [{name:'张山',sex:'男',address:'上海'},\n                                    {name:'李四',sex:'男',address:'苏州'},\n                                    {name:'王五',sex:'女',address:'嘉兴'},\n                                    {name:'张麻子',sex:'男',address:'宁波'},\n                                    {name:'赵六',sex:'男',address:'长沙'}];\n        $.fn.bootTable.defaultOptions = {odd: 'odd',\n                                         even: 'even',selected:'checked'};\n        $(\"#table1\").bootTable({id: 'table1',\n                                caption: '表格标题',\n                                column: columnDefs,\n                                data: rowData,\n                                option: {odd: 'odd2', even: 'even2'}});\n         //获取已选记录\n         var selection = $(\"#table1\").bootTable('getSelection');\n\n    });\n\n效果见：[bootTable插件](https://sandbox.runjs.cn/show/e3pqshbw)\n\n当然，也可以隐藏私有方法，只要是在插件书写时直接这样生命方法即可\n\n    function privateFunc() {...}\n\n### 2 全局方法的插件\n此类插件使用$.extend()来扩展，其实可以理解为jquery命名空间添加静态方法，比如\n\n    $.Fuc = function() {...}；\n    $.extend({\n        add: function(x,y) {\n            return x+y;\n        }\n    });\n\n使用\n\n    var num = $.add(3,5);\n\n这个比较简单, 也可以给jquery添加自定义命名空间来减少命名冲突\n\n    $.myName = {\n        Fuc: function() {...}\n    };\n\n    $.myName.Fuc();\n","source":"_posts/2018-07-31-jq-plugin.md","raw":"---\ntitle: JQuery-插件\ndate: 2018-07-31 12:15:45\ntags: Jquery\ncategories: 前端\ncomments: true\n---\n\nJQuery插件是对jquery函数库的一种扩展，以便在不同地方可以复用\nJQuery插件主要有三种：\n<!--more-->\n\n- 对象方法的插件：封装对象的操作，插件函数可直接应用与jq对象，改变对象的外观和行为等\n- 全局方法的插件：封装操作进jquery命名空间，可理解为给jquery添加静态函数，处理能力和一般的全局函数差不多,典型的是$.ajax()方法\n- 选择器插件：封装属于自己的新的jquery选择器\n\n在编写插件之前，先介绍一下两个重要的方法，在后面的插件书写中有重要的作用\n\n### 闭包注册\n闭包是js的特色，相比大家比较熟悉，在插件中有着很好的应用\n\n    ;(function($) {\n        ....插件扩展代码\n     })(JQuery);\n\n这里有两个作用：\n\n- 闭包函数自运行，将插件方注册金jquery里\n- 以$为入参，传入jquery，这样在插件内部就可以直接使用$\n\n### $.extend\n$.extend方法用于合并扩展对象\n\n    $.extend(targetObj,object1,object2,...)\n\n后面的对象同名成员将覆盖前面对象的成员，否则就合并起来,targetObj是合并后的对象，举个例子：\n\n    $.extend({},{name:'jack',age:18,sex:'man'});\n    结果：{name:'jack',age:18,sex:'man'}\n\n    $.extend({name:'jack',age:18},{name:'tom',sex:'man'});\n    结果：{name:'tom',age:18,sex:'man'}\n\n## 插件\n\n### 1 对象方法的插件\n此类插件使用$.fn来扩展，比如：\n\n    $.fn.valitor = function(object) {...} 或\n    $.fn.extend({valitor: function(object) {...}))\n\n其实查看jquery的源码，可以看到\n\n    $.fn = $.prototype\n\n所以这样做就相当于添加方法到jquery的原型对象上，所有对象都可使用这些方法\n下面是一个简单的例子，给元素添加颜色\n\n    ;(function($) {\n        $.fn.color = function(value) {\n            return this.css(\"color\",value);\n        }\n\n        $.fn.extend({\n            back: function(value) {\n                return this.css(\"background\",value);\n            },\n            border: function(value) {\n                return this.css(\"border\",value);\n            }\n        });\n    })(jQuery);\n\n使用方式：\n\n    <div class=\"tagcontain\">\n    <button>改变颜色</button>\n    </div>\n    <span class=\"blue\">速率类</span>\n    <span class=\"red\">百分比</span>\n    <span class=\"black\">峰值比</span>\n\n    $(function() {\n        $(\"button\").click(function() {\n            $(\"span\").back(\"#999\").color(\"black\")\n                    .border(\"solid 2px red\");\n         });\n    });\n\n效果见：[color插件](https://sandbox.runjs.cn/show/jpnvtrkv)\n\n**注意：**\n\n> 在插件方法内部的this值得是应用此插件的jq对象，可以使用jq的一些方法，比如：this.each();\n> 最后要返回jq对象本身，为了后续的链式调用\n\n此外，还可以暴露插件的一些属性和方法，供使用者自定义，比如：\n\n    $.fn.default = {..};\n    $.fn.format = function() {..}\n\n这里也有个例子，是模仿bootstrapTable插件渲染表格的\n使用方式：\n\n    <table id=\"table1\"></table>\n\n    $(function() {\n        var columnDefs = [{checkbox: true},\n                                            {field: 'name',title: '姓名'},\n                                            {field: 'sex',title: '性别'},\n                                            {field: 'address',title: '地址'}];\n        var rowData = [{name:'张山',sex:'男',address:'上海'},\n                                    {name:'李四',sex:'男',address:'苏州'},\n                                    {name:'王五',sex:'女',address:'嘉兴'},\n                                    {name:'张麻子',sex:'男',address:'宁波'},\n                                    {name:'赵六',sex:'男',address:'长沙'}];\n        $.fn.bootTable.defaultOptions = {odd: 'odd',\n                                         even: 'even',selected:'checked'};\n        $(\"#table1\").bootTable({id: 'table1',\n                                caption: '表格标题',\n                                column: columnDefs,\n                                data: rowData,\n                                option: {odd: 'odd2', even: 'even2'}});\n         //获取已选记录\n         var selection = $(\"#table1\").bootTable('getSelection');\n\n    });\n\n效果见：[bootTable插件](https://sandbox.runjs.cn/show/e3pqshbw)\n\n当然，也可以隐藏私有方法，只要是在插件书写时直接这样生命方法即可\n\n    function privateFunc() {...}\n\n### 2 全局方法的插件\n此类插件使用$.extend()来扩展，其实可以理解为jquery命名空间添加静态方法，比如\n\n    $.Fuc = function() {...}；\n    $.extend({\n        add: function(x,y) {\n            return x+y;\n        }\n    });\n\n使用\n\n    var num = $.add(3,5);\n\n这个比较简单, 也可以给jquery添加自定义命名空间来减少命名冲突\n\n    $.myName = {\n        Fuc: function() {...}\n    };\n\n    $.myName.Fuc();\n","slug":"jq-plugin","published":1,"updated":"2018-08-02T15:13:38.113Z","layout":"post","photos":[],"link":"","_id":"cjqwe4274002lor0bv288yu12","content":"<p>JQuery插件是对jquery函数库的一种扩展，以便在不同地方可以复用<br>JQuery插件主要有三种：<br><a id=\"more\"></a></p>\n<ul>\n<li>对象方法的插件：封装对象的操作，插件函数可直接应用与jq对象，改变对象的外观和行为等</li>\n<li>全局方法的插件：封装操作进jquery命名空间，可理解为给jquery添加静态函数，处理能力和一般的全局函数差不多,典型的是$.ajax()方法</li>\n<li>选择器插件：封装属于自己的新的jquery选择器</li>\n</ul>\n<p>在编写插件之前，先介绍一下两个重要的方法，在后面的插件书写中有重要的作用</p>\n<h3 id=\"闭包注册\"><a href=\"#闭包注册\" class=\"headerlink\" title=\"闭包注册\"></a>闭包注册</h3><p>闭包是js的特色，相比大家比较熟悉，在插件中有着很好的应用</p>\n<pre><code>;(function($) {\n    ....插件扩展代码\n })(JQuery);\n</code></pre><p>这里有两个作用：</p>\n<ul>\n<li>闭包函数自运行，将插件方注册金jquery里</li>\n<li>以$为入参，传入jquery，这样在插件内部就可以直接使用$</li>\n</ul>\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend\"></a>$.extend</h3><p>$.extend方法用于合并扩展对象</p>\n<pre><code>$.extend(targetObj,object1,object2,...)\n</code></pre><p>后面的对象同名成员将覆盖前面对象的成员，否则就合并起来,targetObj是合并后的对象，举个例子：</p>\n<pre><code>$.extend({},{name:&apos;jack&apos;,age:18,sex:&apos;man&apos;});\n结果：{name:&apos;jack&apos;,age:18,sex:&apos;man&apos;}\n\n$.extend({name:&apos;jack&apos;,age:18},{name:&apos;tom&apos;,sex:&apos;man&apos;});\n结果：{name:&apos;tom&apos;,age:18,sex:&apos;man&apos;}\n</code></pre><h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"1-对象方法的插件\"><a href=\"#1-对象方法的插件\" class=\"headerlink\" title=\"1 对象方法的插件\"></a>1 对象方法的插件</h3><p>此类插件使用$.fn来扩展，比如：</p>\n<pre><code>$.fn.valitor = function(object) {...} 或\n$.fn.extend({valitor: function(object) {...}))\n</code></pre><p>其实查看jquery的源码，可以看到</p>\n<pre><code>$.fn = $.prototype\n</code></pre><p>所以这样做就相当于添加方法到jquery的原型对象上，所有对象都可使用这些方法<br>下面是一个简单的例子，给元素添加颜色</p>\n<pre><code>;(function($) {\n    $.fn.color = function(value) {\n        return this.css(&quot;color&quot;,value);\n    }\n\n    $.fn.extend({\n        back: function(value) {\n            return this.css(&quot;background&quot;,value);\n        },\n        border: function(value) {\n            return this.css(&quot;border&quot;,value);\n        }\n    });\n})(jQuery);\n</code></pre><p>使用方式：</p>\n<pre><code>&lt;div class=&quot;tagcontain&quot;&gt;\n&lt;button&gt;改变颜色&lt;/button&gt;\n&lt;/div&gt;\n&lt;span class=&quot;blue&quot;&gt;速率类&lt;/span&gt;\n&lt;span class=&quot;red&quot;&gt;百分比&lt;/span&gt;\n&lt;span class=&quot;black&quot;&gt;峰值比&lt;/span&gt;\n\n$(function() {\n    $(&quot;button&quot;).click(function() {\n        $(&quot;span&quot;).back(&quot;#999&quot;).color(&quot;black&quot;)\n                .border(&quot;solid 2px red&quot;);\n     });\n});\n</code></pre><p>效果见：<a href=\"https://sandbox.runjs.cn/show/jpnvtrkv\" target=\"_blank\" rel=\"external\">color插件</a></p>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>在插件方法内部的this值得是应用此插件的jq对象，可以使用jq的一些方法，比如：this.each();<br>最后要返回jq对象本身，为了后续的链式调用</p>\n</blockquote>\n<p>此外，还可以暴露插件的一些属性和方法，供使用者自定义，比如：</p>\n<pre><code>$.fn.default = {..};\n$.fn.format = function() {..}\n</code></pre><p>这里也有个例子，是模仿bootstrapTable插件渲染表格的<br>使用方式：</p>\n<pre><code>&lt;table id=&quot;table1&quot;&gt;&lt;/table&gt;\n\n$(function() {\n    var columnDefs = [{checkbox: true},\n                                        {field: &apos;name&apos;,title: &apos;姓名&apos;},\n                                        {field: &apos;sex&apos;,title: &apos;性别&apos;},\n                                        {field: &apos;address&apos;,title: &apos;地址&apos;}];\n    var rowData = [{name:&apos;张山&apos;,sex:&apos;男&apos;,address:&apos;上海&apos;},\n                                {name:&apos;李四&apos;,sex:&apos;男&apos;,address:&apos;苏州&apos;},\n                                {name:&apos;王五&apos;,sex:&apos;女&apos;,address:&apos;嘉兴&apos;},\n                                {name:&apos;张麻子&apos;,sex:&apos;男&apos;,address:&apos;宁波&apos;},\n                                {name:&apos;赵六&apos;,sex:&apos;男&apos;,address:&apos;长沙&apos;}];\n    $.fn.bootTable.defaultOptions = {odd: &apos;odd&apos;,\n                                     even: &apos;even&apos;,selected:&apos;checked&apos;};\n    $(&quot;#table1&quot;).bootTable({id: &apos;table1&apos;,\n                            caption: &apos;表格标题&apos;,\n                            column: columnDefs,\n                            data: rowData,\n                            option: {odd: &apos;odd2&apos;, even: &apos;even2&apos;}});\n     //获取已选记录\n     var selection = $(&quot;#table1&quot;).bootTable(&apos;getSelection&apos;);\n\n});\n</code></pre><p>效果见：<a href=\"https://sandbox.runjs.cn/show/e3pqshbw\" target=\"_blank\" rel=\"external\">bootTable插件</a></p>\n<p>当然，也可以隐藏私有方法，只要是在插件书写时直接这样生命方法即可</p>\n<pre><code>function privateFunc() {...}\n</code></pre><h3 id=\"2-全局方法的插件\"><a href=\"#2-全局方法的插件\" class=\"headerlink\" title=\"2 全局方法的插件\"></a>2 全局方法的插件</h3><p>此类插件使用$.extend()来扩展，其实可以理解为jquery命名空间添加静态方法，比如</p>\n<pre><code>$.Fuc = function() {...}；\n$.extend({\n    add: function(x,y) {\n        return x+y;\n    }\n});\n</code></pre><p>使用</p>\n<pre><code>var num = $.add(3,5);\n</code></pre><p>这个比较简单, 也可以给jquery添加自定义命名空间来减少命名冲突</p>\n<pre><code>$.myName = {\n    Fuc: function() {...}\n};\n\n$.myName.Fuc();\n</code></pre>","site":{"data":{}},"excerpt":"<p>JQuery插件是对jquery函数库的一种扩展，以便在不同地方可以复用<br>JQuery插件主要有三种：<br>","more":"</p>\n<ul>\n<li>对象方法的插件：封装对象的操作，插件函数可直接应用与jq对象，改变对象的外观和行为等</li>\n<li>全局方法的插件：封装操作进jquery命名空间，可理解为给jquery添加静态函数，处理能力和一般的全局函数差不多,典型的是$.ajax()方法</li>\n<li>选择器插件：封装属于自己的新的jquery选择器</li>\n</ul>\n<p>在编写插件之前，先介绍一下两个重要的方法，在后面的插件书写中有重要的作用</p>\n<h3 id=\"闭包注册\"><a href=\"#闭包注册\" class=\"headerlink\" title=\"闭包注册\"></a>闭包注册</h3><p>闭包是js的特色，相比大家比较熟悉，在插件中有着很好的应用</p>\n<pre><code>;(function($) {\n    ....插件扩展代码\n })(JQuery);\n</code></pre><p>这里有两个作用：</p>\n<ul>\n<li>闭包函数自运行，将插件方注册金jquery里</li>\n<li>以$为入参，传入jquery，这样在插件内部就可以直接使用$</li>\n</ul>\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend\"></a>$.extend</h3><p>$.extend方法用于合并扩展对象</p>\n<pre><code>$.extend(targetObj,object1,object2,...)\n</code></pre><p>后面的对象同名成员将覆盖前面对象的成员，否则就合并起来,targetObj是合并后的对象，举个例子：</p>\n<pre><code>$.extend({},{name:&apos;jack&apos;,age:18,sex:&apos;man&apos;});\n结果：{name:&apos;jack&apos;,age:18,sex:&apos;man&apos;}\n\n$.extend({name:&apos;jack&apos;,age:18},{name:&apos;tom&apos;,sex:&apos;man&apos;});\n结果：{name:&apos;tom&apos;,age:18,sex:&apos;man&apos;}\n</code></pre><h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"1-对象方法的插件\"><a href=\"#1-对象方法的插件\" class=\"headerlink\" title=\"1 对象方法的插件\"></a>1 对象方法的插件</h3><p>此类插件使用$.fn来扩展，比如：</p>\n<pre><code>$.fn.valitor = function(object) {...} 或\n$.fn.extend({valitor: function(object) {...}))\n</code></pre><p>其实查看jquery的源码，可以看到</p>\n<pre><code>$.fn = $.prototype\n</code></pre><p>所以这样做就相当于添加方法到jquery的原型对象上，所有对象都可使用这些方法<br>下面是一个简单的例子，给元素添加颜色</p>\n<pre><code>;(function($) {\n    $.fn.color = function(value) {\n        return this.css(&quot;color&quot;,value);\n    }\n\n    $.fn.extend({\n        back: function(value) {\n            return this.css(&quot;background&quot;,value);\n        },\n        border: function(value) {\n            return this.css(&quot;border&quot;,value);\n        }\n    });\n})(jQuery);\n</code></pre><p>使用方式：</p>\n<pre><code>&lt;div class=&quot;tagcontain&quot;&gt;\n&lt;button&gt;改变颜色&lt;/button&gt;\n&lt;/div&gt;\n&lt;span class=&quot;blue&quot;&gt;速率类&lt;/span&gt;\n&lt;span class=&quot;red&quot;&gt;百分比&lt;/span&gt;\n&lt;span class=&quot;black&quot;&gt;峰值比&lt;/span&gt;\n\n$(function() {\n    $(&quot;button&quot;).click(function() {\n        $(&quot;span&quot;).back(&quot;#999&quot;).color(&quot;black&quot;)\n                .border(&quot;solid 2px red&quot;);\n     });\n});\n</code></pre><p>效果见：<a href=\"https://sandbox.runjs.cn/show/jpnvtrkv\" target=\"_blank\" rel=\"external\">color插件</a></p>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>在插件方法内部的this值得是应用此插件的jq对象，可以使用jq的一些方法，比如：this.each();<br>最后要返回jq对象本身，为了后续的链式调用</p>\n</blockquote>\n<p>此外，还可以暴露插件的一些属性和方法，供使用者自定义，比如：</p>\n<pre><code>$.fn.default = {..};\n$.fn.format = function() {..}\n</code></pre><p>这里也有个例子，是模仿bootstrapTable插件渲染表格的<br>使用方式：</p>\n<pre><code>&lt;table id=&quot;table1&quot;&gt;&lt;/table&gt;\n\n$(function() {\n    var columnDefs = [{checkbox: true},\n                                        {field: &apos;name&apos;,title: &apos;姓名&apos;},\n                                        {field: &apos;sex&apos;,title: &apos;性别&apos;},\n                                        {field: &apos;address&apos;,title: &apos;地址&apos;}];\n    var rowData = [{name:&apos;张山&apos;,sex:&apos;男&apos;,address:&apos;上海&apos;},\n                                {name:&apos;李四&apos;,sex:&apos;男&apos;,address:&apos;苏州&apos;},\n                                {name:&apos;王五&apos;,sex:&apos;女&apos;,address:&apos;嘉兴&apos;},\n                                {name:&apos;张麻子&apos;,sex:&apos;男&apos;,address:&apos;宁波&apos;},\n                                {name:&apos;赵六&apos;,sex:&apos;男&apos;,address:&apos;长沙&apos;}];\n    $.fn.bootTable.defaultOptions = {odd: &apos;odd&apos;,\n                                     even: &apos;even&apos;,selected:&apos;checked&apos;};\n    $(&quot;#table1&quot;).bootTable({id: &apos;table1&apos;,\n                            caption: &apos;表格标题&apos;,\n                            column: columnDefs,\n                            data: rowData,\n                            option: {odd: &apos;odd2&apos;, even: &apos;even2&apos;}});\n     //获取已选记录\n     var selection = $(&quot;#table1&quot;).bootTable(&apos;getSelection&apos;);\n\n});\n</code></pre><p>效果见：<a href=\"https://sandbox.runjs.cn/show/e3pqshbw\" target=\"_blank\" rel=\"external\">bootTable插件</a></p>\n<p>当然，也可以隐藏私有方法，只要是在插件书写时直接这样生命方法即可</p>\n<pre><code>function privateFunc() {...}\n</code></pre><h3 id=\"2-全局方法的插件\"><a href=\"#2-全局方法的插件\" class=\"headerlink\" title=\"2 全局方法的插件\"></a>2 全局方法的插件</h3><p>此类插件使用$.extend()来扩展，其实可以理解为jquery命名空间添加静态方法，比如</p>\n<pre><code>$.Fuc = function() {...}；\n$.extend({\n    add: function(x,y) {\n        return x+y;\n    }\n});\n</code></pre><p>使用</p>\n<pre><code>var num = $.add(3,5);\n</code></pre><p>这个比较简单, 也可以给jquery添加自定义命名空间来减少命名冲突</p>\n<pre><code>$.myName = {\n    Fuc: function() {...}\n};\n\n$.myName.Fuc();\n</code></pre>"},{"title":"前端插件包-BootShadow","date":"2018-09-26T15:04:55.000Z","comments":1,"_content":"\nBoot-Shadow是一款自己编写的开源前端插件包，包含了在前端开发中常用的一些组件，可方便应用与项目开发当中\n插件包安装方便，使用简单，只要了解一点html,css和jquery的知识即可使用\n<!--more-->\n\n# 特性\n\n- 使用webpack/npm打包发布，下载方便\n- 引用脚本后直接使用\n- 常用插件，使用方式多样\n\n# 文档-Demo\n\n[http://blueskyawen.com/boot-shadow/](http://blueskyawen.com/boot-shadow/)\n\n# 项目仓库\n\n[github地址](https://github.com/blueskyawen/boot-shadow)\n\n# 支持环境\n\n现代浏览器和 IE9 及以上（需要 polyfills）\n\n# 下载方式\n\n    npm install boot-shadow --save-dev\n\n\n# 使用方式\n\n### 直接引用脚本和CSS样式文件\n\n    <script src=\"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"node_modules/boot-shadow/dist/bootshadow.min.css\">\n    <script src=\"node_modules/boot-shadow/dist/bootshadow.min.js\"></script>\n\n### 在Angular-cli中使用\n\n    npm install jquery --save\n    npm install @types/jquery --save\n    npm install boot-shadow --save-dev\n\n更新.angular-cli.json配置\n\n    \"styles\": [\n        \"../node_modules/boot-shadow/dist/bootshadow.min.css\"\n    ],\n    \"scripts\": [\n        \"../node_modules/jquery/dist/jquery.js\",\n        \"../node_modules/boot-shadow/dist/bootshadow.min.js\"\n    ],\n\n在对应component中的ngOnInit()使用\n\n    declare var $: any;\n\n    ngOnInit() {\n        $(\"#switch2\").bootSwitch();\n    }\n\n","source":"_posts/2018-08-31-jq-plugin-dev2.md","raw":"---\ntitle: 前端插件包-BootShadow\ndate: 2018-09-26 23:04:55\ntags: Jquery，plugin\ncategories: 前端\ncomments: true\n---\n\nBoot-Shadow是一款自己编写的开源前端插件包，包含了在前端开发中常用的一些组件，可方便应用与项目开发当中\n插件包安装方便，使用简单，只要了解一点html,css和jquery的知识即可使用\n<!--more-->\n\n# 特性\n\n- 使用webpack/npm打包发布，下载方便\n- 引用脚本后直接使用\n- 常用插件，使用方式多样\n\n# 文档-Demo\n\n[http://blueskyawen.com/boot-shadow/](http://blueskyawen.com/boot-shadow/)\n\n# 项目仓库\n\n[github地址](https://github.com/blueskyawen/boot-shadow)\n\n# 支持环境\n\n现代浏览器和 IE9 及以上（需要 polyfills）\n\n# 下载方式\n\n    npm install boot-shadow --save-dev\n\n\n# 使用方式\n\n### 直接引用脚本和CSS样式文件\n\n    <script src=\"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"node_modules/boot-shadow/dist/bootshadow.min.css\">\n    <script src=\"node_modules/boot-shadow/dist/bootshadow.min.js\"></script>\n\n### 在Angular-cli中使用\n\n    npm install jquery --save\n    npm install @types/jquery --save\n    npm install boot-shadow --save-dev\n\n更新.angular-cli.json配置\n\n    \"styles\": [\n        \"../node_modules/boot-shadow/dist/bootshadow.min.css\"\n    ],\n    \"scripts\": [\n        \"../node_modules/jquery/dist/jquery.js\",\n        \"../node_modules/boot-shadow/dist/bootshadow.min.js\"\n    ],\n\n在对应component中的ngOnInit()使用\n\n    declare var $: any;\n\n    ngOnInit() {\n        $(\"#switch2\").bootSwitch();\n    }\n\n","slug":"jq-plugin-dev2","published":1,"updated":"2018-10-15T16:09:52.201Z","layout":"post","photos":[],"link":"","_id":"cjqwe4276002oor0bgy6snoew","content":"<p>Boot-Shadow是一款自己编写的开源前端插件包，包含了在前端开发中常用的一些组件，可方便应用与项目开发当中<br>插件包安装方便，使用简单，只要了解一点html,css和jquery的知识即可使用<br><a id=\"more\"></a></p>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>使用webpack/npm打包发布，下载方便</li>\n<li>引用脚本后直接使用</li>\n<li>常用插件，使用方式多样</li>\n</ul>\n<h1 id=\"文档-Demo\"><a href=\"#文档-Demo\" class=\"headerlink\" title=\"文档-Demo\"></a>文档-Demo</h1><p><a href=\"http://blueskyawen.com/boot-shadow/\">http://blueskyawen.com/boot-shadow/</a></p>\n<h1 id=\"项目仓库\"><a href=\"#项目仓库\" class=\"headerlink\" title=\"项目仓库\"></a>项目仓库</h1><p><a href=\"https://github.com/blueskyawen/boot-shadow\" target=\"_blank\" rel=\"external\">github地址</a></p>\n<h1 id=\"支持环境\"><a href=\"#支持环境\" class=\"headerlink\" title=\"支持环境\"></a>支持环境</h1><p>现代浏览器和 IE9 及以上（需要 polyfills）</p>\n<h1 id=\"下载方式\"><a href=\"#下载方式\" class=\"headerlink\" title=\"下载方式\"></a>下载方式</h1><pre><code>npm install boot-shadow --save-dev\n</code></pre><h1 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h1><h3 id=\"直接引用脚本和CSS样式文件\"><a href=\"#直接引用脚本和CSS样式文件\" class=\"headerlink\" title=\"直接引用脚本和CSS样式文件\"></a>直接引用脚本和CSS样式文件</h3><pre><code>&lt;script src=&quot;https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/boot-shadow/dist/bootshadow.min.css&quot;&gt;\n&lt;script src=&quot;node_modules/boot-shadow/dist/bootshadow.min.js&quot;&gt;&lt;/script&gt;\n</code></pre><h3 id=\"在Angular-cli中使用\"><a href=\"#在Angular-cli中使用\" class=\"headerlink\" title=\"在Angular-cli中使用\"></a>在Angular-cli中使用</h3><pre><code>npm install jquery --save\nnpm install @types/jquery --save\nnpm install boot-shadow --save-dev\n</code></pre><p>更新.angular-cli.json配置</p>\n<pre><code>&quot;styles&quot;: [\n    &quot;../node_modules/boot-shadow/dist/bootshadow.min.css&quot;\n],\n&quot;scripts&quot;: [\n    &quot;../node_modules/jquery/dist/jquery.js&quot;,\n    &quot;../node_modules/boot-shadow/dist/bootshadow.min.js&quot;\n],\n</code></pre><p>在对应component中的ngOnInit()使用</p>\n<pre><code>declare var $: any;\n\nngOnInit() {\n    $(&quot;#switch2&quot;).bootSwitch();\n}\n</code></pre>","site":{"data":{}},"excerpt":"<p>Boot-Shadow是一款自己编写的开源前端插件包，包含了在前端开发中常用的一些组件，可方便应用与项目开发当中<br>插件包安装方便，使用简单，只要了解一点html,css和jquery的知识即可使用<br>","more":"</p>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>使用webpack/npm打包发布，下载方便</li>\n<li>引用脚本后直接使用</li>\n<li>常用插件，使用方式多样</li>\n</ul>\n<h1 id=\"文档-Demo\"><a href=\"#文档-Demo\" class=\"headerlink\" title=\"文档-Demo\"></a>文档-Demo</h1><p><a href=\"http://blueskyawen.com/boot-shadow/\">http://blueskyawen.com/boot-shadow/</a></p>\n<h1 id=\"项目仓库\"><a href=\"#项目仓库\" class=\"headerlink\" title=\"项目仓库\"></a>项目仓库</h1><p><a href=\"https://github.com/blueskyawen/boot-shadow\" target=\"_blank\" rel=\"external\">github地址</a></p>\n<h1 id=\"支持环境\"><a href=\"#支持环境\" class=\"headerlink\" title=\"支持环境\"></a>支持环境</h1><p>现代浏览器和 IE9 及以上（需要 polyfills）</p>\n<h1 id=\"下载方式\"><a href=\"#下载方式\" class=\"headerlink\" title=\"下载方式\"></a>下载方式</h1><pre><code>npm install boot-shadow --save-dev\n</code></pre><h1 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h1><h3 id=\"直接引用脚本和CSS样式文件\"><a href=\"#直接引用脚本和CSS样式文件\" class=\"headerlink\" title=\"直接引用脚本和CSS样式文件\"></a>直接引用脚本和CSS样式文件</h3><pre><code>&lt;script src=&quot;https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/boot-shadow/dist/bootshadow.min.css&quot;&gt;\n&lt;script src=&quot;node_modules/boot-shadow/dist/bootshadow.min.js&quot;&gt;&lt;/script&gt;\n</code></pre><h3 id=\"在Angular-cli中使用\"><a href=\"#在Angular-cli中使用\" class=\"headerlink\" title=\"在Angular-cli中使用\"></a>在Angular-cli中使用</h3><pre><code>npm install jquery --save\nnpm install @types/jquery --save\nnpm install boot-shadow --save-dev\n</code></pre><p>更新.angular-cli.json配置</p>\n<pre><code>&quot;styles&quot;: [\n    &quot;../node_modules/boot-shadow/dist/bootshadow.min.css&quot;\n],\n&quot;scripts&quot;: [\n    &quot;../node_modules/jquery/dist/jquery.js&quot;,\n    &quot;../node_modules/boot-shadow/dist/bootshadow.min.js&quot;\n],\n</code></pre><p>在对应component中的ngOnInit()使用</p>\n<pre><code>declare var $: any;\n\nngOnInit() {\n    $(&quot;#switch2&quot;).bootSwitch();\n}\n</code></pre>"},{"title":"详解javascript和jquery里的各种尺寸和偏移","date":"2018-08-21T16:00:40.000Z","comments":1,"_content":"\n最近在写jquery的滚动监听和附加导航的插件的时候，把元素的尺寸，定位和偏移等各种参数和计算捋了一遍，包括js原生的和jquery的计算方法，以及\n之间的区别，想总结下来，怕忘记，方便以后翻阅\n<!--more-->\n\n# 1 Dom元素的位置呈现\n一个Dom元素在页面的位置涉及到多个参数：视口，父包含容器以及元素本身，一般的呈现形式是下面这样的：\n\n![dom-offset2](/images/2018-10-23-dom-offset2.png)\n\n可以看到，Dom元素的呈现分为好几个部分，文档的尺寸是任意的，在视口或父包含容器尺寸一定的时候也能正常显示\n当容器缺失的时候，整个视口就元素的容器，是一般位置的特殊形式\n\n![dom-offset1](/images/2018-10-23-dom-offset1.png)\n\n# 2 Dom元素的尺寸和偏移\n从上一节的元素位置图可以看到，要描述一个元素以及其位置需要许多的参数：height,width,offsetTop,offsetLeft...等，\n以及包含它的每一层级的容器元素，而每一层元素都拥有自己的属性和特性\n\n## jquery表示\n#### 尺寸\n**$('targetSelector').height()/width()**\n元素内容区的宽和高，不包括padding\n\n**$('targetSelector').innnerHeight()/innnerWidth()**\n元素内边距区的宽和高，包括padding,但不包括border\n\n**$('targetSelector').outerHeight(false)/outerWidth(false)**\n元素边界区的宽和高，包括padding/border,但不包括margin\n\n**$('targetSelector').outerHeight(true)/outerWidth(true)**\n元素外边距区的宽和高，包括padding/border/margin\n\n#### 滚动位置\n**$('targetSelector').scrollTop()/scrollLeft()**\n元素相对于视口或者父容器的滚动条的位置的滚动距离，也是父容器的滚动条的位置，即隐藏在视口之外的部分\n\n#### 偏移\n**$('targetSelector').offset()**\n元素相对于视口的偏移，从视口的边界到元素border的偏移距离,距离包含了原书的margin\n\n- offset().top\n- offset().left\n\n**$('targetSelector').position()**\n元素相对于上一级position:relative的父元素的偏移，从视口的边界到元素margin的偏移距离,距离不包含了原书的margin\n当父元素是视口的时候，其数值和offset()相同\n\n- position().top\n- position().left\n\n> 注意，这两个偏移计算值是随着文档的滚动而变化;当文档向上滚动是，偏移的距离是需要减去滚动距离的\n\n比如，在初始没有滚动的时候，offset偏移为：\n\n    var offset.maxTop = $('targetSelector').offset().top;\n    var offset.maxLeft = $('targetSelector').offset().left;\n\n当文档进行滚动的时候\n\n    $('targetSelector').offset().top = offset.maxTop - $('targetSelector').scrollTop();\n    $('targetSelector').offset().left = offset.maxLeft - $('targetSelector').scrollLeft();\n\nposition()和offset()类似\n\n## js-dom元素表示\n\n    var element = $('targetSelector').get(0);\n\n#### 尺寸\n**element.offsetHeight/offsetwidth**\n元素边界区的宽和高，包括padding/border和滚动条,但不包括margin\n\n**element.clientHeight/clientwidth**\n元素内边距区的宽和高，包括padding,但不包括border/margin和滚动条\n\n#### 滚动位置\n**element.scrollTop/scrollLeft**\n元素相对于视口或者父容器的滚动条的位置的滚动距离，也是父容器的滚动条的位置,即隐藏在视口之外的部分\n\n**element.scrollHeight/scrollWidth**\n文档元素的滚动尺寸，实际大小，而不论视口有多大，多的部分滚动隐藏在视口之外\n\n#### 偏移\n**element.offsetTop/offsetLeft**\n元素相对于上一级position:relative的父元素的偏移，偏移计算值是不随着文档的滚动而变化,是一定的\n\n## jquery-dom元素尺寸的相同参数\n\n    var $elem = $('targetSelector');\n    var element = $elem.get(0);\n\n- $elem.innerHeight()/innerWidth() 同 element.clientHeight/clientwidth\n- $elem.outerHeight(false)/outerWidth(false) 同 element.offsetHeight/offsetwidth\n- $elem.scrollTop(100)/scrollLeft(100) 同 element.scrollTop/scrollLeft = 100\n\n\n# 3 尺寸和偏移观察测试\n观察的元素属性，大概是这个样子\n\n![dom-offset3](/images/2018-10-23-dom-offset3.png)\n\n各个尺寸css如下\n\n    .container {\n        box-sizing: border-box;\n        width: 420px;\n        height: 160px;\n        margin: 20px 10px;\n        padding: 5px 50px;\n        border: solid 1px;\n    }\n\n    .elem {\n        box-sizing: border-box;\n        height: 40px;\n        width: 150px;\n        margin: 10px;\n        padding: 5px;\n        border: solid 5px blue;\n    }\n\n点击链接可以操作查看各种尺寸和偏移：\n\n[尺寸和偏移观察](http://jsrun.net/hfhKp)\n\n","source":"_posts/2018-10-18-the-offset-of-javascript-and-jquery.md","raw":"---\ntitle: 详解javascript和jquery里的各种尺寸和偏移\ndate: 2018-08-22 00:00:40\ntags: js\ncategories: 前端\ncomments: true\n---\n\n最近在写jquery的滚动监听和附加导航的插件的时候，把元素的尺寸，定位和偏移等各种参数和计算捋了一遍，包括js原生的和jquery的计算方法，以及\n之间的区别，想总结下来，怕忘记，方便以后翻阅\n<!--more-->\n\n# 1 Dom元素的位置呈现\n一个Dom元素在页面的位置涉及到多个参数：视口，父包含容器以及元素本身，一般的呈现形式是下面这样的：\n\n![dom-offset2](/images/2018-10-23-dom-offset2.png)\n\n可以看到，Dom元素的呈现分为好几个部分，文档的尺寸是任意的，在视口或父包含容器尺寸一定的时候也能正常显示\n当容器缺失的时候，整个视口就元素的容器，是一般位置的特殊形式\n\n![dom-offset1](/images/2018-10-23-dom-offset1.png)\n\n# 2 Dom元素的尺寸和偏移\n从上一节的元素位置图可以看到，要描述一个元素以及其位置需要许多的参数：height,width,offsetTop,offsetLeft...等，\n以及包含它的每一层级的容器元素，而每一层元素都拥有自己的属性和特性\n\n## jquery表示\n#### 尺寸\n**$('targetSelector').height()/width()**\n元素内容区的宽和高，不包括padding\n\n**$('targetSelector').innnerHeight()/innnerWidth()**\n元素内边距区的宽和高，包括padding,但不包括border\n\n**$('targetSelector').outerHeight(false)/outerWidth(false)**\n元素边界区的宽和高，包括padding/border,但不包括margin\n\n**$('targetSelector').outerHeight(true)/outerWidth(true)**\n元素外边距区的宽和高，包括padding/border/margin\n\n#### 滚动位置\n**$('targetSelector').scrollTop()/scrollLeft()**\n元素相对于视口或者父容器的滚动条的位置的滚动距离，也是父容器的滚动条的位置，即隐藏在视口之外的部分\n\n#### 偏移\n**$('targetSelector').offset()**\n元素相对于视口的偏移，从视口的边界到元素border的偏移距离,距离包含了原书的margin\n\n- offset().top\n- offset().left\n\n**$('targetSelector').position()**\n元素相对于上一级position:relative的父元素的偏移，从视口的边界到元素margin的偏移距离,距离不包含了原书的margin\n当父元素是视口的时候，其数值和offset()相同\n\n- position().top\n- position().left\n\n> 注意，这两个偏移计算值是随着文档的滚动而变化;当文档向上滚动是，偏移的距离是需要减去滚动距离的\n\n比如，在初始没有滚动的时候，offset偏移为：\n\n    var offset.maxTop = $('targetSelector').offset().top;\n    var offset.maxLeft = $('targetSelector').offset().left;\n\n当文档进行滚动的时候\n\n    $('targetSelector').offset().top = offset.maxTop - $('targetSelector').scrollTop();\n    $('targetSelector').offset().left = offset.maxLeft - $('targetSelector').scrollLeft();\n\nposition()和offset()类似\n\n## js-dom元素表示\n\n    var element = $('targetSelector').get(0);\n\n#### 尺寸\n**element.offsetHeight/offsetwidth**\n元素边界区的宽和高，包括padding/border和滚动条,但不包括margin\n\n**element.clientHeight/clientwidth**\n元素内边距区的宽和高，包括padding,但不包括border/margin和滚动条\n\n#### 滚动位置\n**element.scrollTop/scrollLeft**\n元素相对于视口或者父容器的滚动条的位置的滚动距离，也是父容器的滚动条的位置,即隐藏在视口之外的部分\n\n**element.scrollHeight/scrollWidth**\n文档元素的滚动尺寸，实际大小，而不论视口有多大，多的部分滚动隐藏在视口之外\n\n#### 偏移\n**element.offsetTop/offsetLeft**\n元素相对于上一级position:relative的父元素的偏移，偏移计算值是不随着文档的滚动而变化,是一定的\n\n## jquery-dom元素尺寸的相同参数\n\n    var $elem = $('targetSelector');\n    var element = $elem.get(0);\n\n- $elem.innerHeight()/innerWidth() 同 element.clientHeight/clientwidth\n- $elem.outerHeight(false)/outerWidth(false) 同 element.offsetHeight/offsetwidth\n- $elem.scrollTop(100)/scrollLeft(100) 同 element.scrollTop/scrollLeft = 100\n\n\n# 3 尺寸和偏移观察测试\n观察的元素属性，大概是这个样子\n\n![dom-offset3](/images/2018-10-23-dom-offset3.png)\n\n各个尺寸css如下\n\n    .container {\n        box-sizing: border-box;\n        width: 420px;\n        height: 160px;\n        margin: 20px 10px;\n        padding: 5px 50px;\n        border: solid 1px;\n    }\n\n    .elem {\n        box-sizing: border-box;\n        height: 40px;\n        width: 150px;\n        margin: 10px;\n        padding: 5px;\n        border: solid 5px blue;\n    }\n\n点击链接可以操作查看各种尺寸和偏移：\n\n[尺寸和偏移观察](http://jsrun.net/hfhKp)\n\n","slug":"the-offset-of-javascript-and-jquery","published":1,"updated":"2018-10-23T14:54:17.750Z","layout":"post","photos":[],"link":"","_id":"cjqwe4278002ror0b4e2w6avh","content":"<p>最近在写jquery的滚动监听和附加导航的插件的时候，把元素的尺寸，定位和偏移等各种参数和计算捋了一遍，包括js原生的和jquery的计算方法，以及<br>之间的区别，想总结下来，怕忘记，方便以后翻阅<br><a id=\"more\"></a></p>\n<h1 id=\"1-Dom元素的位置呈现\"><a href=\"#1-Dom元素的位置呈现\" class=\"headerlink\" title=\"1 Dom元素的位置呈现\"></a>1 Dom元素的位置呈现</h1><p>一个Dom元素在页面的位置涉及到多个参数：视口，父包含容器以及元素本身，一般的呈现形式是下面这样的：</p>\n<p><img src=\"/images/2018-10-23-dom-offset2.png\" alt=\"dom-offset2\"></p>\n<p>可以看到，Dom元素的呈现分为好几个部分，文档的尺寸是任意的，在视口或父包含容器尺寸一定的时候也能正常显示<br>当容器缺失的时候，整个视口就元素的容器，是一般位置的特殊形式</p>\n<p><img src=\"/images/2018-10-23-dom-offset1.png\" alt=\"dom-offset1\"></p>\n<h1 id=\"2-Dom元素的尺寸和偏移\"><a href=\"#2-Dom元素的尺寸和偏移\" class=\"headerlink\" title=\"2 Dom元素的尺寸和偏移\"></a>2 Dom元素的尺寸和偏移</h1><p>从上一节的元素位置图可以看到，要描述一个元素以及其位置需要许多的参数：height,width,offsetTop,offsetLeft…等，<br>以及包含它的每一层级的容器元素，而每一层元素都拥有自己的属性和特性</p>\n<h2 id=\"jquery表示\"><a href=\"#jquery表示\" class=\"headerlink\" title=\"jquery表示\"></a>jquery表示</h2><h4 id=\"尺寸\"><a href=\"#尺寸\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h4><p><strong>$(‘targetSelector’).height()/width()</strong><br>元素内容区的宽和高，不包括padding</p>\n<p><strong>$(‘targetSelector’).innnerHeight()/innnerWidth()</strong><br>元素内边距区的宽和高，包括padding,但不包括border</p>\n<p><strong>$(‘targetSelector’).outerHeight(false)/outerWidth(false)</strong><br>元素边界区的宽和高，包括padding/border,但不包括margin</p>\n<p><strong>$(‘targetSelector’).outerHeight(true)/outerWidth(true)</strong><br>元素外边距区的宽和高，包括padding/border/margin</p>\n<h4 id=\"滚动位置\"><a href=\"#滚动位置\" class=\"headerlink\" title=\"滚动位置\"></a>滚动位置</h4><p><strong>$(‘targetSelector’).scrollTop()/scrollLeft()</strong><br>元素相对于视口或者父容器的滚动条的位置的滚动距离，也是父容器的滚动条的位置，即隐藏在视口之外的部分</p>\n<h4 id=\"偏移\"><a href=\"#偏移\" class=\"headerlink\" title=\"偏移\"></a>偏移</h4><p><strong>$(‘targetSelector’).offset()</strong><br>元素相对于视口的偏移，从视口的边界到元素border的偏移距离,距离包含了原书的margin</p>\n<ul>\n<li>offset().top</li>\n<li>offset().left</li>\n</ul>\n<p><strong>$(‘targetSelector’).position()</strong><br>元素相对于上一级position:relative的父元素的偏移，从视口的边界到元素margin的偏移距离,距离不包含了原书的margin<br>当父元素是视口的时候，其数值和offset()相同</p>\n<ul>\n<li>position().top</li>\n<li>position().left</li>\n</ul>\n<blockquote>\n<p>注意，这两个偏移计算值是随着文档的滚动而变化;当文档向上滚动是，偏移的距离是需要减去滚动距离的</p>\n</blockquote>\n<p>比如，在初始没有滚动的时候，offset偏移为：</p>\n<pre><code>var offset.maxTop = $(&apos;targetSelector&apos;).offset().top;\nvar offset.maxLeft = $(&apos;targetSelector&apos;).offset().left;\n</code></pre><p>当文档进行滚动的时候</p>\n<pre><code>$(&apos;targetSelector&apos;).offset().top = offset.maxTop - $(&apos;targetSelector&apos;).scrollTop();\n$(&apos;targetSelector&apos;).offset().left = offset.maxLeft - $(&apos;targetSelector&apos;).scrollLeft();\n</code></pre><p>position()和offset()类似</p>\n<h2 id=\"js-dom元素表示\"><a href=\"#js-dom元素表示\" class=\"headerlink\" title=\"js-dom元素表示\"></a>js-dom元素表示</h2><pre><code>var element = $(&apos;targetSelector&apos;).get(0);\n</code></pre><h4 id=\"尺寸-1\"><a href=\"#尺寸-1\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h4><p><strong>element.offsetHeight/offsetwidth</strong><br>元素边界区的宽和高，包括padding/border和滚动条,但不包括margin</p>\n<p><strong>element.clientHeight/clientwidth</strong><br>元素内边距区的宽和高，包括padding,但不包括border/margin和滚动条</p>\n<h4 id=\"滚动位置-1\"><a href=\"#滚动位置-1\" class=\"headerlink\" title=\"滚动位置\"></a>滚动位置</h4><p><strong>element.scrollTop/scrollLeft</strong><br>元素相对于视口或者父容器的滚动条的位置的滚动距离，也是父容器的滚动条的位置,即隐藏在视口之外的部分</p>\n<p><strong>element.scrollHeight/scrollWidth</strong><br>文档元素的滚动尺寸，实际大小，而不论视口有多大，多的部分滚动隐藏在视口之外</p>\n<h4 id=\"偏移-1\"><a href=\"#偏移-1\" class=\"headerlink\" title=\"偏移\"></a>偏移</h4><p><strong>element.offsetTop/offsetLeft</strong><br>元素相对于上一级position:relative的父元素的偏移，偏移计算值是不随着文档的滚动而变化,是一定的</p>\n<h2 id=\"jquery-dom元素尺寸的相同参数\"><a href=\"#jquery-dom元素尺寸的相同参数\" class=\"headerlink\" title=\"jquery-dom元素尺寸的相同参数\"></a>jquery-dom元素尺寸的相同参数</h2><pre><code>var $elem = $(&apos;targetSelector&apos;);\nvar element = $elem.get(0);\n</code></pre><ul>\n<li>$elem.innerHeight()/innerWidth() 同 element.clientHeight/clientwidth</li>\n<li>$elem.outerHeight(false)/outerWidth(false) 同 element.offsetHeight/offsetwidth</li>\n<li>$elem.scrollTop(100)/scrollLeft(100) 同 element.scrollTop/scrollLeft = 100</li>\n</ul>\n<h1 id=\"3-尺寸和偏移观察测试\"><a href=\"#3-尺寸和偏移观察测试\" class=\"headerlink\" title=\"3 尺寸和偏移观察测试\"></a>3 尺寸和偏移观察测试</h1><p>观察的元素属性，大概是这个样子</p>\n<p><img src=\"/images/2018-10-23-dom-offset3.png\" alt=\"dom-offset3\"></p>\n<p>各个尺寸css如下</p>\n<pre><code>.container {\n    box-sizing: border-box;\n    width: 420px;\n    height: 160px;\n    margin: 20px 10px;\n    padding: 5px 50px;\n    border: solid 1px;\n}\n\n.elem {\n    box-sizing: border-box;\n    height: 40px;\n    width: 150px;\n    margin: 10px;\n    padding: 5px;\n    border: solid 5px blue;\n}\n</code></pre><p>点击链接可以操作查看各种尺寸和偏移：</p>\n<p><a href=\"http://jsrun.net/hfhKp\" target=\"_blank\" rel=\"external\">尺寸和偏移观察</a></p>\n","site":{"data":{}},"excerpt":"<p>最近在写jquery的滚动监听和附加导航的插件的时候，把元素的尺寸，定位和偏移等各种参数和计算捋了一遍，包括js原生的和jquery的计算方法，以及<br>之间的区别，想总结下来，怕忘记，方便以后翻阅<br>","more":"</p>\n<h1 id=\"1-Dom元素的位置呈现\"><a href=\"#1-Dom元素的位置呈现\" class=\"headerlink\" title=\"1 Dom元素的位置呈现\"></a>1 Dom元素的位置呈现</h1><p>一个Dom元素在页面的位置涉及到多个参数：视口，父包含容器以及元素本身，一般的呈现形式是下面这样的：</p>\n<p><img src=\"/images/2018-10-23-dom-offset2.png\" alt=\"dom-offset2\"></p>\n<p>可以看到，Dom元素的呈现分为好几个部分，文档的尺寸是任意的，在视口或父包含容器尺寸一定的时候也能正常显示<br>当容器缺失的时候，整个视口就元素的容器，是一般位置的特殊形式</p>\n<p><img src=\"/images/2018-10-23-dom-offset1.png\" alt=\"dom-offset1\"></p>\n<h1 id=\"2-Dom元素的尺寸和偏移\"><a href=\"#2-Dom元素的尺寸和偏移\" class=\"headerlink\" title=\"2 Dom元素的尺寸和偏移\"></a>2 Dom元素的尺寸和偏移</h1><p>从上一节的元素位置图可以看到，要描述一个元素以及其位置需要许多的参数：height,width,offsetTop,offsetLeft…等，<br>以及包含它的每一层级的容器元素，而每一层元素都拥有自己的属性和特性</p>\n<h2 id=\"jquery表示\"><a href=\"#jquery表示\" class=\"headerlink\" title=\"jquery表示\"></a>jquery表示</h2><h4 id=\"尺寸\"><a href=\"#尺寸\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h4><p><strong>$(‘targetSelector’).height()/width()</strong><br>元素内容区的宽和高，不包括padding</p>\n<p><strong>$(‘targetSelector’).innnerHeight()/innnerWidth()</strong><br>元素内边距区的宽和高，包括padding,但不包括border</p>\n<p><strong>$(‘targetSelector’).outerHeight(false)/outerWidth(false)</strong><br>元素边界区的宽和高，包括padding/border,但不包括margin</p>\n<p><strong>$(‘targetSelector’).outerHeight(true)/outerWidth(true)</strong><br>元素外边距区的宽和高，包括padding/border/margin</p>\n<h4 id=\"滚动位置\"><a href=\"#滚动位置\" class=\"headerlink\" title=\"滚动位置\"></a>滚动位置</h4><p><strong>$(‘targetSelector’).scrollTop()/scrollLeft()</strong><br>元素相对于视口或者父容器的滚动条的位置的滚动距离，也是父容器的滚动条的位置，即隐藏在视口之外的部分</p>\n<h4 id=\"偏移\"><a href=\"#偏移\" class=\"headerlink\" title=\"偏移\"></a>偏移</h4><p><strong>$(‘targetSelector’).offset()</strong><br>元素相对于视口的偏移，从视口的边界到元素border的偏移距离,距离包含了原书的margin</p>\n<ul>\n<li>offset().top</li>\n<li>offset().left</li>\n</ul>\n<p><strong>$(‘targetSelector’).position()</strong><br>元素相对于上一级position:relative的父元素的偏移，从视口的边界到元素margin的偏移距离,距离不包含了原书的margin<br>当父元素是视口的时候，其数值和offset()相同</p>\n<ul>\n<li>position().top</li>\n<li>position().left</li>\n</ul>\n<blockquote>\n<p>注意，这两个偏移计算值是随着文档的滚动而变化;当文档向上滚动是，偏移的距离是需要减去滚动距离的</p>\n</blockquote>\n<p>比如，在初始没有滚动的时候，offset偏移为：</p>\n<pre><code>var offset.maxTop = $(&apos;targetSelector&apos;).offset().top;\nvar offset.maxLeft = $(&apos;targetSelector&apos;).offset().left;\n</code></pre><p>当文档进行滚动的时候</p>\n<pre><code>$(&apos;targetSelector&apos;).offset().top = offset.maxTop - $(&apos;targetSelector&apos;).scrollTop();\n$(&apos;targetSelector&apos;).offset().left = offset.maxLeft - $(&apos;targetSelector&apos;).scrollLeft();\n</code></pre><p>position()和offset()类似</p>\n<h2 id=\"js-dom元素表示\"><a href=\"#js-dom元素表示\" class=\"headerlink\" title=\"js-dom元素表示\"></a>js-dom元素表示</h2><pre><code>var element = $(&apos;targetSelector&apos;).get(0);\n</code></pre><h4 id=\"尺寸-1\"><a href=\"#尺寸-1\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h4><p><strong>element.offsetHeight/offsetwidth</strong><br>元素边界区的宽和高，包括padding/border和滚动条,但不包括margin</p>\n<p><strong>element.clientHeight/clientwidth</strong><br>元素内边距区的宽和高，包括padding,但不包括border/margin和滚动条</p>\n<h4 id=\"滚动位置-1\"><a href=\"#滚动位置-1\" class=\"headerlink\" title=\"滚动位置\"></a>滚动位置</h4><p><strong>element.scrollTop/scrollLeft</strong><br>元素相对于视口或者父容器的滚动条的位置的滚动距离，也是父容器的滚动条的位置,即隐藏在视口之外的部分</p>\n<p><strong>element.scrollHeight/scrollWidth</strong><br>文档元素的滚动尺寸，实际大小，而不论视口有多大，多的部分滚动隐藏在视口之外</p>\n<h4 id=\"偏移-1\"><a href=\"#偏移-1\" class=\"headerlink\" title=\"偏移\"></a>偏移</h4><p><strong>element.offsetTop/offsetLeft</strong><br>元素相对于上一级position:relative的父元素的偏移，偏移计算值是不随着文档的滚动而变化,是一定的</p>\n<h2 id=\"jquery-dom元素尺寸的相同参数\"><a href=\"#jquery-dom元素尺寸的相同参数\" class=\"headerlink\" title=\"jquery-dom元素尺寸的相同参数\"></a>jquery-dom元素尺寸的相同参数</h2><pre><code>var $elem = $(&apos;targetSelector&apos;);\nvar element = $elem.get(0);\n</code></pre><ul>\n<li>$elem.innerHeight()/innerWidth() 同 element.clientHeight/clientwidth</li>\n<li>$elem.outerHeight(false)/outerWidth(false) 同 element.offsetHeight/offsetwidth</li>\n<li>$elem.scrollTop(100)/scrollLeft(100) 同 element.scrollTop/scrollLeft = 100</li>\n</ul>\n<h1 id=\"3-尺寸和偏移观察测试\"><a href=\"#3-尺寸和偏移观察测试\" class=\"headerlink\" title=\"3 尺寸和偏移观察测试\"></a>3 尺寸和偏移观察测试</h1><p>观察的元素属性，大概是这个样子</p>\n<p><img src=\"/images/2018-10-23-dom-offset3.png\" alt=\"dom-offset3\"></p>\n<p>各个尺寸css如下</p>\n<pre><code>.container {\n    box-sizing: border-box;\n    width: 420px;\n    height: 160px;\n    margin: 20px 10px;\n    padding: 5px 50px;\n    border: solid 1px;\n}\n\n.elem {\n    box-sizing: border-box;\n    height: 40px;\n    width: 150px;\n    margin: 10px;\n    padding: 5px;\n    border: solid 5px blue;\n}\n</code></pre><p>点击链接可以操作查看各种尺寸和偏移：</p>\n<p><a href=\"http://jsrun.net/hfhKp\" target=\"_blank\" rel=\"external\">尺寸和偏移观察</a></p>"},{"title":"JSON-序列化和反序列化","date":"2018-07-28T08:35:13.000Z","comments":1,"_content":"\nJSON,由于其语法简单，表达清晰等特点，在数据载体方面扮演这重要的角色。尤其在是javascript中，由于语法上与js对象相似，可方便的进行相互的转换\njs提供了全局对象JSON进行数据结构的序列化和反序列化\n<!--more-->\n### 对象序列化\nJSON.stringify()用于将对像转化成JSON格式的字符串\n\nJSON.stringify(object,[filter],[space])\n\n其中第一个参数为必选项的待转换对象；第二个参数是过滤器，可以是简单的key值数组，也可以是过滤处理的函数；第三个参数为制定缩进和换行，可以是缩进字符数目(最多10个)，也可以是填充字符串\n\n    var book = {\n        name: 'jack',\n        age: 18,\n        skills: ['talk','eat']\n    }\n\n    JSON.stringify(book);\n    -->\n    {name: 'jack',age: 18,skills: ['talk','eat']}\n\n    JSON.stringify(book,['name','age']);\n    -->\n    {name: 'jack',age: 18}\n\n    JSON.stringify(book,['name','age'],4);\n    -->\n    {\n        name: 'jack',\n        age: 18\n    }\n\n    JSON.stringify(book,['name','age'],'*');\n    -->\n    {\n    ****name: 'jack',\n    ****age: 18\n    }\n\n    JSON.stringify(book,function(key,value) {\n        if(key === 'skills') {\n            return value.join(&);\n        } else {\n            return value + '_1';\n        }\n    });\n    -->\n    {name: 'jack_1',age: 18_1,skills: 'talk&eat'}\n\n> 注意，当对象里存在toJSON()实现方法是，调用stringify将会优先调用toJSON来返回结果；否则结果同上\n\n### 对象反序列化\nJSON.parse()用于将JSON格式的字符串转化成对像\n\nJSON.parse(jsonstr,[filter])\n\n其中第一个参数为必选项的待转换json字符串；第二个参数是过滤器，可以是处理的函数，当对于的key的处理返回是undefined，则在转换后对象中删除此字段\n\n    var book = JSON.stringify({\n        name: 'jack',\n        age: 18,\n        skills: ['talk','eat']\n    });\n\n    JSON.parse(book);\n    -->得到一个和转换前结构一样的对象\n\n    JSON.parse(book，function(key,value) {\n        if(key === 'skills') {\n            return undefined;\n        } else {\n            return value + '2';\n        }\n    });\n    -->\n    {\n        name: 'jack2',\n        age: 182,\n    }\n\n### 对象拷贝\n利用对象的序列和反序列化的特点，可以简单的实现js对象的深拷贝\n\n    var book = JSON.stringify({\n        name: 'jack',\n        age: 18,\n        skills: ['talk','eat']\n    });\n\n    var bookclone = JSON.parse(JSON.stringify(book));","source":"_posts/2018-07-28-JSON-xuliehua.md","raw":"---\ntitle: JSON-序列化和反序列化\ndate: 2018-07-28 16:35:13\ntags: js\ncategories: 前端\ncomments: true\n---\n\nJSON,由于其语法简单，表达清晰等特点，在数据载体方面扮演这重要的角色。尤其在是javascript中，由于语法上与js对象相似，可方便的进行相互的转换\njs提供了全局对象JSON进行数据结构的序列化和反序列化\n<!--more-->\n### 对象序列化\nJSON.stringify()用于将对像转化成JSON格式的字符串\n\nJSON.stringify(object,[filter],[space])\n\n其中第一个参数为必选项的待转换对象；第二个参数是过滤器，可以是简单的key值数组，也可以是过滤处理的函数；第三个参数为制定缩进和换行，可以是缩进字符数目(最多10个)，也可以是填充字符串\n\n    var book = {\n        name: 'jack',\n        age: 18,\n        skills: ['talk','eat']\n    }\n\n    JSON.stringify(book);\n    -->\n    {name: 'jack',age: 18,skills: ['talk','eat']}\n\n    JSON.stringify(book,['name','age']);\n    -->\n    {name: 'jack',age: 18}\n\n    JSON.stringify(book,['name','age'],4);\n    -->\n    {\n        name: 'jack',\n        age: 18\n    }\n\n    JSON.stringify(book,['name','age'],'*');\n    -->\n    {\n    ****name: 'jack',\n    ****age: 18\n    }\n\n    JSON.stringify(book,function(key,value) {\n        if(key === 'skills') {\n            return value.join(&);\n        } else {\n            return value + '_1';\n        }\n    });\n    -->\n    {name: 'jack_1',age: 18_1,skills: 'talk&eat'}\n\n> 注意，当对象里存在toJSON()实现方法是，调用stringify将会优先调用toJSON来返回结果；否则结果同上\n\n### 对象反序列化\nJSON.parse()用于将JSON格式的字符串转化成对像\n\nJSON.parse(jsonstr,[filter])\n\n其中第一个参数为必选项的待转换json字符串；第二个参数是过滤器，可以是处理的函数，当对于的key的处理返回是undefined，则在转换后对象中删除此字段\n\n    var book = JSON.stringify({\n        name: 'jack',\n        age: 18,\n        skills: ['talk','eat']\n    });\n\n    JSON.parse(book);\n    -->得到一个和转换前结构一样的对象\n\n    JSON.parse(book，function(key,value) {\n        if(key === 'skills') {\n            return undefined;\n        } else {\n            return value + '2';\n        }\n    });\n    -->\n    {\n        name: 'jack2',\n        age: 182,\n    }\n\n### 对象拷贝\n利用对象的序列和反序列化的特点，可以简单的实现js对象的深拷贝\n\n    var book = JSON.stringify({\n        name: 'jack',\n        age: 18,\n        skills: ['talk','eat']\n    });\n\n    var bookclone = JSON.parse(JSON.stringify(book));","slug":"JSON-xuliehua","published":1,"updated":"2018-07-28T09:14:37.245Z","layout":"post","photos":[],"link":"","_id":"cjqwe427a002uor0bu8nij9x5","content":"<p>JSON,由于其语法简单，表达清晰等特点，在数据载体方面扮演这重要的角色。尤其在是javascript中，由于语法上与js对象相似，可方便的进行相互的转换<br>js提供了全局对象JSON进行数据结构的序列化和反序列化<br><a id=\"more\"></a></p>\n<h3 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h3><p>JSON.stringify()用于将对像转化成JSON格式的字符串</p>\n<p>JSON.stringify(object,[filter],[space])</p>\n<p>其中第一个参数为必选项的待转换对象；第二个参数是过滤器，可以是简单的key值数组，也可以是过滤处理的函数；第三个参数为制定缩进和换行，可以是缩进字符数目(最多10个)，也可以是填充字符串</p>\n<pre><code>var book = {\n    name: &apos;jack&apos;,\n    age: 18,\n    skills: [&apos;talk&apos;,&apos;eat&apos;]\n}\n\nJSON.stringify(book);\n--&gt;\n{name: &apos;jack&apos;,age: 18,skills: [&apos;talk&apos;,&apos;eat&apos;]}\n\nJSON.stringify(book,[&apos;name&apos;,&apos;age&apos;]);\n--&gt;\n{name: &apos;jack&apos;,age: 18}\n\nJSON.stringify(book,[&apos;name&apos;,&apos;age&apos;],4);\n--&gt;\n{\n    name: &apos;jack&apos;,\n    age: 18\n}\n\nJSON.stringify(book,[&apos;name&apos;,&apos;age&apos;],&apos;*&apos;);\n--&gt;\n{\n****name: &apos;jack&apos;,\n****age: 18\n}\n\nJSON.stringify(book,function(key,value) {\n    if(key === &apos;skills&apos;) {\n        return value.join(&amp;);\n    } else {\n        return value + &apos;_1&apos;;\n    }\n});\n--&gt;\n{name: &apos;jack_1&apos;,age: 18_1,skills: &apos;talk&amp;eat&apos;}\n</code></pre><blockquote>\n<p>注意，当对象里存在toJSON()实现方法是，调用stringify将会优先调用toJSON来返回结果；否则结果同上</p>\n</blockquote>\n<h3 id=\"对象反序列化\"><a href=\"#对象反序列化\" class=\"headerlink\" title=\"对象反序列化\"></a>对象反序列化</h3><p>JSON.parse()用于将JSON格式的字符串转化成对像</p>\n<p>JSON.parse(jsonstr,[filter])</p>\n<p>其中第一个参数为必选项的待转换json字符串；第二个参数是过滤器，可以是处理的函数，当对于的key的处理返回是undefined，则在转换后对象中删除此字段</p>\n<pre><code>var book = JSON.stringify({\n    name: &apos;jack&apos;,\n    age: 18,\n    skills: [&apos;talk&apos;,&apos;eat&apos;]\n});\n\nJSON.parse(book);\n--&gt;得到一个和转换前结构一样的对象\n\nJSON.parse(book，function(key,value) {\n    if(key === &apos;skills&apos;) {\n        return undefined;\n    } else {\n        return value + &apos;2&apos;;\n    }\n});\n--&gt;\n{\n    name: &apos;jack2&apos;,\n    age: 182,\n}\n</code></pre><h3 id=\"对象拷贝\"><a href=\"#对象拷贝\" class=\"headerlink\" title=\"对象拷贝\"></a>对象拷贝</h3><p>利用对象的序列和反序列化的特点，可以简单的实现js对象的深拷贝</p>\n<pre><code>var book = JSON.stringify({\n    name: &apos;jack&apos;,\n    age: 18,\n    skills: [&apos;talk&apos;,&apos;eat&apos;]\n});\n\nvar bookclone = JSON.parse(JSON.stringify(book));\n</code></pre>","site":{"data":{}},"excerpt":"<p>JSON,由于其语法简单，表达清晰等特点，在数据载体方面扮演这重要的角色。尤其在是javascript中，由于语法上与js对象相似，可方便的进行相互的转换<br>js提供了全局对象JSON进行数据结构的序列化和反序列化<br>","more":"</p>\n<h3 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h3><p>JSON.stringify()用于将对像转化成JSON格式的字符串</p>\n<p>JSON.stringify(object,[filter],[space])</p>\n<p>其中第一个参数为必选项的待转换对象；第二个参数是过滤器，可以是简单的key值数组，也可以是过滤处理的函数；第三个参数为制定缩进和换行，可以是缩进字符数目(最多10个)，也可以是填充字符串</p>\n<pre><code>var book = {\n    name: &apos;jack&apos;,\n    age: 18,\n    skills: [&apos;talk&apos;,&apos;eat&apos;]\n}\n\nJSON.stringify(book);\n--&gt;\n{name: &apos;jack&apos;,age: 18,skills: [&apos;talk&apos;,&apos;eat&apos;]}\n\nJSON.stringify(book,[&apos;name&apos;,&apos;age&apos;]);\n--&gt;\n{name: &apos;jack&apos;,age: 18}\n\nJSON.stringify(book,[&apos;name&apos;,&apos;age&apos;],4);\n--&gt;\n{\n    name: &apos;jack&apos;,\n    age: 18\n}\n\nJSON.stringify(book,[&apos;name&apos;,&apos;age&apos;],&apos;*&apos;);\n--&gt;\n{\n****name: &apos;jack&apos;,\n****age: 18\n}\n\nJSON.stringify(book,function(key,value) {\n    if(key === &apos;skills&apos;) {\n        return value.join(&amp;);\n    } else {\n        return value + &apos;_1&apos;;\n    }\n});\n--&gt;\n{name: &apos;jack_1&apos;,age: 18_1,skills: &apos;talk&amp;eat&apos;}\n</code></pre><blockquote>\n<p>注意，当对象里存在toJSON()实现方法是，调用stringify将会优先调用toJSON来返回结果；否则结果同上</p>\n</blockquote>\n<h3 id=\"对象反序列化\"><a href=\"#对象反序列化\" class=\"headerlink\" title=\"对象反序列化\"></a>对象反序列化</h3><p>JSON.parse()用于将JSON格式的字符串转化成对像</p>\n<p>JSON.parse(jsonstr,[filter])</p>\n<p>其中第一个参数为必选项的待转换json字符串；第二个参数是过滤器，可以是处理的函数，当对于的key的处理返回是undefined，则在转换后对象中删除此字段</p>\n<pre><code>var book = JSON.stringify({\n    name: &apos;jack&apos;,\n    age: 18,\n    skills: [&apos;talk&apos;,&apos;eat&apos;]\n});\n\nJSON.parse(book);\n--&gt;得到一个和转换前结构一样的对象\n\nJSON.parse(book，function(key,value) {\n    if(key === &apos;skills&apos;) {\n        return undefined;\n    } else {\n        return value + &apos;2&apos;;\n    }\n});\n--&gt;\n{\n    name: &apos;jack2&apos;,\n    age: 182,\n}\n</code></pre><h3 id=\"对象拷贝\"><a href=\"#对象拷贝\" class=\"headerlink\" title=\"对象拷贝\"></a>对象拷贝</h3><p>利用对象的序列和反序列化的特点，可以简单的实现js对象的深拷贝</p>\n<pre><code>var book = JSON.stringify({\n    name: &apos;jack&apos;,\n    age: 18,\n    skills: [&apos;talk&apos;,&apos;eat&apos;]\n});\n\nvar bookclone = JSON.parse(JSON.stringify(book));\n</code></pre>"},{"title":"Ng-Shadow-Cat","date":"2018-11-10T15:04:55.000Z","comments":1,"_content":"\nNg-Shadow-Cat是一套前端组件库的Angular实现，封装了常用的一些UI组件,珊格系统和模式,中文名叫“幻影猫”，取名源于超级英雄电影«X战警»中的幻影猫，寓意是变幻莫测\n组件库安装方便，使用简单，只要了解一点html,css和jquery的知识即可使用\n<!--more-->\n\n# 特性\n\n- 开箱即用的Angular组件\n- 适配移动端，不同尺寸屏幕均额适用的组件。\n- 使用 TypeScript 构建，提供完整的类型定义文件。\n\n# 支持环境\n\n现代浏览器和 IE11 及以上（需要 polyfills）。\n\n# 支持 Angular 版本\n\n目前支持 Angular ^6.0.0 版本。\n\n# 项目github地址\n\n[ng-shadow-cat](https://github.com/blueskyawen/ng-shadow-cat)\n\n# 库文档和示例\n\n[ng-shadow-cat文档-示例](http://blueskyawen.com/ng-shadow-cat)\n\n# 下载方式\n\n    npm install ng-shadow-cat-d --save-dev\n\n# 使用方式\n\n### 1. 安装Cli\n\n    npm install -g @angular/cli\n\n> 请务必确认Node.js的版本是v8.10或以上，建议升级至最新版本的@angular/cli\n\n查看cli脚手架版本，有版本信息呈现则安装成功\n\n    ng -v\n\n### 2. 新建angular项目\n\n    ng new my-app\n\n### 3. 下载Ng-Shadow-Cat库\n\n    npm install ng-shadow-cat-d --save-dev\n\n### 4. 配置模块\n在app.module.ts配置ng-shadow-cat-d\n\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { LibModule } from 'ng-shadow-cat-d';\n\n    import { AppComponent } from './app.component';\n\n    @NgModule({\n      imports: [\n        BrowserModule,AppRoutingModule,LibModule\n      ],\n      declarations: [\n        AppComponent\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule {}\n\n### 5. 配置样式\n\n更新.angular-cli.json配置\n\n    \"styles\": [\n        \"./node_modules/ng-shadow-cat-d/ng-shadow-cat-d.css\"\n    ],\n    \"scripts\": [\n    ],\n\n\n\n","source":"_posts/2018-11-11-ng-shadow-cat-readme.md","raw":"---\ntitle: Ng-Shadow-Cat\ndate: 2018-11-10 23:04:55\ntags: angular，plugin\ncategories: 前端\ncomments: true\n---\n\nNg-Shadow-Cat是一套前端组件库的Angular实现，封装了常用的一些UI组件,珊格系统和模式,中文名叫“幻影猫”，取名源于超级英雄电影«X战警»中的幻影猫，寓意是变幻莫测\n组件库安装方便，使用简单，只要了解一点html,css和jquery的知识即可使用\n<!--more-->\n\n# 特性\n\n- 开箱即用的Angular组件\n- 适配移动端，不同尺寸屏幕均额适用的组件。\n- 使用 TypeScript 构建，提供完整的类型定义文件。\n\n# 支持环境\n\n现代浏览器和 IE11 及以上（需要 polyfills）。\n\n# 支持 Angular 版本\n\n目前支持 Angular ^6.0.0 版本。\n\n# 项目github地址\n\n[ng-shadow-cat](https://github.com/blueskyawen/ng-shadow-cat)\n\n# 库文档和示例\n\n[ng-shadow-cat文档-示例](http://blueskyawen.com/ng-shadow-cat)\n\n# 下载方式\n\n    npm install ng-shadow-cat-d --save-dev\n\n# 使用方式\n\n### 1. 安装Cli\n\n    npm install -g @angular/cli\n\n> 请务必确认Node.js的版本是v8.10或以上，建议升级至最新版本的@angular/cli\n\n查看cli脚手架版本，有版本信息呈现则安装成功\n\n    ng -v\n\n### 2. 新建angular项目\n\n    ng new my-app\n\n### 3. 下载Ng-Shadow-Cat库\n\n    npm install ng-shadow-cat-d --save-dev\n\n### 4. 配置模块\n在app.module.ts配置ng-shadow-cat-d\n\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { LibModule } from 'ng-shadow-cat-d';\n\n    import { AppComponent } from './app.component';\n\n    @NgModule({\n      imports: [\n        BrowserModule,AppRoutingModule,LibModule\n      ],\n      declarations: [\n        AppComponent\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule {}\n\n### 5. 配置样式\n\n更新.angular-cli.json配置\n\n    \"styles\": [\n        \"./node_modules/ng-shadow-cat-d/ng-shadow-cat-d.css\"\n    ],\n    \"scripts\": [\n    ],\n\n\n\n","slug":"ng-shadow-cat-readme","published":1,"updated":"2018-11-11T08:19:02.784Z","layout":"post","photos":[],"link":"","_id":"cjqwe427c002xor0b1p7nuhdh","content":"<p>Ng-Shadow-Cat是一套前端组件库的Angular实现，封装了常用的一些UI组件,珊格系统和模式,中文名叫“幻影猫”，取名源于超级英雄电影«X战警»中的幻影猫，寓意是变幻莫测<br>组件库安装方便，使用简单，只要了解一点html,css和jquery的知识即可使用<br><a id=\"more\"></a></p>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>开箱即用的Angular组件</li>\n<li>适配移动端，不同尺寸屏幕均额适用的组件。</li>\n<li>使用 TypeScript 构建，提供完整的类型定义文件。</li>\n</ul>\n<h1 id=\"支持环境\"><a href=\"#支持环境\" class=\"headerlink\" title=\"支持环境\"></a>支持环境</h1><p>现代浏览器和 IE11 及以上（需要 polyfills）。</p>\n<h1 id=\"支持-Angular-版本\"><a href=\"#支持-Angular-版本\" class=\"headerlink\" title=\"支持 Angular 版本\"></a>支持 Angular 版本</h1><p>目前支持 Angular ^6.0.0 版本。</p>\n<h1 id=\"项目github地址\"><a href=\"#项目github地址\" class=\"headerlink\" title=\"项目github地址\"></a>项目github地址</h1><p><a href=\"https://github.com/blueskyawen/ng-shadow-cat\" target=\"_blank\" rel=\"external\">ng-shadow-cat</a></p>\n<h1 id=\"库文档和示例\"><a href=\"#库文档和示例\" class=\"headerlink\" title=\"库文档和示例\"></a>库文档和示例</h1><p><a href=\"http://blueskyawen.com/ng-shadow-cat\">ng-shadow-cat文档-示例</a></p>\n<h1 id=\"下载方式\"><a href=\"#下载方式\" class=\"headerlink\" title=\"下载方式\"></a>下载方式</h1><pre><code>npm install ng-shadow-cat-d --save-dev\n</code></pre><h1 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h1><h3 id=\"1-安装Cli\"><a href=\"#1-安装Cli\" class=\"headerlink\" title=\"1. 安装Cli\"></a>1. 安装Cli</h3><pre><code>npm install -g @angular/cli\n</code></pre><blockquote>\n<p>请务必确认Node.js的版本是v8.10或以上，建议升级至最新版本的@angular/cli</p>\n</blockquote>\n<p>查看cli脚手架版本，有版本信息呈现则安装成功</p>\n<pre><code>ng -v\n</code></pre><h3 id=\"2-新建angular项目\"><a href=\"#2-新建angular项目\" class=\"headerlink\" title=\"2. 新建angular项目\"></a>2. 新建angular项目</h3><pre><code>ng new my-app\n</code></pre><h3 id=\"3-下载Ng-Shadow-Cat库\"><a href=\"#3-下载Ng-Shadow-Cat库\" class=\"headerlink\" title=\"3. 下载Ng-Shadow-Cat库\"></a>3. 下载Ng-Shadow-Cat库</h3><pre><code>npm install ng-shadow-cat-d --save-dev\n</code></pre><h3 id=\"4-配置模块\"><a href=\"#4-配置模块\" class=\"headerlink\" title=\"4. 配置模块\"></a>4. 配置模块</h3><p>在app.module.ts配置ng-shadow-cat-d</p>\n<pre><code>import { BrowserModule } from &apos;@angular/platform-browser&apos;;\nimport { NgModule } from &apos;@angular/core&apos;;\nimport { AppRoutingModule } from &apos;./app-routing.module&apos;;\nimport { LibModule } from &apos;ng-shadow-cat-d&apos;;\n\nimport { AppComponent } from &apos;./app.component&apos;;\n\n@NgModule({\n  imports: [\n    BrowserModule,AppRoutingModule,LibModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n</code></pre><h3 id=\"5-配置样式\"><a href=\"#5-配置样式\" class=\"headerlink\" title=\"5. 配置样式\"></a>5. 配置样式</h3><p>更新.angular-cli.json配置</p>\n<pre><code>&quot;styles&quot;: [\n    &quot;./node_modules/ng-shadow-cat-d/ng-shadow-cat-d.css&quot;\n],\n&quot;scripts&quot;: [\n],\n</code></pre>","site":{"data":{}},"excerpt":"<p>Ng-Shadow-Cat是一套前端组件库的Angular实现，封装了常用的一些UI组件,珊格系统和模式,中文名叫“幻影猫”，取名源于超级英雄电影«X战警»中的幻影猫，寓意是变幻莫测<br>组件库安装方便，使用简单，只要了解一点html,css和jquery的知识即可使用<br>","more":"</p>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>开箱即用的Angular组件</li>\n<li>适配移动端，不同尺寸屏幕均额适用的组件。</li>\n<li>使用 TypeScript 构建，提供完整的类型定义文件。</li>\n</ul>\n<h1 id=\"支持环境\"><a href=\"#支持环境\" class=\"headerlink\" title=\"支持环境\"></a>支持环境</h1><p>现代浏览器和 IE11 及以上（需要 polyfills）。</p>\n<h1 id=\"支持-Angular-版本\"><a href=\"#支持-Angular-版本\" class=\"headerlink\" title=\"支持 Angular 版本\"></a>支持 Angular 版本</h1><p>目前支持 Angular ^6.0.0 版本。</p>\n<h1 id=\"项目github地址\"><a href=\"#项目github地址\" class=\"headerlink\" title=\"项目github地址\"></a>项目github地址</h1><p><a href=\"https://github.com/blueskyawen/ng-shadow-cat\" target=\"_blank\" rel=\"external\">ng-shadow-cat</a></p>\n<h1 id=\"库文档和示例\"><a href=\"#库文档和示例\" class=\"headerlink\" title=\"库文档和示例\"></a>库文档和示例</h1><p><a href=\"http://blueskyawen.com/ng-shadow-cat\">ng-shadow-cat文档-示例</a></p>\n<h1 id=\"下载方式\"><a href=\"#下载方式\" class=\"headerlink\" title=\"下载方式\"></a>下载方式</h1><pre><code>npm install ng-shadow-cat-d --save-dev\n</code></pre><h1 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h1><h3 id=\"1-安装Cli\"><a href=\"#1-安装Cli\" class=\"headerlink\" title=\"1. 安装Cli\"></a>1. 安装Cli</h3><pre><code>npm install -g @angular/cli\n</code></pre><blockquote>\n<p>请务必确认Node.js的版本是v8.10或以上，建议升级至最新版本的@angular/cli</p>\n</blockquote>\n<p>查看cli脚手架版本，有版本信息呈现则安装成功</p>\n<pre><code>ng -v\n</code></pre><h3 id=\"2-新建angular项目\"><a href=\"#2-新建angular项目\" class=\"headerlink\" title=\"2. 新建angular项目\"></a>2. 新建angular项目</h3><pre><code>ng new my-app\n</code></pre><h3 id=\"3-下载Ng-Shadow-Cat库\"><a href=\"#3-下载Ng-Shadow-Cat库\" class=\"headerlink\" title=\"3. 下载Ng-Shadow-Cat库\"></a>3. 下载Ng-Shadow-Cat库</h3><pre><code>npm install ng-shadow-cat-d --save-dev\n</code></pre><h3 id=\"4-配置模块\"><a href=\"#4-配置模块\" class=\"headerlink\" title=\"4. 配置模块\"></a>4. 配置模块</h3><p>在app.module.ts配置ng-shadow-cat-d</p>\n<pre><code>import { BrowserModule } from &apos;@angular/platform-browser&apos;;\nimport { NgModule } from &apos;@angular/core&apos;;\nimport { AppRoutingModule } from &apos;./app-routing.module&apos;;\nimport { LibModule } from &apos;ng-shadow-cat-d&apos;;\n\nimport { AppComponent } from &apos;./app.component&apos;;\n\n@NgModule({\n  imports: [\n    BrowserModule,AppRoutingModule,LibModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n</code></pre><h3 id=\"5-配置样式\"><a href=\"#5-配置样式\" class=\"headerlink\" title=\"5. 配置样式\"></a>5. 配置样式</h3><p>更新.angular-cli.json配置</p>\n<pre><code>&quot;styles&quot;: [\n    &quot;./node_modules/ng-shadow-cat-d/ng-shadow-cat-d.css&quot;\n],\n&quot;scripts&quot;: [\n],\n</code></pre>"},{"title":"templateRef和viewContainerRef","date":"2018-12-12T12:55:59.000Z","comments":1,"_content":"\n在结构型指令中我们看到她们都是template标签来实现，也看到了TemplateRef和ViewContainerRef两个概念\ntemplate标签是html的新标签，在文档中直接直接使用是不显示的，最后会是一段注释，比如：\n\n    <template>\n        <span>I am span in template</span>\n    </template>\n\n只有通过js手动处理才会有内容显示，而angular的结构指令的实现正式基于这种原理\n<!--more-->\n\n#### TemplateRef\n用于表示内嵌的 template 模板元素，通过 TemplateRef 实例，我们可以方便创建内嵌视图(Embedded Views)，且可以轻松地访问到通过 ElementRef 封装后的 nativeElement。需要注意的是组件视图中的 TemplateRef_\n\n    // @angular/core/src/linker/template_ref.d.ts\n    export declare class TemplateRef_<C> extends TemplateRef<C> {\n        private _parentView;\n        private _nodeIndex;\n        private _nativeElement;\n        constructor(_parentView: AppView<any>, _nodeIndex: number, _nativeElement: any);\n        createEmbeddedView(context: C): EmbeddedViewRef<C>;\n        elementRef: ElementRef;\n    }\n\n    TemplateRef\n\n    // @angular/core/src/linker/template_ref.d.ts\n    // 用于表示内嵌的template模板，能够用于创建内嵌视图(Embedded Views)\n    export declare abstract class TemplateRef<C> {\n        elementRef: ElementRef;\n        abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n    }\n\n通过源码可以看到createEmbeddedView方法来给创建内嵌视图，即embedview，它的返回值就是一个embedview对象，这才是在template元素需要显示的内容\n但是这只是创建了实例，没有插入到视图中依然没有效果，于是便有了下面这个概念\n\n\n#### ViewContainerRef\n用于表示一个视图容器，可添加一个或多个视图。通过 ViewContainer\nRef 实例，我们可以基于 TemplateRef 实例创建内嵌视图，并能指定内嵌视图的插入位置，也可以方便对视图容器中已有的视图进行管理。简而言之，ViewContainerRef 的主要作用是创建和管理内嵌视图或组件视图。\n简单点讲，ViewContainerRef就是创建内嵌视图实例，并指定将内嵌视图插入到哪个位置或者销毁它，于是便有了内容的动态呈现和消失，ViewContainerRef创建实例内部调用的就是TemplateRef的方法，看下源码：\n\n    export declare class ViewContainerRef_ implements ViewContainerRef {\n        ...\n        length: number; // 返回视图容器中已存在的视图个数\n        element: ElementRef;\n        injector: Injector;\n        parentInjector: Injector;\n          // 基于TemplateRef创建内嵌视图，并自动添加到视图容器中，可通过index设置\n        // 视图添加的位置\n        createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C,\n          index?: number): EmbeddedViewRef<C>;\n        // 基 ComponentFactory创建组件视图\n        createComponent<C>(componentFactory: ComponentFactory<C>,\n          index?: number, injector?: Injector, projectableNodes?: any[][]): ComponentRef<C>;\n        insert(viewRef: ViewRef, index?: number): ViewRef;\n        move(viewRef: ViewRef, currentIndex: number): ViewRef;\n        indexOf(viewRef: ViewRef): number;\n        remove(index?: number): void;\n        detach(index?: number): ViewRef;\n        clear(): void;\n    }\n\n\n最后总结一下：\n\n- embedview,内嵌视图\n- TemplateRef，内嵌视图创建模板，存有指令宿主元素模板\n- viewContainer,视图容器,view列表\n- viewcontainerRef,描绘视图容器，用于管理container,可同时创建内嵌view和组件视图，类里有不同的方法来创建，还有一个container的锚点，用于指定容器，可当做列表的头地址，新创建的view一个个作为兄弟成员存放，方便管理；类中injector存有TemplateRef\n\n几个概念的大概关系如下：\n![embedview](/images/embedview.jpg)\n\n参考文献：\n[angular修仙](https://segmentfault.com/a/1190000008672478)\n\n","source":"_posts/2018-12-12-angular-templateRef-and-viewContainerRef.md","raw":"---\ntitle: templateRef和viewContainerRef\ndate: 2018-12-12 20:55:59\ntags: angular\ncategories: 前端\ncomments: true\n---\n\n在结构型指令中我们看到她们都是template标签来实现，也看到了TemplateRef和ViewContainerRef两个概念\ntemplate标签是html的新标签，在文档中直接直接使用是不显示的，最后会是一段注释，比如：\n\n    <template>\n        <span>I am span in template</span>\n    </template>\n\n只有通过js手动处理才会有内容显示，而angular的结构指令的实现正式基于这种原理\n<!--more-->\n\n#### TemplateRef\n用于表示内嵌的 template 模板元素，通过 TemplateRef 实例，我们可以方便创建内嵌视图(Embedded Views)，且可以轻松地访问到通过 ElementRef 封装后的 nativeElement。需要注意的是组件视图中的 TemplateRef_\n\n    // @angular/core/src/linker/template_ref.d.ts\n    export declare class TemplateRef_<C> extends TemplateRef<C> {\n        private _parentView;\n        private _nodeIndex;\n        private _nativeElement;\n        constructor(_parentView: AppView<any>, _nodeIndex: number, _nativeElement: any);\n        createEmbeddedView(context: C): EmbeddedViewRef<C>;\n        elementRef: ElementRef;\n    }\n\n    TemplateRef\n\n    // @angular/core/src/linker/template_ref.d.ts\n    // 用于表示内嵌的template模板，能够用于创建内嵌视图(Embedded Views)\n    export declare abstract class TemplateRef<C> {\n        elementRef: ElementRef;\n        abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n    }\n\n通过源码可以看到createEmbeddedView方法来给创建内嵌视图，即embedview，它的返回值就是一个embedview对象，这才是在template元素需要显示的内容\n但是这只是创建了实例，没有插入到视图中依然没有效果，于是便有了下面这个概念\n\n\n#### ViewContainerRef\n用于表示一个视图容器，可添加一个或多个视图。通过 ViewContainer\nRef 实例，我们可以基于 TemplateRef 实例创建内嵌视图，并能指定内嵌视图的插入位置，也可以方便对视图容器中已有的视图进行管理。简而言之，ViewContainerRef 的主要作用是创建和管理内嵌视图或组件视图。\n简单点讲，ViewContainerRef就是创建内嵌视图实例，并指定将内嵌视图插入到哪个位置或者销毁它，于是便有了内容的动态呈现和消失，ViewContainerRef创建实例内部调用的就是TemplateRef的方法，看下源码：\n\n    export declare class ViewContainerRef_ implements ViewContainerRef {\n        ...\n        length: number; // 返回视图容器中已存在的视图个数\n        element: ElementRef;\n        injector: Injector;\n        parentInjector: Injector;\n          // 基于TemplateRef创建内嵌视图，并自动添加到视图容器中，可通过index设置\n        // 视图添加的位置\n        createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C,\n          index?: number): EmbeddedViewRef<C>;\n        // 基 ComponentFactory创建组件视图\n        createComponent<C>(componentFactory: ComponentFactory<C>,\n          index?: number, injector?: Injector, projectableNodes?: any[][]): ComponentRef<C>;\n        insert(viewRef: ViewRef, index?: number): ViewRef;\n        move(viewRef: ViewRef, currentIndex: number): ViewRef;\n        indexOf(viewRef: ViewRef): number;\n        remove(index?: number): void;\n        detach(index?: number): ViewRef;\n        clear(): void;\n    }\n\n\n最后总结一下：\n\n- embedview,内嵌视图\n- TemplateRef，内嵌视图创建模板，存有指令宿主元素模板\n- viewContainer,视图容器,view列表\n- viewcontainerRef,描绘视图容器，用于管理container,可同时创建内嵌view和组件视图，类里有不同的方法来创建，还有一个container的锚点，用于指定容器，可当做列表的头地址，新创建的view一个个作为兄弟成员存放，方便管理；类中injector存有TemplateRef\n\n几个概念的大概关系如下：\n![embedview](/images/embedview.jpg)\n\n参考文献：\n[angular修仙](https://segmentfault.com/a/1190000008672478)\n\n","slug":"angular-templateRef-and-viewContainerRef","published":1,"updated":"2018-12-12T14:58:07.350Z","layout":"post","photos":[],"link":"","_id":"cjqwe427e0030or0b5m2k5mkf","content":"<p>在结构型指令中我们看到她们都是template标签来实现，也看到了TemplateRef和ViewContainerRef两个概念<br>template标签是html的新标签，在文档中直接直接使用是不显示的，最后会是一段注释，比如：</p>\n<pre><code>&lt;template&gt;\n    &lt;span&gt;I am span in template&lt;/span&gt;\n&lt;/template&gt;\n</code></pre><p>只有通过js手动处理才会有内容显示，而angular的结构指令的实现正式基于这种原理<br><a id=\"more\"></a></p>\n<h4 id=\"TemplateRef\"><a href=\"#TemplateRef\" class=\"headerlink\" title=\"TemplateRef\"></a>TemplateRef</h4><p>用于表示内嵌的 template 模板元素，通过 TemplateRef 实例，我们可以方便创建内嵌视图(Embedded Views)，且可以轻松地访问到通过 ElementRef 封装后的 nativeElement。需要注意的是组件视图中的 TemplateRef_</p>\n<pre><code>// @angular/core/src/linker/template_ref.d.ts\nexport declare class TemplateRef_&lt;C&gt; extends TemplateRef&lt;C&gt; {\n    private _parentView;\n    private _nodeIndex;\n    private _nativeElement;\n    constructor(_parentView: AppView&lt;any&gt;, _nodeIndex: number, _nativeElement: any);\n    createEmbeddedView(context: C): EmbeddedViewRef&lt;C&gt;;\n    elementRef: ElementRef;\n}\n\nTemplateRef\n\n// @angular/core/src/linker/template_ref.d.ts\n// 用于表示内嵌的template模板，能够用于创建内嵌视图(Embedded Views)\nexport declare abstract class TemplateRef&lt;C&gt; {\n    elementRef: ElementRef;\n    abstract createEmbeddedView(context: C): EmbeddedViewRef&lt;C&gt;;\n}\n</code></pre><p>通过源码可以看到createEmbeddedView方法来给创建内嵌视图，即embedview，它的返回值就是一个embedview对象，这才是在template元素需要显示的内容<br>但是这只是创建了实例，没有插入到视图中依然没有效果，于是便有了下面这个概念</p>\n<h4 id=\"ViewContainerRef\"><a href=\"#ViewContainerRef\" class=\"headerlink\" title=\"ViewContainerRef\"></a>ViewContainerRef</h4><p>用于表示一个视图容器，可添加一个或多个视图。通过 ViewContainer<br>Ref 实例，我们可以基于 TemplateRef 实例创建内嵌视图，并能指定内嵌视图的插入位置，也可以方便对视图容器中已有的视图进行管理。简而言之，ViewContainerRef 的主要作用是创建和管理内嵌视图或组件视图。<br>简单点讲，ViewContainerRef就是创建内嵌视图实例，并指定将内嵌视图插入到哪个位置或者销毁它，于是便有了内容的动态呈现和消失，ViewContainerRef创建实例内部调用的就是TemplateRef的方法，看下源码：</p>\n<pre><code>export declare class ViewContainerRef_ implements ViewContainerRef {\n    ...\n    length: number; // 返回视图容器中已存在的视图个数\n    element: ElementRef;\n    injector: Injector;\n    parentInjector: Injector;\n      // 基于TemplateRef创建内嵌视图，并自动添加到视图容器中，可通过index设置\n    // 视图添加的位置\n    createEmbeddedView&lt;C&gt;(templateRef: TemplateRef&lt;C&gt;, context?: C,\n      index?: number): EmbeddedViewRef&lt;C&gt;;\n    // 基 ComponentFactory创建组件视图\n    createComponent&lt;C&gt;(componentFactory: ComponentFactory&lt;C&gt;,\n      index?: number, injector?: Injector, projectableNodes?: any[][]): ComponentRef&lt;C&gt;;\n    insert(viewRef: ViewRef, index?: number): ViewRef;\n    move(viewRef: ViewRef, currentIndex: number): ViewRef;\n    indexOf(viewRef: ViewRef): number;\n    remove(index?: number): void;\n    detach(index?: number): ViewRef;\n    clear(): void;\n}\n</code></pre><p>最后总结一下：</p>\n<ul>\n<li>embedview,内嵌视图</li>\n<li>TemplateRef，内嵌视图创建模板，存有指令宿主元素模板</li>\n<li>viewContainer,视图容器,view列表</li>\n<li>viewcontainerRef,描绘视图容器，用于管理container,可同时创建内嵌view和组件视图，类里有不同的方法来创建，还有一个container的锚点，用于指定容器，可当做列表的头地址，新创建的view一个个作为兄弟成员存放，方便管理；类中injector存有TemplateRef</li>\n</ul>\n<p>几个概念的大概关系如下：<br><img src=\"/images/embedview.jpg\" alt=\"embedview\"></p>\n<p>参考文献：<br><a href=\"https://segmentfault.com/a/1190000008672478\" target=\"_blank\" rel=\"external\">angular修仙</a></p>\n","site":{"data":{}},"excerpt":"<p>在结构型指令中我们看到她们都是template标签来实现，也看到了TemplateRef和ViewContainerRef两个概念<br>template标签是html的新标签，在文档中直接直接使用是不显示的，最后会是一段注释，比如：</p>\n<pre><code>&lt;template&gt;\n    &lt;span&gt;I am span in template&lt;/span&gt;\n&lt;/template&gt;\n</code></pre><p>只有通过js手动处理才会有内容显示，而angular的结构指令的实现正式基于这种原理<br>","more":"</p>\n<h4 id=\"TemplateRef\"><a href=\"#TemplateRef\" class=\"headerlink\" title=\"TemplateRef\"></a>TemplateRef</h4><p>用于表示内嵌的 template 模板元素，通过 TemplateRef 实例，我们可以方便创建内嵌视图(Embedded Views)，且可以轻松地访问到通过 ElementRef 封装后的 nativeElement。需要注意的是组件视图中的 TemplateRef_</p>\n<pre><code>// @angular/core/src/linker/template_ref.d.ts\nexport declare class TemplateRef_&lt;C&gt; extends TemplateRef&lt;C&gt; {\n    private _parentView;\n    private _nodeIndex;\n    private _nativeElement;\n    constructor(_parentView: AppView&lt;any&gt;, _nodeIndex: number, _nativeElement: any);\n    createEmbeddedView(context: C): EmbeddedViewRef&lt;C&gt;;\n    elementRef: ElementRef;\n}\n\nTemplateRef\n\n// @angular/core/src/linker/template_ref.d.ts\n// 用于表示内嵌的template模板，能够用于创建内嵌视图(Embedded Views)\nexport declare abstract class TemplateRef&lt;C&gt; {\n    elementRef: ElementRef;\n    abstract createEmbeddedView(context: C): EmbeddedViewRef&lt;C&gt;;\n}\n</code></pre><p>通过源码可以看到createEmbeddedView方法来给创建内嵌视图，即embedview，它的返回值就是一个embedview对象，这才是在template元素需要显示的内容<br>但是这只是创建了实例，没有插入到视图中依然没有效果，于是便有了下面这个概念</p>\n<h4 id=\"ViewContainerRef\"><a href=\"#ViewContainerRef\" class=\"headerlink\" title=\"ViewContainerRef\"></a>ViewContainerRef</h4><p>用于表示一个视图容器，可添加一个或多个视图。通过 ViewContainer<br>Ref 实例，我们可以基于 TemplateRef 实例创建内嵌视图，并能指定内嵌视图的插入位置，也可以方便对视图容器中已有的视图进行管理。简而言之，ViewContainerRef 的主要作用是创建和管理内嵌视图或组件视图。<br>简单点讲，ViewContainerRef就是创建内嵌视图实例，并指定将内嵌视图插入到哪个位置或者销毁它，于是便有了内容的动态呈现和消失，ViewContainerRef创建实例内部调用的就是TemplateRef的方法，看下源码：</p>\n<pre><code>export declare class ViewContainerRef_ implements ViewContainerRef {\n    ...\n    length: number; // 返回视图容器中已存在的视图个数\n    element: ElementRef;\n    injector: Injector;\n    parentInjector: Injector;\n      // 基于TemplateRef创建内嵌视图，并自动添加到视图容器中，可通过index设置\n    // 视图添加的位置\n    createEmbeddedView&lt;C&gt;(templateRef: TemplateRef&lt;C&gt;, context?: C,\n      index?: number): EmbeddedViewRef&lt;C&gt;;\n    // 基 ComponentFactory创建组件视图\n    createComponent&lt;C&gt;(componentFactory: ComponentFactory&lt;C&gt;,\n      index?: number, injector?: Injector, projectableNodes?: any[][]): ComponentRef&lt;C&gt;;\n    insert(viewRef: ViewRef, index?: number): ViewRef;\n    move(viewRef: ViewRef, currentIndex: number): ViewRef;\n    indexOf(viewRef: ViewRef): number;\n    remove(index?: number): void;\n    detach(index?: number): ViewRef;\n    clear(): void;\n}\n</code></pre><p>最后总结一下：</p>\n<ul>\n<li>embedview,内嵌视图</li>\n<li>TemplateRef，内嵌视图创建模板，存有指令宿主元素模板</li>\n<li>viewContainer,视图容器,view列表</li>\n<li>viewcontainerRef,描绘视图容器，用于管理container,可同时创建内嵌view和组件视图，类里有不同的方法来创建，还有一个container的锚点，用于指定容器，可当做列表的头地址，新创建的view一个个作为兄弟成员存放，方便管理；类中injector存有TemplateRef</li>\n</ul>\n<p>几个概念的大概关系如下：<br><img src=\"/images/embedview.jpg\" alt=\"embedview\"></p>\n<p>参考文献：<br><a href=\"https://segmentfault.com/a/1190000008672478\" target=\"_blank\" rel=\"external\">angular修仙</a></p>"},{"title":"自定义元素和动态组件","date":"2018-12-14T14:11:54.000Z","comments":1,"_content":"\n在介绍正式内容之前先了解一下angular里支持的几种视图类型：模板元素和组件\n\n- 模板元素，即Embedded Views，可以使用TemplateRef类型的createEmbeddedView()方法来创建，这在结构型指令中可以看到\n- 组件，即Host View，包括应用中的所有类型的组件以及动态创建的组件\n<!--more-->\n\n### 自定义元素\n我们知道angular支持自定义标签元素，也就是组件。之前我们说过，组件是注册在注入器中的，由注入器在使用时自动注入实例。\n同样，我们也可以手动的注册他们，在引用时得到实例并添加到视图中，便是所谓的“自定义元素”\n\n    import { Component, Injector } from '@angular/core';\n    import { createCustomElement } from '@angular/elements';\n    import { PopupComponent } from './popup.component';\n\n    @Component({\n      selector: 'app-root',\n      template: `\n        <input #input value=\"Message\">\n        <button (click)=\"showAsElement(input.value)\">Show as element</button>\n      `,\n    })\n    export class AppComponent {\n      constructor(injector: Injector, public popup: PopupService) {\n        // Convert `PopupComponent` to a custom element.\n        const PopupElement = createCustomElement(PopupComponent, {injector});\n        // Register the custom element with the browser.\n        customElements.define('popup-element', PopupElement);\n      }\n\n      showAsElement(value : any) {\n         // Create element\n    const popupEl: NgElement & WithProperties<PopupComponent> = document.createElement('popup-element') as any;\n\n        // Listen to the close event\n        popupEl.addEventListener('closed', () => document.body.removeChild(popupEl));\n\n        // Set the message\n        popupEl.message = message;\n\n        // Add to the DOM\n        document.body.appendChild(popupEl);\n      }\n    }\n\n\n\n### 动态创建组件\n动态组件是更加自由的组件使用方式，不需要再模板中直接书写标签，只需要预留位置，然后通过脚本动态加载组件实例即可，非常适合于变化情况多的广告组件显示\n\n    @Component({\n      selector: 'app-root',\n      template: `\n        <input #input value=\"Message\">\n        <button (click)=\"showAsComponent(input.value)\">Show as component</button>\n      `,\n    })\n    export class AppComponent {\n      constructor(injector: Injector, public popup: PopupService) {\n        // Convert `PopupComponent` to a custom element.\n        const PopupElement = createCustomElement(PopupComponent, {injector});\n        // Register the custom element with the browser.\n        customElements.define('popup-element', PopupElement);\n      }\n\n      showAsComponent(value : any) {\n        // Create element\n        const popup = document.createElement('popup-component');\n\n        // Create the component and wire it up with the element\n        const factory = this.componentFactoryResolver.resolveComponentFactory(PopupComponent);\n        const popupComponentRef = factory.create(this.injector, [], popup);\n\n        // Attach to the view so that the change detector knows to run\n        this.applicationRef.attachView(popupComponentRef.hostView);\n\n        // Listen to the close event\n        popupComponentRef.instance.closed.subscribe(() => {\n          document.body.removeChild(popup);\n          this.applicationRef.detachView(popupComponentRef.hostView);\n        });\n\n        // Set the message\n        popupComponentRef.instance.message = message;\n\n        // Add to the DOM\n        document.body.appendChild(popup);\n      }\n    }\n\n参考：\n[Angular-自定义元素](https://www.angular.cn/guide/elements)\n[Angular-动态组件](https://www.angular.cn/guide/dynamic-component-loader)","source":"_posts/2018-12-14-custom-element-and-dynamic-component.md","raw":"---\ntitle: 自定义元素和动态组件\ndate: 2018-12-14 22:11:54\ntags: angular\ncategories: 前端\ncomments: true\n---\n\n在介绍正式内容之前先了解一下angular里支持的几种视图类型：模板元素和组件\n\n- 模板元素，即Embedded Views，可以使用TemplateRef类型的createEmbeddedView()方法来创建，这在结构型指令中可以看到\n- 组件，即Host View，包括应用中的所有类型的组件以及动态创建的组件\n<!--more-->\n\n### 自定义元素\n我们知道angular支持自定义标签元素，也就是组件。之前我们说过，组件是注册在注入器中的，由注入器在使用时自动注入实例。\n同样，我们也可以手动的注册他们，在引用时得到实例并添加到视图中，便是所谓的“自定义元素”\n\n    import { Component, Injector } from '@angular/core';\n    import { createCustomElement } from '@angular/elements';\n    import { PopupComponent } from './popup.component';\n\n    @Component({\n      selector: 'app-root',\n      template: `\n        <input #input value=\"Message\">\n        <button (click)=\"showAsElement(input.value)\">Show as element</button>\n      `,\n    })\n    export class AppComponent {\n      constructor(injector: Injector, public popup: PopupService) {\n        // Convert `PopupComponent` to a custom element.\n        const PopupElement = createCustomElement(PopupComponent, {injector});\n        // Register the custom element with the browser.\n        customElements.define('popup-element', PopupElement);\n      }\n\n      showAsElement(value : any) {\n         // Create element\n    const popupEl: NgElement & WithProperties<PopupComponent> = document.createElement('popup-element') as any;\n\n        // Listen to the close event\n        popupEl.addEventListener('closed', () => document.body.removeChild(popupEl));\n\n        // Set the message\n        popupEl.message = message;\n\n        // Add to the DOM\n        document.body.appendChild(popupEl);\n      }\n    }\n\n\n\n### 动态创建组件\n动态组件是更加自由的组件使用方式，不需要再模板中直接书写标签，只需要预留位置，然后通过脚本动态加载组件实例即可，非常适合于变化情况多的广告组件显示\n\n    @Component({\n      selector: 'app-root',\n      template: `\n        <input #input value=\"Message\">\n        <button (click)=\"showAsComponent(input.value)\">Show as component</button>\n      `,\n    })\n    export class AppComponent {\n      constructor(injector: Injector, public popup: PopupService) {\n        // Convert `PopupComponent` to a custom element.\n        const PopupElement = createCustomElement(PopupComponent, {injector});\n        // Register the custom element with the browser.\n        customElements.define('popup-element', PopupElement);\n      }\n\n      showAsComponent(value : any) {\n        // Create element\n        const popup = document.createElement('popup-component');\n\n        // Create the component and wire it up with the element\n        const factory = this.componentFactoryResolver.resolveComponentFactory(PopupComponent);\n        const popupComponentRef = factory.create(this.injector, [], popup);\n\n        // Attach to the view so that the change detector knows to run\n        this.applicationRef.attachView(popupComponentRef.hostView);\n\n        // Listen to the close event\n        popupComponentRef.instance.closed.subscribe(() => {\n          document.body.removeChild(popup);\n          this.applicationRef.detachView(popupComponentRef.hostView);\n        });\n\n        // Set the message\n        popupComponentRef.instance.message = message;\n\n        // Add to the DOM\n        document.body.appendChild(popup);\n      }\n    }\n\n参考：\n[Angular-自定义元素](https://www.angular.cn/guide/elements)\n[Angular-动态组件](https://www.angular.cn/guide/dynamic-component-loader)","slug":"custom-element-and-dynamic-component","published":1,"updated":"2018-12-17T13:56:39.402Z","layout":"post","photos":[],"link":"","_id":"cjqwe427g0033or0b8n6apisv","content":"<p>在介绍正式内容之前先了解一下angular里支持的几种视图类型：模板元素和组件</p>\n<ul>\n<li>模板元素，即Embedded Views，可以使用TemplateRef类型的createEmbeddedView()方法来创建，这在结构型指令中可以看到</li>\n<li>组件，即Host View，包括应用中的所有类型的组件以及动态创建的组件<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"自定义元素\"><a href=\"#自定义元素\" class=\"headerlink\" title=\"自定义元素\"></a>自定义元素</h3><p>我们知道angular支持自定义标签元素，也就是组件。之前我们说过，组件是注册在注入器中的，由注入器在使用时自动注入实例。<br>同样，我们也可以手动的注册他们，在引用时得到实例并添加到视图中，便是所谓的“自定义元素”</p>\n<pre><code>import { Component, Injector } from &apos;@angular/core&apos;;\nimport { createCustomElement } from &apos;@angular/elements&apos;;\nimport { PopupComponent } from &apos;./popup.component&apos;;\n\n@Component({\n  selector: &apos;app-root&apos;,\n  template: `\n    &lt;input #input value=&quot;Message&quot;&gt;\n    &lt;button (click)=&quot;showAsElement(input.value)&quot;&gt;Show as element&lt;/button&gt;\n  `,\n})\nexport class AppComponent {\n  constructor(injector: Injector, public popup: PopupService) {\n    // Convert `PopupComponent` to a custom element.\n    const PopupElement = createCustomElement(PopupComponent, {injector});\n    // Register the custom element with the browser.\n    customElements.define(&apos;popup-element&apos;, PopupElement);\n  }\n\n  showAsElement(value : any) {\n     // Create element\nconst popupEl: NgElement &amp; WithProperties&lt;PopupComponent&gt; = document.createElement(&apos;popup-element&apos;) as any;\n\n    // Listen to the close event\n    popupEl.addEventListener(&apos;closed&apos;, () =&gt; document.body.removeChild(popupEl));\n\n    // Set the message\n    popupEl.message = message;\n\n    // Add to the DOM\n    document.body.appendChild(popupEl);\n  }\n}\n</code></pre><h3 id=\"动态创建组件\"><a href=\"#动态创建组件\" class=\"headerlink\" title=\"动态创建组件\"></a>动态创建组件</h3><p>动态组件是更加自由的组件使用方式，不需要再模板中直接书写标签，只需要预留位置，然后通过脚本动态加载组件实例即可，非常适合于变化情况多的广告组件显示</p>\n<pre><code>@Component({\n  selector: &apos;app-root&apos;,\n  template: `\n    &lt;input #input value=&quot;Message&quot;&gt;\n    &lt;button (click)=&quot;showAsComponent(input.value)&quot;&gt;Show as component&lt;/button&gt;\n  `,\n})\nexport class AppComponent {\n  constructor(injector: Injector, public popup: PopupService) {\n    // Convert `PopupComponent` to a custom element.\n    const PopupElement = createCustomElement(PopupComponent, {injector});\n    // Register the custom element with the browser.\n    customElements.define(&apos;popup-element&apos;, PopupElement);\n  }\n\n  showAsComponent(value : any) {\n    // Create element\n    const popup = document.createElement(&apos;popup-component&apos;);\n\n    // Create the component and wire it up with the element\n    const factory = this.componentFactoryResolver.resolveComponentFactory(PopupComponent);\n    const popupComponentRef = factory.create(this.injector, [], popup);\n\n    // Attach to the view so that the change detector knows to run\n    this.applicationRef.attachView(popupComponentRef.hostView);\n\n    // Listen to the close event\n    popupComponentRef.instance.closed.subscribe(() =&gt; {\n      document.body.removeChild(popup);\n      this.applicationRef.detachView(popupComponentRef.hostView);\n    });\n\n    // Set the message\n    popupComponentRef.instance.message = message;\n\n    // Add to the DOM\n    document.body.appendChild(popup);\n  }\n}\n</code></pre><p>参考：<br><a href=\"https://www.angular.cn/guide/elements\" target=\"_blank\" rel=\"external\">Angular-自定义元素</a><br><a href=\"https://www.angular.cn/guide/dynamic-component-loader\" target=\"_blank\" rel=\"external\">Angular-动态组件</a></p>\n","site":{"data":{}},"excerpt":"<p>在介绍正式内容之前先了解一下angular里支持的几种视图类型：模板元素和组件</p>\n<ul>\n<li>模板元素，即Embedded Views，可以使用TemplateRef类型的createEmbeddedView()方法来创建，这在结构型指令中可以看到</li>\n<li>组件，即Host View，包括应用中的所有类型的组件以及动态创建的组件","more":"</li>\n</ul>\n<h3 id=\"自定义元素\"><a href=\"#自定义元素\" class=\"headerlink\" title=\"自定义元素\"></a>自定义元素</h3><p>我们知道angular支持自定义标签元素，也就是组件。之前我们说过，组件是注册在注入器中的，由注入器在使用时自动注入实例。<br>同样，我们也可以手动的注册他们，在引用时得到实例并添加到视图中，便是所谓的“自定义元素”</p>\n<pre><code>import { Component, Injector } from &apos;@angular/core&apos;;\nimport { createCustomElement } from &apos;@angular/elements&apos;;\nimport { PopupComponent } from &apos;./popup.component&apos;;\n\n@Component({\n  selector: &apos;app-root&apos;,\n  template: `\n    &lt;input #input value=&quot;Message&quot;&gt;\n    &lt;button (click)=&quot;showAsElement(input.value)&quot;&gt;Show as element&lt;/button&gt;\n  `,\n})\nexport class AppComponent {\n  constructor(injector: Injector, public popup: PopupService) {\n    // Convert `PopupComponent` to a custom element.\n    const PopupElement = createCustomElement(PopupComponent, {injector});\n    // Register the custom element with the browser.\n    customElements.define(&apos;popup-element&apos;, PopupElement);\n  }\n\n  showAsElement(value : any) {\n     // Create element\nconst popupEl: NgElement &amp; WithProperties&lt;PopupComponent&gt; = document.createElement(&apos;popup-element&apos;) as any;\n\n    // Listen to the close event\n    popupEl.addEventListener(&apos;closed&apos;, () =&gt; document.body.removeChild(popupEl));\n\n    // Set the message\n    popupEl.message = message;\n\n    // Add to the DOM\n    document.body.appendChild(popupEl);\n  }\n}\n</code></pre><h3 id=\"动态创建组件\"><a href=\"#动态创建组件\" class=\"headerlink\" title=\"动态创建组件\"></a>动态创建组件</h3><p>动态组件是更加自由的组件使用方式，不需要再模板中直接书写标签，只需要预留位置，然后通过脚本动态加载组件实例即可，非常适合于变化情况多的广告组件显示</p>\n<pre><code>@Component({\n  selector: &apos;app-root&apos;,\n  template: `\n    &lt;input #input value=&quot;Message&quot;&gt;\n    &lt;button (click)=&quot;showAsComponent(input.value)&quot;&gt;Show as component&lt;/button&gt;\n  `,\n})\nexport class AppComponent {\n  constructor(injector: Injector, public popup: PopupService) {\n    // Convert `PopupComponent` to a custom element.\n    const PopupElement = createCustomElement(PopupComponent, {injector});\n    // Register the custom element with the browser.\n    customElements.define(&apos;popup-element&apos;, PopupElement);\n  }\n\n  showAsComponent(value : any) {\n    // Create element\n    const popup = document.createElement(&apos;popup-component&apos;);\n\n    // Create the component and wire it up with the element\n    const factory = this.componentFactoryResolver.resolveComponentFactory(PopupComponent);\n    const popupComponentRef = factory.create(this.injector, [], popup);\n\n    // Attach to the view so that the change detector knows to run\n    this.applicationRef.attachView(popupComponentRef.hostView);\n\n    // Listen to the close event\n    popupComponentRef.instance.closed.subscribe(() =&gt; {\n      document.body.removeChild(popup);\n      this.applicationRef.detachView(popupComponentRef.hostView);\n    });\n\n    // Set the message\n    popupComponentRef.instance.message = message;\n\n    // Add to the DOM\n    document.body.appendChild(popup);\n  }\n}\n</code></pre><p>参考：<br><a href=\"https://www.angular.cn/guide/elements\" target=\"_blank\" rel=\"external\">Angular-自定义元素</a><br><a href=\"https://www.angular.cn/guide/dynamic-component-loader\" target=\"_blank\" rel=\"external\">Angular-动态组件</a></p>"},{"title":"ng-template,ng-container和ng-content","date":"2018-12-17T13:57:49.000Z","comments":1,"_content":"\n## ng-template\n<ng-template>是一类html标签，是angular用来解释渲染结构性指令的一种方式，不会直接显示在html,最后会替换成同意义的注释；比如ngif中，当条件为false，angular将移除相应分支元素，取而代之的时一段注释\n这个标签直接单独使用的时候也有次效果，比如：\n<!--more-->\n\n     <ng-template><p>AA</p></ng-template>\n\n包裹的元素内容在渲染时会消失，而代之的是注释\n\n**（1）ng-template元素的访问**\n可以使用viewChild装饰器来获取视图元素内容\n\n    <ng-template #temp><p>AA</p></ng-template>\n     @ViewChild('temp') templ: TemplateRef<any>;\n     @ViewChild('temp') temp2: ElementRef;\n     this.templ.elementRef.nativeElement...\n\n ViewChild可使用模板引用变量、组件类型或查询条件来获取元素对象，详细可参考如下文章：[Angular 2 ViewChild & ViewChildren](https://segmentfault.com/a/1190000008695459#articleHeader0)\n\n## ng-container\n<ng-container>是一种不影响当前样式/布局的组合元素,angular只是用它来包裹控制内部元素的显示不显示，最后是不会添加渲染到DOM树上的，也不会有注释，使用起来就像普通语言中的if条件一样；它可直接包裹任何元素，包括文本\n\n    <p>\n      I turned the corner\n      <ng-container *ngIf=\"hero\">\n        and saw {{hero.name}}. I waved\n      </ng-container>\n      and continued on my way.\n    </p>\n\n有些元素不能直接使用其他标签包裹，比如select中的option，必须和select挨着，否则会出问题；这是不能使用ngif或ng-template，但可以使用ng-container，它不会有副作用，因为最后都会移除掉\n\n    <select [(ngModel)]=\"hero\">\n      <ng-container *ngFor=\"let h of heroes\">\n        <ng-container *ngIf=\"showSad || h.emotion !== 'sad'\">\n          <option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})</option>\n        </ng-container>\n      </ng-container>\n    </select>\n\n会根据heros动态显示option,而所有的ng-container标签最后都会移除，否则会影响option显示\n\n## ng-content\nng-content即内容投影，可以将外部的自定义内容投影到指定位置显示，常用于组件封装，比如：\n\n    import { Component,OnInit,Input } from '@angular/core';\n\n    @Component({\n        selector: 'nc-form-group',\n        template: `<div class=\"nc-form-group\">\n            <ng-content select=\"nc-form-label\"></ng-content>\n            <ng-content select=\"nc-form-control\"></ng-content>\n            <ng-content select=\".nc-form-error\"></ng-content>\n        </div>`\n    })\n    export class NcFormGroupComponent  implements OnInit {\n        @Input() width : string = '470px';\n        groupStyle : any = {};\n\n        constructor() {}\n\n        ngOnInit() {\n            this.groupStyle = {'width': this.width};\n        }\n    }\n\n使用方式：\n\n    <nc-form-group>\n        <nc-form-label>用户名</nc-form-label>\n        <nc-form-control>\n            <input type=\"'text'\" [(modelValue)]=\"value\" />\n        </nc-form-control>\n        <div class=\"nc-form-error\">用户名</div>\n    </nc-form-group>\n\n注意：\n\n- select可以使用任意可标识元素的选择器来指定\n- 当不指定select或select书写错误的时候，元素将自动匹配到最后一个无select的ng-content\n- <ng-content> 不会 “产生” 内容，它只是投影现有的内容，可以认为它等价于 appendChild(el)，节点不被克隆，它被简单地移动到它的新位置。因此，投影内容的生命周期将被绑定到它被声明的地方，而不是显示在地方\n\n**（1）与ng-container一起使用**\n\n    <nc-form-group>\n        <nc-form-label>用户名</nc-form-label>\n        <ng-container ngProjectAs=\"nc-form-control\">\n            <nc-form-control>\n                <input type=\"'text'\" [(modelValue)]=\"value\" />\n            </nc-form-control>\n        </ng-container>\n        <div class=\"nc-form-error\">用户名</div>\n    </nc-form-group>\n\n由于ng-container包裹内容默认是不显示的，因此需要使用ngProjectAs标记他是一个投影项目\n\n**（2）ng-content元素的访问**\n使用ContentChild和ContentChildren能获取到投影的组件内容并操作读取其中的属性和方法\n\n    import { Component,OnInit,Input，AfterContentInit } from '@angular/core';\n\n    @Component({\n        selector: 'nc-form',\n        template: `\n        <nc-form-group>\n            <nc-form-label>用户名</nc-form-label>\n            <nc-form-label>用户名</nc-form-label>\n            <ng-container ngProjectAs=\"nc-form-control\">\n                <nc-form-control>\n                    <input type=\"'text'\" [(modelValue)]=\"value\" />\n                </nc-form-control>\n            </ng-container>\n            <div class=\"nc-form-error\">用户名</div>\n        </nc-form-group>\n        `\n    })\n    export class NcFormComponent  implements OnInit，AfterContentInit  {\n        @ContentChildren(NcFormLabelComponent) labels: QueryList<NcFormLabelComponent>;\n        @ContentChild(NcFormControlComponent) contorl: NcFormControlComponent;\n\n        constructor() {}\n\n        ngOnInit() {\n            this.groupStyle = {'width': this.width};\n        }\n    }","source":"_posts/2018-12-17-ng-template-ng-container-and-ng-content.md","raw":"---\ntitle: ng-template,ng-container和ng-content\ndate: 2018-12-17 21:57:49\ntags: angular\ncategories: 前端\ncomments: true\n---\n\n## ng-template\n<ng-template>是一类html标签，是angular用来解释渲染结构性指令的一种方式，不会直接显示在html,最后会替换成同意义的注释；比如ngif中，当条件为false，angular将移除相应分支元素，取而代之的时一段注释\n这个标签直接单独使用的时候也有次效果，比如：\n<!--more-->\n\n     <ng-template><p>AA</p></ng-template>\n\n包裹的元素内容在渲染时会消失，而代之的是注释\n\n**（1）ng-template元素的访问**\n可以使用viewChild装饰器来获取视图元素内容\n\n    <ng-template #temp><p>AA</p></ng-template>\n     @ViewChild('temp') templ: TemplateRef<any>;\n     @ViewChild('temp') temp2: ElementRef;\n     this.templ.elementRef.nativeElement...\n\n ViewChild可使用模板引用变量、组件类型或查询条件来获取元素对象，详细可参考如下文章：[Angular 2 ViewChild & ViewChildren](https://segmentfault.com/a/1190000008695459#articleHeader0)\n\n## ng-container\n<ng-container>是一种不影响当前样式/布局的组合元素,angular只是用它来包裹控制内部元素的显示不显示，最后是不会添加渲染到DOM树上的，也不会有注释，使用起来就像普通语言中的if条件一样；它可直接包裹任何元素，包括文本\n\n    <p>\n      I turned the corner\n      <ng-container *ngIf=\"hero\">\n        and saw {{hero.name}}. I waved\n      </ng-container>\n      and continued on my way.\n    </p>\n\n有些元素不能直接使用其他标签包裹，比如select中的option，必须和select挨着，否则会出问题；这是不能使用ngif或ng-template，但可以使用ng-container，它不会有副作用，因为最后都会移除掉\n\n    <select [(ngModel)]=\"hero\">\n      <ng-container *ngFor=\"let h of heroes\">\n        <ng-container *ngIf=\"showSad || h.emotion !== 'sad'\">\n          <option [ngValue]=\"h\">{{h.name}} ({{h.emotion}})</option>\n        </ng-container>\n      </ng-container>\n    </select>\n\n会根据heros动态显示option,而所有的ng-container标签最后都会移除，否则会影响option显示\n\n## ng-content\nng-content即内容投影，可以将外部的自定义内容投影到指定位置显示，常用于组件封装，比如：\n\n    import { Component,OnInit,Input } from '@angular/core';\n\n    @Component({\n        selector: 'nc-form-group',\n        template: `<div class=\"nc-form-group\">\n            <ng-content select=\"nc-form-label\"></ng-content>\n            <ng-content select=\"nc-form-control\"></ng-content>\n            <ng-content select=\".nc-form-error\"></ng-content>\n        </div>`\n    })\n    export class NcFormGroupComponent  implements OnInit {\n        @Input() width : string = '470px';\n        groupStyle : any = {};\n\n        constructor() {}\n\n        ngOnInit() {\n            this.groupStyle = {'width': this.width};\n        }\n    }\n\n使用方式：\n\n    <nc-form-group>\n        <nc-form-label>用户名</nc-form-label>\n        <nc-form-control>\n            <input type=\"'text'\" [(modelValue)]=\"value\" />\n        </nc-form-control>\n        <div class=\"nc-form-error\">用户名</div>\n    </nc-form-group>\n\n注意：\n\n- select可以使用任意可标识元素的选择器来指定\n- 当不指定select或select书写错误的时候，元素将自动匹配到最后一个无select的ng-content\n- <ng-content> 不会 “产生” 内容，它只是投影现有的内容，可以认为它等价于 appendChild(el)，节点不被克隆，它被简单地移动到它的新位置。因此，投影内容的生命周期将被绑定到它被声明的地方，而不是显示在地方\n\n**（1）与ng-container一起使用**\n\n    <nc-form-group>\n        <nc-form-label>用户名</nc-form-label>\n        <ng-container ngProjectAs=\"nc-form-control\">\n            <nc-form-control>\n                <input type=\"'text'\" [(modelValue)]=\"value\" />\n            </nc-form-control>\n        </ng-container>\n        <div class=\"nc-form-error\">用户名</div>\n    </nc-form-group>\n\n由于ng-container包裹内容默认是不显示的，因此需要使用ngProjectAs标记他是一个投影项目\n\n**（2）ng-content元素的访问**\n使用ContentChild和ContentChildren能获取到投影的组件内容并操作读取其中的属性和方法\n\n    import { Component,OnInit,Input，AfterContentInit } from '@angular/core';\n\n    @Component({\n        selector: 'nc-form',\n        template: `\n        <nc-form-group>\n            <nc-form-label>用户名</nc-form-label>\n            <nc-form-label>用户名</nc-form-label>\n            <ng-container ngProjectAs=\"nc-form-control\">\n                <nc-form-control>\n                    <input type=\"'text'\" [(modelValue)]=\"value\" />\n                </nc-form-control>\n            </ng-container>\n            <div class=\"nc-form-error\">用户名</div>\n        </nc-form-group>\n        `\n    })\n    export class NcFormComponent  implements OnInit，AfterContentInit  {\n        @ContentChildren(NcFormLabelComponent) labels: QueryList<NcFormLabelComponent>;\n        @ContentChild(NcFormControlComponent) contorl: NcFormControlComponent;\n\n        constructor() {}\n\n        ngOnInit() {\n            this.groupStyle = {'width': this.width};\n        }\n    }","slug":"ng-template-ng-container-and-ng-content","published":1,"updated":"2018-12-17T13:59:02.066Z","layout":"post","photos":[],"link":"","_id":"cjqwe427h0036or0b9hmyg6v0","content":"<h2 id=\"ng-template\"><a href=\"#ng-template\" class=\"headerlink\" title=\"ng-template\"></a>ng-template</h2><p><ng-template>是一类html标签，是angular用来解释渲染结构性指令的一种方式，不会直接显示在html,最后会替换成同意义的注释；比如ngif中，当条件为false，angular将移除相应分支元素，取而代之的时一段注释<br>这个标签直接单独使用的时候也有次效果，比如：<br><a id=\"more\"></a></ng-template></p>\n<pre><code>&lt;ng-template&gt;&lt;p&gt;AA&lt;/p&gt;&lt;/ng-template&gt;\n</code></pre><p>包裹的元素内容在渲染时会消失，而代之的是注释</p>\n<p><strong>（1）ng-template元素的访问</strong><br>可以使用viewChild装饰器来获取视图元素内容</p>\n<pre><code>&lt;ng-template #temp&gt;&lt;p&gt;AA&lt;/p&gt;&lt;/ng-template&gt;\n @ViewChild(&apos;temp&apos;) templ: TemplateRef&lt;any&gt;;\n @ViewChild(&apos;temp&apos;) temp2: ElementRef;\n this.templ.elementRef.nativeElement...\n</code></pre><p> ViewChild可使用模板引用变量、组件类型或查询条件来获取元素对象，详细可参考如下文章：<a href=\"https://segmentfault.com/a/1190000008695459#articleHeader0\" target=\"_blank\" rel=\"external\">Angular 2 ViewChild &amp; ViewChildren</a></p>\n<h2 id=\"ng-container\"><a href=\"#ng-container\" class=\"headerlink\" title=\"ng-container\"></a>ng-container</h2><p><ng-container>是一种不影响当前样式/布局的组合元素,angular只是用它来包裹控制内部元素的显示不显示，最后是不会添加渲染到DOM树上的，也不会有注释，使用起来就像普通语言中的if条件一样；它可直接包裹任何元素，包括文本</ng-container></p>\n<pre><code>&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *ngIf=&quot;hero&quot;&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n</code></pre><p>有些元素不能直接使用其他标签包裹，比如select中的option，必须和select挨着，否则会出问题；这是不能使用ngif或ng-template，但可以使用ng-container，它不会有副作用，因为最后都会移除掉</p>\n<pre><code>&lt;select [(ngModel)]=&quot;hero&quot;&gt;\n  &lt;ng-container *ngFor=&quot;let h of heroes&quot;&gt;\n    &lt;ng-container *ngIf=&quot;showSad || h.emotion !== &apos;sad&apos;&quot;&gt;\n      &lt;option [ngValue]=&quot;h&quot;&gt;{{h.name}} ({{h.emotion}})&lt;/option&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n</code></pre><p>会根据heros动态显示option,而所有的ng-container标签最后都会移除，否则会影响option显示</p>\n<h2 id=\"ng-content\"><a href=\"#ng-content\" class=\"headerlink\" title=\"ng-content\"></a>ng-content</h2><p>ng-content即内容投影，可以将外部的自定义内容投影到指定位置显示，常用于组件封装，比如：</p>\n<pre><code>import { Component,OnInit,Input } from &apos;@angular/core&apos;;\n\n@Component({\n    selector: &apos;nc-form-group&apos;,\n    template: `&lt;div class=&quot;nc-form-group&quot;&gt;\n        &lt;ng-content select=&quot;nc-form-label&quot;&gt;&lt;/ng-content&gt;\n        &lt;ng-content select=&quot;nc-form-control&quot;&gt;&lt;/ng-content&gt;\n        &lt;ng-content select=&quot;.nc-form-error&quot;&gt;&lt;/ng-content&gt;\n    &lt;/div&gt;`\n})\nexport class NcFormGroupComponent  implements OnInit {\n    @Input() width : string = &apos;470px&apos;;\n    groupStyle : any = {};\n\n    constructor() {}\n\n    ngOnInit() {\n        this.groupStyle = {&apos;width&apos;: this.width};\n    }\n}\n</code></pre><p>使用方式：</p>\n<pre><code>&lt;nc-form-group&gt;\n    &lt;nc-form-label&gt;用户名&lt;/nc-form-label&gt;\n    &lt;nc-form-control&gt;\n        &lt;input type=&quot;&apos;text&apos;&quot; [(modelValue)]=&quot;value&quot; /&gt;\n    &lt;/nc-form-control&gt;\n    &lt;div class=&quot;nc-form-error&quot;&gt;用户名&lt;/div&gt;\n&lt;/nc-form-group&gt;\n</code></pre><p>注意：</p>\n<ul>\n<li>select可以使用任意可标识元素的选择器来指定</li>\n<li>当不指定select或select书写错误的时候，元素将自动匹配到最后一个无select的ng-content</li>\n<li><ng-content> 不会 “产生” 内容，它只是投影现有的内容，可以认为它等价于 appendChild(el)，节点不被克隆，它被简单地移动到它的新位置。因此，投影内容的生命周期将被绑定到它被声明的地方，而不是显示在地方</ng-content></li>\n</ul>\n<p><strong>（1）与ng-container一起使用</strong></p>\n<pre><code>&lt;nc-form-group&gt;\n    &lt;nc-form-label&gt;用户名&lt;/nc-form-label&gt;\n    &lt;ng-container ngProjectAs=&quot;nc-form-control&quot;&gt;\n        &lt;nc-form-control&gt;\n            &lt;input type=&quot;&apos;text&apos;&quot; [(modelValue)]=&quot;value&quot; /&gt;\n        &lt;/nc-form-control&gt;\n    &lt;/ng-container&gt;\n    &lt;div class=&quot;nc-form-error&quot;&gt;用户名&lt;/div&gt;\n&lt;/nc-form-group&gt;\n</code></pre><p>由于ng-container包裹内容默认是不显示的，因此需要使用ngProjectAs标记他是一个投影项目</p>\n<p><strong>（2）ng-content元素的访问</strong><br>使用ContentChild和ContentChildren能获取到投影的组件内容并操作读取其中的属性和方法</p>\n<pre><code>import { Component,OnInit,Input，AfterContentInit } from &apos;@angular/core&apos;;\n\n@Component({\n    selector: &apos;nc-form&apos;,\n    template: `\n    &lt;nc-form-group&gt;\n        &lt;nc-form-label&gt;用户名&lt;/nc-form-label&gt;\n        &lt;nc-form-label&gt;用户名&lt;/nc-form-label&gt;\n        &lt;ng-container ngProjectAs=&quot;nc-form-control&quot;&gt;\n            &lt;nc-form-control&gt;\n                &lt;input type=&quot;&apos;text&apos;&quot; [(modelValue)]=&quot;value&quot; /&gt;\n            &lt;/nc-form-control&gt;\n        &lt;/ng-container&gt;\n        &lt;div class=&quot;nc-form-error&quot;&gt;用户名&lt;/div&gt;\n    &lt;/nc-form-group&gt;\n    `\n})\nexport class NcFormComponent  implements OnInit，AfterContentInit  {\n    @ContentChildren(NcFormLabelComponent) labels: QueryList&lt;NcFormLabelComponent&gt;;\n    @ContentChild(NcFormControlComponent) contorl: NcFormControlComponent;\n\n    constructor() {}\n\n    ngOnInit() {\n        this.groupStyle = {&apos;width&apos;: this.width};\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"<h2 id=\"ng-template\"><a href=\"#ng-template\" class=\"headerlink\" title=\"ng-template\"></a>ng-template</h2><p><ng-template>是一类html标签，是angular用来解释渲染结构性指令的一种方式，不会直接显示在html,最后会替换成同意义的注释；比如ngif中，当条件为false，angular将移除相应分支元素，取而代之的时一段注释<br>这个标签直接单独使用的时候也有次效果，比如：<br>","more":"</ng-template></p>\n<pre><code>&lt;ng-template&gt;&lt;p&gt;AA&lt;/p&gt;&lt;/ng-template&gt;\n</code></pre><p>包裹的元素内容在渲染时会消失，而代之的是注释</p>\n<p><strong>（1）ng-template元素的访问</strong><br>可以使用viewChild装饰器来获取视图元素内容</p>\n<pre><code>&lt;ng-template #temp&gt;&lt;p&gt;AA&lt;/p&gt;&lt;/ng-template&gt;\n @ViewChild(&apos;temp&apos;) templ: TemplateRef&lt;any&gt;;\n @ViewChild(&apos;temp&apos;) temp2: ElementRef;\n this.templ.elementRef.nativeElement...\n</code></pre><p> ViewChild可使用模板引用变量、组件类型或查询条件来获取元素对象，详细可参考如下文章：<a href=\"https://segmentfault.com/a/1190000008695459#articleHeader0\" target=\"_blank\" rel=\"external\">Angular 2 ViewChild &amp; ViewChildren</a></p>\n<h2 id=\"ng-container\"><a href=\"#ng-container\" class=\"headerlink\" title=\"ng-container\"></a>ng-container</h2><p><ng-container>是一种不影响当前样式/布局的组合元素,angular只是用它来包裹控制内部元素的显示不显示，最后是不会添加渲染到DOM树上的，也不会有注释，使用起来就像普通语言中的if条件一样；它可直接包裹任何元素，包括文本</ng-container></p>\n<pre><code>&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *ngIf=&quot;hero&quot;&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n</code></pre><p>有些元素不能直接使用其他标签包裹，比如select中的option，必须和select挨着，否则会出问题；这是不能使用ngif或ng-template，但可以使用ng-container，它不会有副作用，因为最后都会移除掉</p>\n<pre><code>&lt;select [(ngModel)]=&quot;hero&quot;&gt;\n  &lt;ng-container *ngFor=&quot;let h of heroes&quot;&gt;\n    &lt;ng-container *ngIf=&quot;showSad || h.emotion !== &apos;sad&apos;&quot;&gt;\n      &lt;option [ngValue]=&quot;h&quot;&gt;{{h.name}} ({{h.emotion}})&lt;/option&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n</code></pre><p>会根据heros动态显示option,而所有的ng-container标签最后都会移除，否则会影响option显示</p>\n<h2 id=\"ng-content\"><a href=\"#ng-content\" class=\"headerlink\" title=\"ng-content\"></a>ng-content</h2><p>ng-content即内容投影，可以将外部的自定义内容投影到指定位置显示，常用于组件封装，比如：</p>\n<pre><code>import { Component,OnInit,Input } from &apos;@angular/core&apos;;\n\n@Component({\n    selector: &apos;nc-form-group&apos;,\n    template: `&lt;div class=&quot;nc-form-group&quot;&gt;\n        &lt;ng-content select=&quot;nc-form-label&quot;&gt;&lt;/ng-content&gt;\n        &lt;ng-content select=&quot;nc-form-control&quot;&gt;&lt;/ng-content&gt;\n        &lt;ng-content select=&quot;.nc-form-error&quot;&gt;&lt;/ng-content&gt;\n    &lt;/div&gt;`\n})\nexport class NcFormGroupComponent  implements OnInit {\n    @Input() width : string = &apos;470px&apos;;\n    groupStyle : any = {};\n\n    constructor() {}\n\n    ngOnInit() {\n        this.groupStyle = {&apos;width&apos;: this.width};\n    }\n}\n</code></pre><p>使用方式：</p>\n<pre><code>&lt;nc-form-group&gt;\n    &lt;nc-form-label&gt;用户名&lt;/nc-form-label&gt;\n    &lt;nc-form-control&gt;\n        &lt;input type=&quot;&apos;text&apos;&quot; [(modelValue)]=&quot;value&quot; /&gt;\n    &lt;/nc-form-control&gt;\n    &lt;div class=&quot;nc-form-error&quot;&gt;用户名&lt;/div&gt;\n&lt;/nc-form-group&gt;\n</code></pre><p>注意：</p>\n<ul>\n<li>select可以使用任意可标识元素的选择器来指定</li>\n<li>当不指定select或select书写错误的时候，元素将自动匹配到最后一个无select的ng-content</li>\n<li><ng-content> 不会 “产生” 内容，它只是投影现有的内容，可以认为它等价于 appendChild(el)，节点不被克隆，它被简单地移动到它的新位置。因此，投影内容的生命周期将被绑定到它被声明的地方，而不是显示在地方</ng-content></li>\n</ul>\n<p><strong>（1）与ng-container一起使用</strong></p>\n<pre><code>&lt;nc-form-group&gt;\n    &lt;nc-form-label&gt;用户名&lt;/nc-form-label&gt;\n    &lt;ng-container ngProjectAs=&quot;nc-form-control&quot;&gt;\n        &lt;nc-form-control&gt;\n            &lt;input type=&quot;&apos;text&apos;&quot; [(modelValue)]=&quot;value&quot; /&gt;\n        &lt;/nc-form-control&gt;\n    &lt;/ng-container&gt;\n    &lt;div class=&quot;nc-form-error&quot;&gt;用户名&lt;/div&gt;\n&lt;/nc-form-group&gt;\n</code></pre><p>由于ng-container包裹内容默认是不显示的，因此需要使用ngProjectAs标记他是一个投影项目</p>\n<p><strong>（2）ng-content元素的访问</strong><br>使用ContentChild和ContentChildren能获取到投影的组件内容并操作读取其中的属性和方法</p>\n<pre><code>import { Component,OnInit,Input，AfterContentInit } from &apos;@angular/core&apos;;\n\n@Component({\n    selector: &apos;nc-form&apos;,\n    template: `\n    &lt;nc-form-group&gt;\n        &lt;nc-form-label&gt;用户名&lt;/nc-form-label&gt;\n        &lt;nc-form-label&gt;用户名&lt;/nc-form-label&gt;\n        &lt;ng-container ngProjectAs=&quot;nc-form-control&quot;&gt;\n            &lt;nc-form-control&gt;\n                &lt;input type=&quot;&apos;text&apos;&quot; [(modelValue)]=&quot;value&quot; /&gt;\n            &lt;/nc-form-control&gt;\n        &lt;/ng-container&gt;\n        &lt;div class=&quot;nc-form-error&quot;&gt;用户名&lt;/div&gt;\n    &lt;/nc-form-group&gt;\n    `\n})\nexport class NcFormComponent  implements OnInit，AfterContentInit  {\n    @ContentChildren(NcFormLabelComponent) labels: QueryList&lt;NcFormLabelComponent&gt;;\n    @ContentChild(NcFormControlComponent) contorl: NcFormControlComponent;\n\n    constructor() {}\n\n    ngOnInit() {\n        this.groupStyle = {&apos;width&apos;: this.width};\n    }\n}\n</code></pre>"},{"title":"元素的层叠","date":"2019-01-14T13:50:06.000Z","comments":1,"_content":"\n多个元素在一起难免出现先后和堆叠呈现问题，最近编写相关控件时遇到了类似的问题，查阅了许多资料理解了一些，顺便记录下来。\n\n### 层叠\n说到元素的层叠，就不得不提到两个概念，叫堆叠上下文(Stacking Context)和堆叠水平，\n规范一点的解释可以参见下面的文档：[z-index的工作原理](https://www.w3cplus.com/css/how-z-index-works.html)\n我的理解，简单来讲：\n\n- 堆叠上下文就是元素相对于用户的呈现平面，每个元素都有自己的堆叠平面\n- 堆叠水平就是元素堆叠上下文的级别，每个元素都有上下文级别，可以和其他元素相同，也可以不同，这是决定元素是否“胜出”的关键，即哪些元素能够呈现在用户面前\n\n<!--more-->\n\n普通元素拥有一个零级的上下文，而通过某些CSS属性可以为元素重新创建上下文，在其他资料里也都提过，主要有：\n\n- <html>元素\n- 被定位了的元素，并且拥有一个z-index值（不为auto）\n- 元素被设置了opacity，transform, transform3d,filter, css-regions, paged media,motion-path,mix-blend-mode,will-change,-webkit-overflow-scrolling等属性\n- 父元素的display设置了flex或者inline-flex值的子元素\n- 父元素的display设置了grid或者inline-grid值的子元素\n- 元素被设置了isolation:isolate\n- 元素的mix-blend-mode值不为normal\n- 元素的overflow-scrolling值不为touch\n\n一旦多个元素设置了这些属性，页面变回创建出多个新的堆叠上下文平面，每个元素的上下文是独立存在的，并影响其中子元素的呈现效果，包括子元素建的“堆叠竞争”\n虽然页面里可以有许多的堆叠上下文元素，当由于呈现平面只有一个，最后只能有一个或者几个元素能够出现在用户面前，于是就有了规则顺序：\n\n- 有明显的层叠水平标示的时候，比如由定位和z-index创建上下文的元素，则值越大越有机会胜出\n- 对于层叠水平一样的几个元素，位置在后面的覆盖前面的，即所谓的“后来居上”\n- 每个元素层叠上下文独立成型，子元素的层级显示手父元素的层级限制，子元素只会在父元素的层叠平面和水平上进行规则判决，即：如果父元素的层叠水平和其他元素一致，则子元素可和其他同级别元素的子元素竞争；否则，如果父元素创建了层叠上下文，子元素将只能在父元素层叠上下文平面内进行“内部竞争”，如果父元素层叠水平较低，子元素的z-index再高也是枉然\n- 有层叠上下文的元素层叠水平要比普通元素高\n\n这里有个例子，\n\n    <div><span class=\"red\">Red</span>\n    </div><div> <span class=\"green\">Green</span>\n    </div><div> <span class=\"blue\">Blue</span></div>\n\n    div:nth-child(1) {\n      background:red;\n      position:absolute;\n      //transform:scale(4);\n      z-index:-1;\n    }\n    div:nth-child(2) {\n      background:green;\n      position:absolute;\n    }\n    div:nth-child(3) {\n      background:blue;\n      position:absolute;\n    }\n    div span {\n      display:inline-block;\n      height:60px;\n      width:100px;\n      background:#fff;\n    }\n    div {\n      height:100px;\n      display:block;\n      width:200px;\n    }\n    .red {\n      position:absolute;\n      z-index:100;\n    }\n\n可以进去修改样式来查看效果：[例子](http://jsrun.net/gKXKp/edit)\n\n关于层叠元素的显示顺序，张鑫旭的博客有个清晰的图片，可以直接查看\n[深入理解CSS中的层叠上下文和层叠顺序](https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/)\n\n### 层叠带来的问题\n1. z-index和定位的滥用导致页面元素层级混乱，普通元素单独设置z-index是没有用的,建议使用translateZ() 或者translate3d()来替代z-index\n2. transform变换的时候会让 z-index “临时失效”，其实并非 z-index 失效了，在变换的transform时创建了新的层叠上下，z-index生效在了一个新的不同的上下文平面上，当然等结束后又能回到正常的状态；至于怎么解决这个问题，张同学也给了参考意见：任意父级（非body级别）设置overflow:hidden 或者使用transform3d\n3. 通过z-index配合伪元素::before或者::after时让其z轴在元素的底部，特别是碰到大的元素渲染(比如全屏背景图)，会直接影响性能，特别是在移动端，会造成客户端闪退，也就是大家所说的Crash\n","source":"_posts/2019-01-14-dom-and-stack.md","raw":"---\ntitle: 元素的层叠\ndate: 2019-01-14 21:50:06\ntags: CSS\ncategories: 前端\ncomments: true\n---\n\n多个元素在一起难免出现先后和堆叠呈现问题，最近编写相关控件时遇到了类似的问题，查阅了许多资料理解了一些，顺便记录下来。\n\n### 层叠\n说到元素的层叠，就不得不提到两个概念，叫堆叠上下文(Stacking Context)和堆叠水平，\n规范一点的解释可以参见下面的文档：[z-index的工作原理](https://www.w3cplus.com/css/how-z-index-works.html)\n我的理解，简单来讲：\n\n- 堆叠上下文就是元素相对于用户的呈现平面，每个元素都有自己的堆叠平面\n- 堆叠水平就是元素堆叠上下文的级别，每个元素都有上下文级别，可以和其他元素相同，也可以不同，这是决定元素是否“胜出”的关键，即哪些元素能够呈现在用户面前\n\n<!--more-->\n\n普通元素拥有一个零级的上下文，而通过某些CSS属性可以为元素重新创建上下文，在其他资料里也都提过，主要有：\n\n- <html>元素\n- 被定位了的元素，并且拥有一个z-index值（不为auto）\n- 元素被设置了opacity，transform, transform3d,filter, css-regions, paged media,motion-path,mix-blend-mode,will-change,-webkit-overflow-scrolling等属性\n- 父元素的display设置了flex或者inline-flex值的子元素\n- 父元素的display设置了grid或者inline-grid值的子元素\n- 元素被设置了isolation:isolate\n- 元素的mix-blend-mode值不为normal\n- 元素的overflow-scrolling值不为touch\n\n一旦多个元素设置了这些属性，页面变回创建出多个新的堆叠上下文平面，每个元素的上下文是独立存在的，并影响其中子元素的呈现效果，包括子元素建的“堆叠竞争”\n虽然页面里可以有许多的堆叠上下文元素，当由于呈现平面只有一个，最后只能有一个或者几个元素能够出现在用户面前，于是就有了规则顺序：\n\n- 有明显的层叠水平标示的时候，比如由定位和z-index创建上下文的元素，则值越大越有机会胜出\n- 对于层叠水平一样的几个元素，位置在后面的覆盖前面的，即所谓的“后来居上”\n- 每个元素层叠上下文独立成型，子元素的层级显示手父元素的层级限制，子元素只会在父元素的层叠平面和水平上进行规则判决，即：如果父元素的层叠水平和其他元素一致，则子元素可和其他同级别元素的子元素竞争；否则，如果父元素创建了层叠上下文，子元素将只能在父元素层叠上下文平面内进行“内部竞争”，如果父元素层叠水平较低，子元素的z-index再高也是枉然\n- 有层叠上下文的元素层叠水平要比普通元素高\n\n这里有个例子，\n\n    <div><span class=\"red\">Red</span>\n    </div><div> <span class=\"green\">Green</span>\n    </div><div> <span class=\"blue\">Blue</span></div>\n\n    div:nth-child(1) {\n      background:red;\n      position:absolute;\n      //transform:scale(4);\n      z-index:-1;\n    }\n    div:nth-child(2) {\n      background:green;\n      position:absolute;\n    }\n    div:nth-child(3) {\n      background:blue;\n      position:absolute;\n    }\n    div span {\n      display:inline-block;\n      height:60px;\n      width:100px;\n      background:#fff;\n    }\n    div {\n      height:100px;\n      display:block;\n      width:200px;\n    }\n    .red {\n      position:absolute;\n      z-index:100;\n    }\n\n可以进去修改样式来查看效果：[例子](http://jsrun.net/gKXKp/edit)\n\n关于层叠元素的显示顺序，张鑫旭的博客有个清晰的图片，可以直接查看\n[深入理解CSS中的层叠上下文和层叠顺序](https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/)\n\n### 层叠带来的问题\n1. z-index和定位的滥用导致页面元素层级混乱，普通元素单独设置z-index是没有用的,建议使用translateZ() 或者translate3d()来替代z-index\n2. transform变换的时候会让 z-index “临时失效”，其实并非 z-index 失效了，在变换的transform时创建了新的层叠上下，z-index生效在了一个新的不同的上下文平面上，当然等结束后又能回到正常的状态；至于怎么解决这个问题，张同学也给了参考意见：任意父级（非body级别）设置overflow:hidden 或者使用transform3d\n3. 通过z-index配合伪元素::before或者::after时让其z轴在元素的底部，特别是碰到大的元素渲染(比如全屏背景图)，会直接影响性能，特别是在移动端，会造成客户端闪退，也就是大家所说的Crash\n","slug":"dom-and-stack","published":1,"updated":"2019-01-14T14:00:16.348Z","_id":"cjqwe427j0039or0bzo7qlo67","layout":"post","photos":[],"link":"","content":"<p>多个元素在一起难免出现先后和堆叠呈现问题，最近编写相关控件时遇到了类似的问题，查阅了许多资料理解了一些，顺便记录下来。</p>\n<h3 id=\"层叠\"><a href=\"#层叠\" class=\"headerlink\" title=\"层叠\"></a>层叠</h3><p>说到元素的层叠，就不得不提到两个概念，叫堆叠上下文(Stacking Context)和堆叠水平，<br>规范一点的解释可以参见下面的文档：<a href=\"https://www.w3cplus.com/css/how-z-index-works.html\" target=\"_blank\" rel=\"external\">z-index的工作原理</a><br>我的理解，简单来讲：</p>\n<ul>\n<li>堆叠上下文就是元素相对于用户的呈现平面，每个元素都有自己的堆叠平面</li>\n<li>堆叠水平就是元素堆叠上下文的级别，每个元素都有上下文级别，可以和其他元素相同，也可以不同，这是决定元素是否“胜出”的关键，即哪些元素能够呈现在用户面前</li>\n</ul>\n<a id=\"more\"></a>\n<p>普通元素拥有一个零级的上下文，而通过某些CSS属性可以为元素重新创建上下文，在其他资料里也都提过，主要有：</p>\n<ul>\n<li><html>元素</html></li>\n<li>被定位了的元素，并且拥有一个z-index值（不为auto）</li>\n<li>元素被设置了opacity，transform, transform3d,filter, css-regions, paged media,motion-path,mix-blend-mode,will-change,-webkit-overflow-scrolling等属性</li>\n<li>父元素的display设置了flex或者inline-flex值的子元素</li>\n<li>父元素的display设置了grid或者inline-grid值的子元素</li>\n<li>元素被设置了isolation:isolate</li>\n<li>元素的mix-blend-mode值不为normal</li>\n<li>元素的overflow-scrolling值不为touch</li>\n</ul>\n<p>一旦多个元素设置了这些属性，页面变回创建出多个新的堆叠上下文平面，每个元素的上下文是独立存在的，并影响其中子元素的呈现效果，包括子元素建的“堆叠竞争”<br>虽然页面里可以有许多的堆叠上下文元素，当由于呈现平面只有一个，最后只能有一个或者几个元素能够出现在用户面前，于是就有了规则顺序：</p>\n<ul>\n<li>有明显的层叠水平标示的时候，比如由定位和z-index创建上下文的元素，则值越大越有机会胜出</li>\n<li>对于层叠水平一样的几个元素，位置在后面的覆盖前面的，即所谓的“后来居上”</li>\n<li>每个元素层叠上下文独立成型，子元素的层级显示手父元素的层级限制，子元素只会在父元素的层叠平面和水平上进行规则判决，即：如果父元素的层叠水平和其他元素一致，则子元素可和其他同级别元素的子元素竞争；否则，如果父元素创建了层叠上下文，子元素将只能在父元素层叠上下文平面内进行“内部竞争”，如果父元素层叠水平较低，子元素的z-index再高也是枉然</li>\n<li>有层叠上下文的元素层叠水平要比普通元素高</li>\n</ul>\n<p>这里有个例子，</p>\n<pre><code>&lt;div&gt;&lt;span class=&quot;red&quot;&gt;Red&lt;/span&gt;\n&lt;/div&gt;&lt;div&gt; &lt;span class=&quot;green&quot;&gt;Green&lt;/span&gt;\n&lt;/div&gt;&lt;div&gt; &lt;span class=&quot;blue&quot;&gt;Blue&lt;/span&gt;&lt;/div&gt;\n\ndiv:nth-child(1) {\n  background:red;\n  position:absolute;\n  //transform:scale(4);\n  z-index:-1;\n}\ndiv:nth-child(2) {\n  background:green;\n  position:absolute;\n}\ndiv:nth-child(3) {\n  background:blue;\n  position:absolute;\n}\ndiv span {\n  display:inline-block;\n  height:60px;\n  width:100px;\n  background:#fff;\n}\ndiv {\n  height:100px;\n  display:block;\n  width:200px;\n}\n.red {\n  position:absolute;\n  z-index:100;\n}\n</code></pre><p>可以进去修改样式来查看效果：<a href=\"http://jsrun.net/gKXKp/edit\" target=\"_blank\" rel=\"external\">例子</a></p>\n<p>关于层叠元素的显示顺序，张鑫旭的博客有个清晰的图片，可以直接查看<br><a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\" target=\"_blank\" rel=\"external\">深入理解CSS中的层叠上下文和层叠顺序</a></p>\n<h3 id=\"层叠带来的问题\"><a href=\"#层叠带来的问题\" class=\"headerlink\" title=\"层叠带来的问题\"></a>层叠带来的问题</h3><ol>\n<li>z-index和定位的滥用导致页面元素层级混乱，普通元素单独设置z-index是没有用的,建议使用translateZ() 或者translate3d()来替代z-index</li>\n<li>transform变换的时候会让 z-index “临时失效”，其实并非 z-index 失效了，在变换的transform时创建了新的层叠上下，z-index生效在了一个新的不同的上下文平面上，当然等结束后又能回到正常的状态；至于怎么解决这个问题，张同学也给了参考意见：任意父级（非body级别）设置overflow:hidden 或者使用transform3d</li>\n<li>通过z-index配合伪元素::before或者::after时让其z轴在元素的底部，特别是碰到大的元素渲染(比如全屏背景图)，会直接影响性能，特别是在移动端，会造成客户端闪退，也就是大家所说的Crash</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>多个元素在一起难免出现先后和堆叠呈现问题，最近编写相关控件时遇到了类似的问题，查阅了许多资料理解了一些，顺便记录下来。</p>\n<h3 id=\"层叠\"><a href=\"#层叠\" class=\"headerlink\" title=\"层叠\"></a>层叠</h3><p>说到元素的层叠，就不得不提到两个概念，叫堆叠上下文(Stacking Context)和堆叠水平，<br>规范一点的解释可以参见下面的文档：<a href=\"https://www.w3cplus.com/css/how-z-index-works.html\" target=\"_blank\" rel=\"external\">z-index的工作原理</a><br>我的理解，简单来讲：</p>\n<ul>\n<li>堆叠上下文就是元素相对于用户的呈现平面，每个元素都有自己的堆叠平面</li>\n<li>堆叠水平就是元素堆叠上下文的级别，每个元素都有上下文级别，可以和其他元素相同，也可以不同，这是决定元素是否“胜出”的关键，即哪些元素能够呈现在用户面前</li>\n</ul>","more":"<p>普通元素拥有一个零级的上下文，而通过某些CSS属性可以为元素重新创建上下文，在其他资料里也都提过，主要有：</p>\n<ul>\n<li><html>元素</html></li>\n<li>被定位了的元素，并且拥有一个z-index值（不为auto）</li>\n<li>元素被设置了opacity，transform, transform3d,filter, css-regions, paged media,motion-path,mix-blend-mode,will-change,-webkit-overflow-scrolling等属性</li>\n<li>父元素的display设置了flex或者inline-flex值的子元素</li>\n<li>父元素的display设置了grid或者inline-grid值的子元素</li>\n<li>元素被设置了isolation:isolate</li>\n<li>元素的mix-blend-mode值不为normal</li>\n<li>元素的overflow-scrolling值不为touch</li>\n</ul>\n<p>一旦多个元素设置了这些属性，页面变回创建出多个新的堆叠上下文平面，每个元素的上下文是独立存在的，并影响其中子元素的呈现效果，包括子元素建的“堆叠竞争”<br>虽然页面里可以有许多的堆叠上下文元素，当由于呈现平面只有一个，最后只能有一个或者几个元素能够出现在用户面前，于是就有了规则顺序：</p>\n<ul>\n<li>有明显的层叠水平标示的时候，比如由定位和z-index创建上下文的元素，则值越大越有机会胜出</li>\n<li>对于层叠水平一样的几个元素，位置在后面的覆盖前面的，即所谓的“后来居上”</li>\n<li>每个元素层叠上下文独立成型，子元素的层级显示手父元素的层级限制，子元素只会在父元素的层叠平面和水平上进行规则判决，即：如果父元素的层叠水平和其他元素一致，则子元素可和其他同级别元素的子元素竞争；否则，如果父元素创建了层叠上下文，子元素将只能在父元素层叠上下文平面内进行“内部竞争”，如果父元素层叠水平较低，子元素的z-index再高也是枉然</li>\n<li>有层叠上下文的元素层叠水平要比普通元素高</li>\n</ul>\n<p>这里有个例子，</p>\n<pre><code>&lt;div&gt;&lt;span class=&quot;red&quot;&gt;Red&lt;/span&gt;\n&lt;/div&gt;&lt;div&gt; &lt;span class=&quot;green&quot;&gt;Green&lt;/span&gt;\n&lt;/div&gt;&lt;div&gt; &lt;span class=&quot;blue&quot;&gt;Blue&lt;/span&gt;&lt;/div&gt;\n\ndiv:nth-child(1) {\n  background:red;\n  position:absolute;\n  //transform:scale(4);\n  z-index:-1;\n}\ndiv:nth-child(2) {\n  background:green;\n  position:absolute;\n}\ndiv:nth-child(3) {\n  background:blue;\n  position:absolute;\n}\ndiv span {\n  display:inline-block;\n  height:60px;\n  width:100px;\n  background:#fff;\n}\ndiv {\n  height:100px;\n  display:block;\n  width:200px;\n}\n.red {\n  position:absolute;\n  z-index:100;\n}\n</code></pre><p>可以进去修改样式来查看效果：<a href=\"http://jsrun.net/gKXKp/edit\" target=\"_blank\" rel=\"external\">例子</a></p>\n<p>关于层叠元素的显示顺序，张鑫旭的博客有个清晰的图片，可以直接查看<br><a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\" target=\"_blank\" rel=\"external\">深入理解CSS中的层叠上下文和层叠顺序</a></p>\n<h3 id=\"层叠带来的问题\"><a href=\"#层叠带来的问题\" class=\"headerlink\" title=\"层叠带来的问题\"></a>层叠带来的问题</h3><ol>\n<li>z-index和定位的滥用导致页面元素层级混乱，普通元素单独设置z-index是没有用的,建议使用translateZ() 或者translate3d()来替代z-index</li>\n<li>transform变换的时候会让 z-index “临时失效”，其实并非 z-index 失效了，在变换的transform时创建了新的层叠上下，z-index生效在了一个新的不同的上下文平面上，当然等结束后又能回到正常的状态；至于怎么解决这个问题，张同学也给了参考意见：任意父级（非body级别）设置overflow:hidden 或者使用transform3d</li>\n<li>通过z-index配合伪元素::before或者::after时让其z轴在元素的底部，特别是碰到大的元素渲染(比如全屏背景图)，会直接影响性能，特别是在移动端，会造成客户端闪退，也就是大家所说的Crash</li>\n</ol>"},{"title":"HTMLCollection 与 NodeList 的区别","date":"2018-06-06T12:00:23.000Z","comments":1,"_content":"\n使用js原生方法获取Dom的涉及到很多的都是集合，只是根据方法不同集合类型也有不同\n\n- HTMLCollection：HTML 元素的集合。\n比如：document.getElementsByTagName(\"p\")获取的集合\n- NodeList 是一个文档节点的集合。\n比如：document.querySelectorAll(\"p\");document.getElementsByClassName()；获取的集合\n<!--more-->\n\n### 两者的异同\n#### 相似点\n\n- 都与数组对象有点类似，可以使用索引 (0，1，...) 来获取元素。\n- 有 length 属性。\n- 都是动态的，会根据html文档的更新而自动更新，比如：文档中增加了一个元素，list就多一个节点，length也会加1\n\n#### 不同点\n- HTMLCollection 元素可以通过 name，id 或索引来获取；而NodeList 只能通过索引来获取。\n- 只有 NodeList 对象有包含属性节点和文本节点。\n\n> 注意:节点列表看起来像一个数组，却不是一个数组！\n节点列表无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。","source":"_posts/2018-12-30-HTMLCollection-and-NodeList.md","raw":"---\ntitle: HTMLCollection 与 NodeList 的区别\ndate: 2018-06-06 20:00:23\ntags: js\ncategories: 前端\ncomments: true\n---\n\n使用js原生方法获取Dom的涉及到很多的都是集合，只是根据方法不同集合类型也有不同\n\n- HTMLCollection：HTML 元素的集合。\n比如：document.getElementsByTagName(\"p\")获取的集合\n- NodeList 是一个文档节点的集合。\n比如：document.querySelectorAll(\"p\");document.getElementsByClassName()；获取的集合\n<!--more-->\n\n### 两者的异同\n#### 相似点\n\n- 都与数组对象有点类似，可以使用索引 (0，1，...) 来获取元素。\n- 有 length 属性。\n- 都是动态的，会根据html文档的更新而自动更新，比如：文档中增加了一个元素，list就多一个节点，length也会加1\n\n#### 不同点\n- HTMLCollection 元素可以通过 name，id 或索引来获取；而NodeList 只能通过索引来获取。\n- 只有 NodeList 对象有包含属性节点和文本节点。\n\n> 注意:节点列表看起来像一个数组，却不是一个数组！\n节点列表无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。","slug":"HTMLCollection-and-NodeList","published":1,"updated":"2018-12-30T07:59:45.958Z","layout":"post","photos":[],"link":"","_id":"cjqwe4289003cor0bizzzewpx","content":"<p>使用js原生方法获取Dom的涉及到很多的都是集合，只是根据方法不同集合类型也有不同</p>\n<ul>\n<li>HTMLCollection：HTML 元素的集合。<br>比如：document.getElementsByTagName(“p”)获取的集合</li>\n<li>NodeList 是一个文档节点的集合。<br>比如：document.querySelectorAll(“p”);document.getElementsByClassName()；获取的集合<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"两者的异同\"><a href=\"#两者的异同\" class=\"headerlink\" title=\"两者的异同\"></a>两者的异同</h3><h4 id=\"相似点\"><a href=\"#相似点\" class=\"headerlink\" title=\"相似点\"></a>相似点</h4><ul>\n<li>都与数组对象有点类似，可以使用索引 (0，1，…) 来获取元素。</li>\n<li>有 length 属性。</li>\n<li>都是动态的，会根据html文档的更新而自动更新，比如：文档中增加了一个元素，list就多一个节点，length也会加1</li>\n</ul>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><ul>\n<li>HTMLCollection 元素可以通过 name，id 或索引来获取；而NodeList 只能通过索引来获取。</li>\n<li>只有 NodeList 对象有包含属性节点和文本节点。</li>\n</ul>\n<blockquote>\n<p>注意:节点列表看起来像一个数组，却不是一个数组！<br>节点列表无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>使用js原生方法获取Dom的涉及到很多的都是集合，只是根据方法不同集合类型也有不同</p>\n<ul>\n<li>HTMLCollection：HTML 元素的集合。<br>比如：document.getElementsByTagName(“p”)获取的集合</li>\n<li>NodeList 是一个文档节点的集合。<br>比如：document.querySelectorAll(“p”);document.getElementsByClassName()；获取的集合","more":"</li>\n</ul>\n<h3 id=\"两者的异同\"><a href=\"#两者的异同\" class=\"headerlink\" title=\"两者的异同\"></a>两者的异同</h3><h4 id=\"相似点\"><a href=\"#相似点\" class=\"headerlink\" title=\"相似点\"></a>相似点</h4><ul>\n<li>都与数组对象有点类似，可以使用索引 (0，1，…) 来获取元素。</li>\n<li>有 length 属性。</li>\n<li>都是动态的，会根据html文档的更新而自动更新，比如：文档中增加了一个元素，list就多一个节点，length也会加1</li>\n</ul>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><ul>\n<li>HTMLCollection 元素可以通过 name，id 或索引来获取；而NodeList 只能通过索引来获取。</li>\n<li>只有 NodeList 对象有包含属性节点和文本节点。</li>\n</ul>\n<blockquote>\n<p>注意:节点列表看起来像一个数组，却不是一个数组！<br>节点列表无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。</p>\n</blockquote>"},{"title":"JavaScript表单校验Api","date":"2018-06-16T12:00:23.000Z","comments":1,"_content":"\n\nJavaScript表单元素提供了一些内置的验证方法和属性，来对用户输入进行校验和错误显示，比如\n\n- checkValidity()，input 元素中的数据是合法的返回 true，否则返回 false\n- 设置 input 元素的 validationMessage属性，用于自定义错误提示信息的方法。\n使用 setCustomValidity 设置了自定义提示后，validity.customError 就会变成true，则 checkValidity 总是会返回false\n\n例子：\n\n    <input id=\"id1\" type=\"number\" min=\"100\" max=\"300\" required>\n    <button onclick=\"myFunction()\">验证</button>\n    <script>\n    function myFunction() {\n        var inpObj = document.getElementById(\"id1\");\n        if (inpObj.checkValidity() == false) {\n            document.getElementById(\"demo\").innerHTML = inpObj.validationMessage;\n        }\n    }\n    </script>\n\n\n### 验证 DOM 属性\n\n##### validity\n布尔属性值，返回 input 输入值是否合法\ninput元素的 validity属性包含一系列关于数据属性\n\n- customError\t设置为 true, 如果设置了自定义的 validity 信息。\n- patternMismatch\t设置为 true, 如果元素的值不匹配它的模式属性。\n- rangeOverflow\t设置为 true, 如果元素的值大于设置的最大值。\n- rangeUnderflow\t设置为 true, 如果元素的值小于它的最小值。\n- stepMismatch\t设置为 true, 如果元素的值不是按照规定的 step 属性设置。\n- tooLong\t设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。\n- typeMismatch\t设置为 true, 如果元素的值不是预期相匹配的类型。\n- valueMissing\t设置为 true，如果元素 (required 属性) 没有值。\n- valid\t设置为 true，如果元素的值是合法的。\n\n例子：\n\n    <input id=\"id1\" type=\"number\" max=\"100\">\n    <button onclick=\"myFunction()\">验证</button>\n    <script>\n    function myFunction() {\n        var txt = \"\";\n        if (document.getElementById(\"id1\").validity.rangeOverflow) {\n           txt = \"输入的值太大了\";\n        }\n        document.getElementById(\"demo\").innerHTML = txt;\n    }\n    </script>\n\n##### validationMessage\n浏览器错误提示信息\n使用setCustomValidity（error : string）来设置validationMessage，并可手动取消他们\n\n    setCustomValidity('')；\n    setCustomValidity(null)\n    setCustomValidity(undefined)\n\n##### willValidate\n表示input 是否需要验证\n比如,如果表单元素设置了required特性或pattern特性，则willValidate属性的值为true\n\n\n\n","source":"_posts/2018-12-30-JavaScript-form-Api.md","raw":"---\ntitle: JavaScript表单校验Api\ndate: 2018-06-16 20:00:23\ntags: js\ncategories: 前端\ncomments: true\n---\n\n\nJavaScript表单元素提供了一些内置的验证方法和属性，来对用户输入进行校验和错误显示，比如\n\n- checkValidity()，input 元素中的数据是合法的返回 true，否则返回 false\n- 设置 input 元素的 validationMessage属性，用于自定义错误提示信息的方法。\n使用 setCustomValidity 设置了自定义提示后，validity.customError 就会变成true，则 checkValidity 总是会返回false\n\n例子：\n\n    <input id=\"id1\" type=\"number\" min=\"100\" max=\"300\" required>\n    <button onclick=\"myFunction()\">验证</button>\n    <script>\n    function myFunction() {\n        var inpObj = document.getElementById(\"id1\");\n        if (inpObj.checkValidity() == false) {\n            document.getElementById(\"demo\").innerHTML = inpObj.validationMessage;\n        }\n    }\n    </script>\n\n\n### 验证 DOM 属性\n\n##### validity\n布尔属性值，返回 input 输入值是否合法\ninput元素的 validity属性包含一系列关于数据属性\n\n- customError\t设置为 true, 如果设置了自定义的 validity 信息。\n- patternMismatch\t设置为 true, 如果元素的值不匹配它的模式属性。\n- rangeOverflow\t设置为 true, 如果元素的值大于设置的最大值。\n- rangeUnderflow\t设置为 true, 如果元素的值小于它的最小值。\n- stepMismatch\t设置为 true, 如果元素的值不是按照规定的 step 属性设置。\n- tooLong\t设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。\n- typeMismatch\t设置为 true, 如果元素的值不是预期相匹配的类型。\n- valueMissing\t设置为 true，如果元素 (required 属性) 没有值。\n- valid\t设置为 true，如果元素的值是合法的。\n\n例子：\n\n    <input id=\"id1\" type=\"number\" max=\"100\">\n    <button onclick=\"myFunction()\">验证</button>\n    <script>\n    function myFunction() {\n        var txt = \"\";\n        if (document.getElementById(\"id1\").validity.rangeOverflow) {\n           txt = \"输入的值太大了\";\n        }\n        document.getElementById(\"demo\").innerHTML = txt;\n    }\n    </script>\n\n##### validationMessage\n浏览器错误提示信息\n使用setCustomValidity（error : string）来设置validationMessage，并可手动取消他们\n\n    setCustomValidity('')；\n    setCustomValidity(null)\n    setCustomValidity(undefined)\n\n##### willValidate\n表示input 是否需要验证\n比如,如果表单元素设置了required特性或pattern特性，则willValidate属性的值为true\n\n\n\n","slug":"JavaScript-form-Api","published":1,"updated":"2018-12-30T08:00:13.174Z","layout":"post","photos":[],"link":"","_id":"cjqwe428b003for0b746511kw","content":"<p>JavaScript表单元素提供了一些内置的验证方法和属性，来对用户输入进行校验和错误显示，比如</p>\n<ul>\n<li>checkValidity()，input 元素中的数据是合法的返回 true，否则返回 false</li>\n<li>设置 input 元素的 validationMessage属性，用于自定义错误提示信息的方法。<br>使用 setCustomValidity 设置了自定义提示后，validity.customError 就会变成true，则 checkValidity 总是会返回false</li>\n</ul>\n<p>例子：</p>\n<pre><code>&lt;input id=&quot;id1&quot; type=&quot;number&quot; min=&quot;100&quot; max=&quot;300&quot; required&gt;\n&lt;button onclick=&quot;myFunction()&quot;&gt;验证&lt;/button&gt;\n&lt;script&gt;\nfunction myFunction() {\n    var inpObj = document.getElementById(&quot;id1&quot;);\n    if (inpObj.checkValidity() == false) {\n        document.getElementById(&quot;demo&quot;).innerHTML = inpObj.validationMessage;\n    }\n}\n&lt;/script&gt;\n</code></pre><h3 id=\"验证-DOM-属性\"><a href=\"#验证-DOM-属性\" class=\"headerlink\" title=\"验证 DOM 属性\"></a>验证 DOM 属性</h3><h5 id=\"validity\"><a href=\"#validity\" class=\"headerlink\" title=\"validity\"></a>validity</h5><p>布尔属性值，返回 input 输入值是否合法<br>input元素的 validity属性包含一系列关于数据属性</p>\n<ul>\n<li>customError    设置为 true, 如果设置了自定义的 validity 信息。</li>\n<li>patternMismatch    设置为 true, 如果元素的值不匹配它的模式属性。</li>\n<li>rangeOverflow    设置为 true, 如果元素的值大于设置的最大值。</li>\n<li>rangeUnderflow    设置为 true, 如果元素的值小于它的最小值。</li>\n<li>stepMismatch    设置为 true, 如果元素的值不是按照规定的 step 属性设置。</li>\n<li>tooLong    设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。</li>\n<li>typeMismatch    设置为 true, 如果元素的值不是预期相匹配的类型。</li>\n<li>valueMissing    设置为 true，如果元素 (required 属性) 没有值。</li>\n<li>valid    设置为 true，如果元素的值是合法的。</li>\n</ul>\n<p>例子：</p>\n<pre><code>&lt;input id=&quot;id1&quot; type=&quot;number&quot; max=&quot;100&quot;&gt;\n&lt;button onclick=&quot;myFunction()&quot;&gt;验证&lt;/button&gt;\n&lt;script&gt;\nfunction myFunction() {\n    var txt = &quot;&quot;;\n    if (document.getElementById(&quot;id1&quot;).validity.rangeOverflow) {\n       txt = &quot;输入的值太大了&quot;;\n    }\n    document.getElementById(&quot;demo&quot;).innerHTML = txt;\n}\n&lt;/script&gt;\n</code></pre><h5 id=\"validationMessage\"><a href=\"#validationMessage\" class=\"headerlink\" title=\"validationMessage\"></a>validationMessage</h5><p>浏览器错误提示信息<br>使用setCustomValidity（error : string）来设置validationMessage，并可手动取消他们</p>\n<pre><code>setCustomValidity(&apos;&apos;)；\nsetCustomValidity(null)\nsetCustomValidity(undefined)\n</code></pre><h5 id=\"willValidate\"><a href=\"#willValidate\" class=\"headerlink\" title=\"willValidate\"></a>willValidate</h5><p>表示input 是否需要验证<br>比如,如果表单元素设置了required特性或pattern特性，则willValidate属性的值为true</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript表单元素提供了一些内置的验证方法和属性，来对用户输入进行校验和错误显示，比如</p>\n<ul>\n<li>checkValidity()，input 元素中的数据是合法的返回 true，否则返回 false</li>\n<li>设置 input 元素的 validationMessage属性，用于自定义错误提示信息的方法。<br>使用 setCustomValidity 设置了自定义提示后，validity.customError 就会变成true，则 checkValidity 总是会返回false</li>\n</ul>\n<p>例子：</p>\n<pre><code>&lt;input id=&quot;id1&quot; type=&quot;number&quot; min=&quot;100&quot; max=&quot;300&quot; required&gt;\n&lt;button onclick=&quot;myFunction()&quot;&gt;验证&lt;/button&gt;\n&lt;script&gt;\nfunction myFunction() {\n    var inpObj = document.getElementById(&quot;id1&quot;);\n    if (inpObj.checkValidity() == false) {\n        document.getElementById(&quot;demo&quot;).innerHTML = inpObj.validationMessage;\n    }\n}\n&lt;/script&gt;\n</code></pre><h3 id=\"验证-DOM-属性\"><a href=\"#验证-DOM-属性\" class=\"headerlink\" title=\"验证 DOM 属性\"></a>验证 DOM 属性</h3><h5 id=\"validity\"><a href=\"#validity\" class=\"headerlink\" title=\"validity\"></a>validity</h5><p>布尔属性值，返回 input 输入值是否合法<br>input元素的 validity属性包含一系列关于数据属性</p>\n<ul>\n<li>customError    设置为 true, 如果设置了自定义的 validity 信息。</li>\n<li>patternMismatch    设置为 true, 如果元素的值不匹配它的模式属性。</li>\n<li>rangeOverflow    设置为 true, 如果元素的值大于设置的最大值。</li>\n<li>rangeUnderflow    设置为 true, 如果元素的值小于它的最小值。</li>\n<li>stepMismatch    设置为 true, 如果元素的值不是按照规定的 step 属性设置。</li>\n<li>tooLong    设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。</li>\n<li>typeMismatch    设置为 true, 如果元素的值不是预期相匹配的类型。</li>\n<li>valueMissing    设置为 true，如果元素 (required 属性) 没有值。</li>\n<li>valid    设置为 true，如果元素的值是合法的。</li>\n</ul>\n<p>例子：</p>\n<pre><code>&lt;input id=&quot;id1&quot; type=&quot;number&quot; max=&quot;100&quot;&gt;\n&lt;button onclick=&quot;myFunction()&quot;&gt;验证&lt;/button&gt;\n&lt;script&gt;\nfunction myFunction() {\n    var txt = &quot;&quot;;\n    if (document.getElementById(&quot;id1&quot;).validity.rangeOverflow) {\n       txt = &quot;输入的值太大了&quot;;\n    }\n    document.getElementById(&quot;demo&quot;).innerHTML = txt;\n}\n&lt;/script&gt;\n</code></pre><h5 id=\"validationMessage\"><a href=\"#validationMessage\" class=\"headerlink\" title=\"validationMessage\"></a>validationMessage</h5><p>浏览器错误提示信息<br>使用setCustomValidity（error : string）来设置validationMessage，并可手动取消他们</p>\n<pre><code>setCustomValidity(&apos;&apos;)；\nsetCustomValidity(null)\nsetCustomValidity(undefined)\n</code></pre><h5 id=\"willValidate\"><a href=\"#willValidate\" class=\"headerlink\" title=\"willValidate\"></a>willValidate</h5><p>表示input 是否需要验证<br>比如,如果表单元素设置了required特性或pattern特性，则willValidate属性的值为true</p>\n"},{"title":"ElementRef和Renderer","date":"2018-12-13T14:49:36.000Z","comments":1,"_content":"\n在自定义属性指令的时候，我们看到了ElementRef的概念，通过它可获得应用了此属性指令的Dom元素，可使用Dom元素的相关属性和方法。\n实际上在angular中，也可以直接使用js操作dom树来改变元素的内容和行为，但是为了能够支持跨平台，减少应用层与渲染层之间强耦合，Angular 通过抽象层封装了不同平台的差异，统一了 API 接口。定义了一系列与元素访问和操作有关的类型，比如：TemplateRef，ViewRef，及下面要说的ElementRef和Renderer，这些在一般组件库的封装经常用于改变元素的行为。\n<!--more-->\n\n### ElementRef\n在angular中可以使用ElementRef直接获取Dom元素并操作他们，看下源码：\n\n    export class ElementRef {\n      public nativeElement: any;\n      constructor(nativeElement: any) { this.nativeElement = nativeElement; }\n    }\n\n其中的nativeElement属性就是该元素的Dom对象，可作为一般的Dom元素对象来调用方法来改变他们的呈现和行为，比如：\n\n    import { Directive, ElementRef } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n        constructor(el: ElementRef) {\n           el.nativeElement.style.backgroundColor = 'yellow';\n        }\n    }\n\n这是修改元素背景属性的实例\n\n> 除了直接使用ElementRef之外，只要能获取到ElementRef变量的地方就都可以访问操作对应的dom元素，比如：TemplateRef】\n\n当然，这样直接使用dom的属性来设置并不好，于是angular提供Renderer类型来操作他们\n\n### Renderer\nRenderer封装了dom元素的原始操作，减少应用层与渲染层之间强耦合关系，看看他的类型定义：\n\n    export abstract class Renderer {\n      // 创建元素\n      abstract createElement(parentElement: any, name: string,\n          debugInfo?: RenderDebugInfo): any;\n      // 创建文本元素\n      abstract createText(parentElement: any, value: string,\n          debugInfo?: RenderDebugInfo): any;\n      // 设置文本\n      abstract setText(renderNode: any, text: string): void;\n      // 设置元素Property\n      abstract setElementProperty(renderElement: any, propertyName: string,\n          propertyValue: any): void;\n      // 设置元素Attribute\n      abstract setElementAttribute(renderElement: any, attributeName: string,\n          attributeValue: string): void;\n      // 设置元素的Class\n      abstract setElementClass(renderElement: any, className: string,\n          isAdd: boolean): void;\n    }\n\n在angular4以后，使用Renderer2\n\n    export abstract class Renderer2 {\n      abstract createElement(name: string, namespace?: string|null): any;\n      abstract createComment(value: string): any;\n      abstract createText(value: string): any;\n      abstract setAttribute(el: any, name: string, value: string,\n        namespace?: string|null): void;\n      abstract removeAttribute(el: any, name: string, namespace?: string|null): void;\n      abstract addClass(el: any, name: string): void;\n      abstract removeClass(el: any, name: string): void;\n      abstract setStyle(el: any, style: string, value: any,\n        flags?: RendererStyleFlags2): void;\n      abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n      abstract setProperty(el: any, name: string, value: any): void;\n      abstract setValue(node: any, value: string): void;\n      abstract listen(\n          target: 'window'|'document'|'body'|any, eventName: string,\n          callback: (event: any) => boolean | void): () => void;\n    }\n\n可以看到Renderer提供了大部分常用的dom操作方法，下面改造上面指令的实现\n\n    import { Directive, ElementRef，Renderer2 } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n        constructor(el: ElementRef，renderer: Renderer2) {\n           this.renderer.setStyle(this.el.nativeElement, 'backgroundColor', 'yellow');\n        }\n    }","source":"_posts/2018-12-13-angular-elementRef-and-renderer.md","raw":"---\ntitle: ElementRef和Renderer\ndate: 2018-12-13 22:49:36\ntags: angular\ncategories: 前端\ncomments: true\n---\n\n在自定义属性指令的时候，我们看到了ElementRef的概念，通过它可获得应用了此属性指令的Dom元素，可使用Dom元素的相关属性和方法。\n实际上在angular中，也可以直接使用js操作dom树来改变元素的内容和行为，但是为了能够支持跨平台，减少应用层与渲染层之间强耦合，Angular 通过抽象层封装了不同平台的差异，统一了 API 接口。定义了一系列与元素访问和操作有关的类型，比如：TemplateRef，ViewRef，及下面要说的ElementRef和Renderer，这些在一般组件库的封装经常用于改变元素的行为。\n<!--more-->\n\n### ElementRef\n在angular中可以使用ElementRef直接获取Dom元素并操作他们，看下源码：\n\n    export class ElementRef {\n      public nativeElement: any;\n      constructor(nativeElement: any) { this.nativeElement = nativeElement; }\n    }\n\n其中的nativeElement属性就是该元素的Dom对象，可作为一般的Dom元素对象来调用方法来改变他们的呈现和行为，比如：\n\n    import { Directive, ElementRef } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n        constructor(el: ElementRef) {\n           el.nativeElement.style.backgroundColor = 'yellow';\n        }\n    }\n\n这是修改元素背景属性的实例\n\n> 除了直接使用ElementRef之外，只要能获取到ElementRef变量的地方就都可以访问操作对应的dom元素，比如：TemplateRef】\n\n当然，这样直接使用dom的属性来设置并不好，于是angular提供Renderer类型来操作他们\n\n### Renderer\nRenderer封装了dom元素的原始操作，减少应用层与渲染层之间强耦合关系，看看他的类型定义：\n\n    export abstract class Renderer {\n      // 创建元素\n      abstract createElement(parentElement: any, name: string,\n          debugInfo?: RenderDebugInfo): any;\n      // 创建文本元素\n      abstract createText(parentElement: any, value: string,\n          debugInfo?: RenderDebugInfo): any;\n      // 设置文本\n      abstract setText(renderNode: any, text: string): void;\n      // 设置元素Property\n      abstract setElementProperty(renderElement: any, propertyName: string,\n          propertyValue: any): void;\n      // 设置元素Attribute\n      abstract setElementAttribute(renderElement: any, attributeName: string,\n          attributeValue: string): void;\n      // 设置元素的Class\n      abstract setElementClass(renderElement: any, className: string,\n          isAdd: boolean): void;\n    }\n\n在angular4以后，使用Renderer2\n\n    export abstract class Renderer2 {\n      abstract createElement(name: string, namespace?: string|null): any;\n      abstract createComment(value: string): any;\n      abstract createText(value: string): any;\n      abstract setAttribute(el: any, name: string, value: string,\n        namespace?: string|null): void;\n      abstract removeAttribute(el: any, name: string, namespace?: string|null): void;\n      abstract addClass(el: any, name: string): void;\n      abstract removeClass(el: any, name: string): void;\n      abstract setStyle(el: any, style: string, value: any,\n        flags?: RendererStyleFlags2): void;\n      abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n      abstract setProperty(el: any, name: string, value: any): void;\n      abstract setValue(node: any, value: string): void;\n      abstract listen(\n          target: 'window'|'document'|'body'|any, eventName: string,\n          callback: (event: any) => boolean | void): () => void;\n    }\n\n可以看到Renderer提供了大部分常用的dom操作方法，下面改造上面指令的实现\n\n    import { Directive, ElementRef，Renderer2 } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n        constructor(el: ElementRef，renderer: Renderer2) {\n           this.renderer.setStyle(this.el.nativeElement, 'backgroundColor', 'yellow');\n        }\n    }","slug":"angular-elementRef-and-renderer","published":1,"updated":"2018-12-14T14:04:55.451Z","layout":"post","photos":[],"link":"","_id":"cjqwe428f003jor0baj0121bl","content":"<p>在自定义属性指令的时候，我们看到了ElementRef的概念，通过它可获得应用了此属性指令的Dom元素，可使用Dom元素的相关属性和方法。<br>实际上在angular中，也可以直接使用js操作dom树来改变元素的内容和行为，但是为了能够支持跨平台，减少应用层与渲染层之间强耦合，Angular 通过抽象层封装了不同平台的差异，统一了 API 接口。定义了一系列与元素访问和操作有关的类型，比如：TemplateRef，ViewRef，及下面要说的ElementRef和Renderer，这些在一般组件库的封装经常用于改变元素的行为。<br><a id=\"more\"></a></p>\n<h3 id=\"ElementRef\"><a href=\"#ElementRef\" class=\"headerlink\" title=\"ElementRef\"></a>ElementRef</h3><p>在angular中可以使用ElementRef直接获取Dom元素并操作他们，看下源码：</p>\n<pre><code>export class ElementRef {\n  public nativeElement: any;\n  constructor(nativeElement: any) { this.nativeElement = nativeElement; }\n}\n</code></pre><p>其中的nativeElement属性就是该元素的Dom对象，可作为一般的Dom元素对象来调用方法来改变他们的呈现和行为，比如：</p>\n<pre><code>import { Directive, ElementRef } from &apos;@angular/core&apos;;\n\n@Directive({\n  selector: &apos;[appHighlight]&apos;\n})\nexport class HighlightDirective {\n    constructor(el: ElementRef) {\n       el.nativeElement.style.backgroundColor = &apos;yellow&apos;;\n    }\n}\n</code></pre><p>这是修改元素背景属性的实例</p>\n<blockquote>\n<p>除了直接使用ElementRef之外，只要能获取到ElementRef变量的地方就都可以访问操作对应的dom元素，比如：TemplateRef】</p>\n</blockquote>\n<p>当然，这样直接使用dom的属性来设置并不好，于是angular提供Renderer类型来操作他们</p>\n<h3 id=\"Renderer\"><a href=\"#Renderer\" class=\"headerlink\" title=\"Renderer\"></a>Renderer</h3><p>Renderer封装了dom元素的原始操作，减少应用层与渲染层之间强耦合关系，看看他的类型定义：</p>\n<pre><code>export abstract class Renderer {\n  // 创建元素\n  abstract createElement(parentElement: any, name: string,\n      debugInfo?: RenderDebugInfo): any;\n  // 创建文本元素\n  abstract createText(parentElement: any, value: string,\n      debugInfo?: RenderDebugInfo): any;\n  // 设置文本\n  abstract setText(renderNode: any, text: string): void;\n  // 设置元素Property\n  abstract setElementProperty(renderElement: any, propertyName: string,\n      propertyValue: any): void;\n  // 设置元素Attribute\n  abstract setElementAttribute(renderElement: any, attributeName: string,\n      attributeValue: string): void;\n  // 设置元素的Class\n  abstract setElementClass(renderElement: any, className: string,\n      isAdd: boolean): void;\n}\n</code></pre><p>在angular4以后，使用Renderer2</p>\n<pre><code>export abstract class Renderer2 {\n  abstract createElement(name: string, namespace?: string|null): any;\n  abstract createComment(value: string): any;\n  abstract createText(value: string): any;\n  abstract setAttribute(el: any, name: string, value: string,\n    namespace?: string|null): void;\n  abstract removeAttribute(el: any, name: string, namespace?: string|null): void;\n  abstract addClass(el: any, name: string): void;\n  abstract removeClass(el: any, name: string): void;\n  abstract setStyle(el: any, style: string, value: any,\n    flags?: RendererStyleFlags2): void;\n  abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n  abstract setProperty(el: any, name: string, value: any): void;\n  abstract setValue(node: any, value: string): void;\n  abstract listen(\n      target: &apos;window&apos;|&apos;document&apos;|&apos;body&apos;|any, eventName: string,\n      callback: (event: any) =&gt; boolean | void): () =&gt; void;\n}\n</code></pre><p>可以看到Renderer提供了大部分常用的dom操作方法，下面改造上面指令的实现</p>\n<pre><code>import { Directive, ElementRef，Renderer2 } from &apos;@angular/core&apos;;\n\n@Directive({\n  selector: &apos;[appHighlight]&apos;\n})\nexport class HighlightDirective {\n    constructor(el: ElementRef，renderer: Renderer2) {\n       this.renderer.setStyle(this.el.nativeElement, &apos;backgroundColor&apos;, &apos;yellow&apos;);\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"<p>在自定义属性指令的时候，我们看到了ElementRef的概念，通过它可获得应用了此属性指令的Dom元素，可使用Dom元素的相关属性和方法。<br>实际上在angular中，也可以直接使用js操作dom树来改变元素的内容和行为，但是为了能够支持跨平台，减少应用层与渲染层之间强耦合，Angular 通过抽象层封装了不同平台的差异，统一了 API 接口。定义了一系列与元素访问和操作有关的类型，比如：TemplateRef，ViewRef，及下面要说的ElementRef和Renderer，这些在一般组件库的封装经常用于改变元素的行为。<br>","more":"</p>\n<h3 id=\"ElementRef\"><a href=\"#ElementRef\" class=\"headerlink\" title=\"ElementRef\"></a>ElementRef</h3><p>在angular中可以使用ElementRef直接获取Dom元素并操作他们，看下源码：</p>\n<pre><code>export class ElementRef {\n  public nativeElement: any;\n  constructor(nativeElement: any) { this.nativeElement = nativeElement; }\n}\n</code></pre><p>其中的nativeElement属性就是该元素的Dom对象，可作为一般的Dom元素对象来调用方法来改变他们的呈现和行为，比如：</p>\n<pre><code>import { Directive, ElementRef } from &apos;@angular/core&apos;;\n\n@Directive({\n  selector: &apos;[appHighlight]&apos;\n})\nexport class HighlightDirective {\n    constructor(el: ElementRef) {\n       el.nativeElement.style.backgroundColor = &apos;yellow&apos;;\n    }\n}\n</code></pre><p>这是修改元素背景属性的实例</p>\n<blockquote>\n<p>除了直接使用ElementRef之外，只要能获取到ElementRef变量的地方就都可以访问操作对应的dom元素，比如：TemplateRef】</p>\n</blockquote>\n<p>当然，这样直接使用dom的属性来设置并不好，于是angular提供Renderer类型来操作他们</p>\n<h3 id=\"Renderer\"><a href=\"#Renderer\" class=\"headerlink\" title=\"Renderer\"></a>Renderer</h3><p>Renderer封装了dom元素的原始操作，减少应用层与渲染层之间强耦合关系，看看他的类型定义：</p>\n<pre><code>export abstract class Renderer {\n  // 创建元素\n  abstract createElement(parentElement: any, name: string,\n      debugInfo?: RenderDebugInfo): any;\n  // 创建文本元素\n  abstract createText(parentElement: any, value: string,\n      debugInfo?: RenderDebugInfo): any;\n  // 设置文本\n  abstract setText(renderNode: any, text: string): void;\n  // 设置元素Property\n  abstract setElementProperty(renderElement: any, propertyName: string,\n      propertyValue: any): void;\n  // 设置元素Attribute\n  abstract setElementAttribute(renderElement: any, attributeName: string,\n      attributeValue: string): void;\n  // 设置元素的Class\n  abstract setElementClass(renderElement: any, className: string,\n      isAdd: boolean): void;\n}\n</code></pre><p>在angular4以后，使用Renderer2</p>\n<pre><code>export abstract class Renderer2 {\n  abstract createElement(name: string, namespace?: string|null): any;\n  abstract createComment(value: string): any;\n  abstract createText(value: string): any;\n  abstract setAttribute(el: any, name: string, value: string,\n    namespace?: string|null): void;\n  abstract removeAttribute(el: any, name: string, namespace?: string|null): void;\n  abstract addClass(el: any, name: string): void;\n  abstract removeClass(el: any, name: string): void;\n  abstract setStyle(el: any, style: string, value: any,\n    flags?: RendererStyleFlags2): void;\n  abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n  abstract setProperty(el: any, name: string, value: any): void;\n  abstract setValue(node: any, value: string): void;\n  abstract listen(\n      target: &apos;window&apos;|&apos;document&apos;|&apos;body&apos;|any, eventName: string,\n      callback: (event: any) =&gt; boolean | void): () =&gt; void;\n}\n</code></pre><p>可以看到Renderer提供了大部分常用的dom操作方法，下面改造上面指令的实现</p>\n<pre><code>import { Directive, ElementRef，Renderer2 } from &apos;@angular/core&apos;;\n\n@Directive({\n  selector: &apos;[appHighlight]&apos;\n})\nexport class HighlightDirective {\n    constructor(el: ElementRef，renderer: Renderer2) {\n       this.renderer.setStyle(this.el.nativeElement, &apos;backgroundColor&apos;, &apos;yellow&apos;);\n    }\n}\n</code></pre>"},{"title":"Angular-模块","date":"2017-07-15T08:39:05.000Z","comments":1,"_content":"\nAngular采用模块的形式来组织应用，将相关业务功能或者有内部联系的部分进行内聚化设计，封装成单独的模块，而整个应该则由多个模块来构成\n\n## 应用模块化\n模块化是一种设计模式，有着明显的优点:\n<!--more-->\n- 打包特定领域/工作流的功能,隔离功能实现\n- 方便组织应用，多个模块可独立开发\n- 方便导入使用外部控件，很多Angular库和第三方库都是以模块形式提供，例如：FormsModule、HttpModule、RouterModule等\n- 方便把服务加到应用程序中\n\n模块化带来应用设计的简易化，应用组织就像搭积木一样方便，像这样：\n![app-module-jimu](/images/app-module-jimu.jpg)\n\n## 模块的组成\n模块在angular里只是由@NgModule装饰器提供元数据的类，这个元数据对象指示如何编译和运行该模块，基本构成：\n\n    @NgModule({\n        imports:[], //导入其它模块\n        declarations: [], // 声明组件指令管道\n        providers: []  //声明服务提供商\n        exports: []  //公开某些类\n    })\n    export class ContactModule { }\n\n\n#### (1) imports模块\n导入支持模块，会发生几件事：\n1 . 被导入模块公开的组件/指令/管道将和导入目标模块declarations合并，并供目标模块使用，但导入的成员优先级没目标模块的高\n2 . 被导入模块的providers会累加到导入目标模块的提供商，追加到@NgModule.providers中，并把它们注入到目标模块一级的注入器，比如导入到根模块，则注入到根注入器\n3 . 被导入的模块的路由和导入目标模块路由将合并\n\n\n#### (2) declarations[]\n该数组声明本模块所拥有的组件，指令，管道等成员，数组里成员有以下特点：\n+  数组里声明的成员默认都是私有的，除非放进exports公开他们\n+  一个组件/指令/管道只能属于一个模块，不能同时把一个类声明在几个模块中\n+  数组里的成员可以公开给其他模块直接导入使用\n\n\n#### (3) providers[]\n模块是为模块中所有成员提供服务的最佳途径，在模块中声明服务提供商有几个特点：\n* 模块内声明的服务商是模块级的，可供模块所有组件或其他成员使用\n* 如果此模块被直接导入到根模块时，服务商注册到根注入器，整个应用都可使用\n* 如果此模块被导入到延迟模块，则注入到模块子注入器，可供延迟模块内使用\n* 延迟加载模块是限制服务商在模块内生效的唯一途径\n\n\n#### (3) exports[]\n设置公开成员，至于在公开数组里声明的成员才能其他模块导入使用，可供导出的成员类型有如下几种：\n- declarations数组中的成员\n- imports数组中的模块\n- 不在imports数组中的其他模块(可不导入就直接导出)\n\n模块成员导入后有两种使用方式：\n1 . 通过选择器直接在模板中使用，使用于组件/指令/管道\n2 . 通过路由导航来使用，适用于导入的组件，不过更好的设计是将路由移至被导入模块，导入后合并路由即可\n> 如果是在本模块路由到导入模块的某个组件时，该组件不必公开，私有属性直接导入即可\n\n## 模块树\n模块树是组成angular的基本树之一，体现了应用的基本结构,angular一般可通过直接导入和懒加载两种方式来将各个模块联系在一起，下图是一个基本模块树的关联结构：\n![angular-module-tree](/images/module-tree.jpg)\n\n\n## 应用模块的组建方式\n一个angular应用一般有四种类型的模块：\n- 引导模块(AppModule)，一般指根模块，用于引导和组织整个应用\n- 核心模块(CoreModule)，用于封装一次性的类，隐藏它们的实现细节，一般包含只在应用启动时使用到的组件类和全应用级服务提供商，根模块导入它来获取相关能力\n- 共享模块(ShareModule)，用于封装公共组件、指令和管道，共享给那些需要它们的模块，\n- 特性模块(FeatrueModule)，用于封装工作流和业务功能\n\n下图是一个应用中模块的典型组建方式\n![app-module-construct](/images/app-construct.jpg)\n\n\n#### 最后，一些需要注意的细节：\n\n1 . 根模块和特性模块共享着相同的执行环境和同一个依赖注入器，在某个模块中定义的服务在所有其他模块中也都能用。特性模块通过自己提供的服务和对外公开的组件、指令、管道来与其它模块进行协同工作\n\n2 . 在根注入器注册的提供商，每个服务均为单例，在全应用范围的组件都可使用，无论组件时主动导入还是惰性加载的\n\n3 . 共享模块中不应出现providers服务商，否则如果一个惰性加载模块导入了此共享模块，就会相应生成一份服务的实例，这个在设计中时不被期望的\n\n4 . 导入目标模块不会继承被导入模块中对组件、指令或管道的访问权，两个模块的imports数组是互不相干的，除非被导入模块将导入模块重新导出。所以，对公共模块的使用，并不是在根模块导入一次就可以了，而应该在每一个需要使用的模块中都需要导入\n\n5 . 被导入模块的公开指令的优先级小于导入目标模块的指令，渲染时先执行导入的后执行本模块的，如果有同名指令存在，本模块的覆盖导入的；而如果在本模块的declarations如果有同名指令，后申明的覆盖先申明的\n\n6 . 多次导入同一个指令是没问题的，Angular 会移除重复的类，只注册一次。但如果有两个不同的类，只是恰好有相同的名字，angular认为并没有重复，会同时保留这两个指令，只是在使用的时候两个指令都会先后调用到，优先级高的获最后结果\n\n7 . 显式添加到AppModule中的那些提供商在优先级上要优于从其它模块中导入的提供商\n\n8 . 立即模块加载是直接导入，在应用启动时加载它的路由和组件；懒加载模块是通过路由进行惰性加载，指的是用户第一次访问时异步获取加载文件，加载速度取决于浏览器一次加载文件的数量，比如：谷歌一般一次8个，所以要规划好懒加载模块的大小，以免加载时间过长\n\n9 . 对于惰性加载模块，一般不要直接导入使用，因为一般这种模块都会有自己的路由配置，导入的同时也会导入它的路由，会对目标模块的路由导航造成影响，因为路由匹配是第一次匹配到即胜出的原则，\n如果惰性模块的路由和目标模块相似，会引起不必要的错误\n\n10 . 只能在根模块AppModule中导入BrowserModule,在其它任何模块中都不要导入BrowserModule。特性模块和惰性加载模块应该改成导入CommonModule, 它们需要通用的指令,它们不需要重新初始化全应用级的提供商。\n如果你在惰性加载模块中导入BrowserModule，Angular就会抛出一个错误, 特性模块中导入CommonModule可以让它能用在任何目标平台上。\n\n11 . Angular不允许模块之间出现循环依赖，所以不要让模块'A'导入模块'B'，而模块'B'又导入模块'A'\n\n12 . 静态方法forRoot和forChild是一个约定，它可以让开发人员更轻松的配置模块的提供商。\nRouterModule.forRoot就是一个很好的例子,应用把一个Routes对象传给forRoot（），为的就是使用路由配置全应用级的Router服务。只能在应用的根模块AppModule中调用并导入.forRoot的结果。 在其它模块中导入它，特别是惰性加载模块中，是违反设计目标的并会导致一个运行时错误。\nRouterModule也提供了静态方法forChild，用于配置惰性加载模块的路由。\n\n13 . 导入的提供商很容易被由其它导入模块中的提供商替换\n假设模块需要一个定制过的HttpBackend，它为所有的Http请求添加一个特别的请求头。 如果应用中其它地方的另一个模块也定制了HttpBackend或仅仅导入了HttpModule，它就会改写当前模块的HttpBackend提供商，丢掉了这个特别的请求头。 这样服务器就会拒绝来自该模块的请求。\n如果你必须防范这种“提供商腐化”现象，那就不要依赖于“启动时加载”模块的providers。\n\n14 . 如何知道一个模块或服务是否已经加载过了？\n\n    src/app/core/core.module.ts (Constructor)\n\n    constructor (@Optional() @SkipSelf() parentModule: CoreModule) {\n      if (parentModule) {\n        throw new Error(\n          'CoreModule is already loaded. Import it in the AppModule only');\n      }\n    }\n\n15 . Angular总是会动态加载AppComponent,无论把它的类型列在了@NgModule.bootstrap函数中，还是命令式的调用该模块的ngDoBootstrap方法来引导它。\n在路由定义中用到的组件也同样是入口组件,路由定义根据类型来引用组件,忽略路由组件的选择器（即使它有选择器），并且把该组件动态加载到RouterOutlet中。\n编译器无法通过在其它组件的模板中查找来发现这些入口组件。 我们必须通过把它们加入entryComponents列表中来让编译器知道它们的存在。\nAngular会自动把下列类型的组件添加到模块的entryComponents(入口组件)中：\n- 那些出现在@NgModule.bootstrap列表中的组件。\n- 那些被路由定义引用的组件。\n\n我们并不需要显式的引用这些组件,虽然引用了也没坏处。\n\n16 . 引导组件是入口组件的一种。 它是被Angular的引导（应用启动）过程加载到DOM中的入口组件。 其它入口组件则是被其它方式动态加载的，比如被路由器加载。\n@NgModule.bootstrap属性告诉编译器这是一个入口组件，同时它应该生成一些代码来用该组件引导此应用。\n不需要把组件同时列在bootstrap和entryComponent列表中 —— 虽然这样做也没坏处","source":"_posts/2017-07-15-angular-module.md","raw":"---\ntitle: Angular-模块\ndate: 2017-07-15 16:39:05\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\nAngular采用模块的形式来组织应用，将相关业务功能或者有内部联系的部分进行内聚化设计，封装成单独的模块，而整个应该则由多个模块来构成\n\n## 应用模块化\n模块化是一种设计模式，有着明显的优点:\n<!--more-->\n- 打包特定领域/工作流的功能,隔离功能实现\n- 方便组织应用，多个模块可独立开发\n- 方便导入使用外部控件，很多Angular库和第三方库都是以模块形式提供，例如：FormsModule、HttpModule、RouterModule等\n- 方便把服务加到应用程序中\n\n模块化带来应用设计的简易化，应用组织就像搭积木一样方便，像这样：\n![app-module-jimu](/images/app-module-jimu.jpg)\n\n## 模块的组成\n模块在angular里只是由@NgModule装饰器提供元数据的类，这个元数据对象指示如何编译和运行该模块，基本构成：\n\n    @NgModule({\n        imports:[], //导入其它模块\n        declarations: [], // 声明组件指令管道\n        providers: []  //声明服务提供商\n        exports: []  //公开某些类\n    })\n    export class ContactModule { }\n\n\n#### (1) imports模块\n导入支持模块，会发生几件事：\n1 . 被导入模块公开的组件/指令/管道将和导入目标模块declarations合并，并供目标模块使用，但导入的成员优先级没目标模块的高\n2 . 被导入模块的providers会累加到导入目标模块的提供商，追加到@NgModule.providers中，并把它们注入到目标模块一级的注入器，比如导入到根模块，则注入到根注入器\n3 . 被导入的模块的路由和导入目标模块路由将合并\n\n\n#### (2) declarations[]\n该数组声明本模块所拥有的组件，指令，管道等成员，数组里成员有以下特点：\n+  数组里声明的成员默认都是私有的，除非放进exports公开他们\n+  一个组件/指令/管道只能属于一个模块，不能同时把一个类声明在几个模块中\n+  数组里的成员可以公开给其他模块直接导入使用\n\n\n#### (3) providers[]\n模块是为模块中所有成员提供服务的最佳途径，在模块中声明服务提供商有几个特点：\n* 模块内声明的服务商是模块级的，可供模块所有组件或其他成员使用\n* 如果此模块被直接导入到根模块时，服务商注册到根注入器，整个应用都可使用\n* 如果此模块被导入到延迟模块，则注入到模块子注入器，可供延迟模块内使用\n* 延迟加载模块是限制服务商在模块内生效的唯一途径\n\n\n#### (3) exports[]\n设置公开成员，至于在公开数组里声明的成员才能其他模块导入使用，可供导出的成员类型有如下几种：\n- declarations数组中的成员\n- imports数组中的模块\n- 不在imports数组中的其他模块(可不导入就直接导出)\n\n模块成员导入后有两种使用方式：\n1 . 通过选择器直接在模板中使用，使用于组件/指令/管道\n2 . 通过路由导航来使用，适用于导入的组件，不过更好的设计是将路由移至被导入模块，导入后合并路由即可\n> 如果是在本模块路由到导入模块的某个组件时，该组件不必公开，私有属性直接导入即可\n\n## 模块树\n模块树是组成angular的基本树之一，体现了应用的基本结构,angular一般可通过直接导入和懒加载两种方式来将各个模块联系在一起，下图是一个基本模块树的关联结构：\n![angular-module-tree](/images/module-tree.jpg)\n\n\n## 应用模块的组建方式\n一个angular应用一般有四种类型的模块：\n- 引导模块(AppModule)，一般指根模块，用于引导和组织整个应用\n- 核心模块(CoreModule)，用于封装一次性的类，隐藏它们的实现细节，一般包含只在应用启动时使用到的组件类和全应用级服务提供商，根模块导入它来获取相关能力\n- 共享模块(ShareModule)，用于封装公共组件、指令和管道，共享给那些需要它们的模块，\n- 特性模块(FeatrueModule)，用于封装工作流和业务功能\n\n下图是一个应用中模块的典型组建方式\n![app-module-construct](/images/app-construct.jpg)\n\n\n#### 最后，一些需要注意的细节：\n\n1 . 根模块和特性模块共享着相同的执行环境和同一个依赖注入器，在某个模块中定义的服务在所有其他模块中也都能用。特性模块通过自己提供的服务和对外公开的组件、指令、管道来与其它模块进行协同工作\n\n2 . 在根注入器注册的提供商，每个服务均为单例，在全应用范围的组件都可使用，无论组件时主动导入还是惰性加载的\n\n3 . 共享模块中不应出现providers服务商，否则如果一个惰性加载模块导入了此共享模块，就会相应生成一份服务的实例，这个在设计中时不被期望的\n\n4 . 导入目标模块不会继承被导入模块中对组件、指令或管道的访问权，两个模块的imports数组是互不相干的，除非被导入模块将导入模块重新导出。所以，对公共模块的使用，并不是在根模块导入一次就可以了，而应该在每一个需要使用的模块中都需要导入\n\n5 . 被导入模块的公开指令的优先级小于导入目标模块的指令，渲染时先执行导入的后执行本模块的，如果有同名指令存在，本模块的覆盖导入的；而如果在本模块的declarations如果有同名指令，后申明的覆盖先申明的\n\n6 . 多次导入同一个指令是没问题的，Angular 会移除重复的类，只注册一次。但如果有两个不同的类，只是恰好有相同的名字，angular认为并没有重复，会同时保留这两个指令，只是在使用的时候两个指令都会先后调用到，优先级高的获最后结果\n\n7 . 显式添加到AppModule中的那些提供商在优先级上要优于从其它模块中导入的提供商\n\n8 . 立即模块加载是直接导入，在应用启动时加载它的路由和组件；懒加载模块是通过路由进行惰性加载，指的是用户第一次访问时异步获取加载文件，加载速度取决于浏览器一次加载文件的数量，比如：谷歌一般一次8个，所以要规划好懒加载模块的大小，以免加载时间过长\n\n9 . 对于惰性加载模块，一般不要直接导入使用，因为一般这种模块都会有自己的路由配置，导入的同时也会导入它的路由，会对目标模块的路由导航造成影响，因为路由匹配是第一次匹配到即胜出的原则，\n如果惰性模块的路由和目标模块相似，会引起不必要的错误\n\n10 . 只能在根模块AppModule中导入BrowserModule,在其它任何模块中都不要导入BrowserModule。特性模块和惰性加载模块应该改成导入CommonModule, 它们需要通用的指令,它们不需要重新初始化全应用级的提供商。\n如果你在惰性加载模块中导入BrowserModule，Angular就会抛出一个错误, 特性模块中导入CommonModule可以让它能用在任何目标平台上。\n\n11 . Angular不允许模块之间出现循环依赖，所以不要让模块'A'导入模块'B'，而模块'B'又导入模块'A'\n\n12 . 静态方法forRoot和forChild是一个约定，它可以让开发人员更轻松的配置模块的提供商。\nRouterModule.forRoot就是一个很好的例子,应用把一个Routes对象传给forRoot（），为的就是使用路由配置全应用级的Router服务。只能在应用的根模块AppModule中调用并导入.forRoot的结果。 在其它模块中导入它，特别是惰性加载模块中，是违反设计目标的并会导致一个运行时错误。\nRouterModule也提供了静态方法forChild，用于配置惰性加载模块的路由。\n\n13 . 导入的提供商很容易被由其它导入模块中的提供商替换\n假设模块需要一个定制过的HttpBackend，它为所有的Http请求添加一个特别的请求头。 如果应用中其它地方的另一个模块也定制了HttpBackend或仅仅导入了HttpModule，它就会改写当前模块的HttpBackend提供商，丢掉了这个特别的请求头。 这样服务器就会拒绝来自该模块的请求。\n如果你必须防范这种“提供商腐化”现象，那就不要依赖于“启动时加载”模块的providers。\n\n14 . 如何知道一个模块或服务是否已经加载过了？\n\n    src/app/core/core.module.ts (Constructor)\n\n    constructor (@Optional() @SkipSelf() parentModule: CoreModule) {\n      if (parentModule) {\n        throw new Error(\n          'CoreModule is already loaded. Import it in the AppModule only');\n      }\n    }\n\n15 . Angular总是会动态加载AppComponent,无论把它的类型列在了@NgModule.bootstrap函数中，还是命令式的调用该模块的ngDoBootstrap方法来引导它。\n在路由定义中用到的组件也同样是入口组件,路由定义根据类型来引用组件,忽略路由组件的选择器（即使它有选择器），并且把该组件动态加载到RouterOutlet中。\n编译器无法通过在其它组件的模板中查找来发现这些入口组件。 我们必须通过把它们加入entryComponents列表中来让编译器知道它们的存在。\nAngular会自动把下列类型的组件添加到模块的entryComponents(入口组件)中：\n- 那些出现在@NgModule.bootstrap列表中的组件。\n- 那些被路由定义引用的组件。\n\n我们并不需要显式的引用这些组件,虽然引用了也没坏处。\n\n16 . 引导组件是入口组件的一种。 它是被Angular的引导（应用启动）过程加载到DOM中的入口组件。 其它入口组件则是被其它方式动态加载的，比如被路由器加载。\n@NgModule.bootstrap属性告诉编译器这是一个入口组件，同时它应该生成一些代码来用该组件引导此应用。\n不需要把组件同时列在bootstrap和entryComponent列表中 —— 虽然这样做也没坏处","slug":"angular-module","published":1,"updated":"2017-08-27T10:52:31.320Z","layout":"post","photos":[],"link":"","_id":"cjqwe42ar004qor0boo26lvkj","content":"<p>Angular采用模块的形式来组织应用，将相关业务功能或者有内部联系的部分进行内聚化设计，封装成单独的模块，而整个应该则由多个模块来构成</p>\n<h2 id=\"应用模块化\"><a href=\"#应用模块化\" class=\"headerlink\" title=\"应用模块化\"></a>应用模块化</h2><p>模块化是一种设计模式，有着明显的优点:<br><a id=\"more\"></a></p>\n<ul>\n<li>打包特定领域/工作流的功能,隔离功能实现</li>\n<li>方便组织应用，多个模块可独立开发</li>\n<li>方便导入使用外部控件，很多Angular库和第三方库都是以模块形式提供，例如：FormsModule、HttpModule、RouterModule等</li>\n<li>方便把服务加到应用程序中</li>\n</ul>\n<p>模块化带来应用设计的简易化，应用组织就像搭积木一样方便，像这样：<br><img src=\"/images/app-module-jimu.jpg\" alt=\"app-module-jimu\"></p>\n<h2 id=\"模块的组成\"><a href=\"#模块的组成\" class=\"headerlink\" title=\"模块的组成\"></a>模块的组成</h2><p>模块在angular里只是由@NgModule装饰器提供元数据的类，这个元数据对象指示如何编译和运行该模块，基本构成：</p>\n<pre><code>@NgModule({\n    imports:[], //导入其它模块\n    declarations: [], // 声明组件指令管道\n    providers: []  //声明服务提供商\n    exports: []  //公开某些类\n})\nexport class ContactModule { }\n</code></pre><h4 id=\"1-imports模块\"><a href=\"#1-imports模块\" class=\"headerlink\" title=\"(1) imports模块\"></a>(1) imports模块</h4><p>导入支持模块，会发生几件事：<br>1 . 被导入模块公开的组件/指令/管道将和导入目标模块declarations合并，并供目标模块使用，但导入的成员优先级没目标模块的高<br>2 . 被导入模块的providers会累加到导入目标模块的提供商，追加到@NgModule.providers中，并把它们注入到目标模块一级的注入器，比如导入到根模块，则注入到根注入器<br>3 . 被导入的模块的路由和导入目标模块路由将合并</p>\n<h4 id=\"2-declarations\"><a href=\"#2-declarations\" class=\"headerlink\" title=\"(2) declarations[]\"></a>(2) declarations[]</h4><p>该数组声明本模块所拥有的组件，指令，管道等成员，数组里成员有以下特点：</p>\n<ul>\n<li>数组里声明的成员默认都是私有的，除非放进exports公开他们</li>\n<li>一个组件/指令/管道只能属于一个模块，不能同时把一个类声明在几个模块中</li>\n<li>数组里的成员可以公开给其他模块直接导入使用</li>\n</ul>\n<h4 id=\"3-providers\"><a href=\"#3-providers\" class=\"headerlink\" title=\"(3) providers[]\"></a>(3) providers[]</h4><p>模块是为模块中所有成员提供服务的最佳途径，在模块中声明服务提供商有几个特点：</p>\n<ul>\n<li>模块内声明的服务商是模块级的，可供模块所有组件或其他成员使用</li>\n<li>如果此模块被直接导入到根模块时，服务商注册到根注入器，整个应用都可使用</li>\n<li>如果此模块被导入到延迟模块，则注入到模块子注入器，可供延迟模块内使用</li>\n<li>延迟加载模块是限制服务商在模块内生效的唯一途径</li>\n</ul>\n<h4 id=\"3-exports\"><a href=\"#3-exports\" class=\"headerlink\" title=\"(3) exports[]\"></a>(3) exports[]</h4><p>设置公开成员，至于在公开数组里声明的成员才能其他模块导入使用，可供导出的成员类型有如下几种：</p>\n<ul>\n<li>declarations数组中的成员</li>\n<li>imports数组中的模块</li>\n<li>不在imports数组中的其他模块(可不导入就直接导出)</li>\n</ul>\n<p>模块成员导入后有两种使用方式：<br>1 . 通过选择器直接在模板中使用，使用于组件/指令/管道<br>2 . 通过路由导航来使用，适用于导入的组件，不过更好的设计是将路由移至被导入模块，导入后合并路由即可</p>\n<blockquote>\n<p>如果是在本模块路由到导入模块的某个组件时，该组件不必公开，私有属性直接导入即可</p>\n</blockquote>\n<h2 id=\"模块树\"><a href=\"#模块树\" class=\"headerlink\" title=\"模块树\"></a>模块树</h2><p>模块树是组成angular的基本树之一，体现了应用的基本结构,angular一般可通过直接导入和懒加载两种方式来将各个模块联系在一起，下图是一个基本模块树的关联结构：<br><img src=\"/images/module-tree.jpg\" alt=\"angular-module-tree\"></p>\n<h2 id=\"应用模块的组建方式\"><a href=\"#应用模块的组建方式\" class=\"headerlink\" title=\"应用模块的组建方式\"></a>应用模块的组建方式</h2><p>一个angular应用一般有四种类型的模块：</p>\n<ul>\n<li>引导模块(AppModule)，一般指根模块，用于引导和组织整个应用</li>\n<li>核心模块(CoreModule)，用于封装一次性的类，隐藏它们的实现细节，一般包含只在应用启动时使用到的组件类和全应用级服务提供商，根模块导入它来获取相关能力</li>\n<li>共享模块(ShareModule)，用于封装公共组件、指令和管道，共享给那些需要它们的模块，</li>\n<li>特性模块(FeatrueModule)，用于封装工作流和业务功能</li>\n</ul>\n<p>下图是一个应用中模块的典型组建方式<br><img src=\"/images/app-construct.jpg\" alt=\"app-module-construct\"></p>\n<h4 id=\"最后，一些需要注意的细节：\"><a href=\"#最后，一些需要注意的细节：\" class=\"headerlink\" title=\"最后，一些需要注意的细节：\"></a>最后，一些需要注意的细节：</h4><p>1 . 根模块和特性模块共享着相同的执行环境和同一个依赖注入器，在某个模块中定义的服务在所有其他模块中也都能用。特性模块通过自己提供的服务和对外公开的组件、指令、管道来与其它模块进行协同工作</p>\n<p>2 . 在根注入器注册的提供商，每个服务均为单例，在全应用范围的组件都可使用，无论组件时主动导入还是惰性加载的</p>\n<p>3 . 共享模块中不应出现providers服务商，否则如果一个惰性加载模块导入了此共享模块，就会相应生成一份服务的实例，这个在设计中时不被期望的</p>\n<p>4 . 导入目标模块不会继承被导入模块中对组件、指令或管道的访问权，两个模块的imports数组是互不相干的，除非被导入模块将导入模块重新导出。所以，对公共模块的使用，并不是在根模块导入一次就可以了，而应该在每一个需要使用的模块中都需要导入</p>\n<p>5 . 被导入模块的公开指令的优先级小于导入目标模块的指令，渲染时先执行导入的后执行本模块的，如果有同名指令存在，本模块的覆盖导入的；而如果在本模块的declarations如果有同名指令，后申明的覆盖先申明的</p>\n<p>6 . 多次导入同一个指令是没问题的，Angular 会移除重复的类，只注册一次。但如果有两个不同的类，只是恰好有相同的名字，angular认为并没有重复，会同时保留这两个指令，只是在使用的时候两个指令都会先后调用到，优先级高的获最后结果</p>\n<p>7 . 显式添加到AppModule中的那些提供商在优先级上要优于从其它模块中导入的提供商</p>\n<p>8 . 立即模块加载是直接导入，在应用启动时加载它的路由和组件；懒加载模块是通过路由进行惰性加载，指的是用户第一次访问时异步获取加载文件，加载速度取决于浏览器一次加载文件的数量，比如：谷歌一般一次8个，所以要规划好懒加载模块的大小，以免加载时间过长</p>\n<p>9 . 对于惰性加载模块，一般不要直接导入使用，因为一般这种模块都会有自己的路由配置，导入的同时也会导入它的路由，会对目标模块的路由导航造成影响，因为路由匹配是第一次匹配到即胜出的原则，<br>如果惰性模块的路由和目标模块相似，会引起不必要的错误</p>\n<p>10 . 只能在根模块AppModule中导入BrowserModule,在其它任何模块中都不要导入BrowserModule。特性模块和惰性加载模块应该改成导入CommonModule, 它们需要通用的指令,它们不需要重新初始化全应用级的提供商。<br>如果你在惰性加载模块中导入BrowserModule，Angular就会抛出一个错误, 特性模块中导入CommonModule可以让它能用在任何目标平台上。</p>\n<p>11 . Angular不允许模块之间出现循环依赖，所以不要让模块’A’导入模块’B’，而模块’B’又导入模块’A’</p>\n<p>12 . 静态方法forRoot和forChild是一个约定，它可以让开发人员更轻松的配置模块的提供商。<br>RouterModule.forRoot就是一个很好的例子,应用把一个Routes对象传给forRoot（），为的就是使用路由配置全应用级的Router服务。只能在应用的根模块AppModule中调用并导入.forRoot的结果。 在其它模块中导入它，特别是惰性加载模块中，是违反设计目标的并会导致一个运行时错误。<br>RouterModule也提供了静态方法forChild，用于配置惰性加载模块的路由。</p>\n<p>13 . 导入的提供商很容易被由其它导入模块中的提供商替换<br>假设模块需要一个定制过的HttpBackend，它为所有的Http请求添加一个特别的请求头。 如果应用中其它地方的另一个模块也定制了HttpBackend或仅仅导入了HttpModule，它就会改写当前模块的HttpBackend提供商，丢掉了这个特别的请求头。 这样服务器就会拒绝来自该模块的请求。<br>如果你必须防范这种“提供商腐化”现象，那就不要依赖于“启动时加载”模块的providers。</p>\n<p>14 . 如何知道一个模块或服务是否已经加载过了？</p>\n<pre><code>src/app/core/core.module.ts (Constructor)\n\nconstructor (@Optional() @SkipSelf() parentModule: CoreModule) {\n  if (parentModule) {\n    throw new Error(\n      &apos;CoreModule is already loaded. Import it in the AppModule only&apos;);\n  }\n}\n</code></pre><p>15 . Angular总是会动态加载AppComponent,无论把它的类型列在了@NgModule.bootstrap函数中，还是命令式的调用该模块的ngDoBootstrap方法来引导它。<br>在路由定义中用到的组件也同样是入口组件,路由定义根据类型来引用组件,忽略路由组件的选择器（即使它有选择器），并且把该组件动态加载到RouterOutlet中。<br>编译器无法通过在其它组件的模板中查找来发现这些入口组件。 我们必须通过把它们加入entryComponents列表中来让编译器知道它们的存在。<br>Angular会自动把下列类型的组件添加到模块的entryComponents(入口组件)中：</p>\n<ul>\n<li>那些出现在@NgModule.bootstrap列表中的组件。</li>\n<li>那些被路由定义引用的组件。</li>\n</ul>\n<p>我们并不需要显式的引用这些组件,虽然引用了也没坏处。</p>\n<p>16 . 引导组件是入口组件的一种。 它是被Angular的引导（应用启动）过程加载到DOM中的入口组件。 其它入口组件则是被其它方式动态加载的，比如被路由器加载。<br>@NgModule.bootstrap属性告诉编译器这是一个入口组件，同时它应该生成一些代码来用该组件引导此应用。<br>不需要把组件同时列在bootstrap和entryComponent列表中 —— 虽然这样做也没坏处</p>\n","site":{"data":{}},"excerpt":"<p>Angular采用模块的形式来组织应用，将相关业务功能或者有内部联系的部分进行内聚化设计，封装成单独的模块，而整个应该则由多个模块来构成</p>\n<h2 id=\"应用模块化\"><a href=\"#应用模块化\" class=\"headerlink\" title=\"应用模块化\"></a>应用模块化</h2><p>模块化是一种设计模式，有着明显的优点:<br>","more":"</p>\n<ul>\n<li>打包特定领域/工作流的功能,隔离功能实现</li>\n<li>方便组织应用，多个模块可独立开发</li>\n<li>方便导入使用外部控件，很多Angular库和第三方库都是以模块形式提供，例如：FormsModule、HttpModule、RouterModule等</li>\n<li>方便把服务加到应用程序中</li>\n</ul>\n<p>模块化带来应用设计的简易化，应用组织就像搭积木一样方便，像这样：<br><img src=\"/images/app-module-jimu.jpg\" alt=\"app-module-jimu\"></p>\n<h2 id=\"模块的组成\"><a href=\"#模块的组成\" class=\"headerlink\" title=\"模块的组成\"></a>模块的组成</h2><p>模块在angular里只是由@NgModule装饰器提供元数据的类，这个元数据对象指示如何编译和运行该模块，基本构成：</p>\n<pre><code>@NgModule({\n    imports:[], //导入其它模块\n    declarations: [], // 声明组件指令管道\n    providers: []  //声明服务提供商\n    exports: []  //公开某些类\n})\nexport class ContactModule { }\n</code></pre><h4 id=\"1-imports模块\"><a href=\"#1-imports模块\" class=\"headerlink\" title=\"(1) imports模块\"></a>(1) imports模块</h4><p>导入支持模块，会发生几件事：<br>1 . 被导入模块公开的组件/指令/管道将和导入目标模块declarations合并，并供目标模块使用，但导入的成员优先级没目标模块的高<br>2 . 被导入模块的providers会累加到导入目标模块的提供商，追加到@NgModule.providers中，并把它们注入到目标模块一级的注入器，比如导入到根模块，则注入到根注入器<br>3 . 被导入的模块的路由和导入目标模块路由将合并</p>\n<h4 id=\"2-declarations\"><a href=\"#2-declarations\" class=\"headerlink\" title=\"(2) declarations[]\"></a>(2) declarations[]</h4><p>该数组声明本模块所拥有的组件，指令，管道等成员，数组里成员有以下特点：</p>\n<ul>\n<li>数组里声明的成员默认都是私有的，除非放进exports公开他们</li>\n<li>一个组件/指令/管道只能属于一个模块，不能同时把一个类声明在几个模块中</li>\n<li>数组里的成员可以公开给其他模块直接导入使用</li>\n</ul>\n<h4 id=\"3-providers\"><a href=\"#3-providers\" class=\"headerlink\" title=\"(3) providers[]\"></a>(3) providers[]</h4><p>模块是为模块中所有成员提供服务的最佳途径，在模块中声明服务提供商有几个特点：</p>\n<ul>\n<li>模块内声明的服务商是模块级的，可供模块所有组件或其他成员使用</li>\n<li>如果此模块被直接导入到根模块时，服务商注册到根注入器，整个应用都可使用</li>\n<li>如果此模块被导入到延迟模块，则注入到模块子注入器，可供延迟模块内使用</li>\n<li>延迟加载模块是限制服务商在模块内生效的唯一途径</li>\n</ul>\n<h4 id=\"3-exports\"><a href=\"#3-exports\" class=\"headerlink\" title=\"(3) exports[]\"></a>(3) exports[]</h4><p>设置公开成员，至于在公开数组里声明的成员才能其他模块导入使用，可供导出的成员类型有如下几种：</p>\n<ul>\n<li>declarations数组中的成员</li>\n<li>imports数组中的模块</li>\n<li>不在imports数组中的其他模块(可不导入就直接导出)</li>\n</ul>\n<p>模块成员导入后有两种使用方式：<br>1 . 通过选择器直接在模板中使用，使用于组件/指令/管道<br>2 . 通过路由导航来使用，适用于导入的组件，不过更好的设计是将路由移至被导入模块，导入后合并路由即可</p>\n<blockquote>\n<p>如果是在本模块路由到导入模块的某个组件时，该组件不必公开，私有属性直接导入即可</p>\n</blockquote>\n<h2 id=\"模块树\"><a href=\"#模块树\" class=\"headerlink\" title=\"模块树\"></a>模块树</h2><p>模块树是组成angular的基本树之一，体现了应用的基本结构,angular一般可通过直接导入和懒加载两种方式来将各个模块联系在一起，下图是一个基本模块树的关联结构：<br><img src=\"/images/module-tree.jpg\" alt=\"angular-module-tree\"></p>\n<h2 id=\"应用模块的组建方式\"><a href=\"#应用模块的组建方式\" class=\"headerlink\" title=\"应用模块的组建方式\"></a>应用模块的组建方式</h2><p>一个angular应用一般有四种类型的模块：</p>\n<ul>\n<li>引导模块(AppModule)，一般指根模块，用于引导和组织整个应用</li>\n<li>核心模块(CoreModule)，用于封装一次性的类，隐藏它们的实现细节，一般包含只在应用启动时使用到的组件类和全应用级服务提供商，根模块导入它来获取相关能力</li>\n<li>共享模块(ShareModule)，用于封装公共组件、指令和管道，共享给那些需要它们的模块，</li>\n<li>特性模块(FeatrueModule)，用于封装工作流和业务功能</li>\n</ul>\n<p>下图是一个应用中模块的典型组建方式<br><img src=\"/images/app-construct.jpg\" alt=\"app-module-construct\"></p>\n<h4 id=\"最后，一些需要注意的细节：\"><a href=\"#最后，一些需要注意的细节：\" class=\"headerlink\" title=\"最后，一些需要注意的细节：\"></a>最后，一些需要注意的细节：</h4><p>1 . 根模块和特性模块共享着相同的执行环境和同一个依赖注入器，在某个模块中定义的服务在所有其他模块中也都能用。特性模块通过自己提供的服务和对外公开的组件、指令、管道来与其它模块进行协同工作</p>\n<p>2 . 在根注入器注册的提供商，每个服务均为单例，在全应用范围的组件都可使用，无论组件时主动导入还是惰性加载的</p>\n<p>3 . 共享模块中不应出现providers服务商，否则如果一个惰性加载模块导入了此共享模块，就会相应生成一份服务的实例，这个在设计中时不被期望的</p>\n<p>4 . 导入目标模块不会继承被导入模块中对组件、指令或管道的访问权，两个模块的imports数组是互不相干的，除非被导入模块将导入模块重新导出。所以，对公共模块的使用，并不是在根模块导入一次就可以了，而应该在每一个需要使用的模块中都需要导入</p>\n<p>5 . 被导入模块的公开指令的优先级小于导入目标模块的指令，渲染时先执行导入的后执行本模块的，如果有同名指令存在，本模块的覆盖导入的；而如果在本模块的declarations如果有同名指令，后申明的覆盖先申明的</p>\n<p>6 . 多次导入同一个指令是没问题的，Angular 会移除重复的类，只注册一次。但如果有两个不同的类，只是恰好有相同的名字，angular认为并没有重复，会同时保留这两个指令，只是在使用的时候两个指令都会先后调用到，优先级高的获最后结果</p>\n<p>7 . 显式添加到AppModule中的那些提供商在优先级上要优于从其它模块中导入的提供商</p>\n<p>8 . 立即模块加载是直接导入，在应用启动时加载它的路由和组件；懒加载模块是通过路由进行惰性加载，指的是用户第一次访问时异步获取加载文件，加载速度取决于浏览器一次加载文件的数量，比如：谷歌一般一次8个，所以要规划好懒加载模块的大小，以免加载时间过长</p>\n<p>9 . 对于惰性加载模块，一般不要直接导入使用，因为一般这种模块都会有自己的路由配置，导入的同时也会导入它的路由，会对目标模块的路由导航造成影响，因为路由匹配是第一次匹配到即胜出的原则，<br>如果惰性模块的路由和目标模块相似，会引起不必要的错误</p>\n<p>10 . 只能在根模块AppModule中导入BrowserModule,在其它任何模块中都不要导入BrowserModule。特性模块和惰性加载模块应该改成导入CommonModule, 它们需要通用的指令,它们不需要重新初始化全应用级的提供商。<br>如果你在惰性加载模块中导入BrowserModule，Angular就会抛出一个错误, 特性模块中导入CommonModule可以让它能用在任何目标平台上。</p>\n<p>11 . Angular不允许模块之间出现循环依赖，所以不要让模块’A’导入模块’B’，而模块’B’又导入模块’A’</p>\n<p>12 . 静态方法forRoot和forChild是一个约定，它可以让开发人员更轻松的配置模块的提供商。<br>RouterModule.forRoot就是一个很好的例子,应用把一个Routes对象传给forRoot（），为的就是使用路由配置全应用级的Router服务。只能在应用的根模块AppModule中调用并导入.forRoot的结果。 在其它模块中导入它，特别是惰性加载模块中，是违反设计目标的并会导致一个运行时错误。<br>RouterModule也提供了静态方法forChild，用于配置惰性加载模块的路由。</p>\n<p>13 . 导入的提供商很容易被由其它导入模块中的提供商替换<br>假设模块需要一个定制过的HttpBackend，它为所有的Http请求添加一个特别的请求头。 如果应用中其它地方的另一个模块也定制了HttpBackend或仅仅导入了HttpModule，它就会改写当前模块的HttpBackend提供商，丢掉了这个特别的请求头。 这样服务器就会拒绝来自该模块的请求。<br>如果你必须防范这种“提供商腐化”现象，那就不要依赖于“启动时加载”模块的providers。</p>\n<p>14 . 如何知道一个模块或服务是否已经加载过了？</p>\n<pre><code>src/app/core/core.module.ts (Constructor)\n\nconstructor (@Optional() @SkipSelf() parentModule: CoreModule) {\n  if (parentModule) {\n    throw new Error(\n      &apos;CoreModule is already loaded. Import it in the AppModule only&apos;);\n  }\n}\n</code></pre><p>15 . Angular总是会动态加载AppComponent,无论把它的类型列在了@NgModule.bootstrap函数中，还是命令式的调用该模块的ngDoBootstrap方法来引导它。<br>在路由定义中用到的组件也同样是入口组件,路由定义根据类型来引用组件,忽略路由组件的选择器（即使它有选择器），并且把该组件动态加载到RouterOutlet中。<br>编译器无法通过在其它组件的模板中查找来发现这些入口组件。 我们必须通过把它们加入entryComponents列表中来让编译器知道它们的存在。<br>Angular会自动把下列类型的组件添加到模块的entryComponents(入口组件)中：</p>\n<ul>\n<li>那些出现在@NgModule.bootstrap列表中的组件。</li>\n<li>那些被路由定义引用的组件。</li>\n</ul>\n<p>我们并不需要显式的引用这些组件,虽然引用了也没坏处。</p>\n<p>16 . 引导组件是入口组件的一种。 它是被Angular的引导（应用启动）过程加载到DOM中的入口组件。 其它入口组件则是被其它方式动态加载的，比如被路由器加载。<br>@NgModule.bootstrap属性告诉编译器这是一个入口组件，同时它应该生成一些代码来用该组件引导此应用。<br>不需要把组件同时列在bootstrap和entryComponent列表中 —— 虽然这样做也没坏处</p>"},{"title":"Angular-属性指令","date":"2017-07-20T17:26:02.000Z","comments":1,"_content":"\n属性型指令是angular中三大指令之一，主要用于改变一个DOM元素的外观或操作行为，比如：可以改变元素的样式和事件响应等，可以像原生属性一样直接使用于标签元素，故此得名\n本节将会介绍几个最常用的属性型指令：\n<!--more-->\n> 三大指令：组件，属性指令，结构指令\n\n## 常用内置属性指令\n##### （1）NgClass\nngClass用于动态添加或移除一组CSS类，从而控制元素的显示效果，通过绑定到NgClass，可以同时添加或移除多个类\n当然，还有一种动态添加/移除单个类的CSS绑定，也能实现类似效果\n下面两种写法效果相同\n\n    .active {\n      font-size: 36px;\n      background-color: #ff2312;\n    }\n\n    .deactive {\n      font-size: 16px;\n      background-color: #fffff;\n    }\n\n    <div [class.active]=\"isSpecial\" [class.deactive]=\"!isSpecial\">binding Class</div>\n\n    <div [ngClass]=\"{active: isSpecial,deactive: !isSpecial}\">binding Class</div>\n\n上面当变量isSpecial为true时添加类active，否则添加deactive\n还可以同时添加或移除多个CSS类，像这样\n\n    .special {\n      color: red;\n    }\n\n    currentClasses = {active: isSpecial,special: isSpecial,deactive: !isSpecial}\n\n    <div [ngClass]=\"currentClasses\">binding Class</div>\n##### （2）NgStyle\nngStyle用于动态内联样式，从而控制元素的显示效果，通过绑定到NgStyle，可以同时设置多个内联样式。\n当然，还有一种动态单一样式值的样式绑定，也能实现类似效果\n下面两种写法效果相同\n\n    <div [style.font-size]=\"isSpecial ? 'large' : 'small'\" >\n      bind styles\n    </div>\n\n    <div [ngStyle]=\"{'font-size':isSpecial ? 'large' : 'small'}\" >\n      bind styles\n    </div>\n上面根据变量isSpecial为true或false给元素设置不同的字体大小\n要同时设置多个内联样式，NgStyle指令更好，像这样\n\n    currentStyles = {\n        'font-style':  iscanSave      ? 'italic' : 'normal',\n        'font-weight': !isUnchanged ? 'bold'   : 'normal',\n        'font-size':   isSpecial    ? '24px'   : '12px'\n    };\n\n    <div [ngStyle]=\"currentStyles\">\n      bind styles\n    </div>\n\n##### （3）NgModel\n**（1）使用方式**\n开发输入表单时，通常都要既显示数据属性又要修改这个属性，使用NgModel指令进行双向数据绑定可以简化这种工作，使用方式如下：\n\n    <input [(ngModel)]=\"currentHero.name\" name=\"input\">\n\n还有导入表单支持模块\n\n    import { FormsModule } from '@angular/forms';\n\n> 使用此指令需要指定name值。一个表单中可能有多个这样的双向绑定，在Angular内部为这些绑定创建了一些FormControl，并把它们注册到NgForm指令，再将该指令附加到`<form>`标签，而注册每个FormControl时，就是使用name属性值作为每个双向绑定的键值\n\n**（2）跟踪修改和输入验证**\nNgModel指令更够跟踪输入状态，动态给宿主元素添加/移除CSS类，以反映当前状态，我们可以这一特性来修改控件的外观，显示和隐藏消息\n在输入各个不同状态下添加的类：\n- 被访问过的时候添加ng-touched类，否则添加ng-untouched\n- 值变化了的时候添加ng-dirty类，否则添加ng-pristine\n- 输入值有效的时候添加ng-valid类，否则添加ng-invalid\n\n我么可以重新定义这些CSS类，控制着些状态按照期望来显示，比如：\n\n    .ng-valid[required] {\n      border-left: 5px solid #42A948;\n    }\n\n    .ng-invalid:not(form)  {\n      border-left: 5px solid #a94442;\n    }\n\n还有，这些css类对应一些只是输入状态的标志位，比如：ng-pristine->pristine,ng-valid->valid，可以通过他们来显示/移除输入提示，比如：\n\n        <label for=\"name\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" required\n               [(ngModel)]=\"model.name\" name=\"name\" #name=\"ngModel\">\n        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n          Name is required\n        </div>\n\n当输入有效或没变更时，隐藏提示；否则，显示提示\n\n**（3）双向绑定指令的内部原理**\n在元素层面上，既要设置元素属性，又要监听元素事件变化,普通方式\n\n    <input [value]=\"name\" (input)=\"name=$event.target.value\">\n\nngular 为此提供一种特殊的双向数据绑定语法：[(x)]，该语法结合了属性绑定的方括号[x]和事件绑定的圆括号(x)\n\n    <input [(ngModel)]=\"name\">\n\n双向绑定语法实际上是属性绑定和事件绑定的语法糖,Angular将绑定分解成这样：\n\n    <input [ngModel]=\"name\" (ngModelChange)=\"name=$event\">\n\n   当一个元素拥有可以设置的属性x和对应的事件xChange时，解释[(x)]语法就容易的多，而ngModel指令即使通过自己的输入属性ngModel和输出属性ngModelChange隐藏了那些细节\n   [ngModel]指令的实现如下：\n\n    @Directive({\n     selector:\"[ngModel]\",\n     host: {\n       \"[value]\": \"ngModel\",\n       \"(input)\": \"ngModelChange.next($event.target.value)\"\n     }\n    })\n    class ngModelDirective {\n      @Input() ngModel : any;\n      @Output() ngModelChange = new EventEmitter();\n    }\n绑定的写法:\n> [value] 或 bind-aa : 属性绑定\n(oper) 或 on-oper : 事件绑定\n[(value)] 或 bindon-value : 双向绑定\n\n**（4）自定义双向绑定指令**\n根据[(x)]语法的特点，可以实现自己双向绑定,使用方式ngModel类似\n定义子组件：\n\n    //.ts\n    import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\n\n    @Component({\n      selector: 'app-test',\n      templateUrl: './test.component.html',\n      styleUrls: ['./test.component.css']\n    })\n    export class TestComponent implements OnInit {\n\n      @Output() myNumberChange = new EventEmitter<any>();\n\n      id : any;\n      personList : any[] = [{'id':1, 'name':'Jack', 'age':10},\n                            {'id':5, 'name':'Tom', 'age':18},\n                            {'id':8, 'name':'Luccy', 'age':24}];\n\n      constructor() { }\n\n      @Input()\n      set myNumber(num : any) {\n        this.id = num;\n      }\n\n      add() {\n        this.id++;\n        this.getPerson();\n      }\n\n      des() {\n        this.id--;\n        this.getPerson();\n      }\n\n      getPerson() {\n        for(let person of this.personList) {\n          if(person.id === this.id) {\n            this.myNumberChange.emit(person.age);\n            return;\n          }\n        }\n        this.myNumberChange.emit(99);\n      }\n\n      ngOnInit() {\n      }\n\n    }\n\n    //.html\n    <div class=\"form-group\">\n        <label class=\"form-input-label\">id： </label>\n        <div class=\"form-input-content\">\n            {{id}}\n        </div>\n    </div>\n    <button class=\"button\" (click)=\"add()\">增加</button>\n    <button class=\"button\" (click)=\"des()\">减少</button>\n\n子组件通过输入变量myNumber获取值，处理后使用输出事件myNumberChange返回给宿主结果\n父组件在用时可以使用双向绑定的语法方式：\n\n    //login.comonent\n    inputNum : any = 0;\n\n    <div class=\"form-group\">\n      <label class=\"form-input-label\">输入变量值： </label>\n      <div class=\"form-input-content\">\n        <input type=\"text\" name=\"inputNum\" [(ngModel)]=\"inputNum\">\n      </div>\n    </div>\n    <app-test [(myNumber)]=\"inputNum\"></app-test>\n    <p>返回的值： {{inputNum}}</p>\n如下时两个瞬间\n<img src=\"/images/atrr-direc-4.png\"><img src=\"/images/atrr-direc-18.png\">\n大概是点击“增加”，组件id变为5，并返回父组件变更了inputNum的值为18，inputNum变更后反过来又把值传入给子组件输入变量\n\n\n## 自定义属性指令\n属性型指令可以同时实现元素多个普通属性所能达到效果的集合，这是属性指令比普通属性的优势。在开发过程中可以根据需要自定义属性型指令，避免元素上过多的属性添加\n下面的例子需要实现一个文本框，要求：只能呈现数字，可以通过鼠标点击增长/减少数值，可以手动输入数值，不能粘贴数值，能限制数值范围，输入时不能输入超出范围的数值，不能输入非数字的字母,输入聚焦时底色变更；以上可以通过一个属性型指令来实现\n通过@Directive装饰器来定义指令\n\n    import { Directive, ElementRef,HostListener,Input  } from '@angular/core';\n\n    @Directive({\n      selector: '[myInputNumber]'\n    })\n    export class InputNumberDirective {\n      @Input('myInputNumber') min_number: any;\n\n      constructor(private el: ElementRef) {\n      }\n\n      @HostListener('focusin') onFocusIn() {\n        this.el.nativeElement.style.backgroundColor = 'yellow';\n      }\n\n      @HostListener('focusout') onFocusOut() {\n        this.el.nativeElement.style.backgroundColor = '#ffffff';\n      }\n\n      @HostListener('keyup') onkeyup() {\n        if(!Number(this.el.nativeElement.value) ||\n          (Number(this.el.nativeElement.value) < this.min_number)) {\n          this.el.nativeElement.value = this.min_number;\n        }\n      }\n\n      @HostListener('paste') onPaste() {\n        return false;\n      }\n\n      @HostListener('keypress') onkeypress() {\n        return true;\n      }\n\n      @HostListener('keydown') onkeydown() {\n        return true;\n      }\n    }\n\n使用该属性指令的父组件\n\n    //loginComponent.ts\n    import { Component, OnInit } from '@angular/core';\n\n    @Component({\n      selector: 'app-login',\n      templateUrl: './login.component.html',\n      styleUrls: ['./login.component.css']\n    })\n    export class LoginComponent implements OnInit {\n      number : any = 0;\n      minNumber : any = 3;\n\n      constructor() {\n        this.number = this.minNumber;\n      }\n\n      ngOnInit() {\n      }\n\n      aggreNum() {\n        this.number++;\n      }\n\n      deagreNum() {\n        if(this.number > this.minNumber) {\n          this.number--;\n        }\n      }\n\n      minMunChange() {\n        this.number = this.minNumber;\n      }\n    }\n\n    //loginComponent.html\n    <div class=\"form-group\">\n      <label class=\"form-input-label\">最小值： </label>\n      <div class=\"form-input-content\">\n        <input type=\"text\" name=\"inutMinNumber\" [(ngModel)]=\"minNumber\" (ngModelChange)=\"minMunChange()\">\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"form-input-label\">请输入： </label>\n      <div class=\"form-input-content\">\n        <input type=\"text\" [myInputNumber]=\"minNumber\" name=\"inutNumber\" [(ngModel)]=\"number\">\n      </div>\n      <div class=\"input-number\">\n        <div class=\"input-aggre\" (click)=\"aggreNum()\">+</div>\n        <div class=\"input-desgre\" (click)=\"deagreNum()\">-</div>\n      </div>\n    </div>\n\n（1）angular会为在指令使用时创建一个指令控制器类的实例，并把angular的ElementRef和Renderer注入进构造函数，ElementRef是一个服务，它赋予我们通过它的nativeElement属性直接访问 DOM 元素的能力\n（2）Renderer服务允许通过代码设置元素的样式\n（3）使用HostListener装饰器添加两个事件处理器\n（4）使用简单语法，[myInputNumber]在这里同时实现了两点：把指令应用到了宿主元素上，并且通过属性绑定设置了输入变量\n指令使用的效果大概如下\n![atrr-directive](/images/atrr-directive.png)\n\n\n##### 附录,一些好东西\n1 . 组件自己的模板可以绑定到组件的任意属性，不需要使用了@Input装饰器，因为Angular把组件的模板看做从属于该组件的，它们之间相互信任；但是组件或指令不应该盲目信任其它组件或指令， 因此组件或指令的属性默认是不能被绑定的，从Angular绑定机制的角度来看，它们是私有的，而当添加了@Input时，它们变成了公共的，只有这样，它们才能被其它组件或属性绑定\n\n2 . 如果有两个同名指令，都叫做HighlightDirective，只要在 import 时使用as关键字来为第二个指令创建个别名即可，比如：\n\n    import {HighlightDirective as myHighlight} from '';\n\n3 . EventEmitter自定义事件\nEventEmitter用于触发自定义事件，指令或子组件创建一个EventEmitter实例，并且把它作为属性暴露出来，调用EventEmitter.emit(payload)来触发事件，可以传入任何东西作为消息载荷。 父指令通过绑定到这个属性来监听事件，并通过$event对象来访问载荷，下面例子：\n\n    //hero-detail.component.html\n    <div>\n      <img src=\"{{heroImageUrl}}\">\n      <span [style.text-decoration]=\"lineThrough\">\n        {{prefix}} {{hero?.name}}\n      </span>\n      <button (click)=\"delete()\">Delete</button>\n    </div>`\n\n    //hero-detail.component.ts\n    deleteRequest = new EventEmitter<Hero>();\n\n    delete() {\n      this.deleteRequest.emit(this.hero);\n    }\n\n组件定义了deleteRequest属性，它是EventEmitter实例。 当用户点击删除时，组件会调用delete()方法，让EventEmitter发出一个Hero对\n父组件绑定这个事件:\n\n    <hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\">\n    </hero-detail>\n\n当deleteRequest事件触发时，Angular 调用父组件的deleteHero方法， 在$event变量中传入要删除的英雄","source":"_posts/2017-07-21-angular-attr-directive.md","raw":"---\ntitle: Angular-属性指令\ndate: 2017-07-21 01:26:02\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n属性型指令是angular中三大指令之一，主要用于改变一个DOM元素的外观或操作行为，比如：可以改变元素的样式和事件响应等，可以像原生属性一样直接使用于标签元素，故此得名\n本节将会介绍几个最常用的属性型指令：\n<!--more-->\n> 三大指令：组件，属性指令，结构指令\n\n## 常用内置属性指令\n##### （1）NgClass\nngClass用于动态添加或移除一组CSS类，从而控制元素的显示效果，通过绑定到NgClass，可以同时添加或移除多个类\n当然，还有一种动态添加/移除单个类的CSS绑定，也能实现类似效果\n下面两种写法效果相同\n\n    .active {\n      font-size: 36px;\n      background-color: #ff2312;\n    }\n\n    .deactive {\n      font-size: 16px;\n      background-color: #fffff;\n    }\n\n    <div [class.active]=\"isSpecial\" [class.deactive]=\"!isSpecial\">binding Class</div>\n\n    <div [ngClass]=\"{active: isSpecial,deactive: !isSpecial}\">binding Class</div>\n\n上面当变量isSpecial为true时添加类active，否则添加deactive\n还可以同时添加或移除多个CSS类，像这样\n\n    .special {\n      color: red;\n    }\n\n    currentClasses = {active: isSpecial,special: isSpecial,deactive: !isSpecial}\n\n    <div [ngClass]=\"currentClasses\">binding Class</div>\n##### （2）NgStyle\nngStyle用于动态内联样式，从而控制元素的显示效果，通过绑定到NgStyle，可以同时设置多个内联样式。\n当然，还有一种动态单一样式值的样式绑定，也能实现类似效果\n下面两种写法效果相同\n\n    <div [style.font-size]=\"isSpecial ? 'large' : 'small'\" >\n      bind styles\n    </div>\n\n    <div [ngStyle]=\"{'font-size':isSpecial ? 'large' : 'small'}\" >\n      bind styles\n    </div>\n上面根据变量isSpecial为true或false给元素设置不同的字体大小\n要同时设置多个内联样式，NgStyle指令更好，像这样\n\n    currentStyles = {\n        'font-style':  iscanSave      ? 'italic' : 'normal',\n        'font-weight': !isUnchanged ? 'bold'   : 'normal',\n        'font-size':   isSpecial    ? '24px'   : '12px'\n    };\n\n    <div [ngStyle]=\"currentStyles\">\n      bind styles\n    </div>\n\n##### （3）NgModel\n**（1）使用方式**\n开发输入表单时，通常都要既显示数据属性又要修改这个属性，使用NgModel指令进行双向数据绑定可以简化这种工作，使用方式如下：\n\n    <input [(ngModel)]=\"currentHero.name\" name=\"input\">\n\n还有导入表单支持模块\n\n    import { FormsModule } from '@angular/forms';\n\n> 使用此指令需要指定name值。一个表单中可能有多个这样的双向绑定，在Angular内部为这些绑定创建了一些FormControl，并把它们注册到NgForm指令，再将该指令附加到`<form>`标签，而注册每个FormControl时，就是使用name属性值作为每个双向绑定的键值\n\n**（2）跟踪修改和输入验证**\nNgModel指令更够跟踪输入状态，动态给宿主元素添加/移除CSS类，以反映当前状态，我们可以这一特性来修改控件的外观，显示和隐藏消息\n在输入各个不同状态下添加的类：\n- 被访问过的时候添加ng-touched类，否则添加ng-untouched\n- 值变化了的时候添加ng-dirty类，否则添加ng-pristine\n- 输入值有效的时候添加ng-valid类，否则添加ng-invalid\n\n我么可以重新定义这些CSS类，控制着些状态按照期望来显示，比如：\n\n    .ng-valid[required] {\n      border-left: 5px solid #42A948;\n    }\n\n    .ng-invalid:not(form)  {\n      border-left: 5px solid #a94442;\n    }\n\n还有，这些css类对应一些只是输入状态的标志位，比如：ng-pristine->pristine,ng-valid->valid，可以通过他们来显示/移除输入提示，比如：\n\n        <label for=\"name\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" required\n               [(ngModel)]=\"model.name\" name=\"name\" #name=\"ngModel\">\n        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n          Name is required\n        </div>\n\n当输入有效或没变更时，隐藏提示；否则，显示提示\n\n**（3）双向绑定指令的内部原理**\n在元素层面上，既要设置元素属性，又要监听元素事件变化,普通方式\n\n    <input [value]=\"name\" (input)=\"name=$event.target.value\">\n\nngular 为此提供一种特殊的双向数据绑定语法：[(x)]，该语法结合了属性绑定的方括号[x]和事件绑定的圆括号(x)\n\n    <input [(ngModel)]=\"name\">\n\n双向绑定语法实际上是属性绑定和事件绑定的语法糖,Angular将绑定分解成这样：\n\n    <input [ngModel]=\"name\" (ngModelChange)=\"name=$event\">\n\n   当一个元素拥有可以设置的属性x和对应的事件xChange时，解释[(x)]语法就容易的多，而ngModel指令即使通过自己的输入属性ngModel和输出属性ngModelChange隐藏了那些细节\n   [ngModel]指令的实现如下：\n\n    @Directive({\n     selector:\"[ngModel]\",\n     host: {\n       \"[value]\": \"ngModel\",\n       \"(input)\": \"ngModelChange.next($event.target.value)\"\n     }\n    })\n    class ngModelDirective {\n      @Input() ngModel : any;\n      @Output() ngModelChange = new EventEmitter();\n    }\n绑定的写法:\n> [value] 或 bind-aa : 属性绑定\n(oper) 或 on-oper : 事件绑定\n[(value)] 或 bindon-value : 双向绑定\n\n**（4）自定义双向绑定指令**\n根据[(x)]语法的特点，可以实现自己双向绑定,使用方式ngModel类似\n定义子组件：\n\n    //.ts\n    import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\n\n    @Component({\n      selector: 'app-test',\n      templateUrl: './test.component.html',\n      styleUrls: ['./test.component.css']\n    })\n    export class TestComponent implements OnInit {\n\n      @Output() myNumberChange = new EventEmitter<any>();\n\n      id : any;\n      personList : any[] = [{'id':1, 'name':'Jack', 'age':10},\n                            {'id':5, 'name':'Tom', 'age':18},\n                            {'id':8, 'name':'Luccy', 'age':24}];\n\n      constructor() { }\n\n      @Input()\n      set myNumber(num : any) {\n        this.id = num;\n      }\n\n      add() {\n        this.id++;\n        this.getPerson();\n      }\n\n      des() {\n        this.id--;\n        this.getPerson();\n      }\n\n      getPerson() {\n        for(let person of this.personList) {\n          if(person.id === this.id) {\n            this.myNumberChange.emit(person.age);\n            return;\n          }\n        }\n        this.myNumberChange.emit(99);\n      }\n\n      ngOnInit() {\n      }\n\n    }\n\n    //.html\n    <div class=\"form-group\">\n        <label class=\"form-input-label\">id： </label>\n        <div class=\"form-input-content\">\n            {{id}}\n        </div>\n    </div>\n    <button class=\"button\" (click)=\"add()\">增加</button>\n    <button class=\"button\" (click)=\"des()\">减少</button>\n\n子组件通过输入变量myNumber获取值，处理后使用输出事件myNumberChange返回给宿主结果\n父组件在用时可以使用双向绑定的语法方式：\n\n    //login.comonent\n    inputNum : any = 0;\n\n    <div class=\"form-group\">\n      <label class=\"form-input-label\">输入变量值： </label>\n      <div class=\"form-input-content\">\n        <input type=\"text\" name=\"inputNum\" [(ngModel)]=\"inputNum\">\n      </div>\n    </div>\n    <app-test [(myNumber)]=\"inputNum\"></app-test>\n    <p>返回的值： {{inputNum}}</p>\n如下时两个瞬间\n<img src=\"/images/atrr-direc-4.png\"><img src=\"/images/atrr-direc-18.png\">\n大概是点击“增加”，组件id变为5，并返回父组件变更了inputNum的值为18，inputNum变更后反过来又把值传入给子组件输入变量\n\n\n## 自定义属性指令\n属性型指令可以同时实现元素多个普通属性所能达到效果的集合，这是属性指令比普通属性的优势。在开发过程中可以根据需要自定义属性型指令，避免元素上过多的属性添加\n下面的例子需要实现一个文本框，要求：只能呈现数字，可以通过鼠标点击增长/减少数值，可以手动输入数值，不能粘贴数值，能限制数值范围，输入时不能输入超出范围的数值，不能输入非数字的字母,输入聚焦时底色变更；以上可以通过一个属性型指令来实现\n通过@Directive装饰器来定义指令\n\n    import { Directive, ElementRef,HostListener,Input  } from '@angular/core';\n\n    @Directive({\n      selector: '[myInputNumber]'\n    })\n    export class InputNumberDirective {\n      @Input('myInputNumber') min_number: any;\n\n      constructor(private el: ElementRef) {\n      }\n\n      @HostListener('focusin') onFocusIn() {\n        this.el.nativeElement.style.backgroundColor = 'yellow';\n      }\n\n      @HostListener('focusout') onFocusOut() {\n        this.el.nativeElement.style.backgroundColor = '#ffffff';\n      }\n\n      @HostListener('keyup') onkeyup() {\n        if(!Number(this.el.nativeElement.value) ||\n          (Number(this.el.nativeElement.value) < this.min_number)) {\n          this.el.nativeElement.value = this.min_number;\n        }\n      }\n\n      @HostListener('paste') onPaste() {\n        return false;\n      }\n\n      @HostListener('keypress') onkeypress() {\n        return true;\n      }\n\n      @HostListener('keydown') onkeydown() {\n        return true;\n      }\n    }\n\n使用该属性指令的父组件\n\n    //loginComponent.ts\n    import { Component, OnInit } from '@angular/core';\n\n    @Component({\n      selector: 'app-login',\n      templateUrl: './login.component.html',\n      styleUrls: ['./login.component.css']\n    })\n    export class LoginComponent implements OnInit {\n      number : any = 0;\n      minNumber : any = 3;\n\n      constructor() {\n        this.number = this.minNumber;\n      }\n\n      ngOnInit() {\n      }\n\n      aggreNum() {\n        this.number++;\n      }\n\n      deagreNum() {\n        if(this.number > this.minNumber) {\n          this.number--;\n        }\n      }\n\n      minMunChange() {\n        this.number = this.minNumber;\n      }\n    }\n\n    //loginComponent.html\n    <div class=\"form-group\">\n      <label class=\"form-input-label\">最小值： </label>\n      <div class=\"form-input-content\">\n        <input type=\"text\" name=\"inutMinNumber\" [(ngModel)]=\"minNumber\" (ngModelChange)=\"minMunChange()\">\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"form-input-label\">请输入： </label>\n      <div class=\"form-input-content\">\n        <input type=\"text\" [myInputNumber]=\"minNumber\" name=\"inutNumber\" [(ngModel)]=\"number\">\n      </div>\n      <div class=\"input-number\">\n        <div class=\"input-aggre\" (click)=\"aggreNum()\">+</div>\n        <div class=\"input-desgre\" (click)=\"deagreNum()\">-</div>\n      </div>\n    </div>\n\n（1）angular会为在指令使用时创建一个指令控制器类的实例，并把angular的ElementRef和Renderer注入进构造函数，ElementRef是一个服务，它赋予我们通过它的nativeElement属性直接访问 DOM 元素的能力\n（2）Renderer服务允许通过代码设置元素的样式\n（3）使用HostListener装饰器添加两个事件处理器\n（4）使用简单语法，[myInputNumber]在这里同时实现了两点：把指令应用到了宿主元素上，并且通过属性绑定设置了输入变量\n指令使用的效果大概如下\n![atrr-directive](/images/atrr-directive.png)\n\n\n##### 附录,一些好东西\n1 . 组件自己的模板可以绑定到组件的任意属性，不需要使用了@Input装饰器，因为Angular把组件的模板看做从属于该组件的，它们之间相互信任；但是组件或指令不应该盲目信任其它组件或指令， 因此组件或指令的属性默认是不能被绑定的，从Angular绑定机制的角度来看，它们是私有的，而当添加了@Input时，它们变成了公共的，只有这样，它们才能被其它组件或属性绑定\n\n2 . 如果有两个同名指令，都叫做HighlightDirective，只要在 import 时使用as关键字来为第二个指令创建个别名即可，比如：\n\n    import {HighlightDirective as myHighlight} from '';\n\n3 . EventEmitter自定义事件\nEventEmitter用于触发自定义事件，指令或子组件创建一个EventEmitter实例，并且把它作为属性暴露出来，调用EventEmitter.emit(payload)来触发事件，可以传入任何东西作为消息载荷。 父指令通过绑定到这个属性来监听事件，并通过$event对象来访问载荷，下面例子：\n\n    //hero-detail.component.html\n    <div>\n      <img src=\"{{heroImageUrl}}\">\n      <span [style.text-decoration]=\"lineThrough\">\n        {{prefix}} {{hero?.name}}\n      </span>\n      <button (click)=\"delete()\">Delete</button>\n    </div>`\n\n    //hero-detail.component.ts\n    deleteRequest = new EventEmitter<Hero>();\n\n    delete() {\n      this.deleteRequest.emit(this.hero);\n    }\n\n组件定义了deleteRequest属性，它是EventEmitter实例。 当用户点击删除时，组件会调用delete()方法，让EventEmitter发出一个Hero对\n父组件绑定这个事件:\n\n    <hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\">\n    </hero-detail>\n\n当deleteRequest事件触发时，Angular 调用父组件的deleteHero方法， 在$event变量中传入要删除的英雄","slug":"angular-attr-directive","published":1,"updated":"2017-11-06T15:35:06.019Z","layout":"post","photos":[],"link":"","_id":"cjqwe42b7004ror0b9p77ozlx","content":"<p>属性型指令是angular中三大指令之一，主要用于改变一个DOM元素的外观或操作行为，比如：可以改变元素的样式和事件响应等，可以像原生属性一样直接使用于标签元素，故此得名<br>本节将会介绍几个最常用的属性型指令：<br><a id=\"more\"></a></p>\n<blockquote>\n<p>三大指令：组件，属性指令，结构指令</p>\n</blockquote>\n<h2 id=\"常用内置属性指令\"><a href=\"#常用内置属性指令\" class=\"headerlink\" title=\"常用内置属性指令\"></a>常用内置属性指令</h2><h5 id=\"（1）NgClass\"><a href=\"#（1）NgClass\" class=\"headerlink\" title=\"（1）NgClass\"></a>（1）NgClass</h5><p>ngClass用于动态添加或移除一组CSS类，从而控制元素的显示效果，通过绑定到NgClass，可以同时添加或移除多个类<br>当然，还有一种动态添加/移除单个类的CSS绑定，也能实现类似效果<br>下面两种写法效果相同</p>\n<pre><code>.active {\n  font-size: 36px;\n  background-color: #ff2312;\n}\n\n.deactive {\n  font-size: 16px;\n  background-color: #fffff;\n}\n\n&lt;div [class.active]=&quot;isSpecial&quot; [class.deactive]=&quot;!isSpecial&quot;&gt;binding Class&lt;/div&gt;\n\n&lt;div [ngClass]=&quot;{active: isSpecial,deactive: !isSpecial}&quot;&gt;binding Class&lt;/div&gt;\n</code></pre><p>上面当变量isSpecial为true时添加类active，否则添加deactive<br>还可以同时添加或移除多个CSS类，像这样</p>\n<pre><code>.special {\n  color: red;\n}\n\ncurrentClasses = {active: isSpecial,special: isSpecial,deactive: !isSpecial}\n\n&lt;div [ngClass]=&quot;currentClasses&quot;&gt;binding Class&lt;/div&gt;\n</code></pre><h5 id=\"（2）NgStyle\"><a href=\"#（2）NgStyle\" class=\"headerlink\" title=\"（2）NgStyle\"></a>（2）NgStyle</h5><p>ngStyle用于动态内联样式，从而控制元素的显示效果，通过绑定到NgStyle，可以同时设置多个内联样式。<br>当然，还有一种动态单一样式值的样式绑定，也能实现类似效果<br>下面两种写法效果相同</p>\n<pre><code>&lt;div [style.font-size]=&quot;isSpecial ? &apos;large&apos; : &apos;small&apos;&quot; &gt;\n  bind styles\n&lt;/div&gt;\n\n&lt;div [ngStyle]=&quot;{&apos;font-size&apos;:isSpecial ? &apos;large&apos; : &apos;small&apos;}&quot; &gt;\n  bind styles\n&lt;/div&gt;\n</code></pre><p>上面根据变量isSpecial为true或false给元素设置不同的字体大小<br>要同时设置多个内联样式，NgStyle指令更好，像这样</p>\n<pre><code>currentStyles = {\n    &apos;font-style&apos;:  iscanSave      ? &apos;italic&apos; : &apos;normal&apos;,\n    &apos;font-weight&apos;: !isUnchanged ? &apos;bold&apos;   : &apos;normal&apos;,\n    &apos;font-size&apos;:   isSpecial    ? &apos;24px&apos;   : &apos;12px&apos;\n};\n\n&lt;div [ngStyle]=&quot;currentStyles&quot;&gt;\n  bind styles\n&lt;/div&gt;\n</code></pre><h5 id=\"（3）NgModel\"><a href=\"#（3）NgModel\" class=\"headerlink\" title=\"（3）NgModel\"></a>（3）NgModel</h5><p><strong>（1）使用方式</strong><br>开发输入表单时，通常都要既显示数据属性又要修改这个属性，使用NgModel指令进行双向数据绑定可以简化这种工作，使用方式如下：</p>\n<pre><code>&lt;input [(ngModel)]=&quot;currentHero.name&quot; name=&quot;input&quot;&gt;\n</code></pre><p>还有导入表单支持模块</p>\n<pre><code>import { FormsModule } from &apos;@angular/forms&apos;;\n</code></pre><blockquote>\n<p>使用此指令需要指定name值。一个表单中可能有多个这样的双向绑定，在Angular内部为这些绑定创建了一些FormControl，并把它们注册到NgForm指令，再将该指令附加到<code>&lt;form&gt;</code>标签，而注册每个FormControl时，就是使用name属性值作为每个双向绑定的键值</p>\n</blockquote>\n<p><strong>（2）跟踪修改和输入验证</strong><br>NgModel指令更够跟踪输入状态，动态给宿主元素添加/移除CSS类，以反映当前状态，我们可以这一特性来修改控件的外观，显示和隐藏消息<br>在输入各个不同状态下添加的类：</p>\n<ul>\n<li>被访问过的时候添加ng-touched类，否则添加ng-untouched</li>\n<li>值变化了的时候添加ng-dirty类，否则添加ng-pristine</li>\n<li>输入值有效的时候添加ng-valid类，否则添加ng-invalid</li>\n</ul>\n<p>我么可以重新定义这些CSS类，控制着些状态按照期望来显示，比如：</p>\n<pre><code>.ng-valid[required] {\n  border-left: 5px solid #42A948;\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442;\n}\n</code></pre><p>还有，这些css类对应一些只是输入状态的标志位，比如：ng-pristine-&gt;pristine,ng-valid-&gt;valid，可以通过他们来显示/移除输入提示，比如：</p>\n<pre><code>&lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;\n&lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;name&quot; required\n       [(ngModel)]=&quot;model.name&quot; name=&quot;name&quot; #name=&quot;ngModel&quot;&gt;\n&lt;div [hidden]=&quot;name.valid || name.pristine&quot; class=&quot;alert alert-danger&quot;&gt;\n  Name is required\n&lt;/div&gt;\n</code></pre><p>当输入有效或没变更时，隐藏提示；否则，显示提示</p>\n<p><strong>（3）双向绑定指令的内部原理</strong><br>在元素层面上，既要设置元素属性，又要监听元素事件变化,普通方式</p>\n<pre><code>&lt;input [value]=&quot;name&quot; (input)=&quot;name=$event.target.value&quot;&gt;\n</code></pre><p>ngular 为此提供一种特殊的双向数据绑定语法：[(x)]，该语法结合了属性绑定的方括号[x]和事件绑定的圆括号(x)</p>\n<pre><code>&lt;input [(ngModel)]=&quot;name&quot;&gt;\n</code></pre><p>双向绑定语法实际上是属性绑定和事件绑定的语法糖,Angular将绑定分解成这样：</p>\n<pre><code>&lt;input [ngModel]=&quot;name&quot; (ngModelChange)=&quot;name=$event&quot;&gt;\n</code></pre><p>   当一个元素拥有可以设置的属性x和对应的事件xChange时，解释[(x)]语法就容易的多，而ngModel指令即使通过自己的输入属性ngModel和输出属性ngModelChange隐藏了那些细节<br>   [ngModel]指令的实现如下：</p>\n<pre><code>@Directive({\n selector:&quot;[ngModel]&quot;,\n host: {\n   &quot;[value]&quot;: &quot;ngModel&quot;,\n   &quot;(input)&quot;: &quot;ngModelChange.next($event.target.value)&quot;\n }\n})\nclass ngModelDirective {\n  @Input() ngModel : any;\n  @Output() ngModelChange = new EventEmitter();\n}\n</code></pre><p>绑定的写法:</p>\n<blockquote>\n<p>[value] 或 bind-aa : 属性绑定<br>(oper) 或 on-oper : 事件绑定<br>[(value)] 或 bindon-value : 双向绑定</p>\n</blockquote>\n<p><strong>（4）自定义双向绑定指令</strong><br>根据[(x)]语法的特点，可以实现自己双向绑定,使用方式ngModel类似<br>定义子组件：</p>\n<pre><code>//.ts\nimport { Component, OnInit, EventEmitter, Input, Output } from &apos;@angular/core&apos;;\n\n@Component({\n  selector: &apos;app-test&apos;,\n  templateUrl: &apos;./test.component.html&apos;,\n  styleUrls: [&apos;./test.component.css&apos;]\n})\nexport class TestComponent implements OnInit {\n\n  @Output() myNumberChange = new EventEmitter&lt;any&gt;();\n\n  id : any;\n  personList : any[] = [{&apos;id&apos;:1, &apos;name&apos;:&apos;Jack&apos;, &apos;age&apos;:10},\n                        {&apos;id&apos;:5, &apos;name&apos;:&apos;Tom&apos;, &apos;age&apos;:18},\n                        {&apos;id&apos;:8, &apos;name&apos;:&apos;Luccy&apos;, &apos;age&apos;:24}];\n\n  constructor() { }\n\n  @Input()\n  set myNumber(num : any) {\n    this.id = num;\n  }\n\n  add() {\n    this.id++;\n    this.getPerson();\n  }\n\n  des() {\n    this.id--;\n    this.getPerson();\n  }\n\n  getPerson() {\n    for(let person of this.personList) {\n      if(person.id === this.id) {\n        this.myNumberChange.emit(person.age);\n        return;\n      }\n    }\n    this.myNumberChange.emit(99);\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n//.html\n&lt;div class=&quot;form-group&quot;&gt;\n    &lt;label class=&quot;form-input-label&quot;&gt;id： &lt;/label&gt;\n    &lt;div class=&quot;form-input-content&quot;&gt;\n        {{id}}\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;button class=&quot;button&quot; (click)=&quot;add()&quot;&gt;增加&lt;/button&gt;\n&lt;button class=&quot;button&quot; (click)=&quot;des()&quot;&gt;减少&lt;/button&gt;\n</code></pre><p>子组件通过输入变量myNumber获取值，处理后使用输出事件myNumberChange返回给宿主结果<br>父组件在用时可以使用双向绑定的语法方式：</p>\n<pre><code>//login.comonent\ninputNum : any = 0;\n\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label class=&quot;form-input-label&quot;&gt;输入变量值： &lt;/label&gt;\n  &lt;div class=&quot;form-input-content&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;inputNum&quot; [(ngModel)]=&quot;inputNum&quot;&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;app-test [(myNumber)]=&quot;inputNum&quot;&gt;&lt;/app-test&gt;\n&lt;p&gt;返回的值： {{inputNum}}&lt;/p&gt;\n</code></pre><p>如下时两个瞬间<br><img src=\"/images/atrr-direc-4.png\"><img src=\"/images/atrr-direc-18.png\"><br>大概是点击“增加”，组件id变为5，并返回父组件变更了inputNum的值为18，inputNum变更后反过来又把值传入给子组件输入变量</p>\n<h2 id=\"自定义属性指令\"><a href=\"#自定义属性指令\" class=\"headerlink\" title=\"自定义属性指令\"></a>自定义属性指令</h2><p>属性型指令可以同时实现元素多个普通属性所能达到效果的集合，这是属性指令比普通属性的优势。在开发过程中可以根据需要自定义属性型指令，避免元素上过多的属性添加<br>下面的例子需要实现一个文本框，要求：只能呈现数字，可以通过鼠标点击增长/减少数值，可以手动输入数值，不能粘贴数值，能限制数值范围，输入时不能输入超出范围的数值，不能输入非数字的字母,输入聚焦时底色变更；以上可以通过一个属性型指令来实现<br>通过@Directive装饰器来定义指令</p>\n<pre><code>import { Directive, ElementRef,HostListener,Input  } from &apos;@angular/core&apos;;\n\n@Directive({\n  selector: &apos;[myInputNumber]&apos;\n})\nexport class InputNumberDirective {\n  @Input(&apos;myInputNumber&apos;) min_number: any;\n\n  constructor(private el: ElementRef) {\n  }\n\n  @HostListener(&apos;focusin&apos;) onFocusIn() {\n    this.el.nativeElement.style.backgroundColor = &apos;yellow&apos;;\n  }\n\n  @HostListener(&apos;focusout&apos;) onFocusOut() {\n    this.el.nativeElement.style.backgroundColor = &apos;#ffffff&apos;;\n  }\n\n  @HostListener(&apos;keyup&apos;) onkeyup() {\n    if(!Number(this.el.nativeElement.value) ||\n      (Number(this.el.nativeElement.value) &lt; this.min_number)) {\n      this.el.nativeElement.value = this.min_number;\n    }\n  }\n\n  @HostListener(&apos;paste&apos;) onPaste() {\n    return false;\n  }\n\n  @HostListener(&apos;keypress&apos;) onkeypress() {\n    return true;\n  }\n\n  @HostListener(&apos;keydown&apos;) onkeydown() {\n    return true;\n  }\n}\n</code></pre><p>使用该属性指令的父组件</p>\n<pre><code>//loginComponent.ts\nimport { Component, OnInit } from &apos;@angular/core&apos;;\n\n@Component({\n  selector: &apos;app-login&apos;,\n  templateUrl: &apos;./login.component.html&apos;,\n  styleUrls: [&apos;./login.component.css&apos;]\n})\nexport class LoginComponent implements OnInit {\n  number : any = 0;\n  minNumber : any = 3;\n\n  constructor() {\n    this.number = this.minNumber;\n  }\n\n  ngOnInit() {\n  }\n\n  aggreNum() {\n    this.number++;\n  }\n\n  deagreNum() {\n    if(this.number &gt; this.minNumber) {\n      this.number--;\n    }\n  }\n\n  minMunChange() {\n    this.number = this.minNumber;\n  }\n}\n\n//loginComponent.html\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label class=&quot;form-input-label&quot;&gt;最小值： &lt;/label&gt;\n  &lt;div class=&quot;form-input-content&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;inutMinNumber&quot; [(ngModel)]=&quot;minNumber&quot; (ngModelChange)=&quot;minMunChange()&quot;&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label class=&quot;form-input-label&quot;&gt;请输入： &lt;/label&gt;\n  &lt;div class=&quot;form-input-content&quot;&gt;\n    &lt;input type=&quot;text&quot; [myInputNumber]=&quot;minNumber&quot; name=&quot;inutNumber&quot; [(ngModel)]=&quot;number&quot;&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;input-number&quot;&gt;\n    &lt;div class=&quot;input-aggre&quot; (click)=&quot;aggreNum()&quot;&gt;+&lt;/div&gt;\n    &lt;div class=&quot;input-desgre&quot; (click)=&quot;deagreNum()&quot;&gt;-&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>（1）angular会为在指令使用时创建一个指令控制器类的实例，并把angular的ElementRef和Renderer注入进构造函数，ElementRef是一个服务，它赋予我们通过它的nativeElement属性直接访问 DOM 元素的能力<br>（2）Renderer服务允许通过代码设置元素的样式<br>（3）使用HostListener装饰器添加两个事件处理器<br>（4）使用简单语法，[myInputNumber]在这里同时实现了两点：把指令应用到了宿主元素上，并且通过属性绑定设置了输入变量<br>指令使用的效果大概如下<br><img src=\"/images/atrr-directive.png\" alt=\"atrr-directive\"></p>\n<h5 id=\"附录-一些好东西\"><a href=\"#附录-一些好东西\" class=\"headerlink\" title=\"附录,一些好东西\"></a>附录,一些好东西</h5><p>1 . 组件自己的模板可以绑定到组件的任意属性，不需要使用了@Input装饰器，因为Angular把组件的模板看做从属于该组件的，它们之间相互信任；但是组件或指令不应该盲目信任其它组件或指令， 因此组件或指令的属性默认是不能被绑定的，从Angular绑定机制的角度来看，它们是私有的，而当添加了@Input时，它们变成了公共的，只有这样，它们才能被其它组件或属性绑定</p>\n<p>2 . 如果有两个同名指令，都叫做HighlightDirective，只要在 import 时使用as关键字来为第二个指令创建个别名即可，比如：</p>\n<pre><code>import {HighlightDirective as myHighlight} from &apos;&apos;;\n</code></pre><p>3 . EventEmitter自定义事件<br>EventEmitter用于触发自定义事件，指令或子组件创建一个EventEmitter实例，并且把它作为属性暴露出来，调用EventEmitter.emit(payload)来触发事件，可以传入任何东西作为消息载荷。 父指令通过绑定到这个属性来监听事件，并通过$event对象来访问载荷，下面例子：</p>\n<pre><code>//hero-detail.component.html\n&lt;div&gt;\n  &lt;img src=&quot;{{heroImageUrl}}&quot;&gt;\n  &lt;span [style.text-decoration]=&quot;lineThrough&quot;&gt;\n    {{prefix}} {{hero?.name}}\n  &lt;/span&gt;\n  &lt;button (click)=&quot;delete()&quot;&gt;Delete&lt;/button&gt;\n&lt;/div&gt;`\n\n//hero-detail.component.ts\ndeleteRequest = new EventEmitter&lt;Hero&gt;();\n\ndelete() {\n  this.deleteRequest.emit(this.hero);\n}\n</code></pre><p>组件定义了deleteRequest属性，它是EventEmitter实例。 当用户点击删除时，组件会调用delete()方法，让EventEmitter发出一个Hero对<br>父组件绑定这个事件:</p>\n<pre><code>&lt;hero-detail (deleteRequest)=&quot;deleteHero($event)&quot; [hero]=&quot;currentHero&quot;&gt;\n&lt;/hero-detail&gt;\n</code></pre><p>当deleteRequest事件触发时，Angular 调用父组件的deleteHero方法， 在$event变量中传入要删除的英雄</p>\n","site":{"data":{}},"excerpt":"<p>属性型指令是angular中三大指令之一，主要用于改变一个DOM元素的外观或操作行为，比如：可以改变元素的样式和事件响应等，可以像原生属性一样直接使用于标签元素，故此得名<br>本节将会介绍几个最常用的属性型指令：<br>","more":"</p>\n<blockquote>\n<p>三大指令：组件，属性指令，结构指令</p>\n</blockquote>\n<h2 id=\"常用内置属性指令\"><a href=\"#常用内置属性指令\" class=\"headerlink\" title=\"常用内置属性指令\"></a>常用内置属性指令</h2><h5 id=\"（1）NgClass\"><a href=\"#（1）NgClass\" class=\"headerlink\" title=\"（1）NgClass\"></a>（1）NgClass</h5><p>ngClass用于动态添加或移除一组CSS类，从而控制元素的显示效果，通过绑定到NgClass，可以同时添加或移除多个类<br>当然，还有一种动态添加/移除单个类的CSS绑定，也能实现类似效果<br>下面两种写法效果相同</p>\n<pre><code>.active {\n  font-size: 36px;\n  background-color: #ff2312;\n}\n\n.deactive {\n  font-size: 16px;\n  background-color: #fffff;\n}\n\n&lt;div [class.active]=&quot;isSpecial&quot; [class.deactive]=&quot;!isSpecial&quot;&gt;binding Class&lt;/div&gt;\n\n&lt;div [ngClass]=&quot;{active: isSpecial,deactive: !isSpecial}&quot;&gt;binding Class&lt;/div&gt;\n</code></pre><p>上面当变量isSpecial为true时添加类active，否则添加deactive<br>还可以同时添加或移除多个CSS类，像这样</p>\n<pre><code>.special {\n  color: red;\n}\n\ncurrentClasses = {active: isSpecial,special: isSpecial,deactive: !isSpecial}\n\n&lt;div [ngClass]=&quot;currentClasses&quot;&gt;binding Class&lt;/div&gt;\n</code></pre><h5 id=\"（2）NgStyle\"><a href=\"#（2）NgStyle\" class=\"headerlink\" title=\"（2）NgStyle\"></a>（2）NgStyle</h5><p>ngStyle用于动态内联样式，从而控制元素的显示效果，通过绑定到NgStyle，可以同时设置多个内联样式。<br>当然，还有一种动态单一样式值的样式绑定，也能实现类似效果<br>下面两种写法效果相同</p>\n<pre><code>&lt;div [style.font-size]=&quot;isSpecial ? &apos;large&apos; : &apos;small&apos;&quot; &gt;\n  bind styles\n&lt;/div&gt;\n\n&lt;div [ngStyle]=&quot;{&apos;font-size&apos;:isSpecial ? &apos;large&apos; : &apos;small&apos;}&quot; &gt;\n  bind styles\n&lt;/div&gt;\n</code></pre><p>上面根据变量isSpecial为true或false给元素设置不同的字体大小<br>要同时设置多个内联样式，NgStyle指令更好，像这样</p>\n<pre><code>currentStyles = {\n    &apos;font-style&apos;:  iscanSave      ? &apos;italic&apos; : &apos;normal&apos;,\n    &apos;font-weight&apos;: !isUnchanged ? &apos;bold&apos;   : &apos;normal&apos;,\n    &apos;font-size&apos;:   isSpecial    ? &apos;24px&apos;   : &apos;12px&apos;\n};\n\n&lt;div [ngStyle]=&quot;currentStyles&quot;&gt;\n  bind styles\n&lt;/div&gt;\n</code></pre><h5 id=\"（3）NgModel\"><a href=\"#（3）NgModel\" class=\"headerlink\" title=\"（3）NgModel\"></a>（3）NgModel</h5><p><strong>（1）使用方式</strong><br>开发输入表单时，通常都要既显示数据属性又要修改这个属性，使用NgModel指令进行双向数据绑定可以简化这种工作，使用方式如下：</p>\n<pre><code>&lt;input [(ngModel)]=&quot;currentHero.name&quot; name=&quot;input&quot;&gt;\n</code></pre><p>还有导入表单支持模块</p>\n<pre><code>import { FormsModule } from &apos;@angular/forms&apos;;\n</code></pre><blockquote>\n<p>使用此指令需要指定name值。一个表单中可能有多个这样的双向绑定，在Angular内部为这些绑定创建了一些FormControl，并把它们注册到NgForm指令，再将该指令附加到<code>&lt;form&gt;</code>标签，而注册每个FormControl时，就是使用name属性值作为每个双向绑定的键值</p>\n</blockquote>\n<p><strong>（2）跟踪修改和输入验证</strong><br>NgModel指令更够跟踪输入状态，动态给宿主元素添加/移除CSS类，以反映当前状态，我们可以这一特性来修改控件的外观，显示和隐藏消息<br>在输入各个不同状态下添加的类：</p>\n<ul>\n<li>被访问过的时候添加ng-touched类，否则添加ng-untouched</li>\n<li>值变化了的时候添加ng-dirty类，否则添加ng-pristine</li>\n<li>输入值有效的时候添加ng-valid类，否则添加ng-invalid</li>\n</ul>\n<p>我么可以重新定义这些CSS类，控制着些状态按照期望来显示，比如：</p>\n<pre><code>.ng-valid[required] {\n  border-left: 5px solid #42A948;\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442;\n}\n</code></pre><p>还有，这些css类对应一些只是输入状态的标志位，比如：ng-pristine-&gt;pristine,ng-valid-&gt;valid，可以通过他们来显示/移除输入提示，比如：</p>\n<pre><code>&lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;\n&lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;name&quot; required\n       [(ngModel)]=&quot;model.name&quot; name=&quot;name&quot; #name=&quot;ngModel&quot;&gt;\n&lt;div [hidden]=&quot;name.valid || name.pristine&quot; class=&quot;alert alert-danger&quot;&gt;\n  Name is required\n&lt;/div&gt;\n</code></pre><p>当输入有效或没变更时，隐藏提示；否则，显示提示</p>\n<p><strong>（3）双向绑定指令的内部原理</strong><br>在元素层面上，既要设置元素属性，又要监听元素事件变化,普通方式</p>\n<pre><code>&lt;input [value]=&quot;name&quot; (input)=&quot;name=$event.target.value&quot;&gt;\n</code></pre><p>ngular 为此提供一种特殊的双向数据绑定语法：[(x)]，该语法结合了属性绑定的方括号[x]和事件绑定的圆括号(x)</p>\n<pre><code>&lt;input [(ngModel)]=&quot;name&quot;&gt;\n</code></pre><p>双向绑定语法实际上是属性绑定和事件绑定的语法糖,Angular将绑定分解成这样：</p>\n<pre><code>&lt;input [ngModel]=&quot;name&quot; (ngModelChange)=&quot;name=$event&quot;&gt;\n</code></pre><p>   当一个元素拥有可以设置的属性x和对应的事件xChange时，解释[(x)]语法就容易的多，而ngModel指令即使通过自己的输入属性ngModel和输出属性ngModelChange隐藏了那些细节<br>   [ngModel]指令的实现如下：</p>\n<pre><code>@Directive({\n selector:&quot;[ngModel]&quot;,\n host: {\n   &quot;[value]&quot;: &quot;ngModel&quot;,\n   &quot;(input)&quot;: &quot;ngModelChange.next($event.target.value)&quot;\n }\n})\nclass ngModelDirective {\n  @Input() ngModel : any;\n  @Output() ngModelChange = new EventEmitter();\n}\n</code></pre><p>绑定的写法:</p>\n<blockquote>\n<p>[value] 或 bind-aa : 属性绑定<br>(oper) 或 on-oper : 事件绑定<br>[(value)] 或 bindon-value : 双向绑定</p>\n</blockquote>\n<p><strong>（4）自定义双向绑定指令</strong><br>根据[(x)]语法的特点，可以实现自己双向绑定,使用方式ngModel类似<br>定义子组件：</p>\n<pre><code>//.ts\nimport { Component, OnInit, EventEmitter, Input, Output } from &apos;@angular/core&apos;;\n\n@Component({\n  selector: &apos;app-test&apos;,\n  templateUrl: &apos;./test.component.html&apos;,\n  styleUrls: [&apos;./test.component.css&apos;]\n})\nexport class TestComponent implements OnInit {\n\n  @Output() myNumberChange = new EventEmitter&lt;any&gt;();\n\n  id : any;\n  personList : any[] = [{&apos;id&apos;:1, &apos;name&apos;:&apos;Jack&apos;, &apos;age&apos;:10},\n                        {&apos;id&apos;:5, &apos;name&apos;:&apos;Tom&apos;, &apos;age&apos;:18},\n                        {&apos;id&apos;:8, &apos;name&apos;:&apos;Luccy&apos;, &apos;age&apos;:24}];\n\n  constructor() { }\n\n  @Input()\n  set myNumber(num : any) {\n    this.id = num;\n  }\n\n  add() {\n    this.id++;\n    this.getPerson();\n  }\n\n  des() {\n    this.id--;\n    this.getPerson();\n  }\n\n  getPerson() {\n    for(let person of this.personList) {\n      if(person.id === this.id) {\n        this.myNumberChange.emit(person.age);\n        return;\n      }\n    }\n    this.myNumberChange.emit(99);\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n//.html\n&lt;div class=&quot;form-group&quot;&gt;\n    &lt;label class=&quot;form-input-label&quot;&gt;id： &lt;/label&gt;\n    &lt;div class=&quot;form-input-content&quot;&gt;\n        {{id}}\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;button class=&quot;button&quot; (click)=&quot;add()&quot;&gt;增加&lt;/button&gt;\n&lt;button class=&quot;button&quot; (click)=&quot;des()&quot;&gt;减少&lt;/button&gt;\n</code></pre><p>子组件通过输入变量myNumber获取值，处理后使用输出事件myNumberChange返回给宿主结果<br>父组件在用时可以使用双向绑定的语法方式：</p>\n<pre><code>//login.comonent\ninputNum : any = 0;\n\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label class=&quot;form-input-label&quot;&gt;输入变量值： &lt;/label&gt;\n  &lt;div class=&quot;form-input-content&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;inputNum&quot; [(ngModel)]=&quot;inputNum&quot;&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;app-test [(myNumber)]=&quot;inputNum&quot;&gt;&lt;/app-test&gt;\n&lt;p&gt;返回的值： {{inputNum}}&lt;/p&gt;\n</code></pre><p>如下时两个瞬间<br><img src=\"/images/atrr-direc-4.png\"><img src=\"/images/atrr-direc-18.png\"><br>大概是点击“增加”，组件id变为5，并返回父组件变更了inputNum的值为18，inputNum变更后反过来又把值传入给子组件输入变量</p>\n<h2 id=\"自定义属性指令\"><a href=\"#自定义属性指令\" class=\"headerlink\" title=\"自定义属性指令\"></a>自定义属性指令</h2><p>属性型指令可以同时实现元素多个普通属性所能达到效果的集合，这是属性指令比普通属性的优势。在开发过程中可以根据需要自定义属性型指令，避免元素上过多的属性添加<br>下面的例子需要实现一个文本框，要求：只能呈现数字，可以通过鼠标点击增长/减少数值，可以手动输入数值，不能粘贴数值，能限制数值范围，输入时不能输入超出范围的数值，不能输入非数字的字母,输入聚焦时底色变更；以上可以通过一个属性型指令来实现<br>通过@Directive装饰器来定义指令</p>\n<pre><code>import { Directive, ElementRef,HostListener,Input  } from &apos;@angular/core&apos;;\n\n@Directive({\n  selector: &apos;[myInputNumber]&apos;\n})\nexport class InputNumberDirective {\n  @Input(&apos;myInputNumber&apos;) min_number: any;\n\n  constructor(private el: ElementRef) {\n  }\n\n  @HostListener(&apos;focusin&apos;) onFocusIn() {\n    this.el.nativeElement.style.backgroundColor = &apos;yellow&apos;;\n  }\n\n  @HostListener(&apos;focusout&apos;) onFocusOut() {\n    this.el.nativeElement.style.backgroundColor = &apos;#ffffff&apos;;\n  }\n\n  @HostListener(&apos;keyup&apos;) onkeyup() {\n    if(!Number(this.el.nativeElement.value) ||\n      (Number(this.el.nativeElement.value) &lt; this.min_number)) {\n      this.el.nativeElement.value = this.min_number;\n    }\n  }\n\n  @HostListener(&apos;paste&apos;) onPaste() {\n    return false;\n  }\n\n  @HostListener(&apos;keypress&apos;) onkeypress() {\n    return true;\n  }\n\n  @HostListener(&apos;keydown&apos;) onkeydown() {\n    return true;\n  }\n}\n</code></pre><p>使用该属性指令的父组件</p>\n<pre><code>//loginComponent.ts\nimport { Component, OnInit } from &apos;@angular/core&apos;;\n\n@Component({\n  selector: &apos;app-login&apos;,\n  templateUrl: &apos;./login.component.html&apos;,\n  styleUrls: [&apos;./login.component.css&apos;]\n})\nexport class LoginComponent implements OnInit {\n  number : any = 0;\n  minNumber : any = 3;\n\n  constructor() {\n    this.number = this.minNumber;\n  }\n\n  ngOnInit() {\n  }\n\n  aggreNum() {\n    this.number++;\n  }\n\n  deagreNum() {\n    if(this.number &gt; this.minNumber) {\n      this.number--;\n    }\n  }\n\n  minMunChange() {\n    this.number = this.minNumber;\n  }\n}\n\n//loginComponent.html\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label class=&quot;form-input-label&quot;&gt;最小值： &lt;/label&gt;\n  &lt;div class=&quot;form-input-content&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;inutMinNumber&quot; [(ngModel)]=&quot;minNumber&quot; (ngModelChange)=&quot;minMunChange()&quot;&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label class=&quot;form-input-label&quot;&gt;请输入： &lt;/label&gt;\n  &lt;div class=&quot;form-input-content&quot;&gt;\n    &lt;input type=&quot;text&quot; [myInputNumber]=&quot;minNumber&quot; name=&quot;inutNumber&quot; [(ngModel)]=&quot;number&quot;&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;input-number&quot;&gt;\n    &lt;div class=&quot;input-aggre&quot; (click)=&quot;aggreNum()&quot;&gt;+&lt;/div&gt;\n    &lt;div class=&quot;input-desgre&quot; (click)=&quot;deagreNum()&quot;&gt;-&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>（1）angular会为在指令使用时创建一个指令控制器类的实例，并把angular的ElementRef和Renderer注入进构造函数，ElementRef是一个服务，它赋予我们通过它的nativeElement属性直接访问 DOM 元素的能力<br>（2）Renderer服务允许通过代码设置元素的样式<br>（3）使用HostListener装饰器添加两个事件处理器<br>（4）使用简单语法，[myInputNumber]在这里同时实现了两点：把指令应用到了宿主元素上，并且通过属性绑定设置了输入变量<br>指令使用的效果大概如下<br><img src=\"/images/atrr-directive.png\" alt=\"atrr-directive\"></p>\n<h5 id=\"附录-一些好东西\"><a href=\"#附录-一些好东西\" class=\"headerlink\" title=\"附录,一些好东西\"></a>附录,一些好东西</h5><p>1 . 组件自己的模板可以绑定到组件的任意属性，不需要使用了@Input装饰器，因为Angular把组件的模板看做从属于该组件的，它们之间相互信任；但是组件或指令不应该盲目信任其它组件或指令， 因此组件或指令的属性默认是不能被绑定的，从Angular绑定机制的角度来看，它们是私有的，而当添加了@Input时，它们变成了公共的，只有这样，它们才能被其它组件或属性绑定</p>\n<p>2 . 如果有两个同名指令，都叫做HighlightDirective，只要在 import 时使用as关键字来为第二个指令创建个别名即可，比如：</p>\n<pre><code>import {HighlightDirective as myHighlight} from &apos;&apos;;\n</code></pre><p>3 . EventEmitter自定义事件<br>EventEmitter用于触发自定义事件，指令或子组件创建一个EventEmitter实例，并且把它作为属性暴露出来，调用EventEmitter.emit(payload)来触发事件，可以传入任何东西作为消息载荷。 父指令通过绑定到这个属性来监听事件，并通过$event对象来访问载荷，下面例子：</p>\n<pre><code>//hero-detail.component.html\n&lt;div&gt;\n  &lt;img src=&quot;{{heroImageUrl}}&quot;&gt;\n  &lt;span [style.text-decoration]=&quot;lineThrough&quot;&gt;\n    {{prefix}} {{hero?.name}}\n  &lt;/span&gt;\n  &lt;button (click)=&quot;delete()&quot;&gt;Delete&lt;/button&gt;\n&lt;/div&gt;`\n\n//hero-detail.component.ts\ndeleteRequest = new EventEmitter&lt;Hero&gt;();\n\ndelete() {\n  this.deleteRequest.emit(this.hero);\n}\n</code></pre><p>组件定义了deleteRequest属性，它是EventEmitter实例。 当用户点击删除时，组件会调用delete()方法，让EventEmitter发出一个Hero对<br>父组件绑定这个事件:</p>\n<pre><code>&lt;hero-detail (deleteRequest)=&quot;deleteHero($event)&quot; [hero]=&quot;currentHero&quot;&gt;\n&lt;/hero-detail&gt;\n</code></pre><p>当deleteRequest事件触发时，Angular 调用父组件的deleteHero方法， 在$event变量中传入要删除的英雄</p>"},{"title":"Angular/cli-命令集","date":"2017-07-23T13:52:01.000Z","comments":1,"_content":"\nAngular CLI是一个命令行界面工具，它可以创建项目、添加文件以及执行一大堆开发任务，比如测试、打包和发布等\n使用Angular-CLI工具可以快速创建代码框架，减少重复性开发的工作量，而且创建的应用和文件符合风格指南的推荐风格，开发者可以从中获益\n<!--more-->\n\n## 基本命令\n查询版本,获取帮助\n\n    ng help\n    ng -v\n新建项目，启动应用\n\n    ng new projectName\n    cd projectName\n    ng serve --open\n指定主机和端口号启动\n\n    ng serve --host 0.0.0.0 --port 4201 --open\n\n工具支持相对目录形式的创建命令，比如,当前所处目录/home/app：\n\n    ng g component login           //在/home/app目录下创建\n    ng g component login  ../my    //在/home/my目录下创建\n    ng g component login  AA       //在/home/app/AA目录下创建\n\n\n## 核心命令\n#### ng new\nng new my-app\n默认生成同名目录，并初始化一个angular应用框架\nOption选项：\n+ `--`directory (简写:-dir) ，指定新建项目的目录名，比如：ng new my-app -dir AAA;不指定则默认以应用名命名目录\n+ --dry-run (简写:-d) ，默认值: false，生成项目后立即run起来，列出所有生成的项目文件\n- --inline-style (简写: -is) ，默认不加时为false，，指定生成应用的组件为行内样式，即样式表位于元数据的styles[]内\n- --inline-template (简写: -it) ，默认不加时为 false，指定生成应用的组件为行内模板，即模板位于元数据的templates[]内\n- --minimal，默认值: false，创建最小化APP\n- --prefix (简写: -p) 默认: app，指定生成文件的选择器selector的前缀，也可在.angular-cli.json文件中修改\n- --routing， 默认不加时为 false，指定生成相应的路由模块\n- --skip-commit (简写: -sc) 默认不加时为 false，指定忽略掉应用提到到库\n- --skip-git (简写: -sg)  默认不加时为 false，指定忽略掉初始化git仓库\n- --skip-install (简写: -si) 默认不加时为: false，指定忽略掉安装packages\n- --skip-tests (简写: -st) 默认不加时为: false，指定忽略掉安装测试文件spec/e2e\n- --source-dir (简写: -sd) 默认值: src，指定生成项目的源文件目录名，也可在.angular-cli.json (apps[0].root)中修改\n- --style，默认值: css，指定css文件类型（css/scss/less/sass/styl (stylus)），也可在文件.angular-cli.json (defaults.styleExt)中修改\n- --verbose (简写: -v)， 默认不加时为: false，生成时输出log日志\n\n#### ng serve\nng serve\n编译应用并启动web服务\nOption选项：\n- `--`host (简写: -H)， 不加时的默认值: localhost，指定启动的主机\n- --hmr，不加时的默认值: false，是否启动热模块替换\n- --live-reload (简写: -lr)，不加时的默认值: true，是否在页面变更时重新载入\n- --public-host (简写: --live-reload-client)，说明浏览器使用的URL\n- --disable-host-check，默认值: false，不检测已连接的host\n- --open (简写: -o)， 不加时默认值: false，指定启动后自动打开浏览器呈现\n- --port (简写: -p)， 默认值 4200，指定服务的监听端口\n- --ssl，使用HTTPS\n- --ssl-cert (简写: -)，默认值SSL:\n- --ssl-key，指定使用 serving HTTPS的SSL key\n- --aot，指定进行预编译\n- --base-href (简写: -bh)，指定应用项目的基准路径,指的是其他应用文件现对于index.html的相对路径，在.angular-cli.json文件可设置根目录和index的路径，如root/src/index,可设-bh ../\n- --deploy-url (简写: -d)，指定文件部署的URL\n- --environment (简写: -e)，定义编译环境\n- --extract-css (简写: -ec)，指定从全局样式表抽取样式\n- --i18n-file，使用i18n国际化\n- --i18n-format，指定--i18n-file国际化文件的格式\n- --locale，Locale to use for i18n.\n- --output-hashing (简写: -oh) ，定义the output filename cache-busting hashing mode. Possible values: none, all, media, bundles\n- --output-path (简写: -op) ，指定输出文件的路径\n- --poll，Enable and define the file watching poll time period (milliseconds) .\n- --progress (简写: -pr)， 默认值: true，是否显示构建过程\n- --sourcemap (简写: -sm, sourcemaps)，Output sourcemaps.\n- --target (简写: -t, -dev, -prod) 默认值: development，指定编译方式\n- --vendor-chunk (简写: -vc)，默认值: true，Use a separate bundle containing only vendor libraries.\n- --verbose (简写: -v)， 默认值: false，生成时输出log日志\n- --watch (aliases: -w)，添加后文件变更会触发重新构建\n\n#### ng generate\nng generate 类型 文件名 或 ng g 类型 文件名\n帮助开发者生成开发文件，类和相应代码骨架，比如：模块，组件，指令等，方便快捷开发，下面一行命令将自动生成组件的目录，和相关的css/ts/html文件\n\n    ng g component my-comp\n\n** （1） module**\nng g module module_name\n生成特性模块\nOption选项：\n- `--`app (简写: -a)， 默认值: 1st app\n- --flat，指定是否新建同名目录存放模块文件\nng g module 或 ng g module --flat=false ： 新建同名目录\nng g module --flat或 ng g module --flat=true : 不新建同名目录\n- --module (简写: -m)，说明模块在哪导入\n- --spec，指定是否连带创建spec测试文件\nng g module 或 ng g module --spec=false： 同步创建spec\nng g module --spec 或 ng g module --spec=非false: 不创建同名spec\n- --routing，指定是否连带创建路由模块，forChild()\nng g module 或 ng g module --routing=false： 不同步创建路由模块\nng g module --routing 或  ng g module --routing=非false : 创建路由模块\n\n** （2） component**\nng g component\n生成组件\nOption选项：\n- `--`app (简写: -a) 默认值: 1st app\n- --change-detection (简写: -cd)，不知道什么用\n- --flat， 默认值: false，指定是否新建组件目录\nng g component  或 ng g component --flat=false: 新建目录\nng g component  --flat 或 ng g component --flat=true: 不新建目录\n- --export，默认值: false，指定是否公开该组件\nng g component  或 ng g component --export=false: 不公开\nng g component  --export 或 ng g component --export=true: 公开\n- --inline-style (简写: -is)，默认值: false，指定组件是否行内样式\nng g component  或 ng g component -is=false: 不是行内样式\nng g component  -is 或 ng g component -is=true: 是行内样式\n- --inline-template (简写: -it)， 默认值: false，指定组件是否行内模板\nng g component  或 ng g component -it=false: 不是行内模板\nng g component  -it 或 ng g component -it=true: 是行内模板\n- --module (简写: -m)，指定是否更新模块，默认更新\n- --prefix，指定是否去掉组件selector选择器的前缀\nng g component  或 ng g component --prefix=false: 不加前缀\nng g component  --prefix 或 ng g component --prefix=true: 默认加前缀\n- --skip-import，默认值: false，Allows for skipping the module import.\n- --spec，指定是否连带创建spec测试文件\nng g component --spec=false: 不创建spec\nng g component --spec=true 或 ng g component --spec 或 ng g component: 创建spec\n- --view-encapsulation (简写: -ve)，Specifies the view encapsulation strategy\n\n> 命令生成的组件默认更新于距离最近的module模块的declares数组里，比如当前所处目录为：/app/main/login/,生成组件后自动注册到本目录的模块\n中，如果本目录下无模块，则查找上一层目录的模块进行注册，指导根模块\n\n**（3） directive**\nng g directive name\n用于生成属性指令相关文件和类 ，选项使用方式基本和component类似\nOption选项：\n- `--`app (简写: -a) 默认值: 1st app\n- --export default value: false\n- --flat，ng g component --flat=false: 新建目录，其他情况均不新建\n- --module (aliases: -m)\n- --prefix\n- --skip-import\n- --spec\n\n生成的指令类默认是这样的\n\n    mport { Directive } from '@angular/core';\n    @Directive({selector: '[appA]'})\n    export class ADirective {\n      constructor() { }\n    }\n\n**（4） pipe**\nng g pipe name\n用于生成管道相关文件和类 ，选项使用方式和directive类似\nOption选项：\n- `--`app\n- --export\n- --flat\n- --module (aliases: -m)\n- --skip-import\n- --spec\n\n生成的管道类默认是这样的\n\n    import { Pipe, PipeTransform } from '@angular/core';\n    @Pipe({  name: 'my'})\n    export class MyPipe implements PipeTransform {\n      transform(value: any, args?: any): any {\n        return null;\n      }\n    }\n\n**（5） service**\nng g service name\n用于生成服务相关文件和类 ，选项使用方式和directive类似\nOption选项：\n- `--`app (aliases: -a)\n- --flat\n- --module (aliases: -m)\n- --spec\n\n生成的可注入服务默认是这样的\n\n    import { Injectable } from '@angular/core';\n    @Injectable()\n    export class LoginService {\n      constructor() { }\n    }\n\n**（6） guard**\nng g guard name\n生成路由守卫类和相关文件\nOption选项：\n- `--`app\n- --flat\n- --module (aliases: -m)\n- --spec\n\n生成的守卫类默认是这样的\n\n    import { Injectable } from '@angular/core';\n    import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n    import { Observable } from 'rxjs/Observable';\n\n    @Injectable()\n    export class AdminGuard implements CanActivate {\n      canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n        return true;\n      }\n    }\n\n**（7） class**\nng g class name\n生成类\nOption选项：\n- `--`app\n- --spec\n\n生成的类默认是这样的\n\n    export class Hero {\n    }\n\n**（8） interface**\nng g interface name type\nOption选项：\n- `--`app\n- type\n\n生成的接口默认是这样的\n\n    export interface Name {\n    }\n\n** （） enum**\nng g enum name\nOption选项：\n- `--`app\n\n生成的enum默认是这样的\n\n    export enum HERO {\n    }\n\n\n#### ng lint\nng lint\n命令使用应用配置的tslint规则文件进行lint检查\nng lint\n命令使用应用配置的tslint规则文件进行lint检查\nOption选项：\n- `--`fix, 默认值: false，指定检查时是否同步修正lint错误\n- --force，默认值 false，是否强制检查失败加上后就说有lint错误也成功\n- --type-check，默认值: false，是否类型检查\n- --format (简写: -t), 默认值: prose,指定lint输出文件格式，有下列选择：prose, json, stylish, verbose, pmd, msbuild, checkstyle, vso, fileslist\n\n#### ng test\nng test\n编译应用后生成输入文件，并运行测试UT\n\n#### ng e2e\nng e2e\n命令部署应用并运行e2e测试用例\n\n#### ng build\nng build\n编译应用并生成目标文件，一般存放于dist/ directory\n下面命令是等效的\n\n    ng build --target=production --environment=prod\n    ng build --prod --env=prod\n    ng build --prod\n下面也是等效的\n\n    ng build --target=development --environment=dev\n    ng build --dev --e=dev\n    ng build --dev\n    ng build\n\n而已编译时修改index.html配置的基准路径\n\n    ng build --base-href /myUrl/\n    ng build --bh /myUrl/\n\n下面时两种模式编译默认携带的选项\n--dev模式： --aot false；--environment dev；--output-hashing media；--sourcemaps true；--extract-css \tfalse；\n--prod模式：--aot true；--environment prod；--output-hashing all；--sourcemaps false；--extract-css \ttrue；\nOptions选项：\n- aot，\n- app\n- base-href\n- deploy-url\n- environment\n- extract-css\n- i18n-file\n- i18n-format\n- locale\n- output-hashing\n- output-path\n- delete-output-path\n- poll\n- progress\n- sourcemap\n- stats-json\n- target\n- vendor-chunk\n- verbose\n- watch\n- show-circular-dependencies\n\n#### ng get/ng set\nng get\n获取配置文件的内容\nng set\n设置配置文件的内容\n比如：\n\n    ng get angular-cli.json\n    //获取整个文件内容\n\n    ng get app.name\n    //获取文件内容中app的name属性值\n\n    ng set app.name myApp\n    //修改文件内容中app的name属性值\n\n#### ng doc\nng doc [search term]\n命令将自动在浏览器打开官方文档angular.io，并调到指定字段处\n\n#### ng eject\nng eject\nejects your app and output the proper webpack configuration and scripts\n\n#### ng xi18n\nng xi18n\n从应用的默版中收集i18n国际化的信息","source":"_posts/2017-07-23-angular-cli-comand.md","raw":"---\ntitle: Angular/cli-命令集\ndate: 2017-07-23 21:52:01\ntags: Augular\ncategories: 前端工具\ncomments: true\n---\n\nAngular CLI是一个命令行界面工具，它可以创建项目、添加文件以及执行一大堆开发任务，比如测试、打包和发布等\n使用Angular-CLI工具可以快速创建代码框架，减少重复性开发的工作量，而且创建的应用和文件符合风格指南的推荐风格，开发者可以从中获益\n<!--more-->\n\n## 基本命令\n查询版本,获取帮助\n\n    ng help\n    ng -v\n新建项目，启动应用\n\n    ng new projectName\n    cd projectName\n    ng serve --open\n指定主机和端口号启动\n\n    ng serve --host 0.0.0.0 --port 4201 --open\n\n工具支持相对目录形式的创建命令，比如,当前所处目录/home/app：\n\n    ng g component login           //在/home/app目录下创建\n    ng g component login  ../my    //在/home/my目录下创建\n    ng g component login  AA       //在/home/app/AA目录下创建\n\n\n## 核心命令\n#### ng new\nng new my-app\n默认生成同名目录，并初始化一个angular应用框架\nOption选项：\n+ `--`directory (简写:-dir) ，指定新建项目的目录名，比如：ng new my-app -dir AAA;不指定则默认以应用名命名目录\n+ --dry-run (简写:-d) ，默认值: false，生成项目后立即run起来，列出所有生成的项目文件\n- --inline-style (简写: -is) ，默认不加时为false，，指定生成应用的组件为行内样式，即样式表位于元数据的styles[]内\n- --inline-template (简写: -it) ，默认不加时为 false，指定生成应用的组件为行内模板，即模板位于元数据的templates[]内\n- --minimal，默认值: false，创建最小化APP\n- --prefix (简写: -p) 默认: app，指定生成文件的选择器selector的前缀，也可在.angular-cli.json文件中修改\n- --routing， 默认不加时为 false，指定生成相应的路由模块\n- --skip-commit (简写: -sc) 默认不加时为 false，指定忽略掉应用提到到库\n- --skip-git (简写: -sg)  默认不加时为 false，指定忽略掉初始化git仓库\n- --skip-install (简写: -si) 默认不加时为: false，指定忽略掉安装packages\n- --skip-tests (简写: -st) 默认不加时为: false，指定忽略掉安装测试文件spec/e2e\n- --source-dir (简写: -sd) 默认值: src，指定生成项目的源文件目录名，也可在.angular-cli.json (apps[0].root)中修改\n- --style，默认值: css，指定css文件类型（css/scss/less/sass/styl (stylus)），也可在文件.angular-cli.json (defaults.styleExt)中修改\n- --verbose (简写: -v)， 默认不加时为: false，生成时输出log日志\n\n#### ng serve\nng serve\n编译应用并启动web服务\nOption选项：\n- `--`host (简写: -H)， 不加时的默认值: localhost，指定启动的主机\n- --hmr，不加时的默认值: false，是否启动热模块替换\n- --live-reload (简写: -lr)，不加时的默认值: true，是否在页面变更时重新载入\n- --public-host (简写: --live-reload-client)，说明浏览器使用的URL\n- --disable-host-check，默认值: false，不检测已连接的host\n- --open (简写: -o)， 不加时默认值: false，指定启动后自动打开浏览器呈现\n- --port (简写: -p)， 默认值 4200，指定服务的监听端口\n- --ssl，使用HTTPS\n- --ssl-cert (简写: -)，默认值SSL:\n- --ssl-key，指定使用 serving HTTPS的SSL key\n- --aot，指定进行预编译\n- --base-href (简写: -bh)，指定应用项目的基准路径,指的是其他应用文件现对于index.html的相对路径，在.angular-cli.json文件可设置根目录和index的路径，如root/src/index,可设-bh ../\n- --deploy-url (简写: -d)，指定文件部署的URL\n- --environment (简写: -e)，定义编译环境\n- --extract-css (简写: -ec)，指定从全局样式表抽取样式\n- --i18n-file，使用i18n国际化\n- --i18n-format，指定--i18n-file国际化文件的格式\n- --locale，Locale to use for i18n.\n- --output-hashing (简写: -oh) ，定义the output filename cache-busting hashing mode. Possible values: none, all, media, bundles\n- --output-path (简写: -op) ，指定输出文件的路径\n- --poll，Enable and define the file watching poll time period (milliseconds) .\n- --progress (简写: -pr)， 默认值: true，是否显示构建过程\n- --sourcemap (简写: -sm, sourcemaps)，Output sourcemaps.\n- --target (简写: -t, -dev, -prod) 默认值: development，指定编译方式\n- --vendor-chunk (简写: -vc)，默认值: true，Use a separate bundle containing only vendor libraries.\n- --verbose (简写: -v)， 默认值: false，生成时输出log日志\n- --watch (aliases: -w)，添加后文件变更会触发重新构建\n\n#### ng generate\nng generate 类型 文件名 或 ng g 类型 文件名\n帮助开发者生成开发文件，类和相应代码骨架，比如：模块，组件，指令等，方便快捷开发，下面一行命令将自动生成组件的目录，和相关的css/ts/html文件\n\n    ng g component my-comp\n\n** （1） module**\nng g module module_name\n生成特性模块\nOption选项：\n- `--`app (简写: -a)， 默认值: 1st app\n- --flat，指定是否新建同名目录存放模块文件\nng g module 或 ng g module --flat=false ： 新建同名目录\nng g module --flat或 ng g module --flat=true : 不新建同名目录\n- --module (简写: -m)，说明模块在哪导入\n- --spec，指定是否连带创建spec测试文件\nng g module 或 ng g module --spec=false： 同步创建spec\nng g module --spec 或 ng g module --spec=非false: 不创建同名spec\n- --routing，指定是否连带创建路由模块，forChild()\nng g module 或 ng g module --routing=false： 不同步创建路由模块\nng g module --routing 或  ng g module --routing=非false : 创建路由模块\n\n** （2） component**\nng g component\n生成组件\nOption选项：\n- `--`app (简写: -a) 默认值: 1st app\n- --change-detection (简写: -cd)，不知道什么用\n- --flat， 默认值: false，指定是否新建组件目录\nng g component  或 ng g component --flat=false: 新建目录\nng g component  --flat 或 ng g component --flat=true: 不新建目录\n- --export，默认值: false，指定是否公开该组件\nng g component  或 ng g component --export=false: 不公开\nng g component  --export 或 ng g component --export=true: 公开\n- --inline-style (简写: -is)，默认值: false，指定组件是否行内样式\nng g component  或 ng g component -is=false: 不是行内样式\nng g component  -is 或 ng g component -is=true: 是行内样式\n- --inline-template (简写: -it)， 默认值: false，指定组件是否行内模板\nng g component  或 ng g component -it=false: 不是行内模板\nng g component  -it 或 ng g component -it=true: 是行内模板\n- --module (简写: -m)，指定是否更新模块，默认更新\n- --prefix，指定是否去掉组件selector选择器的前缀\nng g component  或 ng g component --prefix=false: 不加前缀\nng g component  --prefix 或 ng g component --prefix=true: 默认加前缀\n- --skip-import，默认值: false，Allows for skipping the module import.\n- --spec，指定是否连带创建spec测试文件\nng g component --spec=false: 不创建spec\nng g component --spec=true 或 ng g component --spec 或 ng g component: 创建spec\n- --view-encapsulation (简写: -ve)，Specifies the view encapsulation strategy\n\n> 命令生成的组件默认更新于距离最近的module模块的declares数组里，比如当前所处目录为：/app/main/login/,生成组件后自动注册到本目录的模块\n中，如果本目录下无模块，则查找上一层目录的模块进行注册，指导根模块\n\n**（3） directive**\nng g directive name\n用于生成属性指令相关文件和类 ，选项使用方式基本和component类似\nOption选项：\n- `--`app (简写: -a) 默认值: 1st app\n- --export default value: false\n- --flat，ng g component --flat=false: 新建目录，其他情况均不新建\n- --module (aliases: -m)\n- --prefix\n- --skip-import\n- --spec\n\n生成的指令类默认是这样的\n\n    mport { Directive } from '@angular/core';\n    @Directive({selector: '[appA]'})\n    export class ADirective {\n      constructor() { }\n    }\n\n**（4） pipe**\nng g pipe name\n用于生成管道相关文件和类 ，选项使用方式和directive类似\nOption选项：\n- `--`app\n- --export\n- --flat\n- --module (aliases: -m)\n- --skip-import\n- --spec\n\n生成的管道类默认是这样的\n\n    import { Pipe, PipeTransform } from '@angular/core';\n    @Pipe({  name: 'my'})\n    export class MyPipe implements PipeTransform {\n      transform(value: any, args?: any): any {\n        return null;\n      }\n    }\n\n**（5） service**\nng g service name\n用于生成服务相关文件和类 ，选项使用方式和directive类似\nOption选项：\n- `--`app (aliases: -a)\n- --flat\n- --module (aliases: -m)\n- --spec\n\n生成的可注入服务默认是这样的\n\n    import { Injectable } from '@angular/core';\n    @Injectable()\n    export class LoginService {\n      constructor() { }\n    }\n\n**（6） guard**\nng g guard name\n生成路由守卫类和相关文件\nOption选项：\n- `--`app\n- --flat\n- --module (aliases: -m)\n- --spec\n\n生成的守卫类默认是这样的\n\n    import { Injectable } from '@angular/core';\n    import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n    import { Observable } from 'rxjs/Observable';\n\n    @Injectable()\n    export class AdminGuard implements CanActivate {\n      canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n        return true;\n      }\n    }\n\n**（7） class**\nng g class name\n生成类\nOption选项：\n- `--`app\n- --spec\n\n生成的类默认是这样的\n\n    export class Hero {\n    }\n\n**（8） interface**\nng g interface name type\nOption选项：\n- `--`app\n- type\n\n生成的接口默认是这样的\n\n    export interface Name {\n    }\n\n** （） enum**\nng g enum name\nOption选项：\n- `--`app\n\n生成的enum默认是这样的\n\n    export enum HERO {\n    }\n\n\n#### ng lint\nng lint\n命令使用应用配置的tslint规则文件进行lint检查\nng lint\n命令使用应用配置的tslint规则文件进行lint检查\nOption选项：\n- `--`fix, 默认值: false，指定检查时是否同步修正lint错误\n- --force，默认值 false，是否强制检查失败加上后就说有lint错误也成功\n- --type-check，默认值: false，是否类型检查\n- --format (简写: -t), 默认值: prose,指定lint输出文件格式，有下列选择：prose, json, stylish, verbose, pmd, msbuild, checkstyle, vso, fileslist\n\n#### ng test\nng test\n编译应用后生成输入文件，并运行测试UT\n\n#### ng e2e\nng e2e\n命令部署应用并运行e2e测试用例\n\n#### ng build\nng build\n编译应用并生成目标文件，一般存放于dist/ directory\n下面命令是等效的\n\n    ng build --target=production --environment=prod\n    ng build --prod --env=prod\n    ng build --prod\n下面也是等效的\n\n    ng build --target=development --environment=dev\n    ng build --dev --e=dev\n    ng build --dev\n    ng build\n\n而已编译时修改index.html配置的基准路径\n\n    ng build --base-href /myUrl/\n    ng build --bh /myUrl/\n\n下面时两种模式编译默认携带的选项\n--dev模式： --aot false；--environment dev；--output-hashing media；--sourcemaps true；--extract-css \tfalse；\n--prod模式：--aot true；--environment prod；--output-hashing all；--sourcemaps false；--extract-css \ttrue；\nOptions选项：\n- aot，\n- app\n- base-href\n- deploy-url\n- environment\n- extract-css\n- i18n-file\n- i18n-format\n- locale\n- output-hashing\n- output-path\n- delete-output-path\n- poll\n- progress\n- sourcemap\n- stats-json\n- target\n- vendor-chunk\n- verbose\n- watch\n- show-circular-dependencies\n\n#### ng get/ng set\nng get\n获取配置文件的内容\nng set\n设置配置文件的内容\n比如：\n\n    ng get angular-cli.json\n    //获取整个文件内容\n\n    ng get app.name\n    //获取文件内容中app的name属性值\n\n    ng set app.name myApp\n    //修改文件内容中app的name属性值\n\n#### ng doc\nng doc [search term]\n命令将自动在浏览器打开官方文档angular.io，并调到指定字段处\n\n#### ng eject\nng eject\nejects your app and output the proper webpack configuration and scripts\n\n#### ng xi18n\nng xi18n\n从应用的默版中收集i18n国际化的信息","slug":"angular-cli-comand","published":1,"updated":"2017-07-26T16:40:01.669Z","layout":"post","photos":[],"link":"","_id":"cjqwe42b8004tor0b6coe7c54","content":"<p>Angular CLI是一个命令行界面工具，它可以创建项目、添加文件以及执行一大堆开发任务，比如测试、打包和发布等<br>使用Angular-CLI工具可以快速创建代码框架，减少重复性开发的工作量，而且创建的应用和文件符合风格指南的推荐风格，开发者可以从中获益<br><a id=\"more\"></a></p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><p>查询版本,获取帮助</p>\n<pre><code>ng help\nng -v\n</code></pre><p>新建项目，启动应用</p>\n<pre><code>ng new projectName\ncd projectName\nng serve --open\n</code></pre><p>指定主机和端口号启动</p>\n<pre><code>ng serve --host 0.0.0.0 --port 4201 --open\n</code></pre><p>工具支持相对目录形式的创建命令，比如,当前所处目录/home/app：</p>\n<pre><code>ng g component login           //在/home/app目录下创建\nng g component login  ../my    //在/home/my目录下创建\nng g component login  AA       //在/home/app/AA目录下创建\n</code></pre><h2 id=\"核心命令\"><a href=\"#核心命令\" class=\"headerlink\" title=\"核心命令\"></a>核心命令</h2><h4 id=\"ng-new\"><a href=\"#ng-new\" class=\"headerlink\" title=\"ng new\"></a>ng new</h4><p>ng new my-app<br>默认生成同名目录，并初始化一个angular应用框架<br>Option选项：</p>\n<ul>\n<li><code>--</code>directory (简写:-dir) ，指定新建项目的目录名，比如：ng new my-app -dir AAA;不指定则默认以应用名命名目录</li>\n<li>–dry-run (简写:-d) ，默认值: false，生成项目后立即run起来，列出所有生成的项目文件</li>\n</ul>\n<ul>\n<li>–inline-style (简写: -is) ，默认不加时为false，，指定生成应用的组件为行内样式，即样式表位于元数据的styles[]内</li>\n<li>–inline-template (简写: -it) ，默认不加时为 false，指定生成应用的组件为行内模板，即模板位于元数据的templates[]内</li>\n<li>–minimal，默认值: false，创建最小化APP</li>\n<li>–prefix (简写: -p) 默认: app，指定生成文件的选择器selector的前缀，也可在.angular-cli.json文件中修改</li>\n<li>–routing， 默认不加时为 false，指定生成相应的路由模块</li>\n<li>–skip-commit (简写: -sc) 默认不加时为 false，指定忽略掉应用提到到库</li>\n<li>–skip-git (简写: -sg)  默认不加时为 false，指定忽略掉初始化git仓库</li>\n<li>–skip-install (简写: -si) 默认不加时为: false，指定忽略掉安装packages</li>\n<li>–skip-tests (简写: -st) 默认不加时为: false，指定忽略掉安装测试文件spec/e2e</li>\n<li>–source-dir (简写: -sd) 默认值: src，指定生成项目的源文件目录名，也可在.angular-cli.json (apps[0].root)中修改</li>\n<li>–style，默认值: css，指定css文件类型（css/scss/less/sass/styl (stylus)），也可在文件.angular-cli.json (defaults.styleExt)中修改</li>\n<li>–verbose (简写: -v)， 默认不加时为: false，生成时输出log日志</li>\n</ul>\n<h4 id=\"ng-serve\"><a href=\"#ng-serve\" class=\"headerlink\" title=\"ng serve\"></a>ng serve</h4><p>ng serve<br>编译应用并启动web服务<br>Option选项：</p>\n<ul>\n<li><code>--</code>host (简写: -H)， 不加时的默认值: localhost，指定启动的主机</li>\n<li>–hmr，不加时的默认值: false，是否启动热模块替换</li>\n<li>–live-reload (简写: -lr)，不加时的默认值: true，是否在页面变更时重新载入</li>\n<li>–public-host (简写: –live-reload-client)，说明浏览器使用的URL</li>\n<li>–disable-host-check，默认值: false，不检测已连接的host</li>\n<li>–open (简写: -o)， 不加时默认值: false，指定启动后自动打开浏览器呈现</li>\n<li>–port (简写: -p)， 默认值 4200，指定服务的监听端口</li>\n<li>–ssl，使用HTTPS</li>\n<li>–ssl-cert (简写: -)，默认值SSL:</li>\n<li>–ssl-key，指定使用 serving HTTPS的SSL key</li>\n<li>–aot，指定进行预编译</li>\n<li>–base-href (简写: -bh)，指定应用项目的基准路径,指的是其他应用文件现对于index.html的相对路径，在.angular-cli.json文件可设置根目录和index的路径，如root/src/index,可设-bh ../</li>\n<li>–deploy-url (简写: -d)，指定文件部署的URL</li>\n<li>–environment (简写: -e)，定义编译环境</li>\n<li>–extract-css (简写: -ec)，指定从全局样式表抽取样式</li>\n<li>–i18n-file，使用i18n国际化</li>\n<li>–i18n-format，指定–i18n-file国际化文件的格式</li>\n<li>–locale，Locale to use for i18n.</li>\n<li>–output-hashing (简写: -oh) ，定义the output filename cache-busting hashing mode. Possible values: none, all, media, bundles</li>\n<li>–output-path (简写: -op) ，指定输出文件的路径</li>\n<li>–poll，Enable and define the file watching poll time period (milliseconds) .</li>\n<li>–progress (简写: -pr)， 默认值: true，是否显示构建过程</li>\n<li>–sourcemap (简写: -sm, sourcemaps)，Output sourcemaps.</li>\n<li>–target (简写: -t, -dev, -prod) 默认值: development，指定编译方式</li>\n<li>–vendor-chunk (简写: -vc)，默认值: true，Use a separate bundle containing only vendor libraries.</li>\n<li>–verbose (简写: -v)， 默认值: false，生成时输出log日志</li>\n<li>–watch (aliases: -w)，添加后文件变更会触发重新构建</li>\n</ul>\n<h4 id=\"ng-generate\"><a href=\"#ng-generate\" class=\"headerlink\" title=\"ng generate\"></a>ng generate</h4><p>ng generate 类型 文件名 或 ng g 类型 文件名<br>帮助开发者生成开发文件，类和相应代码骨架，比如：模块，组件，指令等，方便快捷开发，下面一行命令将自动生成组件的目录，和相关的css/ts/html文件</p>\n<pre><code>ng g component my-comp\n</code></pre><p><strong> （1） module</strong><br>ng g module module_name<br>生成特性模块<br>Option选项：</p>\n<ul>\n<li><code>--</code>app (简写: -a)， 默认值: 1st app</li>\n<li>–flat，指定是否新建同名目录存放模块文件<br>ng g module 或 ng g module –flat=false ： 新建同名目录<br>ng g module –flat或 ng g module –flat=true : 不新建同名目录</li>\n<li>–module (简写: -m)，说明模块在哪导入</li>\n<li>–spec，指定是否连带创建spec测试文件<br>ng g module 或 ng g module –spec=false： 同步创建spec<br>ng g module –spec 或 ng g module –spec=非false: 不创建同名spec</li>\n<li>–routing，指定是否连带创建路由模块，forChild()<br>ng g module 或 ng g module –routing=false： 不同步创建路由模块<br>ng g module –routing 或  ng g module –routing=非false : 创建路由模块</li>\n</ul>\n<p><strong> （2） component</strong><br>ng g component<br>生成组件<br>Option选项：</p>\n<ul>\n<li><code>--</code>app (简写: -a) 默认值: 1st app</li>\n<li>–change-detection (简写: -cd)，不知道什么用</li>\n<li>–flat， 默认值: false，指定是否新建组件目录<br>ng g component  或 ng g component –flat=false: 新建目录<br>ng g component  –flat 或 ng g component –flat=true: 不新建目录</li>\n<li>–export，默认值: false，指定是否公开该组件<br>ng g component  或 ng g component –export=false: 不公开<br>ng g component  –export 或 ng g component –export=true: 公开</li>\n<li>–inline-style (简写: -is)，默认值: false，指定组件是否行内样式<br>ng g component  或 ng g component -is=false: 不是行内样式<br>ng g component  -is 或 ng g component -is=true: 是行内样式</li>\n<li>–inline-template (简写: -it)， 默认值: false，指定组件是否行内模板<br>ng g component  或 ng g component -it=false: 不是行内模板<br>ng g component  -it 或 ng g component -it=true: 是行内模板</li>\n<li>–module (简写: -m)，指定是否更新模块，默认更新</li>\n<li>–prefix，指定是否去掉组件selector选择器的前缀<br>ng g component  或 ng g component –prefix=false: 不加前缀<br>ng g component  –prefix 或 ng g component –prefix=true: 默认加前缀</li>\n<li>–skip-import，默认值: false，Allows for skipping the module import.</li>\n<li>–spec，指定是否连带创建spec测试文件<br>ng g component –spec=false: 不创建spec<br>ng g component –spec=true 或 ng g component –spec 或 ng g component: 创建spec</li>\n<li>–view-encapsulation (简写: -ve)，Specifies the view encapsulation strategy</li>\n</ul>\n<blockquote>\n<p>命令生成的组件默认更新于距离最近的module模块的declares数组里，比如当前所处目录为：/app/main/login/,生成组件后自动注册到本目录的模块<br>中，如果本目录下无模块，则查找上一层目录的模块进行注册，指导根模块</p>\n</blockquote>\n<p><strong>（3） directive</strong><br>ng g directive name<br>用于生成属性指令相关文件和类 ，选项使用方式基本和component类似<br>Option选项：</p>\n<ul>\n<li><code>--</code>app (简写: -a) 默认值: 1st app</li>\n<li>–export default value: false</li>\n<li>–flat，ng g component –flat=false: 新建目录，其他情况均不新建</li>\n<li>–module (aliases: -m)</li>\n<li>–prefix</li>\n<li>–skip-import</li>\n<li>–spec</li>\n</ul>\n<p>生成的指令类默认是这样的</p>\n<pre><code>mport { Directive } from &apos;@angular/core&apos;;\n@Directive({selector: &apos;[appA]&apos;})\nexport class ADirective {\n  constructor() { }\n}\n</code></pre><p><strong>（4） pipe</strong><br>ng g pipe name<br>用于生成管道相关文件和类 ，选项使用方式和directive类似<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n<li>–export</li>\n<li>–flat</li>\n<li>–module (aliases: -m)</li>\n<li>–skip-import</li>\n<li>–spec</li>\n</ul>\n<p>生成的管道类默认是这样的</p>\n<pre><code>import { Pipe, PipeTransform } from &apos;@angular/core&apos;;\n@Pipe({  name: &apos;my&apos;})\nexport class MyPipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    return null;\n  }\n}\n</code></pre><p><strong>（5） service</strong><br>ng g service name<br>用于生成服务相关文件和类 ，选项使用方式和directive类似<br>Option选项：</p>\n<ul>\n<li><code>--</code>app (aliases: -a)</li>\n<li>–flat</li>\n<li>–module (aliases: -m)</li>\n<li>–spec</li>\n</ul>\n<p>生成的可注入服务默认是这样的</p>\n<pre><code>import { Injectable } from &apos;@angular/core&apos;;\n@Injectable()\nexport class LoginService {\n  constructor() { }\n}\n</code></pre><p><strong>（6） guard</strong><br>ng g guard name<br>生成路由守卫类和相关文件<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n<li>–flat</li>\n<li>–module (aliases: -m)</li>\n<li>–spec</li>\n</ul>\n<p>生成的守卫类默认是这样的</p>\n<pre><code>import { Injectable } from &apos;@angular/core&apos;;\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from &apos;@angular/router&apos;;\nimport { Observable } from &apos;rxjs/Observable&apos;;\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean {\n    return true;\n  }\n}\n</code></pre><p><strong>（7） class</strong><br>ng g class name<br>生成类<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n<li>–spec</li>\n</ul>\n<p>生成的类默认是这样的</p>\n<pre><code>export class Hero {\n}\n</code></pre><p><strong>（8） interface</strong><br>ng g interface name type<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n<li>type</li>\n</ul>\n<p>生成的接口默认是这样的</p>\n<pre><code>export interface Name {\n}\n</code></pre><p><strong> （） enum</strong><br>ng g enum name<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n</ul>\n<p>生成的enum默认是这样的</p>\n<pre><code>export enum HERO {\n}\n</code></pre><h4 id=\"ng-lint\"><a href=\"#ng-lint\" class=\"headerlink\" title=\"ng lint\"></a>ng lint</h4><p>ng lint<br>命令使用应用配置的tslint规则文件进行lint检查<br>ng lint<br>命令使用应用配置的tslint规则文件进行lint检查<br>Option选项：</p>\n<ul>\n<li><code>--</code>fix, 默认值: false，指定检查时是否同步修正lint错误</li>\n<li>–force，默认值 false，是否强制检查失败加上后就说有lint错误也成功</li>\n<li>–type-check，默认值: false，是否类型检查</li>\n<li>–format (简写: -t), 默认值: prose,指定lint输出文件格式，有下列选择：prose, json, stylish, verbose, pmd, msbuild, checkstyle, vso, fileslist</li>\n</ul>\n<h4 id=\"ng-test\"><a href=\"#ng-test\" class=\"headerlink\" title=\"ng test\"></a>ng test</h4><p>ng test<br>编译应用后生成输入文件，并运行测试UT</p>\n<h4 id=\"ng-e2e\"><a href=\"#ng-e2e\" class=\"headerlink\" title=\"ng e2e\"></a>ng e2e</h4><p>ng e2e<br>命令部署应用并运行e2e测试用例</p>\n<h4 id=\"ng-build\"><a href=\"#ng-build\" class=\"headerlink\" title=\"ng build\"></a>ng build</h4><p>ng build<br>编译应用并生成目标文件，一般存放于dist/ directory<br>下面命令是等效的</p>\n<pre><code>ng build --target=production --environment=prod\nng build --prod --env=prod\nng build --prod\n</code></pre><p>下面也是等效的</p>\n<pre><code>ng build --target=development --environment=dev\nng build --dev --e=dev\nng build --dev\nng build\n</code></pre><p>而已编译时修改index.html配置的基准路径</p>\n<pre><code>ng build --base-href /myUrl/\nng build --bh /myUrl/\n</code></pre><p>下面时两种模式编译默认携带的选项<br>–dev模式： –aot false；–environment dev；–output-hashing media；–sourcemaps true；–extract-css     false；<br>–prod模式：–aot true；–environment prod；–output-hashing all；–sourcemaps false；–extract-css     true；<br>Options选项：</p>\n<ul>\n<li>aot，</li>\n<li>app</li>\n<li>base-href</li>\n<li>deploy-url</li>\n<li>environment</li>\n<li>extract-css</li>\n<li>i18n-file</li>\n<li>i18n-format</li>\n<li>locale</li>\n<li>output-hashing</li>\n<li>output-path</li>\n<li>delete-output-path</li>\n<li>poll</li>\n<li>progress</li>\n<li>sourcemap</li>\n<li>stats-json</li>\n<li>target</li>\n<li>vendor-chunk</li>\n<li>verbose</li>\n<li>watch</li>\n<li>show-circular-dependencies</li>\n</ul>\n<h4 id=\"ng-get-ng-set\"><a href=\"#ng-get-ng-set\" class=\"headerlink\" title=\"ng get/ng set\"></a>ng get/ng set</h4><p>ng get<br>获取配置文件的内容<br>ng set<br>设置配置文件的内容<br>比如：</p>\n<pre><code>ng get angular-cli.json\n//获取整个文件内容\n\nng get app.name\n//获取文件内容中app的name属性值\n\nng set app.name myApp\n//修改文件内容中app的name属性值\n</code></pre><h4 id=\"ng-doc\"><a href=\"#ng-doc\" class=\"headerlink\" title=\"ng doc\"></a>ng doc</h4><p>ng doc [search term]<br>命令将自动在浏览器打开官方文档angular.io，并调到指定字段处</p>\n<h4 id=\"ng-eject\"><a href=\"#ng-eject\" class=\"headerlink\" title=\"ng eject\"></a>ng eject</h4><p>ng eject<br>ejects your app and output the proper webpack configuration and scripts</p>\n<h4 id=\"ng-xi18n\"><a href=\"#ng-xi18n\" class=\"headerlink\" title=\"ng xi18n\"></a>ng xi18n</h4><p>ng xi18n<br>从应用的默版中收集i18n国际化的信息</p>\n","site":{"data":{}},"excerpt":"<p>Angular CLI是一个命令行界面工具，它可以创建项目、添加文件以及执行一大堆开发任务，比如测试、打包和发布等<br>使用Angular-CLI工具可以快速创建代码框架，减少重复性开发的工作量，而且创建的应用和文件符合风格指南的推荐风格，开发者可以从中获益<br>","more":"</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><p>查询版本,获取帮助</p>\n<pre><code>ng help\nng -v\n</code></pre><p>新建项目，启动应用</p>\n<pre><code>ng new projectName\ncd projectName\nng serve --open\n</code></pre><p>指定主机和端口号启动</p>\n<pre><code>ng serve --host 0.0.0.0 --port 4201 --open\n</code></pre><p>工具支持相对目录形式的创建命令，比如,当前所处目录/home/app：</p>\n<pre><code>ng g component login           //在/home/app目录下创建\nng g component login  ../my    //在/home/my目录下创建\nng g component login  AA       //在/home/app/AA目录下创建\n</code></pre><h2 id=\"核心命令\"><a href=\"#核心命令\" class=\"headerlink\" title=\"核心命令\"></a>核心命令</h2><h4 id=\"ng-new\"><a href=\"#ng-new\" class=\"headerlink\" title=\"ng new\"></a>ng new</h4><p>ng new my-app<br>默认生成同名目录，并初始化一个angular应用框架<br>Option选项：</p>\n<ul>\n<li><code>--</code>directory (简写:-dir) ，指定新建项目的目录名，比如：ng new my-app -dir AAA;不指定则默认以应用名命名目录</li>\n<li>–dry-run (简写:-d) ，默认值: false，生成项目后立即run起来，列出所有生成的项目文件</li>\n</ul>\n<ul>\n<li>–inline-style (简写: -is) ，默认不加时为false，，指定生成应用的组件为行内样式，即样式表位于元数据的styles[]内</li>\n<li>–inline-template (简写: -it) ，默认不加时为 false，指定生成应用的组件为行内模板，即模板位于元数据的templates[]内</li>\n<li>–minimal，默认值: false，创建最小化APP</li>\n<li>–prefix (简写: -p) 默认: app，指定生成文件的选择器selector的前缀，也可在.angular-cli.json文件中修改</li>\n<li>–routing， 默认不加时为 false，指定生成相应的路由模块</li>\n<li>–skip-commit (简写: -sc) 默认不加时为 false，指定忽略掉应用提到到库</li>\n<li>–skip-git (简写: -sg)  默认不加时为 false，指定忽略掉初始化git仓库</li>\n<li>–skip-install (简写: -si) 默认不加时为: false，指定忽略掉安装packages</li>\n<li>–skip-tests (简写: -st) 默认不加时为: false，指定忽略掉安装测试文件spec/e2e</li>\n<li>–source-dir (简写: -sd) 默认值: src，指定生成项目的源文件目录名，也可在.angular-cli.json (apps[0].root)中修改</li>\n<li>–style，默认值: css，指定css文件类型（css/scss/less/sass/styl (stylus)），也可在文件.angular-cli.json (defaults.styleExt)中修改</li>\n<li>–verbose (简写: -v)， 默认不加时为: false，生成时输出log日志</li>\n</ul>\n<h4 id=\"ng-serve\"><a href=\"#ng-serve\" class=\"headerlink\" title=\"ng serve\"></a>ng serve</h4><p>ng serve<br>编译应用并启动web服务<br>Option选项：</p>\n<ul>\n<li><code>--</code>host (简写: -H)， 不加时的默认值: localhost，指定启动的主机</li>\n<li>–hmr，不加时的默认值: false，是否启动热模块替换</li>\n<li>–live-reload (简写: -lr)，不加时的默认值: true，是否在页面变更时重新载入</li>\n<li>–public-host (简写: –live-reload-client)，说明浏览器使用的URL</li>\n<li>–disable-host-check，默认值: false，不检测已连接的host</li>\n<li>–open (简写: -o)， 不加时默认值: false，指定启动后自动打开浏览器呈现</li>\n<li>–port (简写: -p)， 默认值 4200，指定服务的监听端口</li>\n<li>–ssl，使用HTTPS</li>\n<li>–ssl-cert (简写: -)，默认值SSL:</li>\n<li>–ssl-key，指定使用 serving HTTPS的SSL key</li>\n<li>–aot，指定进行预编译</li>\n<li>–base-href (简写: -bh)，指定应用项目的基准路径,指的是其他应用文件现对于index.html的相对路径，在.angular-cli.json文件可设置根目录和index的路径，如root/src/index,可设-bh ../</li>\n<li>–deploy-url (简写: -d)，指定文件部署的URL</li>\n<li>–environment (简写: -e)，定义编译环境</li>\n<li>–extract-css (简写: -ec)，指定从全局样式表抽取样式</li>\n<li>–i18n-file，使用i18n国际化</li>\n<li>–i18n-format，指定–i18n-file国际化文件的格式</li>\n<li>–locale，Locale to use for i18n.</li>\n<li>–output-hashing (简写: -oh) ，定义the output filename cache-busting hashing mode. Possible values: none, all, media, bundles</li>\n<li>–output-path (简写: -op) ，指定输出文件的路径</li>\n<li>–poll，Enable and define the file watching poll time period (milliseconds) .</li>\n<li>–progress (简写: -pr)， 默认值: true，是否显示构建过程</li>\n<li>–sourcemap (简写: -sm, sourcemaps)，Output sourcemaps.</li>\n<li>–target (简写: -t, -dev, -prod) 默认值: development，指定编译方式</li>\n<li>–vendor-chunk (简写: -vc)，默认值: true，Use a separate bundle containing only vendor libraries.</li>\n<li>–verbose (简写: -v)， 默认值: false，生成时输出log日志</li>\n<li>–watch (aliases: -w)，添加后文件变更会触发重新构建</li>\n</ul>\n<h4 id=\"ng-generate\"><a href=\"#ng-generate\" class=\"headerlink\" title=\"ng generate\"></a>ng generate</h4><p>ng generate 类型 文件名 或 ng g 类型 文件名<br>帮助开发者生成开发文件，类和相应代码骨架，比如：模块，组件，指令等，方便快捷开发，下面一行命令将自动生成组件的目录，和相关的css/ts/html文件</p>\n<pre><code>ng g component my-comp\n</code></pre><p><strong> （1） module</strong><br>ng g module module_name<br>生成特性模块<br>Option选项：</p>\n<ul>\n<li><code>--</code>app (简写: -a)， 默认值: 1st app</li>\n<li>–flat，指定是否新建同名目录存放模块文件<br>ng g module 或 ng g module –flat=false ： 新建同名目录<br>ng g module –flat或 ng g module –flat=true : 不新建同名目录</li>\n<li>–module (简写: -m)，说明模块在哪导入</li>\n<li>–spec，指定是否连带创建spec测试文件<br>ng g module 或 ng g module –spec=false： 同步创建spec<br>ng g module –spec 或 ng g module –spec=非false: 不创建同名spec</li>\n<li>–routing，指定是否连带创建路由模块，forChild()<br>ng g module 或 ng g module –routing=false： 不同步创建路由模块<br>ng g module –routing 或  ng g module –routing=非false : 创建路由模块</li>\n</ul>\n<p><strong> （2） component</strong><br>ng g component<br>生成组件<br>Option选项：</p>\n<ul>\n<li><code>--</code>app (简写: -a) 默认值: 1st app</li>\n<li>–change-detection (简写: -cd)，不知道什么用</li>\n<li>–flat， 默认值: false，指定是否新建组件目录<br>ng g component  或 ng g component –flat=false: 新建目录<br>ng g component  –flat 或 ng g component –flat=true: 不新建目录</li>\n<li>–export，默认值: false，指定是否公开该组件<br>ng g component  或 ng g component –export=false: 不公开<br>ng g component  –export 或 ng g component –export=true: 公开</li>\n<li>–inline-style (简写: -is)，默认值: false，指定组件是否行内样式<br>ng g component  或 ng g component -is=false: 不是行内样式<br>ng g component  -is 或 ng g component -is=true: 是行内样式</li>\n<li>–inline-template (简写: -it)， 默认值: false，指定组件是否行内模板<br>ng g component  或 ng g component -it=false: 不是行内模板<br>ng g component  -it 或 ng g component -it=true: 是行内模板</li>\n<li>–module (简写: -m)，指定是否更新模块，默认更新</li>\n<li>–prefix，指定是否去掉组件selector选择器的前缀<br>ng g component  或 ng g component –prefix=false: 不加前缀<br>ng g component  –prefix 或 ng g component –prefix=true: 默认加前缀</li>\n<li>–skip-import，默认值: false，Allows for skipping the module import.</li>\n<li>–spec，指定是否连带创建spec测试文件<br>ng g component –spec=false: 不创建spec<br>ng g component –spec=true 或 ng g component –spec 或 ng g component: 创建spec</li>\n<li>–view-encapsulation (简写: -ve)，Specifies the view encapsulation strategy</li>\n</ul>\n<blockquote>\n<p>命令生成的组件默认更新于距离最近的module模块的declares数组里，比如当前所处目录为：/app/main/login/,生成组件后自动注册到本目录的模块<br>中，如果本目录下无模块，则查找上一层目录的模块进行注册，指导根模块</p>\n</blockquote>\n<p><strong>（3） directive</strong><br>ng g directive name<br>用于生成属性指令相关文件和类 ，选项使用方式基本和component类似<br>Option选项：</p>\n<ul>\n<li><code>--</code>app (简写: -a) 默认值: 1st app</li>\n<li>–export default value: false</li>\n<li>–flat，ng g component –flat=false: 新建目录，其他情况均不新建</li>\n<li>–module (aliases: -m)</li>\n<li>–prefix</li>\n<li>–skip-import</li>\n<li>–spec</li>\n</ul>\n<p>生成的指令类默认是这样的</p>\n<pre><code>mport { Directive } from &apos;@angular/core&apos;;\n@Directive({selector: &apos;[appA]&apos;})\nexport class ADirective {\n  constructor() { }\n}\n</code></pre><p><strong>（4） pipe</strong><br>ng g pipe name<br>用于生成管道相关文件和类 ，选项使用方式和directive类似<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n<li>–export</li>\n<li>–flat</li>\n<li>–module (aliases: -m)</li>\n<li>–skip-import</li>\n<li>–spec</li>\n</ul>\n<p>生成的管道类默认是这样的</p>\n<pre><code>import { Pipe, PipeTransform } from &apos;@angular/core&apos;;\n@Pipe({  name: &apos;my&apos;})\nexport class MyPipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    return null;\n  }\n}\n</code></pre><p><strong>（5） service</strong><br>ng g service name<br>用于生成服务相关文件和类 ，选项使用方式和directive类似<br>Option选项：</p>\n<ul>\n<li><code>--</code>app (aliases: -a)</li>\n<li>–flat</li>\n<li>–module (aliases: -m)</li>\n<li>–spec</li>\n</ul>\n<p>生成的可注入服务默认是这样的</p>\n<pre><code>import { Injectable } from &apos;@angular/core&apos;;\n@Injectable()\nexport class LoginService {\n  constructor() { }\n}\n</code></pre><p><strong>（6） guard</strong><br>ng g guard name<br>生成路由守卫类和相关文件<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n<li>–flat</li>\n<li>–module (aliases: -m)</li>\n<li>–spec</li>\n</ul>\n<p>生成的守卫类默认是这样的</p>\n<pre><code>import { Injectable } from &apos;@angular/core&apos;;\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from &apos;@angular/router&apos;;\nimport { Observable } from &apos;rxjs/Observable&apos;;\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean {\n    return true;\n  }\n}\n</code></pre><p><strong>（7） class</strong><br>ng g class name<br>生成类<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n<li>–spec</li>\n</ul>\n<p>生成的类默认是这样的</p>\n<pre><code>export class Hero {\n}\n</code></pre><p><strong>（8） interface</strong><br>ng g interface name type<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n<li>type</li>\n</ul>\n<p>生成的接口默认是这样的</p>\n<pre><code>export interface Name {\n}\n</code></pre><p><strong> （） enum</strong><br>ng g enum name<br>Option选项：</p>\n<ul>\n<li><code>--</code>app</li>\n</ul>\n<p>生成的enum默认是这样的</p>\n<pre><code>export enum HERO {\n}\n</code></pre><h4 id=\"ng-lint\"><a href=\"#ng-lint\" class=\"headerlink\" title=\"ng lint\"></a>ng lint</h4><p>ng lint<br>命令使用应用配置的tslint规则文件进行lint检查<br>ng lint<br>命令使用应用配置的tslint规则文件进行lint检查<br>Option选项：</p>\n<ul>\n<li><code>--</code>fix, 默认值: false，指定检查时是否同步修正lint错误</li>\n<li>–force，默认值 false，是否强制检查失败加上后就说有lint错误也成功</li>\n<li>–type-check，默认值: false，是否类型检查</li>\n<li>–format (简写: -t), 默认值: prose,指定lint输出文件格式，有下列选择：prose, json, stylish, verbose, pmd, msbuild, checkstyle, vso, fileslist</li>\n</ul>\n<h4 id=\"ng-test\"><a href=\"#ng-test\" class=\"headerlink\" title=\"ng test\"></a>ng test</h4><p>ng test<br>编译应用后生成输入文件，并运行测试UT</p>\n<h4 id=\"ng-e2e\"><a href=\"#ng-e2e\" class=\"headerlink\" title=\"ng e2e\"></a>ng e2e</h4><p>ng e2e<br>命令部署应用并运行e2e测试用例</p>\n<h4 id=\"ng-build\"><a href=\"#ng-build\" class=\"headerlink\" title=\"ng build\"></a>ng build</h4><p>ng build<br>编译应用并生成目标文件，一般存放于dist/ directory<br>下面命令是等效的</p>\n<pre><code>ng build --target=production --environment=prod\nng build --prod --env=prod\nng build --prod\n</code></pre><p>下面也是等效的</p>\n<pre><code>ng build --target=development --environment=dev\nng build --dev --e=dev\nng build --dev\nng build\n</code></pre><p>而已编译时修改index.html配置的基准路径</p>\n<pre><code>ng build --base-href /myUrl/\nng build --bh /myUrl/\n</code></pre><p>下面时两种模式编译默认携带的选项<br>–dev模式： –aot false；–environment dev；–output-hashing media；–sourcemaps true；–extract-css     false；<br>–prod模式：–aot true；–environment prod；–output-hashing all；–sourcemaps false；–extract-css     true；<br>Options选项：</p>\n<ul>\n<li>aot，</li>\n<li>app</li>\n<li>base-href</li>\n<li>deploy-url</li>\n<li>environment</li>\n<li>extract-css</li>\n<li>i18n-file</li>\n<li>i18n-format</li>\n<li>locale</li>\n<li>output-hashing</li>\n<li>output-path</li>\n<li>delete-output-path</li>\n<li>poll</li>\n<li>progress</li>\n<li>sourcemap</li>\n<li>stats-json</li>\n<li>target</li>\n<li>vendor-chunk</li>\n<li>verbose</li>\n<li>watch</li>\n<li>show-circular-dependencies</li>\n</ul>\n<h4 id=\"ng-get-ng-set\"><a href=\"#ng-get-ng-set\" class=\"headerlink\" title=\"ng get/ng set\"></a>ng get/ng set</h4><p>ng get<br>获取配置文件的内容<br>ng set<br>设置配置文件的内容<br>比如：</p>\n<pre><code>ng get angular-cli.json\n//获取整个文件内容\n\nng get app.name\n//获取文件内容中app的name属性值\n\nng set app.name myApp\n//修改文件内容中app的name属性值\n</code></pre><h4 id=\"ng-doc\"><a href=\"#ng-doc\" class=\"headerlink\" title=\"ng doc\"></a>ng doc</h4><p>ng doc [search term]<br>命令将自动在浏览器打开官方文档angular.io，并调到指定字段处</p>\n<h4 id=\"ng-eject\"><a href=\"#ng-eject\" class=\"headerlink\" title=\"ng eject\"></a>ng eject</h4><p>ng eject<br>ejects your app and output the proper webpack configuration and scripts</p>\n<h4 id=\"ng-xi18n\"><a href=\"#ng-xi18n\" class=\"headerlink\" title=\"ng xi18n\"></a>ng xi18n</h4><p>ng xi18n<br>从应用的默版中收集i18n国际化的信息</p>"},{"title":"Angular-注入器","date":"2017-07-16T09:16:49.000Z","comments":1,"_content":"\n依赖注入是一种程序设计模式，指的是在应用构建里将所需的服务或者部件委托给第三方厂商提供，自身只关注应用逻辑，需要什么服务只需从厂商请求即可，而不用关心服务具体的创建过程和升级\n相对于以前大而全的设计方式，这种思路的转变，可以使应用本身和所需的服务相对独立的开发和升级，而不用存在太大的耦合，下面是简单的示意图：\n<!--more-->\n![inector-design](/images/inector-design.jpg)\n在angular里，自带的“依赖注入框架”和注入器就扮演着这样的一个角色，为构建angular应用的服务需求提供了可靠的提供机制，简便了应用的搭建\n\n## 一. 注入器树\n注入器树时angular基本树之一，在官方的[angular高级文档-多级注入器](https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html \"angular-多级注入器\")一章里已经作了相对清晰的讲解，描述的是和另一基本树-组件树平级对应的注入器，组件树里的每一个组件节点都可以拥有自己的注入器，于是便有了这个注入器树，这个很好理解\n这里不再赘述，这里要描述的是由angular中多个不同类型注入器组成的多级注入器树\n在angular中，根据注入器的启动时间和使用范围的不同，可划分为以下几种:\n- 根注入器\n在main.ts里引导启动应用时，即创建了根注入器，整个应用范围内有效；除了根模块的privodes里的供应商直接注册到根注入器之外，直接导入到根模块的其他模块里的供应商也是注册根注入器\n- 模块子注入器\n指懒加载模块内的注入器，在加载后启动，使用范围限于本模块，供应商注册在子注入器中，包括被导入模块的供应商\n- 组件注入器\n指组件内的注入器，供应商在组件的privode数组内声明，只在组件和子组件范围内有效，且每个组件实例都有一份属于自己的注入器。在组件级提供服务可以确保组件的每个实例都得到一个自己的、私有的服务实例\n\n多级注入器树由这些不同的注入器构成，树的结构与模块/组件的组织有着相似的层级和对应关系，下图是一个简单的注入器树示意：\n![injector-tree](/images/injector-tree.jpg)\n\n\n## 二.服务的注入\nangular应用中配置使用注入服务需要定义可注入服务，注册供应商，服务请求等几个步骤，下面描述一下：\n#### 1. 声明可注入服务\n使用@Injectable()声明可注入服务，Injectable标识一个类可以被注入器实例化，示例如下：\n\n    import { Injectable } from '@angular/core';\n    import { HEROES }     from './mock-heroes';\n    import { Logger }     from '../logger.service';\n    @Injectable()\n    export class HeroService {\n      constructor(private logger: Logger) {  }\n      getHeroes() {\n        this.logger.log('Getting heroes ...');\n        return HEROES;\n      }\n    }\n@Injectable()装饰器把一个类标识为注入器实例化的目标，试图实例化没有被标识Injectable的类时，注入器会报错。\n\n#### 2. 注册提供商\n\n**什么是提供商**\n提供商即服务供应商，提供了依赖值的一个具体的版本，指导注入器如何创建服务。注入器依靠提供商提供的版本来创建服务实例，然后将服务的实例注入组件或其它服务\n\n**提供商的种类**\n提供商没有严格的定义，可以有很多种，只要它们能交付一个行为类似的对象即可，比如：类、对象、工厂函数、变量值等\n\n**提供商声明**\n(1) 类供应商\nproviders：[{ provide: key令牌, useClass: 对象实例 }]  比如：\n\n    providers：[{ provide: Logger, useClass: Logger }]\n    providers：[Logger] //简化版\n\n(2) 备选服务供应商\n使用超类作key令牌，子类作为实例化类，例如：\n\n    @Injectable()\n    class EvenBetterLogger extends Logger {\n      constructor(private userService: UserService) { super(); }\n\n      log(message: string) {\n        let name = this.userService.user.name;\n        super.log(`Message to ${name}: ${message}`);\n      }\n    }\n\n    providers：[{ provide: Logger, useClass: EvenBetterLogger}]\n\n(3) 别名服务供应商\n使用已定义的类作为实例化类，其他类名作key令牌，例如：\n\n    providers：[NewLogger，\n               { provide: Logger, useExisting: NewLogger}]\n\n(3) 值依赖供应商\n使用一个对象或者变量作为供应商对像，这在一些全局参数配置中有重要的用处，例如：\n\n    const silentLogger = {\n      logs: ['Silent logger says \"Shhhhh!\". Provided via \"useValue\"'],\n      log: () => {}\n    };\n\n    providers：[{ provide: Logger, useValue: silentLogger}]\n\n注意：供应商在一个注入器中不能重复注册，否则会出现多个相同的实例，这是不被期望的\n\n#### 3. 服务注入请求\n作为重要的一步是用户如何进行注入请求，因为服务最终是要用于应用中，否则前面的配置都没有什么意义，服务注入分为隐式注入和显式注入两种\n##### （1）隐式注入\n最常见的注入配置时在我们组件构造函数里通过供应商令牌进行服务申请，比如：\n\n    constructor(private logger: Logger) {}\n\nconstructor声明 + @component + provide供应商数组 共同指示注入器要注入服务实例，以及怎么进行注入\n注意，我们在请求时是使用的供应商令牌来向注入器请求的，即上一节中的provide字段，而不管对应的实际供应商类或对象时哪个，注入器会自动根据令牌匹配一个服务实例来给组件使用，如果匹配不到，则创建一个,并将实例引用赋予变量logger\n实际上，在angular实现中，向注入器注册提供商时，会把这个提供商和一个DI令牌关联起来了，注入器自身会维护一个内部的令牌-提供商映射表，在请求依赖会从这个映射表查找提供商实例，而令牌就是这个表的键值，这就是为什么请求时使用的是令牌\n\n##### （2）显式注入\n有两种显示注入方式，不过不提倡这么使用\n方式一：直接创建注入器\n\n    injector : any;\n    constructor() {\n      this.injector =\n           ReflectiveInjector.resolveAndCreate([Logger, HeroService]);\n      let logger = injector.get(Logger);\n    }\n\n方式二：直接使用注入器\n\n    heroService : any;\n    constructor(private injector: Injector) {}\n\n    ngOnInit() {\n        this.heroService = this.injector.get(HeroService);\n    }\n\n\n#### 4. 服务注入配置示意图\n服务注入的几个方面可以在下图得到体现\n![injector-config](/images/angular-inject-config.jpg)\n\n\n## 三. 多级注入系统\n点击[这里](https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html \"angular-多级注入器\")查看原文，这里只是作一些总结\n##### 1) 嵌套式注入器\nAngular多级依赖注入系统支持与组件树并行的嵌套式注入器，应用程序中有一个与组件树平行的注入器树，我们可以在组件树中的任何级别上重新配置注入器\n每个组件实例都有自己的注入器，也许说不对，组件可以没有注入器，但这时候说的组件的注入器可能是一个组件树中更高级的祖先注入器的代理，可以理解为组件存了上级注入器的一个指针，,这只是提升效率的实现细节，只要想象成每个组件都有自己的注入器就可以了。\n\n##### 2) 注入冒泡\nangular自下而上冒泡的方式匹配使用的服务依赖，具体来讲，当一个组件请求一个服务时，Angular 先尝试用本组件自己的注入器来满足它，如果在该组件的注入器没有找到对应的提供商，它就把这个请求转给它父组件的注入器来处理；如果父组件注入器也无法满足这个申请，则继续往上传递，一直到找到了一个能处理此请求的注入器，或者超出了组件树中的祖先位置还未找到，抛出一个错误\n\n##### 3) 不同层级再次提供同一个服务\n在应用实现中，可以在注入器树中的多个层次上为指定的依赖令牌重新注册提供商，即同一个服务可以在多个层级上重新配置，多个子注入器都具有该服务的实例，根据注入的冒泡匹配原则，遇到的第一个提供商实例会胜出\n因此，注入器树中间层注入器上的提供商，可以拦截来自底层的对特定服务的请求，导致它可以“重新配置”和者说“遮蔽”高层的注入器\n**带来的好处：**\n- 服务隔离,服务范围限制在组件内，别的组件不可访问\n- 组件特殊的提供商,下级组件可重新定义与上级同名的服务，定义自己特殊的实现\n- 多重编辑会话，每个组件实例拥有自己的服务实例，可以存放处理自己的数据\n\n\n#### 最后，一些好东西：\n1 . 在一个注入器的范围内，依赖都是单例的,比如在应用范围内的根注入器，各个依赖值都是单例的\n\n2 . 注入器同时会实例化Component这样的组件,为什么不标记他们为@Injectable()呢？因为没有必要，因为组件已经有@Component装饰器， 而@Component/@Directive/@Pipe等装饰器都是 @Injectable的子类\n\n3 . 可选依赖，使用@Optional()定义可选依赖，这样即使在注入器里没有这个服务，像这样：\n\n    import { Optional } from '@angular/core';\n    constructor(@Optional() private logger: Logger) {\n      if (this.logger) {\n        this.logger.log(some_message);\n      }\n    }\n这样的话在providers数组里可以不声明Logger，不会出错。不过使用的时候需要处理空值，因为当注入找不到这个服务时会返回一个null\n\n4 . 非类依赖服务\n当注入对象是一个字符串，函数或者接口对象时，没有对应的合适令牌可供使用，可采用InjectionToken作为提供商令牌，像这样：\n\n    //注入对像\n    export interface AppConfig {\n      apiEndpoint: string;\n      title: string;\n    }\n    export const HERO_DI_CONFIG: AppConfig = {\n      apiEndpoint: 'api.heroes.com',\n      title: 'Dependency Injection'\n    };\n\n    //令牌\n    import { InjectionToken } from '@angular/core';\n    export let APP_CONFIG = new InjectionToken<AppConfig>('app.config');\n\n    //提供商\n    providers: [{ provide: APP_CONFIG, useValue: HERO_DI_CONFIG }]\n\n    //使用@Inject装饰器帮忙注入使用\n    constructor(@Inject(APP_CONFIG) config: AppConfig) {\n      this.title = config.title;\n    }\n\n5 . getter值可直接作为变量应用于模板中，比如：\n\n    get hero() {return service.getOneHero();}\nhero可直接作为变量应用于模板表达式中\n\n6 . @host,用于组件的服务注入只能从上一级父组件查找实例，不再往更上一级的冒泡\n\n    constructor(@host() private logger: Logger) {\n      if (this.logger) {\n        this.logger.log(some_message);\n      }\n    }\n\n7 . 在根组件和根模块提供服务的区别\n- 根组件，注册的服务可在应用全局所有子组件内使用\n- 根组件，注册的服务可在全应用范围内有效，并且可在应用启动前提供部分服务\n\n8 . 不同级别的组件和模块可声明同名的服务，使用时注入器会根据冒泡的规则来进行第一匹配；通常，通过基类来作为令牌，派生的各个子类作为各级的真正供应商;\n\n    export class loger {\n        log : string;\n        get log() { return this.log;}\n        set log();\n    }\n\n    export class Deploger extends loger {\n        set log() {}\n    }\n\n    providers[{ provide: loger, useclass: Deploger}]\n    providers[{ provide: loger, useExsiting: Deploger}]\n\n使用这个方式还能控制服务API暴露的接口数\n\n9 . 注入服务到子类\n\n    export class baseHero {\n        constructor(private serviceA : ServiceA) {\n        }\n    }\n\n    export class Hero extends baseHero {\n        constructor(private service_A : ServiceA,private service_B : ServiceB) {\n            super(service_A);//初始化基类服务参数\n        }\n    }\n\n初始化时OnInit()的调用顺序：***子类 --> 基类***\n\n10 . 子组件注入父组件\n先认识下面两点：\n\n- 不能用基类注入父组件实例\n- 组件总是优先在自身的注入器中添加组件自己的实例的，所以理论上子组件可从注入中获取任何组件实例，包括父组件\n\n使用方式：\n\n    //父组件通过前向引用声明自己\n    providers[{ provide: Parent, useExsiting: forwardRef(() => ParentComponent)}]\n    constructor(@skipself() private parent: Parent) {\n          if (this.parent) {\n            this.parent.log(some_message);\n          }\n    }\n\n    //子组件注入使用\n        constructor(@host() private parent: Parent) {\n          if (this.parent) {\n            this.parent.log(some_message);\n          }\n        }\n\n@skipself()忽略自己\n\n可以使用const声名全局变量或或者方法：\n\n    const MAX_NUM = 10000；\n\n    //重构上面对父组件的注入声明\n    const provideParent =\n      (component: any, parentType?: any) => {\n        return { provide: parentType || Parent, useExisting: forwardRef(() => component) };\n      };\n    providers:  [ provideParent(BethComponent, DifferentParent) ]\n","source":"_posts/2017-07-16-angular-Injector.md","raw":"---\ntitle: Angular-注入器\ndate: 2017-07-16 17:16:49\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n依赖注入是一种程序设计模式，指的是在应用构建里将所需的服务或者部件委托给第三方厂商提供，自身只关注应用逻辑，需要什么服务只需从厂商请求即可，而不用关心服务具体的创建过程和升级\n相对于以前大而全的设计方式，这种思路的转变，可以使应用本身和所需的服务相对独立的开发和升级，而不用存在太大的耦合，下面是简单的示意图：\n<!--more-->\n![inector-design](/images/inector-design.jpg)\n在angular里，自带的“依赖注入框架”和注入器就扮演着这样的一个角色，为构建angular应用的服务需求提供了可靠的提供机制，简便了应用的搭建\n\n## 一. 注入器树\n注入器树时angular基本树之一，在官方的[angular高级文档-多级注入器](https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html \"angular-多级注入器\")一章里已经作了相对清晰的讲解，描述的是和另一基本树-组件树平级对应的注入器，组件树里的每一个组件节点都可以拥有自己的注入器，于是便有了这个注入器树，这个很好理解\n这里不再赘述，这里要描述的是由angular中多个不同类型注入器组成的多级注入器树\n在angular中，根据注入器的启动时间和使用范围的不同，可划分为以下几种:\n- 根注入器\n在main.ts里引导启动应用时，即创建了根注入器，整个应用范围内有效；除了根模块的privodes里的供应商直接注册到根注入器之外，直接导入到根模块的其他模块里的供应商也是注册根注入器\n- 模块子注入器\n指懒加载模块内的注入器，在加载后启动，使用范围限于本模块，供应商注册在子注入器中，包括被导入模块的供应商\n- 组件注入器\n指组件内的注入器，供应商在组件的privode数组内声明，只在组件和子组件范围内有效，且每个组件实例都有一份属于自己的注入器。在组件级提供服务可以确保组件的每个实例都得到一个自己的、私有的服务实例\n\n多级注入器树由这些不同的注入器构成，树的结构与模块/组件的组织有着相似的层级和对应关系，下图是一个简单的注入器树示意：\n![injector-tree](/images/injector-tree.jpg)\n\n\n## 二.服务的注入\nangular应用中配置使用注入服务需要定义可注入服务，注册供应商，服务请求等几个步骤，下面描述一下：\n#### 1. 声明可注入服务\n使用@Injectable()声明可注入服务，Injectable标识一个类可以被注入器实例化，示例如下：\n\n    import { Injectable } from '@angular/core';\n    import { HEROES }     from './mock-heroes';\n    import { Logger }     from '../logger.service';\n    @Injectable()\n    export class HeroService {\n      constructor(private logger: Logger) {  }\n      getHeroes() {\n        this.logger.log('Getting heroes ...');\n        return HEROES;\n      }\n    }\n@Injectable()装饰器把一个类标识为注入器实例化的目标，试图实例化没有被标识Injectable的类时，注入器会报错。\n\n#### 2. 注册提供商\n\n**什么是提供商**\n提供商即服务供应商，提供了依赖值的一个具体的版本，指导注入器如何创建服务。注入器依靠提供商提供的版本来创建服务实例，然后将服务的实例注入组件或其它服务\n\n**提供商的种类**\n提供商没有严格的定义，可以有很多种，只要它们能交付一个行为类似的对象即可，比如：类、对象、工厂函数、变量值等\n\n**提供商声明**\n(1) 类供应商\nproviders：[{ provide: key令牌, useClass: 对象实例 }]  比如：\n\n    providers：[{ provide: Logger, useClass: Logger }]\n    providers：[Logger] //简化版\n\n(2) 备选服务供应商\n使用超类作key令牌，子类作为实例化类，例如：\n\n    @Injectable()\n    class EvenBetterLogger extends Logger {\n      constructor(private userService: UserService) { super(); }\n\n      log(message: string) {\n        let name = this.userService.user.name;\n        super.log(`Message to ${name}: ${message}`);\n      }\n    }\n\n    providers：[{ provide: Logger, useClass: EvenBetterLogger}]\n\n(3) 别名服务供应商\n使用已定义的类作为实例化类，其他类名作key令牌，例如：\n\n    providers：[NewLogger，\n               { provide: Logger, useExisting: NewLogger}]\n\n(3) 值依赖供应商\n使用一个对象或者变量作为供应商对像，这在一些全局参数配置中有重要的用处，例如：\n\n    const silentLogger = {\n      logs: ['Silent logger says \"Shhhhh!\". Provided via \"useValue\"'],\n      log: () => {}\n    };\n\n    providers：[{ provide: Logger, useValue: silentLogger}]\n\n注意：供应商在一个注入器中不能重复注册，否则会出现多个相同的实例，这是不被期望的\n\n#### 3. 服务注入请求\n作为重要的一步是用户如何进行注入请求，因为服务最终是要用于应用中，否则前面的配置都没有什么意义，服务注入分为隐式注入和显式注入两种\n##### （1）隐式注入\n最常见的注入配置时在我们组件构造函数里通过供应商令牌进行服务申请，比如：\n\n    constructor(private logger: Logger) {}\n\nconstructor声明 + @component + provide供应商数组 共同指示注入器要注入服务实例，以及怎么进行注入\n注意，我们在请求时是使用的供应商令牌来向注入器请求的，即上一节中的provide字段，而不管对应的实际供应商类或对象时哪个，注入器会自动根据令牌匹配一个服务实例来给组件使用，如果匹配不到，则创建一个,并将实例引用赋予变量logger\n实际上，在angular实现中，向注入器注册提供商时，会把这个提供商和一个DI令牌关联起来了，注入器自身会维护一个内部的令牌-提供商映射表，在请求依赖会从这个映射表查找提供商实例，而令牌就是这个表的键值，这就是为什么请求时使用的是令牌\n\n##### （2）显式注入\n有两种显示注入方式，不过不提倡这么使用\n方式一：直接创建注入器\n\n    injector : any;\n    constructor() {\n      this.injector =\n           ReflectiveInjector.resolveAndCreate([Logger, HeroService]);\n      let logger = injector.get(Logger);\n    }\n\n方式二：直接使用注入器\n\n    heroService : any;\n    constructor(private injector: Injector) {}\n\n    ngOnInit() {\n        this.heroService = this.injector.get(HeroService);\n    }\n\n\n#### 4. 服务注入配置示意图\n服务注入的几个方面可以在下图得到体现\n![injector-config](/images/angular-inject-config.jpg)\n\n\n## 三. 多级注入系统\n点击[这里](https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html \"angular-多级注入器\")查看原文，这里只是作一些总结\n##### 1) 嵌套式注入器\nAngular多级依赖注入系统支持与组件树并行的嵌套式注入器，应用程序中有一个与组件树平行的注入器树，我们可以在组件树中的任何级别上重新配置注入器\n每个组件实例都有自己的注入器，也许说不对，组件可以没有注入器，但这时候说的组件的注入器可能是一个组件树中更高级的祖先注入器的代理，可以理解为组件存了上级注入器的一个指针，,这只是提升效率的实现细节，只要想象成每个组件都有自己的注入器就可以了。\n\n##### 2) 注入冒泡\nangular自下而上冒泡的方式匹配使用的服务依赖，具体来讲，当一个组件请求一个服务时，Angular 先尝试用本组件自己的注入器来满足它，如果在该组件的注入器没有找到对应的提供商，它就把这个请求转给它父组件的注入器来处理；如果父组件注入器也无法满足这个申请，则继续往上传递，一直到找到了一个能处理此请求的注入器，或者超出了组件树中的祖先位置还未找到，抛出一个错误\n\n##### 3) 不同层级再次提供同一个服务\n在应用实现中，可以在注入器树中的多个层次上为指定的依赖令牌重新注册提供商，即同一个服务可以在多个层级上重新配置，多个子注入器都具有该服务的实例，根据注入的冒泡匹配原则，遇到的第一个提供商实例会胜出\n因此，注入器树中间层注入器上的提供商，可以拦截来自底层的对特定服务的请求，导致它可以“重新配置”和者说“遮蔽”高层的注入器\n**带来的好处：**\n- 服务隔离,服务范围限制在组件内，别的组件不可访问\n- 组件特殊的提供商,下级组件可重新定义与上级同名的服务，定义自己特殊的实现\n- 多重编辑会话，每个组件实例拥有自己的服务实例，可以存放处理自己的数据\n\n\n#### 最后，一些好东西：\n1 . 在一个注入器的范围内，依赖都是单例的,比如在应用范围内的根注入器，各个依赖值都是单例的\n\n2 . 注入器同时会实例化Component这样的组件,为什么不标记他们为@Injectable()呢？因为没有必要，因为组件已经有@Component装饰器， 而@Component/@Directive/@Pipe等装饰器都是 @Injectable的子类\n\n3 . 可选依赖，使用@Optional()定义可选依赖，这样即使在注入器里没有这个服务，像这样：\n\n    import { Optional } from '@angular/core';\n    constructor(@Optional() private logger: Logger) {\n      if (this.logger) {\n        this.logger.log(some_message);\n      }\n    }\n这样的话在providers数组里可以不声明Logger，不会出错。不过使用的时候需要处理空值，因为当注入找不到这个服务时会返回一个null\n\n4 . 非类依赖服务\n当注入对象是一个字符串，函数或者接口对象时，没有对应的合适令牌可供使用，可采用InjectionToken作为提供商令牌，像这样：\n\n    //注入对像\n    export interface AppConfig {\n      apiEndpoint: string;\n      title: string;\n    }\n    export const HERO_DI_CONFIG: AppConfig = {\n      apiEndpoint: 'api.heroes.com',\n      title: 'Dependency Injection'\n    };\n\n    //令牌\n    import { InjectionToken } from '@angular/core';\n    export let APP_CONFIG = new InjectionToken<AppConfig>('app.config');\n\n    //提供商\n    providers: [{ provide: APP_CONFIG, useValue: HERO_DI_CONFIG }]\n\n    //使用@Inject装饰器帮忙注入使用\n    constructor(@Inject(APP_CONFIG) config: AppConfig) {\n      this.title = config.title;\n    }\n\n5 . getter值可直接作为变量应用于模板中，比如：\n\n    get hero() {return service.getOneHero();}\nhero可直接作为变量应用于模板表达式中\n\n6 . @host,用于组件的服务注入只能从上一级父组件查找实例，不再往更上一级的冒泡\n\n    constructor(@host() private logger: Logger) {\n      if (this.logger) {\n        this.logger.log(some_message);\n      }\n    }\n\n7 . 在根组件和根模块提供服务的区别\n- 根组件，注册的服务可在应用全局所有子组件内使用\n- 根组件，注册的服务可在全应用范围内有效，并且可在应用启动前提供部分服务\n\n8 . 不同级别的组件和模块可声明同名的服务，使用时注入器会根据冒泡的规则来进行第一匹配；通常，通过基类来作为令牌，派生的各个子类作为各级的真正供应商;\n\n    export class loger {\n        log : string;\n        get log() { return this.log;}\n        set log();\n    }\n\n    export class Deploger extends loger {\n        set log() {}\n    }\n\n    providers[{ provide: loger, useclass: Deploger}]\n    providers[{ provide: loger, useExsiting: Deploger}]\n\n使用这个方式还能控制服务API暴露的接口数\n\n9 . 注入服务到子类\n\n    export class baseHero {\n        constructor(private serviceA : ServiceA) {\n        }\n    }\n\n    export class Hero extends baseHero {\n        constructor(private service_A : ServiceA,private service_B : ServiceB) {\n            super(service_A);//初始化基类服务参数\n        }\n    }\n\n初始化时OnInit()的调用顺序：***子类 --> 基类***\n\n10 . 子组件注入父组件\n先认识下面两点：\n\n- 不能用基类注入父组件实例\n- 组件总是优先在自身的注入器中添加组件自己的实例的，所以理论上子组件可从注入中获取任何组件实例，包括父组件\n\n使用方式：\n\n    //父组件通过前向引用声明自己\n    providers[{ provide: Parent, useExsiting: forwardRef(() => ParentComponent)}]\n    constructor(@skipself() private parent: Parent) {\n          if (this.parent) {\n            this.parent.log(some_message);\n          }\n    }\n\n    //子组件注入使用\n        constructor(@host() private parent: Parent) {\n          if (this.parent) {\n            this.parent.log(some_message);\n          }\n        }\n\n@skipself()忽略自己\n\n可以使用const声名全局变量或或者方法：\n\n    const MAX_NUM = 10000；\n\n    //重构上面对父组件的注入声明\n    const provideParent =\n      (component: any, parentType?: any) => {\n        return { provide: parentType || Parent, useExisting: forwardRef(() => component) };\n      };\n    providers:  [ provideParent(BethComponent, DifferentParent) ]\n","slug":"angular-Injector","published":1,"updated":"2017-08-13T17:19:36.473Z","layout":"post","photos":[],"link":"","_id":"cjqwe42bd004wor0b17kb3htx","content":"<p>依赖注入是一种程序设计模式，指的是在应用构建里将所需的服务或者部件委托给第三方厂商提供，自身只关注应用逻辑，需要什么服务只需从厂商请求即可，而不用关心服务具体的创建过程和升级<br>相对于以前大而全的设计方式，这种思路的转变，可以使应用本身和所需的服务相对独立的开发和升级，而不用存在太大的耦合，下面是简单的示意图：<br><a id=\"more\"></a><br><img src=\"/images/inector-design.jpg\" alt=\"inector-design\"><br>在angular里，自带的“依赖注入框架”和注入器就扮演着这样的一个角色，为构建angular应用的服务需求提供了可靠的提供机制，简便了应用的搭建</p>\n<h2 id=\"一-注入器树\"><a href=\"#一-注入器树\" class=\"headerlink\" title=\"一. 注入器树\"></a>一. 注入器树</h2><p>注入器树时angular基本树之一，在官方的<a href=\"https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html\" title=\"angular-多级注入器\" target=\"_blank\" rel=\"external\">angular高级文档-多级注入器</a>一章里已经作了相对清晰的讲解，描述的是和另一基本树-组件树平级对应的注入器，组件树里的每一个组件节点都可以拥有自己的注入器，于是便有了这个注入器树，这个很好理解<br>这里不再赘述，这里要描述的是由angular中多个不同类型注入器组成的多级注入器树<br>在angular中，根据注入器的启动时间和使用范围的不同，可划分为以下几种:</p>\n<ul>\n<li>根注入器<br>在main.ts里引导启动应用时，即创建了根注入器，整个应用范围内有效；除了根模块的privodes里的供应商直接注册到根注入器之外，直接导入到根模块的其他模块里的供应商也是注册根注入器</li>\n<li>模块子注入器<br>指懒加载模块内的注入器，在加载后启动，使用范围限于本模块，供应商注册在子注入器中，包括被导入模块的供应商</li>\n<li>组件注入器<br>指组件内的注入器，供应商在组件的privode数组内声明，只在组件和子组件范围内有效，且每个组件实例都有一份属于自己的注入器。在组件级提供服务可以确保组件的每个实例都得到一个自己的、私有的服务实例</li>\n</ul>\n<p>多级注入器树由这些不同的注入器构成，树的结构与模块/组件的组织有着相似的层级和对应关系，下图是一个简单的注入器树示意：<br><img src=\"/images/injector-tree.jpg\" alt=\"injector-tree\"></p>\n<h2 id=\"二-服务的注入\"><a href=\"#二-服务的注入\" class=\"headerlink\" title=\"二.服务的注入\"></a>二.服务的注入</h2><p>angular应用中配置使用注入服务需要定义可注入服务，注册供应商，服务请求等几个步骤，下面描述一下：</p>\n<h4 id=\"1-声明可注入服务\"><a href=\"#1-声明可注入服务\" class=\"headerlink\" title=\"1. 声明可注入服务\"></a>1. 声明可注入服务</h4><p>使用@Injectable()声明可注入服务，Injectable标识一个类可以被注入器实例化，示例如下：</p>\n<pre><code>import { Injectable } from &apos;@angular/core&apos;;\nimport { HEROES }     from &apos;./mock-heroes&apos;;\nimport { Logger }     from &apos;../logger.service&apos;;\n@Injectable()\nexport class HeroService {\n  constructor(private logger: Logger) {  }\n  getHeroes() {\n    this.logger.log(&apos;Getting heroes ...&apos;);\n    return HEROES;\n  }\n}\n</code></pre><p>@Injectable()装饰器把一个类标识为注入器实例化的目标，试图实例化没有被标识Injectable的类时，注入器会报错。</p>\n<h4 id=\"2-注册提供商\"><a href=\"#2-注册提供商\" class=\"headerlink\" title=\"2. 注册提供商\"></a>2. 注册提供商</h4><p><strong>什么是提供商</strong><br>提供商即服务供应商，提供了依赖值的一个具体的版本，指导注入器如何创建服务。注入器依靠提供商提供的版本来创建服务实例，然后将服务的实例注入组件或其它服务</p>\n<p><strong>提供商的种类</strong><br>提供商没有严格的定义，可以有很多种，只要它们能交付一个行为类似的对象即可，比如：类、对象、工厂函数、变量值等</p>\n<p><strong>提供商声明</strong><br>(1) 类供应商<br>providers：[{ provide: key令牌, useClass: 对象实例 }]  比如：</p>\n<pre><code>providers：[{ provide: Logger, useClass: Logger }]\nproviders：[Logger] //简化版\n</code></pre><p>(2) 备选服务供应商<br>使用超类作key令牌，子类作为实例化类，例如：</p>\n<pre><code>@Injectable()\nclass EvenBetterLogger extends Logger {\n  constructor(private userService: UserService) { super(); }\n\n  log(message: string) {\n    let name = this.userService.user.name;\n    super.log(`Message to ${name}: ${message}`);\n  }\n}\n\nproviders：[{ provide: Logger, useClass: EvenBetterLogger}]\n</code></pre><p>(3) 别名服务供应商<br>使用已定义的类作为实例化类，其他类名作key令牌，例如：</p>\n<pre><code>providers：[NewLogger，\n           { provide: Logger, useExisting: NewLogger}]\n</code></pre><p>(3) 值依赖供应商<br>使用一个对象或者变量作为供应商对像，这在一些全局参数配置中有重要的用处，例如：</p>\n<pre><code>const silentLogger = {\n  logs: [&apos;Silent logger says &quot;Shhhhh!&quot;. Provided via &quot;useValue&quot;&apos;],\n  log: () =&gt; {}\n};\n\nproviders：[{ provide: Logger, useValue: silentLogger}]\n</code></pre><p>注意：供应商在一个注入器中不能重复注册，否则会出现多个相同的实例，这是不被期望的</p>\n<h4 id=\"3-服务注入请求\"><a href=\"#3-服务注入请求\" class=\"headerlink\" title=\"3. 服务注入请求\"></a>3. 服务注入请求</h4><p>作为重要的一步是用户如何进行注入请求，因为服务最终是要用于应用中，否则前面的配置都没有什么意义，服务注入分为隐式注入和显式注入两种</p>\n<h5 id=\"（1）隐式注入\"><a href=\"#（1）隐式注入\" class=\"headerlink\" title=\"（1）隐式注入\"></a>（1）隐式注入</h5><p>最常见的注入配置时在我们组件构造函数里通过供应商令牌进行服务申请，比如：</p>\n<pre><code>constructor(private logger: Logger) {}\n</code></pre><p>constructor声明 + @component + provide供应商数组 共同指示注入器要注入服务实例，以及怎么进行注入<br>注意，我们在请求时是使用的供应商令牌来向注入器请求的，即上一节中的provide字段，而不管对应的实际供应商类或对象时哪个，注入器会自动根据令牌匹配一个服务实例来给组件使用，如果匹配不到，则创建一个,并将实例引用赋予变量logger<br>实际上，在angular实现中，向注入器注册提供商时，会把这个提供商和一个DI令牌关联起来了，注入器自身会维护一个内部的令牌-提供商映射表，在请求依赖会从这个映射表查找提供商实例，而令牌就是这个表的键值，这就是为什么请求时使用的是令牌</p>\n<h5 id=\"（2）显式注入\"><a href=\"#（2）显式注入\" class=\"headerlink\" title=\"（2）显式注入\"></a>（2）显式注入</h5><p>有两种显示注入方式，不过不提倡这么使用<br>方式一：直接创建注入器</p>\n<pre><code>injector : any;\nconstructor() {\n  this.injector =\n       ReflectiveInjector.resolveAndCreate([Logger, HeroService]);\n  let logger = injector.get(Logger);\n}\n</code></pre><p>方式二：直接使用注入器</p>\n<pre><code>heroService : any;\nconstructor(private injector: Injector) {}\n\nngOnInit() {\n    this.heroService = this.injector.get(HeroService);\n}\n</code></pre><h4 id=\"4-服务注入配置示意图\"><a href=\"#4-服务注入配置示意图\" class=\"headerlink\" title=\"4. 服务注入配置示意图\"></a>4. 服务注入配置示意图</h4><p>服务注入的几个方面可以在下图得到体现<br><img src=\"/images/angular-inject-config.jpg\" alt=\"injector-config\"></p>\n<h2 id=\"三-多级注入系统\"><a href=\"#三-多级注入系统\" class=\"headerlink\" title=\"三. 多级注入系统\"></a>三. 多级注入系统</h2><p>点击<a href=\"https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html\" title=\"angular-多级注入器\" target=\"_blank\" rel=\"external\">这里</a>查看原文，这里只是作一些总结</p>\n<h5 id=\"1-嵌套式注入器\"><a href=\"#1-嵌套式注入器\" class=\"headerlink\" title=\"1) 嵌套式注入器\"></a>1) 嵌套式注入器</h5><p>Angular多级依赖注入系统支持与组件树并行的嵌套式注入器，应用程序中有一个与组件树平行的注入器树，我们可以在组件树中的任何级别上重新配置注入器<br>每个组件实例都有自己的注入器，也许说不对，组件可以没有注入器，但这时候说的组件的注入器可能是一个组件树中更高级的祖先注入器的代理，可以理解为组件存了上级注入器的一个指针，,这只是提升效率的实现细节，只要想象成每个组件都有自己的注入器就可以了。</p>\n<h5 id=\"2-注入冒泡\"><a href=\"#2-注入冒泡\" class=\"headerlink\" title=\"2) 注入冒泡\"></a>2) 注入冒泡</h5><p>angular自下而上冒泡的方式匹配使用的服务依赖，具体来讲，当一个组件请求一个服务时，Angular 先尝试用本组件自己的注入器来满足它，如果在该组件的注入器没有找到对应的提供商，它就把这个请求转给它父组件的注入器来处理；如果父组件注入器也无法满足这个申请，则继续往上传递，一直到找到了一个能处理此请求的注入器，或者超出了组件树中的祖先位置还未找到，抛出一个错误</p>\n<h5 id=\"3-不同层级再次提供同一个服务\"><a href=\"#3-不同层级再次提供同一个服务\" class=\"headerlink\" title=\"3) 不同层级再次提供同一个服务\"></a>3) 不同层级再次提供同一个服务</h5><p>在应用实现中，可以在注入器树中的多个层次上为指定的依赖令牌重新注册提供商，即同一个服务可以在多个层级上重新配置，多个子注入器都具有该服务的实例，根据注入的冒泡匹配原则，遇到的第一个提供商实例会胜出<br>因此，注入器树中间层注入器上的提供商，可以拦截来自底层的对特定服务的请求，导致它可以“重新配置”和者说“遮蔽”高层的注入器<br><strong>带来的好处：</strong></p>\n<ul>\n<li>服务隔离,服务范围限制在组件内，别的组件不可访问</li>\n<li>组件特殊的提供商,下级组件可重新定义与上级同名的服务，定义自己特殊的实现</li>\n<li>多重编辑会话，每个组件实例拥有自己的服务实例，可以存放处理自己的数据</li>\n</ul>\n<h4 id=\"最后，一些好东西：\"><a href=\"#最后，一些好东西：\" class=\"headerlink\" title=\"最后，一些好东西：\"></a>最后，一些好东西：</h4><p>1 . 在一个注入器的范围内，依赖都是单例的,比如在应用范围内的根注入器，各个依赖值都是单例的</p>\n<p>2 . 注入器同时会实例化Component这样的组件,为什么不标记他们为@Injectable()呢？因为没有必要，因为组件已经有@Component装饰器， 而@Component/@Directive/@Pipe等装饰器都是 @Injectable的子类</p>\n<p>3 . 可选依赖，使用@Optional()定义可选依赖，这样即使在注入器里没有这个服务，像这样：</p>\n<pre><code>import { Optional } from &apos;@angular/core&apos;;\nconstructor(@Optional() private logger: Logger) {\n  if (this.logger) {\n    this.logger.log(some_message);\n  }\n}\n</code></pre><p>这样的话在providers数组里可以不声明Logger，不会出错。不过使用的时候需要处理空值，因为当注入找不到这个服务时会返回一个null</p>\n<p>4 . 非类依赖服务<br>当注入对象是一个字符串，函数或者接口对象时，没有对应的合适令牌可供使用，可采用InjectionToken作为提供商令牌，像这样：</p>\n<pre><code>//注入对像\nexport interface AppConfig {\n  apiEndpoint: string;\n  title: string;\n}\nexport const HERO_DI_CONFIG: AppConfig = {\n  apiEndpoint: &apos;api.heroes.com&apos;,\n  title: &apos;Dependency Injection&apos;\n};\n\n//令牌\nimport { InjectionToken } from &apos;@angular/core&apos;;\nexport let APP_CONFIG = new InjectionToken&lt;AppConfig&gt;(&apos;app.config&apos;);\n\n//提供商\nproviders: [{ provide: APP_CONFIG, useValue: HERO_DI_CONFIG }]\n\n//使用@Inject装饰器帮忙注入使用\nconstructor(@Inject(APP_CONFIG) config: AppConfig) {\n  this.title = config.title;\n}\n</code></pre><p>5 . getter值可直接作为变量应用于模板中，比如：</p>\n<pre><code>get hero() {return service.getOneHero();}\n</code></pre><p>hero可直接作为变量应用于模板表达式中</p>\n<p>6 . @host,用于组件的服务注入只能从上一级父组件查找实例，不再往更上一级的冒泡</p>\n<pre><code>constructor(@host() private logger: Logger) {\n  if (this.logger) {\n    this.logger.log(some_message);\n  }\n}\n</code></pre><p>7 . 在根组件和根模块提供服务的区别</p>\n<ul>\n<li>根组件，注册的服务可在应用全局所有子组件内使用</li>\n<li>根组件，注册的服务可在全应用范围内有效，并且可在应用启动前提供部分服务</li>\n</ul>\n<p>8 . 不同级别的组件和模块可声明同名的服务，使用时注入器会根据冒泡的规则来进行第一匹配；通常，通过基类来作为令牌，派生的各个子类作为各级的真正供应商;</p>\n<pre><code>export class loger {\n    log : string;\n    get log() { return this.log;}\n    set log();\n}\n\nexport class Deploger extends loger {\n    set log() {}\n}\n\nproviders[{ provide: loger, useclass: Deploger}]\nproviders[{ provide: loger, useExsiting: Deploger}]\n</code></pre><p>使用这个方式还能控制服务API暴露的接口数</p>\n<p>9 . 注入服务到子类</p>\n<pre><code>export class baseHero {\n    constructor(private serviceA : ServiceA) {\n    }\n}\n\nexport class Hero extends baseHero {\n    constructor(private service_A : ServiceA,private service_B : ServiceB) {\n        super(service_A);//初始化基类服务参数\n    }\n}\n</code></pre><p>初始化时OnInit()的调用顺序：<strong><em>子类 –&gt; 基类</em></strong></p>\n<p>10 . 子组件注入父组件<br>先认识下面两点：</p>\n<ul>\n<li>不能用基类注入父组件实例</li>\n<li>组件总是优先在自身的注入器中添加组件自己的实例的，所以理论上子组件可从注入中获取任何组件实例，包括父组件</li>\n</ul>\n<p>使用方式：</p>\n<pre><code>//父组件通过前向引用声明自己\nproviders[{ provide: Parent, useExsiting: forwardRef(() =&gt; ParentComponent)}]\nconstructor(@skipself() private parent: Parent) {\n      if (this.parent) {\n        this.parent.log(some_message);\n      }\n}\n\n//子组件注入使用\n    constructor(@host() private parent: Parent) {\n      if (this.parent) {\n        this.parent.log(some_message);\n      }\n    }\n</code></pre><p>@skipself()忽略自己</p>\n<p>可以使用const声名全局变量或或者方法：</p>\n<pre><code>const MAX_NUM = 10000；\n\n//重构上面对父组件的注入声明\nconst provideParent =\n  (component: any, parentType?: any) =&gt; {\n    return { provide: parentType || Parent, useExisting: forwardRef(() =&gt; component) };\n  };\nproviders:  [ provideParent(BethComponent, DifferentParent) ]\n</code></pre>","site":{"data":{}},"excerpt":"<p>依赖注入是一种程序设计模式，指的是在应用构建里将所需的服务或者部件委托给第三方厂商提供，自身只关注应用逻辑，需要什么服务只需从厂商请求即可，而不用关心服务具体的创建过程和升级<br>相对于以前大而全的设计方式，这种思路的转变，可以使应用本身和所需的服务相对独立的开发和升级，而不用存在太大的耦合，下面是简单的示意图：<br>","more":"<br><img src=\"/images/inector-design.jpg\" alt=\"inector-design\"><br>在angular里，自带的“依赖注入框架”和注入器就扮演着这样的一个角色，为构建angular应用的服务需求提供了可靠的提供机制，简便了应用的搭建</p>\n<h2 id=\"一-注入器树\"><a href=\"#一-注入器树\" class=\"headerlink\" title=\"一. 注入器树\"></a>一. 注入器树</h2><p>注入器树时angular基本树之一，在官方的<a href=\"https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html\" title=\"angular-多级注入器\" target=\"_blank\" rel=\"external\">angular高级文档-多级注入器</a>一章里已经作了相对清晰的讲解，描述的是和另一基本树-组件树平级对应的注入器，组件树里的每一个组件节点都可以拥有自己的注入器，于是便有了这个注入器树，这个很好理解<br>这里不再赘述，这里要描述的是由angular中多个不同类型注入器组成的多级注入器树<br>在angular中，根据注入器的启动时间和使用范围的不同，可划分为以下几种:</p>\n<ul>\n<li>根注入器<br>在main.ts里引导启动应用时，即创建了根注入器，整个应用范围内有效；除了根模块的privodes里的供应商直接注册到根注入器之外，直接导入到根模块的其他模块里的供应商也是注册根注入器</li>\n<li>模块子注入器<br>指懒加载模块内的注入器，在加载后启动，使用范围限于本模块，供应商注册在子注入器中，包括被导入模块的供应商</li>\n<li>组件注入器<br>指组件内的注入器，供应商在组件的privode数组内声明，只在组件和子组件范围内有效，且每个组件实例都有一份属于自己的注入器。在组件级提供服务可以确保组件的每个实例都得到一个自己的、私有的服务实例</li>\n</ul>\n<p>多级注入器树由这些不同的注入器构成，树的结构与模块/组件的组织有着相似的层级和对应关系，下图是一个简单的注入器树示意：<br><img src=\"/images/injector-tree.jpg\" alt=\"injector-tree\"></p>\n<h2 id=\"二-服务的注入\"><a href=\"#二-服务的注入\" class=\"headerlink\" title=\"二.服务的注入\"></a>二.服务的注入</h2><p>angular应用中配置使用注入服务需要定义可注入服务，注册供应商，服务请求等几个步骤，下面描述一下：</p>\n<h4 id=\"1-声明可注入服务\"><a href=\"#1-声明可注入服务\" class=\"headerlink\" title=\"1. 声明可注入服务\"></a>1. 声明可注入服务</h4><p>使用@Injectable()声明可注入服务，Injectable标识一个类可以被注入器实例化，示例如下：</p>\n<pre><code>import { Injectable } from &apos;@angular/core&apos;;\nimport { HEROES }     from &apos;./mock-heroes&apos;;\nimport { Logger }     from &apos;../logger.service&apos;;\n@Injectable()\nexport class HeroService {\n  constructor(private logger: Logger) {  }\n  getHeroes() {\n    this.logger.log(&apos;Getting heroes ...&apos;);\n    return HEROES;\n  }\n}\n</code></pre><p>@Injectable()装饰器把一个类标识为注入器实例化的目标，试图实例化没有被标识Injectable的类时，注入器会报错。</p>\n<h4 id=\"2-注册提供商\"><a href=\"#2-注册提供商\" class=\"headerlink\" title=\"2. 注册提供商\"></a>2. 注册提供商</h4><p><strong>什么是提供商</strong><br>提供商即服务供应商，提供了依赖值的一个具体的版本，指导注入器如何创建服务。注入器依靠提供商提供的版本来创建服务实例，然后将服务的实例注入组件或其它服务</p>\n<p><strong>提供商的种类</strong><br>提供商没有严格的定义，可以有很多种，只要它们能交付一个行为类似的对象即可，比如：类、对象、工厂函数、变量值等</p>\n<p><strong>提供商声明</strong><br>(1) 类供应商<br>providers：[{ provide: key令牌, useClass: 对象实例 }]  比如：</p>\n<pre><code>providers：[{ provide: Logger, useClass: Logger }]\nproviders：[Logger] //简化版\n</code></pre><p>(2) 备选服务供应商<br>使用超类作key令牌，子类作为实例化类，例如：</p>\n<pre><code>@Injectable()\nclass EvenBetterLogger extends Logger {\n  constructor(private userService: UserService) { super(); }\n\n  log(message: string) {\n    let name = this.userService.user.name;\n    super.log(`Message to ${name}: ${message}`);\n  }\n}\n\nproviders：[{ provide: Logger, useClass: EvenBetterLogger}]\n</code></pre><p>(3) 别名服务供应商<br>使用已定义的类作为实例化类，其他类名作key令牌，例如：</p>\n<pre><code>providers：[NewLogger，\n           { provide: Logger, useExisting: NewLogger}]\n</code></pre><p>(3) 值依赖供应商<br>使用一个对象或者变量作为供应商对像，这在一些全局参数配置中有重要的用处，例如：</p>\n<pre><code>const silentLogger = {\n  logs: [&apos;Silent logger says &quot;Shhhhh!&quot;. Provided via &quot;useValue&quot;&apos;],\n  log: () =&gt; {}\n};\n\nproviders：[{ provide: Logger, useValue: silentLogger}]\n</code></pre><p>注意：供应商在一个注入器中不能重复注册，否则会出现多个相同的实例，这是不被期望的</p>\n<h4 id=\"3-服务注入请求\"><a href=\"#3-服务注入请求\" class=\"headerlink\" title=\"3. 服务注入请求\"></a>3. 服务注入请求</h4><p>作为重要的一步是用户如何进行注入请求，因为服务最终是要用于应用中，否则前面的配置都没有什么意义，服务注入分为隐式注入和显式注入两种</p>\n<h5 id=\"（1）隐式注入\"><a href=\"#（1）隐式注入\" class=\"headerlink\" title=\"（1）隐式注入\"></a>（1）隐式注入</h5><p>最常见的注入配置时在我们组件构造函数里通过供应商令牌进行服务申请，比如：</p>\n<pre><code>constructor(private logger: Logger) {}\n</code></pre><p>constructor声明 + @component + provide供应商数组 共同指示注入器要注入服务实例，以及怎么进行注入<br>注意，我们在请求时是使用的供应商令牌来向注入器请求的，即上一节中的provide字段，而不管对应的实际供应商类或对象时哪个，注入器会自动根据令牌匹配一个服务实例来给组件使用，如果匹配不到，则创建一个,并将实例引用赋予变量logger<br>实际上，在angular实现中，向注入器注册提供商时，会把这个提供商和一个DI令牌关联起来了，注入器自身会维护一个内部的令牌-提供商映射表，在请求依赖会从这个映射表查找提供商实例，而令牌就是这个表的键值，这就是为什么请求时使用的是令牌</p>\n<h5 id=\"（2）显式注入\"><a href=\"#（2）显式注入\" class=\"headerlink\" title=\"（2）显式注入\"></a>（2）显式注入</h5><p>有两种显示注入方式，不过不提倡这么使用<br>方式一：直接创建注入器</p>\n<pre><code>injector : any;\nconstructor() {\n  this.injector =\n       ReflectiveInjector.resolveAndCreate([Logger, HeroService]);\n  let logger = injector.get(Logger);\n}\n</code></pre><p>方式二：直接使用注入器</p>\n<pre><code>heroService : any;\nconstructor(private injector: Injector) {}\n\nngOnInit() {\n    this.heroService = this.injector.get(HeroService);\n}\n</code></pre><h4 id=\"4-服务注入配置示意图\"><a href=\"#4-服务注入配置示意图\" class=\"headerlink\" title=\"4. 服务注入配置示意图\"></a>4. 服务注入配置示意图</h4><p>服务注入的几个方面可以在下图得到体现<br><img src=\"/images/angular-inject-config.jpg\" alt=\"injector-config\"></p>\n<h2 id=\"三-多级注入系统\"><a href=\"#三-多级注入系统\" class=\"headerlink\" title=\"三. 多级注入系统\"></a>三. 多级注入系统</h2><p>点击<a href=\"https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html\" title=\"angular-多级注入器\" target=\"_blank\" rel=\"external\">这里</a>查看原文，这里只是作一些总结</p>\n<h5 id=\"1-嵌套式注入器\"><a href=\"#1-嵌套式注入器\" class=\"headerlink\" title=\"1) 嵌套式注入器\"></a>1) 嵌套式注入器</h5><p>Angular多级依赖注入系统支持与组件树并行的嵌套式注入器，应用程序中有一个与组件树平行的注入器树，我们可以在组件树中的任何级别上重新配置注入器<br>每个组件实例都有自己的注入器，也许说不对，组件可以没有注入器，但这时候说的组件的注入器可能是一个组件树中更高级的祖先注入器的代理，可以理解为组件存了上级注入器的一个指针，,这只是提升效率的实现细节，只要想象成每个组件都有自己的注入器就可以了。</p>\n<h5 id=\"2-注入冒泡\"><a href=\"#2-注入冒泡\" class=\"headerlink\" title=\"2) 注入冒泡\"></a>2) 注入冒泡</h5><p>angular自下而上冒泡的方式匹配使用的服务依赖，具体来讲，当一个组件请求一个服务时，Angular 先尝试用本组件自己的注入器来满足它，如果在该组件的注入器没有找到对应的提供商，它就把这个请求转给它父组件的注入器来处理；如果父组件注入器也无法满足这个申请，则继续往上传递，一直到找到了一个能处理此请求的注入器，或者超出了组件树中的祖先位置还未找到，抛出一个错误</p>\n<h5 id=\"3-不同层级再次提供同一个服务\"><a href=\"#3-不同层级再次提供同一个服务\" class=\"headerlink\" title=\"3) 不同层级再次提供同一个服务\"></a>3) 不同层级再次提供同一个服务</h5><p>在应用实现中，可以在注入器树中的多个层次上为指定的依赖令牌重新注册提供商，即同一个服务可以在多个层级上重新配置，多个子注入器都具有该服务的实例，根据注入的冒泡匹配原则，遇到的第一个提供商实例会胜出<br>因此，注入器树中间层注入器上的提供商，可以拦截来自底层的对特定服务的请求，导致它可以“重新配置”和者说“遮蔽”高层的注入器<br><strong>带来的好处：</strong></p>\n<ul>\n<li>服务隔离,服务范围限制在组件内，别的组件不可访问</li>\n<li>组件特殊的提供商,下级组件可重新定义与上级同名的服务，定义自己特殊的实现</li>\n<li>多重编辑会话，每个组件实例拥有自己的服务实例，可以存放处理自己的数据</li>\n</ul>\n<h4 id=\"最后，一些好东西：\"><a href=\"#最后，一些好东西：\" class=\"headerlink\" title=\"最后，一些好东西：\"></a>最后，一些好东西：</h4><p>1 . 在一个注入器的范围内，依赖都是单例的,比如在应用范围内的根注入器，各个依赖值都是单例的</p>\n<p>2 . 注入器同时会实例化Component这样的组件,为什么不标记他们为@Injectable()呢？因为没有必要，因为组件已经有@Component装饰器， 而@Component/@Directive/@Pipe等装饰器都是 @Injectable的子类</p>\n<p>3 . 可选依赖，使用@Optional()定义可选依赖，这样即使在注入器里没有这个服务，像这样：</p>\n<pre><code>import { Optional } from &apos;@angular/core&apos;;\nconstructor(@Optional() private logger: Logger) {\n  if (this.logger) {\n    this.logger.log(some_message);\n  }\n}\n</code></pre><p>这样的话在providers数组里可以不声明Logger，不会出错。不过使用的时候需要处理空值，因为当注入找不到这个服务时会返回一个null</p>\n<p>4 . 非类依赖服务<br>当注入对象是一个字符串，函数或者接口对象时，没有对应的合适令牌可供使用，可采用InjectionToken作为提供商令牌，像这样：</p>\n<pre><code>//注入对像\nexport interface AppConfig {\n  apiEndpoint: string;\n  title: string;\n}\nexport const HERO_DI_CONFIG: AppConfig = {\n  apiEndpoint: &apos;api.heroes.com&apos;,\n  title: &apos;Dependency Injection&apos;\n};\n\n//令牌\nimport { InjectionToken } from &apos;@angular/core&apos;;\nexport let APP_CONFIG = new InjectionToken&lt;AppConfig&gt;(&apos;app.config&apos;);\n\n//提供商\nproviders: [{ provide: APP_CONFIG, useValue: HERO_DI_CONFIG }]\n\n//使用@Inject装饰器帮忙注入使用\nconstructor(@Inject(APP_CONFIG) config: AppConfig) {\n  this.title = config.title;\n}\n</code></pre><p>5 . getter值可直接作为变量应用于模板中，比如：</p>\n<pre><code>get hero() {return service.getOneHero();}\n</code></pre><p>hero可直接作为变量应用于模板表达式中</p>\n<p>6 . @host,用于组件的服务注入只能从上一级父组件查找实例，不再往更上一级的冒泡</p>\n<pre><code>constructor(@host() private logger: Logger) {\n  if (this.logger) {\n    this.logger.log(some_message);\n  }\n}\n</code></pre><p>7 . 在根组件和根模块提供服务的区别</p>\n<ul>\n<li>根组件，注册的服务可在应用全局所有子组件内使用</li>\n<li>根组件，注册的服务可在全应用范围内有效，并且可在应用启动前提供部分服务</li>\n</ul>\n<p>8 . 不同级别的组件和模块可声明同名的服务，使用时注入器会根据冒泡的规则来进行第一匹配；通常，通过基类来作为令牌，派生的各个子类作为各级的真正供应商;</p>\n<pre><code>export class loger {\n    log : string;\n    get log() { return this.log;}\n    set log();\n}\n\nexport class Deploger extends loger {\n    set log() {}\n}\n\nproviders[{ provide: loger, useclass: Deploger}]\nproviders[{ provide: loger, useExsiting: Deploger}]\n</code></pre><p>使用这个方式还能控制服务API暴露的接口数</p>\n<p>9 . 注入服务到子类</p>\n<pre><code>export class baseHero {\n    constructor(private serviceA : ServiceA) {\n    }\n}\n\nexport class Hero extends baseHero {\n    constructor(private service_A : ServiceA,private service_B : ServiceB) {\n        super(service_A);//初始化基类服务参数\n    }\n}\n</code></pre><p>初始化时OnInit()的调用顺序：<strong><em>子类 –&gt; 基类</em></strong></p>\n<p>10 . 子组件注入父组件<br>先认识下面两点：</p>\n<ul>\n<li>不能用基类注入父组件实例</li>\n<li>组件总是优先在自身的注入器中添加组件自己的实例的，所以理论上子组件可从注入中获取任何组件实例，包括父组件</li>\n</ul>\n<p>使用方式：</p>\n<pre><code>//父组件通过前向引用声明自己\nproviders[{ provide: Parent, useExsiting: forwardRef(() =&gt; ParentComponent)}]\nconstructor(@skipself() private parent: Parent) {\n      if (this.parent) {\n        this.parent.log(some_message);\n      }\n}\n\n//子组件注入使用\n    constructor(@host() private parent: Parent) {\n      if (this.parent) {\n        this.parent.log(some_message);\n      }\n    }\n</code></pre><p>@skipself()忽略自己</p>\n<p>可以使用const声名全局变量或或者方法：</p>\n<pre><code>const MAX_NUM = 10000；\n\n//重构上面对父组件的注入声明\nconst provideParent =\n  (component: any, parentType?: any) =&gt; {\n    return { provide: parentType || Parent, useExisting: forwardRef(() =&gt; component) };\n  };\nproviders:  [ provideParent(BethComponent, DifferentParent) ]\n</code></pre>"},{"title":"表单-模板驱动构建表单","date":"2017-11-21T16:36:58.000Z","comments":1,"_content":"\n## 什么是模板驱动表单\n\n模板驱动表单是angular构建表单的一种方式，特点是使用常用html标签来构建表单框架，而内部的逻辑由angular自动完成，比如：form,会自动创建ngForm指令，来表单整体的数据和校验处理\n<!--more-->\n\n## 构建结构\n\n模板驱动表单构建包含输入，校验，提交等一些常用的交互，主要结构图如下：\n![template_form](/images/template_form.jpg)\n\n**1.ngForm**\n\n表单的整体架构，遇到`<form>`标签时会自动为表单创建ngForm指令，用以管理表单，它有有以下作用：\n\n- 存在整体表单的数据和状态，比如：value，valid，可以通过模板引用变量直接访问它们\n- 管理表单内部的子控件，比如：根据name和ngModel来创建FormControl指令，等等\n\n\n        <form #myform=\"ngForm\">\n            <input type=\"text\" [(ngModel)]=\"name\" name=\"name\">\n            <input type=\"text\" [(ngModel)]=\"age\" name=\"age\">\n            <div ngModelGroup=\"address\" #address=\"ngModelGroup\">\n                <input type=\"text\" [(ngModel)]=\"country\" name=\"country\">\n                <input type=\"text\" [(ngModel)]=\"city\" name=\"city\">\n            </div>\n        </div>\n        </form>\n        <p>{{myform.value}}</p>\n\n它的value是所有控件的数据对象：\n\n    {\n        'name': 'aaa',\n        'age': 18,\n        'address: {\n            'country': '',\n            'city': ''\n         }\n    }\n\n**2.ngModel**\n表单控件的主要指令，用户和用户的数据交互，一般用于input标签中，进行数据绑定\n\n    <input type=\"text\" [(ngModel)]=\"name\" name=\"name\">\n\n其中，name是必须的，系统需要以name为唯一标识来为ngModel创建控件FormControl指令，加入到ngForm管理的FormControl指令集合中，而name是管理的key\n\n**3.ngModelGroup**\n用来组合一组的数据输入，比如地址包括：国家，城市，街道，这三个是独立的输入，组合成一个输入Group,它也有自己的value和状态\n\n        <div ngModelGroup=\"address\" #address=\"ngModelGroup\">\n            <input type=\"text\" [(ngModel)]=\"country\" name=\"country\">\n            <input type=\"text\" [(ngModel)]=\"city\" name=\"city\">\n        </div>\n        <p>{{address.value}}</p>\n\n它的value是所有控件的数据对象：\n\n    address: {\n        'country': '',\n        'city': ''\n    }\n\n**4.ngSubmit**\n用来进行表单的提交，当button标签不指定type时，默认type就是submit，所以点击时候会出发提交事件，而form就捕获了这个事件，来完成提交的自定义动作;\n当然也可以制定type=\"button\"来避免这个事件，这样就可以直接使用点击事件来处理提交动作了\n例如，下面两种写法的结果是一样的：\n\n        <form #myform=\"ngForm\" (ngSubmit)=\"add()\">\n            <input type=\"text\" [(ngModel)]=\"name\" name=\"name\">\n            <input type=\"text\" [(ngModel)]=\"age\" name=\"age\">\n\n            <button>OK</button>\n        </div>\n\n        <form #myform=\"ngForm\">\n            <input type=\"text\" [(ngModel)]=\"name\" name=\"name\">\n            <input type=\"text\" [(ngModel)]=\"age\" name=\"age\">\n\n            <button type=\"button\" (click)=\"add()\">OK</button>\n        </div>\n\n**5.内置状态跟踪和校验**\n表单控件和输入控件都有内置的状态，可以进行状态判断：\n\n- valid: 表单或控件是否有效，当requied控件的值都有效的时候true\n- pristine： 表单或控件的值是否是纯的和未改变过的，初始值为true\n- dirty: 表单或控件的值是否已改变过，初始值为false\n- touched: 表单或控件的值是否已访问过，初始值为false,访问过后失去焦点以后变为true\n- untouched: 表单或控件的值是否已访问过，初始值为true\n\n常用内置校验指令：\n\n- required\n- minlength\n- maxlength\n- pattern\n\n直接在标签上使用即可，angular会自动为之创建指令实例\n\n\n**6.表单状态样式类**\n对应于状态值，有相应的内置样式：\n- valid --> ng-valid    ng-invalid\n- dirty --> ng-dirty    ng-pristine\n- touch --> ng-touched  ng-untouched\n\n\n## 完整表单例子\n\n上面描述了模板驱动表单的一些东西，下面是一个完整的构建例子，代码如下：\n\nComponent.ts\n\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'template-form',\n      templateUrl: './template-form.component.html',\n      styleUrls: ['./template-form.component.css']\n    })\n    export class TemplateFormComponent {\n      name : any;\n      sexs : any[] = [{'name':'女','value':'famale'},{'name':'男','value':'male'}];\n      age : any = 18;\n      selectSex : any = 'male';\n      password : any;\n      address : any = {'country': '','city': ''};\n      shengri : any = '1990-01-01';\n      likes : any[] = [{'name':'看电视','value':'Watch Tv','isChecked':false},\n                       {'name':'读书','value':'Book','isChecked':false}];\n      selectLike : any = '';\n      skills : any[] = [{'value':'','isChecked':false}];\n      baocuns : any[] = [{'name':'是','value':'Yes','isChecked':false},{'name':'否','value':'No','isChecked':false}];\n      selectbao : any;\n\n      selectLikes() {\n        this.selectLike = '';\n        this.likes.forEach((like) => {\n          if(like.isChecked) {\n            this.selectLike += like.value + '; ';\n          }\n        });\n      }\n\n      addSkill() {\n        let temp = {'value':'','isChecked':false};\n        this.skills.push(temp);\n      }\n\n      delSkill(item : any) {\n        let index = this.skills.indexOf(item);\n        if(index !== -1) {\n          this.skills.splice(index,1);\n        }\n      }\n\n      save() {\n        console.log('===save===');\n      }\n    }\n\nComponent.html\n\n    <form #tForm=\"ngForm\" (ngSubmit)=\"save()\">\n      <div class=\"form-group\">\n        <label>姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" name=\"name\" [(ngModel)]=\"name\" minlength=\"3\" required #name1=\"ngModel\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n      <div class=\"error\" *ngIf=\"(!name1.pristine || name1.dirty) && name1.touched\">\n        <p *ngIf=\"name1.errors?.required\">Name is requred!!</p>\n        <p *ngIf=\"name1.errors?.minlength\">Name length is under 3!!</p>\n      </div>\n\n      <div class=\"form-group\">\n        <label>性别</label>\n        <div  class=\"form-right\">\n          <select name=\"Sex\" [(ngModel)]=\"selectSex\">\n            <option *ngFor=\"let sex of sexs\" [value]=\"sex.value\">{{sex.name}}</option>\n          </select>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label>出生年月</label>\n        <div class=\"form-right\">\n          <input type=\"date\" name=\"shengti\" [(ngModel)]=\"shengri\" [value]=\"shengri\" required/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label>密码</label>\n        <div class=\"form-right\">\n          <input type=\"password\" name=\"password\" [(ngModel)]=\"password\" required/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <fieldset ngModelGroup=\"address\" #address=\"ngModelGroup\">\n        <div class=\"form-group\">\n            <label>国家</label>\n            <div class=\"form-right\">\n              <input type=\"text\" name=\"coun\" [(ngModel)]=\"address.country\" />\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label>城市</label>\n            <div class=\"form-right\">\n              <input type=\"text\" name=\"city\" [(ngModel)]=\"address.city\" />\n            </div>\n        </div?\n      </fieldset>\n\n      <div  class=\"form-group\"  *ngFor=\"let like of likes;let i=index\">\n        <label *ngIf=\"i ===0\" class=\"yes\">兴趣爱好</label>\n        <label *ngIf=\"i !==0\" class=\"no\"></label>\n        <div>\n          <input type=\"checkbox\" [(ngModel)]=\"like.isChecked\" name=\"like\" (ngModelChange)=\"selectLikes()\" />{{like.name}}\n        </div>\n      </div>\n\n      <div class=\"form-group\" *ngFor=\"let skill of skills;let i=index\">\n        <label *ngIf=\"i ===0\" class=\"yes\">技能</label>\n        <label *ngIf=\"i !==0\" class=\"no\"></label>\n        <div class=\"form-right\">\n          <input type=\"text\" name=\"coun\" [(ngModel)]=\"address.country\" />\n        </div>\n        <a (click)=\"delSkill(skill)\" class=\"del\"> - </a>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"no\"></label>\n        <div class=\"add\">\n          <a (click)=\"addSkill()\"> + </a>\n        </div>\n      </div>\n\n      <div *ngFor=\"let bao of baocuns;let i=index\" class=\"form-group\">\n        <label *ngIf=\"i === 0\" class=\"yes\">是否保存</label>\n        <label *ngIf=\"i !== 0\" class=\"no\"></label>\n        <div>\n          <input  type=\"radio\" [(ngModel)]=\"selectbao\" name=\"bao\" [value]=\"bao.value\" />{{bao.name}}\n        </div>\n      </div>\n\n      <div class=\"button-group\">\n        <button class=\"confirm\" [disabled]=\"!tForm.form.valid\">提交</button>\n        <button class=\"concel\" (click)=\"tForm.reset()\">取消</button>\n      </div>\n\n    </form>\n\n效果如下：\n![templateform](/images/templateform.png)\n\n## 自定义校验规则\n\n**1）校验的内部**\n表单的校验本质上是校验函数的调用，包括内置校验函数和自定义校验，比如:\n\n    <input type=\"text\" minlength=\"3\" required>\n\nangular会将两个校验属性转化成函数来处理\n\n- required：调用的Validators.required()\n- minlength=“3”： 调用的Validators.minlength(3)\n\n这是在模板驱动表单控件里校验，将校验函数转换成属性指令，这样模板标签就可以直接使用校验属性而在响应驱动表单中，可以直接使用校验函数\n了解校验的实现，不难了解自定义校验是实现一个校验函数\n\n**2）自定义校验属性**\n\n例子要实现：输入文本不能包含特殊字符@ ￥ & 和 数字，否则提示错误\n\n校验函数，有检查的字符就返回响应字符值，否则返回空：\n\n    import { AbstractControl, ValidatorFn } from '@angular/forms';\n\n    export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n      return (control: AbstractControl): {[key: string]: any} => {\n        const forbidden = nameRe.test(control.value);\n        return forbidden ? {'forbiddenName': {value: control.value}} : null;\n      };\n    }\n\n在模板驱动表单中使用需要转换成属性指令：\n\n    import { Directive, Input } from '@angular/core';\n    import { AbstractControl, NG_VALIDATORS, Validator, Validators } from '@angular/forms';\n\n    @Directive({\n      selector: '[forbiddenName]',\n      providers: [{provide: NG_VALIDATORS,\n                  useExisting: ForbiddenValidatorDirective, multi: true}]\n    })\n    export class ForbiddenValidatorDirective implements Validator {\n      @Input(forbiddenName) name: string;\n\n      validate(control: AbstractControl): {[key: string]: any} {\n        return this.name ? forbiddenNameValidator(new RegExp(\"[@\\$&0-9]\"))(control)\n                                  : null;\n      }\n    }\n\n    <input type=\"text\" forbiddenName=\"name\" required>\n    <div class=\"error\" *ngIf=\"(!name1.pristine || name1.dirty) && name1.touched\">\n        <p *ngIf=\"name1.errors?.forbiddenName\">\n        Name can not has @ $ & and number!!</p>\n    </div>\n\n响应式表单的校验在后面介绍\n\n","source":"_posts/2017-11-22-Form-templateForm.md","raw":"---\ntitle: 表单-模板驱动构建表单\ndate: 2017-11-22 00:36:58\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n## 什么是模板驱动表单\n\n模板驱动表单是angular构建表单的一种方式，特点是使用常用html标签来构建表单框架，而内部的逻辑由angular自动完成，比如：form,会自动创建ngForm指令，来表单整体的数据和校验处理\n<!--more-->\n\n## 构建结构\n\n模板驱动表单构建包含输入，校验，提交等一些常用的交互，主要结构图如下：\n![template_form](/images/template_form.jpg)\n\n**1.ngForm**\n\n表单的整体架构，遇到`<form>`标签时会自动为表单创建ngForm指令，用以管理表单，它有有以下作用：\n\n- 存在整体表单的数据和状态，比如：value，valid，可以通过模板引用变量直接访问它们\n- 管理表单内部的子控件，比如：根据name和ngModel来创建FormControl指令，等等\n\n\n        <form #myform=\"ngForm\">\n            <input type=\"text\" [(ngModel)]=\"name\" name=\"name\">\n            <input type=\"text\" [(ngModel)]=\"age\" name=\"age\">\n            <div ngModelGroup=\"address\" #address=\"ngModelGroup\">\n                <input type=\"text\" [(ngModel)]=\"country\" name=\"country\">\n                <input type=\"text\" [(ngModel)]=\"city\" name=\"city\">\n            </div>\n        </div>\n        </form>\n        <p>{{myform.value}}</p>\n\n它的value是所有控件的数据对象：\n\n    {\n        'name': 'aaa',\n        'age': 18,\n        'address: {\n            'country': '',\n            'city': ''\n         }\n    }\n\n**2.ngModel**\n表单控件的主要指令，用户和用户的数据交互，一般用于input标签中，进行数据绑定\n\n    <input type=\"text\" [(ngModel)]=\"name\" name=\"name\">\n\n其中，name是必须的，系统需要以name为唯一标识来为ngModel创建控件FormControl指令，加入到ngForm管理的FormControl指令集合中，而name是管理的key\n\n**3.ngModelGroup**\n用来组合一组的数据输入，比如地址包括：国家，城市，街道，这三个是独立的输入，组合成一个输入Group,它也有自己的value和状态\n\n        <div ngModelGroup=\"address\" #address=\"ngModelGroup\">\n            <input type=\"text\" [(ngModel)]=\"country\" name=\"country\">\n            <input type=\"text\" [(ngModel)]=\"city\" name=\"city\">\n        </div>\n        <p>{{address.value}}</p>\n\n它的value是所有控件的数据对象：\n\n    address: {\n        'country': '',\n        'city': ''\n    }\n\n**4.ngSubmit**\n用来进行表单的提交，当button标签不指定type时，默认type就是submit，所以点击时候会出发提交事件，而form就捕获了这个事件，来完成提交的自定义动作;\n当然也可以制定type=\"button\"来避免这个事件，这样就可以直接使用点击事件来处理提交动作了\n例如，下面两种写法的结果是一样的：\n\n        <form #myform=\"ngForm\" (ngSubmit)=\"add()\">\n            <input type=\"text\" [(ngModel)]=\"name\" name=\"name\">\n            <input type=\"text\" [(ngModel)]=\"age\" name=\"age\">\n\n            <button>OK</button>\n        </div>\n\n        <form #myform=\"ngForm\">\n            <input type=\"text\" [(ngModel)]=\"name\" name=\"name\">\n            <input type=\"text\" [(ngModel)]=\"age\" name=\"age\">\n\n            <button type=\"button\" (click)=\"add()\">OK</button>\n        </div>\n\n**5.内置状态跟踪和校验**\n表单控件和输入控件都有内置的状态，可以进行状态判断：\n\n- valid: 表单或控件是否有效，当requied控件的值都有效的时候true\n- pristine： 表单或控件的值是否是纯的和未改变过的，初始值为true\n- dirty: 表单或控件的值是否已改变过，初始值为false\n- touched: 表单或控件的值是否已访问过，初始值为false,访问过后失去焦点以后变为true\n- untouched: 表单或控件的值是否已访问过，初始值为true\n\n常用内置校验指令：\n\n- required\n- minlength\n- maxlength\n- pattern\n\n直接在标签上使用即可，angular会自动为之创建指令实例\n\n\n**6.表单状态样式类**\n对应于状态值，有相应的内置样式：\n- valid --> ng-valid    ng-invalid\n- dirty --> ng-dirty    ng-pristine\n- touch --> ng-touched  ng-untouched\n\n\n## 完整表单例子\n\n上面描述了模板驱动表单的一些东西，下面是一个完整的构建例子，代码如下：\n\nComponent.ts\n\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'template-form',\n      templateUrl: './template-form.component.html',\n      styleUrls: ['./template-form.component.css']\n    })\n    export class TemplateFormComponent {\n      name : any;\n      sexs : any[] = [{'name':'女','value':'famale'},{'name':'男','value':'male'}];\n      age : any = 18;\n      selectSex : any = 'male';\n      password : any;\n      address : any = {'country': '','city': ''};\n      shengri : any = '1990-01-01';\n      likes : any[] = [{'name':'看电视','value':'Watch Tv','isChecked':false},\n                       {'name':'读书','value':'Book','isChecked':false}];\n      selectLike : any = '';\n      skills : any[] = [{'value':'','isChecked':false}];\n      baocuns : any[] = [{'name':'是','value':'Yes','isChecked':false},{'name':'否','value':'No','isChecked':false}];\n      selectbao : any;\n\n      selectLikes() {\n        this.selectLike = '';\n        this.likes.forEach((like) => {\n          if(like.isChecked) {\n            this.selectLike += like.value + '; ';\n          }\n        });\n      }\n\n      addSkill() {\n        let temp = {'value':'','isChecked':false};\n        this.skills.push(temp);\n      }\n\n      delSkill(item : any) {\n        let index = this.skills.indexOf(item);\n        if(index !== -1) {\n          this.skills.splice(index,1);\n        }\n      }\n\n      save() {\n        console.log('===save===');\n      }\n    }\n\nComponent.html\n\n    <form #tForm=\"ngForm\" (ngSubmit)=\"save()\">\n      <div class=\"form-group\">\n        <label>姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" name=\"name\" [(ngModel)]=\"name\" minlength=\"3\" required #name1=\"ngModel\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n      <div class=\"error\" *ngIf=\"(!name1.pristine || name1.dirty) && name1.touched\">\n        <p *ngIf=\"name1.errors?.required\">Name is requred!!</p>\n        <p *ngIf=\"name1.errors?.minlength\">Name length is under 3!!</p>\n      </div>\n\n      <div class=\"form-group\">\n        <label>性别</label>\n        <div  class=\"form-right\">\n          <select name=\"Sex\" [(ngModel)]=\"selectSex\">\n            <option *ngFor=\"let sex of sexs\" [value]=\"sex.value\">{{sex.name}}</option>\n          </select>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label>出生年月</label>\n        <div class=\"form-right\">\n          <input type=\"date\" name=\"shengti\" [(ngModel)]=\"shengri\" [value]=\"shengri\" required/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label>密码</label>\n        <div class=\"form-right\">\n          <input type=\"password\" name=\"password\" [(ngModel)]=\"password\" required/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <fieldset ngModelGroup=\"address\" #address=\"ngModelGroup\">\n        <div class=\"form-group\">\n            <label>国家</label>\n            <div class=\"form-right\">\n              <input type=\"text\" name=\"coun\" [(ngModel)]=\"address.country\" />\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label>城市</label>\n            <div class=\"form-right\">\n              <input type=\"text\" name=\"city\" [(ngModel)]=\"address.city\" />\n            </div>\n        </div?\n      </fieldset>\n\n      <div  class=\"form-group\"  *ngFor=\"let like of likes;let i=index\">\n        <label *ngIf=\"i ===0\" class=\"yes\">兴趣爱好</label>\n        <label *ngIf=\"i !==0\" class=\"no\"></label>\n        <div>\n          <input type=\"checkbox\" [(ngModel)]=\"like.isChecked\" name=\"like\" (ngModelChange)=\"selectLikes()\" />{{like.name}}\n        </div>\n      </div>\n\n      <div class=\"form-group\" *ngFor=\"let skill of skills;let i=index\">\n        <label *ngIf=\"i ===0\" class=\"yes\">技能</label>\n        <label *ngIf=\"i !==0\" class=\"no\"></label>\n        <div class=\"form-right\">\n          <input type=\"text\" name=\"coun\" [(ngModel)]=\"address.country\" />\n        </div>\n        <a (click)=\"delSkill(skill)\" class=\"del\"> - </a>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"no\"></label>\n        <div class=\"add\">\n          <a (click)=\"addSkill()\"> + </a>\n        </div>\n      </div>\n\n      <div *ngFor=\"let bao of baocuns;let i=index\" class=\"form-group\">\n        <label *ngIf=\"i === 0\" class=\"yes\">是否保存</label>\n        <label *ngIf=\"i !== 0\" class=\"no\"></label>\n        <div>\n          <input  type=\"radio\" [(ngModel)]=\"selectbao\" name=\"bao\" [value]=\"bao.value\" />{{bao.name}}\n        </div>\n      </div>\n\n      <div class=\"button-group\">\n        <button class=\"confirm\" [disabled]=\"!tForm.form.valid\">提交</button>\n        <button class=\"concel\" (click)=\"tForm.reset()\">取消</button>\n      </div>\n\n    </form>\n\n效果如下：\n![templateform](/images/templateform.png)\n\n## 自定义校验规则\n\n**1）校验的内部**\n表单的校验本质上是校验函数的调用，包括内置校验函数和自定义校验，比如:\n\n    <input type=\"text\" minlength=\"3\" required>\n\nangular会将两个校验属性转化成函数来处理\n\n- required：调用的Validators.required()\n- minlength=“3”： 调用的Validators.minlength(3)\n\n这是在模板驱动表单控件里校验，将校验函数转换成属性指令，这样模板标签就可以直接使用校验属性而在响应驱动表单中，可以直接使用校验函数\n了解校验的实现，不难了解自定义校验是实现一个校验函数\n\n**2）自定义校验属性**\n\n例子要实现：输入文本不能包含特殊字符@ ￥ & 和 数字，否则提示错误\n\n校验函数，有检查的字符就返回响应字符值，否则返回空：\n\n    import { AbstractControl, ValidatorFn } from '@angular/forms';\n\n    export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n      return (control: AbstractControl): {[key: string]: any} => {\n        const forbidden = nameRe.test(control.value);\n        return forbidden ? {'forbiddenName': {value: control.value}} : null;\n      };\n    }\n\n在模板驱动表单中使用需要转换成属性指令：\n\n    import { Directive, Input } from '@angular/core';\n    import { AbstractControl, NG_VALIDATORS, Validator, Validators } from '@angular/forms';\n\n    @Directive({\n      selector: '[forbiddenName]',\n      providers: [{provide: NG_VALIDATORS,\n                  useExisting: ForbiddenValidatorDirective, multi: true}]\n    })\n    export class ForbiddenValidatorDirective implements Validator {\n      @Input(forbiddenName) name: string;\n\n      validate(control: AbstractControl): {[key: string]: any} {\n        return this.name ? forbiddenNameValidator(new RegExp(\"[@\\$&0-9]\"))(control)\n                                  : null;\n      }\n    }\n\n    <input type=\"text\" forbiddenName=\"name\" required>\n    <div class=\"error\" *ngIf=\"(!name1.pristine || name1.dirty) && name1.touched\">\n        <p *ngIf=\"name1.errors?.forbiddenName\">\n        Name can not has @ $ & and number!!</p>\n    </div>\n\n响应式表单的校验在后面介绍\n\n","slug":"Form-templateForm","published":1,"updated":"2017-11-30T15:33:06.057Z","layout":"post","photos":[],"link":"","_id":"cjqwe42bf004zor0b51oc7ec9","content":"<h2 id=\"什么是模板驱动表单\"><a href=\"#什么是模板驱动表单\" class=\"headerlink\" title=\"什么是模板驱动表单\"></a>什么是模板驱动表单</h2><p>模板驱动表单是angular构建表单的一种方式，特点是使用常用html标签来构建表单框架，而内部的逻辑由angular自动完成，比如：form,会自动创建ngForm指令，来表单整体的数据和校验处理<br><a id=\"more\"></a></p>\n<h2 id=\"构建结构\"><a href=\"#构建结构\" class=\"headerlink\" title=\"构建结构\"></a>构建结构</h2><p>模板驱动表单构建包含输入，校验，提交等一些常用的交互，主要结构图如下：<br><img src=\"/images/template_form.jpg\" alt=\"template_form\"></p>\n<p><strong>1.ngForm</strong></p>\n<p>表单的整体架构，遇到<code>&lt;form&gt;</code>标签时会自动为表单创建ngForm指令，用以管理表单，它有有以下作用：</p>\n<ul>\n<li>存在整体表单的数据和状态，比如：value，valid，可以通过模板引用变量直接访问它们</li>\n<li>管理表单内部的子控件，比如：根据name和ngModel来创建FormControl指令，等等</li>\n</ul>\n<pre><code>&lt;form #myform=&quot;ngForm&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;name&quot; name=&quot;name&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;age&quot; name=&quot;age&quot;&gt;\n    &lt;div ngModelGroup=&quot;address&quot; #address=&quot;ngModelGroup&quot;&gt;\n        &lt;input type=&quot;text&quot; [(ngModel)]=&quot;country&quot; name=&quot;country&quot;&gt;\n        &lt;input type=&quot;text&quot; [(ngModel)]=&quot;city&quot; name=&quot;city&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/form&gt;\n&lt;p&gt;{{myform.value}}&lt;/p&gt;\n</code></pre><p>它的value是所有控件的数据对象：</p>\n<pre><code>{\n    &apos;name&apos;: &apos;aaa&apos;,\n    &apos;age&apos;: 18,\n    &apos;address: {\n        &apos;country&apos;: &apos;&apos;,\n        &apos;city&apos;: &apos;&apos;\n     }\n}\n</code></pre><p><strong>2.ngModel</strong><br>表单控件的主要指令，用户和用户的数据交互，一般用于input标签中，进行数据绑定</p>\n<pre><code>&lt;input type=&quot;text&quot; [(ngModel)]=&quot;name&quot; name=&quot;name&quot;&gt;\n</code></pre><p>其中，name是必须的，系统需要以name为唯一标识来为ngModel创建控件FormControl指令，加入到ngForm管理的FormControl指令集合中，而name是管理的key</p>\n<p><strong>3.ngModelGroup</strong><br>用来组合一组的数据输入，比如地址包括：国家，城市，街道，这三个是独立的输入，组合成一个输入Group,它也有自己的value和状态</p>\n<pre><code>&lt;div ngModelGroup=&quot;address&quot; #address=&quot;ngModelGroup&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;country&quot; name=&quot;country&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;city&quot; name=&quot;city&quot;&gt;\n&lt;/div&gt;\n&lt;p&gt;{{address.value}}&lt;/p&gt;\n</code></pre><p>它的value是所有控件的数据对象：</p>\n<pre><code>address: {\n    &apos;country&apos;: &apos;&apos;,\n    &apos;city&apos;: &apos;&apos;\n}\n</code></pre><p><strong>4.ngSubmit</strong><br>用来进行表单的提交，当button标签不指定type时，默认type就是submit，所以点击时候会出发提交事件，而form就捕获了这个事件，来完成提交的自定义动作;<br>当然也可以制定type=”button”来避免这个事件，这样就可以直接使用点击事件来处理提交动作了<br>例如，下面两种写法的结果是一样的：</p>\n<pre><code>&lt;form #myform=&quot;ngForm&quot; (ngSubmit)=&quot;add()&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;name&quot; name=&quot;name&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;age&quot; name=&quot;age&quot;&gt;\n\n    &lt;button&gt;OK&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;form #myform=&quot;ngForm&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;name&quot; name=&quot;name&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;age&quot; name=&quot;age&quot;&gt;\n\n    &lt;button type=&quot;button&quot; (click)=&quot;add()&quot;&gt;OK&lt;/button&gt;\n&lt;/div&gt;\n</code></pre><p><strong>5.内置状态跟踪和校验</strong><br>表单控件和输入控件都有内置的状态，可以进行状态判断：</p>\n<ul>\n<li>valid: 表单或控件是否有效，当requied控件的值都有效的时候true</li>\n<li>pristine： 表单或控件的值是否是纯的和未改变过的，初始值为true</li>\n<li>dirty: 表单或控件的值是否已改变过，初始值为false</li>\n<li>touched: 表单或控件的值是否已访问过，初始值为false,访问过后失去焦点以后变为true</li>\n<li>untouched: 表单或控件的值是否已访问过，初始值为true</li>\n</ul>\n<p>常用内置校验指令：</p>\n<ul>\n<li>required</li>\n<li>minlength</li>\n<li>maxlength</li>\n<li>pattern</li>\n</ul>\n<p>直接在标签上使用即可，angular会自动为之创建指令实例</p>\n<p><strong>6.表单状态样式类</strong><br>对应于状态值，有相应的内置样式：</p>\n<ul>\n<li>valid –&gt; ng-valid    ng-invalid</li>\n<li>dirty –&gt; ng-dirty    ng-pristine</li>\n<li>touch –&gt; ng-touched  ng-untouched</li>\n</ul>\n<h2 id=\"完整表单例子\"><a href=\"#完整表单例子\" class=\"headerlink\" title=\"完整表单例子\"></a>完整表单例子</h2><p>上面描述了模板驱动表单的一些东西，下面是一个完整的构建例子，代码如下：</p>\n<p>Component.ts</p>\n<pre><code>import { Component } from &apos;@angular/core&apos;;\n\n@Component({\n  selector: &apos;template-form&apos;,\n  templateUrl: &apos;./template-form.component.html&apos;,\n  styleUrls: [&apos;./template-form.component.css&apos;]\n})\nexport class TemplateFormComponent {\n  name : any;\n  sexs : any[] = [{&apos;name&apos;:&apos;女&apos;,&apos;value&apos;:&apos;famale&apos;},{&apos;name&apos;:&apos;男&apos;,&apos;value&apos;:&apos;male&apos;}];\n  age : any = 18;\n  selectSex : any = &apos;male&apos;;\n  password : any;\n  address : any = {&apos;country&apos;: &apos;&apos;,&apos;city&apos;: &apos;&apos;};\n  shengri : any = &apos;1990-01-01&apos;;\n  likes : any[] = [{&apos;name&apos;:&apos;看电视&apos;,&apos;value&apos;:&apos;Watch Tv&apos;,&apos;isChecked&apos;:false},\n                   {&apos;name&apos;:&apos;读书&apos;,&apos;value&apos;:&apos;Book&apos;,&apos;isChecked&apos;:false}];\n  selectLike : any = &apos;&apos;;\n  skills : any[] = [{&apos;value&apos;:&apos;&apos;,&apos;isChecked&apos;:false}];\n  baocuns : any[] = [{&apos;name&apos;:&apos;是&apos;,&apos;value&apos;:&apos;Yes&apos;,&apos;isChecked&apos;:false},{&apos;name&apos;:&apos;否&apos;,&apos;value&apos;:&apos;No&apos;,&apos;isChecked&apos;:false}];\n  selectbao : any;\n\n  selectLikes() {\n    this.selectLike = &apos;&apos;;\n    this.likes.forEach((like) =&gt; {\n      if(like.isChecked) {\n        this.selectLike += like.value + &apos;; &apos;;\n      }\n    });\n  }\n\n  addSkill() {\n    let temp = {&apos;value&apos;:&apos;&apos;,&apos;isChecked&apos;:false};\n    this.skills.push(temp);\n  }\n\n  delSkill(item : any) {\n    let index = this.skills.indexOf(item);\n    if(index !== -1) {\n      this.skills.splice(index,1);\n    }\n  }\n\n  save() {\n    console.log(&apos;===save===&apos;);\n  }\n}\n</code></pre><p>Component.html</p>\n<pre><code>&lt;form #tForm=&quot;ngForm&quot; (ngSubmit)=&quot;save()&quot;&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;name&quot; minlength=&quot;3&quot; required #name1=&quot;ngModel&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;error&quot; *ngIf=&quot;(!name1.pristine || name1.dirty) &amp;&amp; name1.touched&quot;&gt;\n    &lt;p *ngIf=&quot;name1.errors?.required&quot;&gt;Name is requred!!&lt;/p&gt;\n    &lt;p *ngIf=&quot;name1.errors?.minlength&quot;&gt;Name length is under 3!!&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;性别&lt;/label&gt;\n    &lt;div  class=&quot;form-right&quot;&gt;\n      &lt;select name=&quot;Sex&quot; [(ngModel)]=&quot;selectSex&quot;&gt;\n        &lt;option *ngFor=&quot;let sex of sexs&quot; [value]=&quot;sex.value&quot;&gt;{{sex.name}}&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;出生年月&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;date&quot; name=&quot;shengti&quot; [(ngModel)]=&quot;shengri&quot; [value]=&quot;shengri&quot; required/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;密码&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;password&quot; name=&quot;password&quot; [(ngModel)]=&quot;password&quot; required/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;fieldset ngModelGroup=&quot;address&quot; #address=&quot;ngModelGroup&quot;&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;国家&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; name=&quot;coun&quot; [(ngModel)]=&quot;address.country&quot; /&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;城市&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; name=&quot;city&quot; [(ngModel)]=&quot;address.city&quot; /&gt;\n        &lt;/div&gt;\n    &lt;/div?\n  &lt;/fieldset&gt;\n\n  &lt;div  class=&quot;form-group&quot;  *ngFor=&quot;let like of likes;let i=index&quot;&gt;\n    &lt;label *ngIf=&quot;i ===0&quot; class=&quot;yes&quot;&gt;兴趣爱好&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !==0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div&gt;\n      &lt;input type=&quot;checkbox&quot; [(ngModel)]=&quot;like.isChecked&quot; name=&quot;like&quot; (ngModelChange)=&quot;selectLikes()&quot; /&gt;{{like.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot; *ngFor=&quot;let skill of skills;let i=index&quot;&gt;\n    &lt;label *ngIf=&quot;i ===0&quot; class=&quot;yes&quot;&gt;技能&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !==0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; name=&quot;coun&quot; [(ngModel)]=&quot;address.country&quot; /&gt;\n    &lt;/div&gt;\n    &lt;a (click)=&quot;delSkill(skill)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div class=&quot;add&quot;&gt;\n      &lt;a (click)=&quot;addSkill()&quot;&gt; + &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div *ngFor=&quot;let bao of baocuns;let i=index&quot; class=&quot;form-group&quot;&gt;\n    &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;是否保存&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div&gt;\n      &lt;input  type=&quot;radio&quot; [(ngModel)]=&quot;selectbao&quot; name=&quot;bao&quot; [value]=&quot;bao.value&quot; /&gt;{{bao.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;button-group&quot;&gt;\n    &lt;button class=&quot;confirm&quot; [disabled]=&quot;!tForm.form.valid&quot;&gt;提交&lt;/button&gt;\n    &lt;button class=&quot;concel&quot; (click)=&quot;tForm.reset()&quot;&gt;取消&lt;/button&gt;\n  &lt;/div&gt;\n\n&lt;/form&gt;\n</code></pre><p>效果如下：<br><img src=\"/images/templateform.png\" alt=\"templateform\"></p>\n<h2 id=\"自定义校验规则\"><a href=\"#自定义校验规则\" class=\"headerlink\" title=\"自定义校验规则\"></a>自定义校验规则</h2><p><strong>1）校验的内部</strong><br>表单的校验本质上是校验函数的调用，包括内置校验函数和自定义校验，比如:</p>\n<pre><code>&lt;input type=&quot;text&quot; minlength=&quot;3&quot; required&gt;\n</code></pre><p>angular会将两个校验属性转化成函数来处理</p>\n<ul>\n<li>required：调用的Validators.required()</li>\n<li>minlength=“3”： 调用的Validators.minlength(3)</li>\n</ul>\n<p>这是在模板驱动表单控件里校验，将校验函数转换成属性指令，这样模板标签就可以直接使用校验属性而在响应驱动表单中，可以直接使用校验函数<br>了解校验的实现，不难了解自定义校验是实现一个校验函数</p>\n<p><strong>2）自定义校验属性</strong></p>\n<p>例子要实现：输入文本不能包含特殊字符@ ￥ &amp; 和 数字，否则提示错误</p>\n<p>校验函数，有检查的字符就返回响应字符值，否则返回空：</p>\n<pre><code>import { AbstractControl, ValidatorFn } from &apos;@angular/forms&apos;;\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} =&gt; {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {&apos;forbiddenName&apos;: {value: control.value}} : null;\n  };\n}\n</code></pre><p>在模板驱动表单中使用需要转换成属性指令：</p>\n<pre><code>import { Directive, Input } from &apos;@angular/core&apos;;\nimport { AbstractControl, NG_VALIDATORS, Validator, Validators } from &apos;@angular/forms&apos;;\n\n@Directive({\n  selector: &apos;[forbiddenName]&apos;,\n  providers: [{provide: NG_VALIDATORS,\n              useExisting: ForbiddenValidatorDirective, multi: true}]\n})\nexport class ForbiddenValidatorDirective implements Validator {\n  @Input(forbiddenName) name: string;\n\n  validate(control: AbstractControl): {[key: string]: any} {\n    return this.name ? forbiddenNameValidator(new RegExp(&quot;[@\\$&amp;0-9]&quot;))(control)\n                              : null;\n  }\n}\n\n&lt;input type=&quot;text&quot; forbiddenName=&quot;name&quot; required&gt;\n&lt;div class=&quot;error&quot; *ngIf=&quot;(!name1.pristine || name1.dirty) &amp;&amp; name1.touched&quot;&gt;\n    &lt;p *ngIf=&quot;name1.errors?.forbiddenName&quot;&gt;\n    Name can not has @ $ &amp; and number!!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><p>响应式表单的校验在后面介绍</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是模板驱动表单\"><a href=\"#什么是模板驱动表单\" class=\"headerlink\" title=\"什么是模板驱动表单\"></a>什么是模板驱动表单</h2><p>模板驱动表单是angular构建表单的一种方式，特点是使用常用html标签来构建表单框架，而内部的逻辑由angular自动完成，比如：form,会自动创建ngForm指令，来表单整体的数据和校验处理<br>","more":"</p>\n<h2 id=\"构建结构\"><a href=\"#构建结构\" class=\"headerlink\" title=\"构建结构\"></a>构建结构</h2><p>模板驱动表单构建包含输入，校验，提交等一些常用的交互，主要结构图如下：<br><img src=\"/images/template_form.jpg\" alt=\"template_form\"></p>\n<p><strong>1.ngForm</strong></p>\n<p>表单的整体架构，遇到<code>&lt;form&gt;</code>标签时会自动为表单创建ngForm指令，用以管理表单，它有有以下作用：</p>\n<ul>\n<li>存在整体表单的数据和状态，比如：value，valid，可以通过模板引用变量直接访问它们</li>\n<li>管理表单内部的子控件，比如：根据name和ngModel来创建FormControl指令，等等</li>\n</ul>\n<pre><code>&lt;form #myform=&quot;ngForm&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;name&quot; name=&quot;name&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;age&quot; name=&quot;age&quot;&gt;\n    &lt;div ngModelGroup=&quot;address&quot; #address=&quot;ngModelGroup&quot;&gt;\n        &lt;input type=&quot;text&quot; [(ngModel)]=&quot;country&quot; name=&quot;country&quot;&gt;\n        &lt;input type=&quot;text&quot; [(ngModel)]=&quot;city&quot; name=&quot;city&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/form&gt;\n&lt;p&gt;{{myform.value}}&lt;/p&gt;\n</code></pre><p>它的value是所有控件的数据对象：</p>\n<pre><code>{\n    &apos;name&apos;: &apos;aaa&apos;,\n    &apos;age&apos;: 18,\n    &apos;address: {\n        &apos;country&apos;: &apos;&apos;,\n        &apos;city&apos;: &apos;&apos;\n     }\n}\n</code></pre><p><strong>2.ngModel</strong><br>表单控件的主要指令，用户和用户的数据交互，一般用于input标签中，进行数据绑定</p>\n<pre><code>&lt;input type=&quot;text&quot; [(ngModel)]=&quot;name&quot; name=&quot;name&quot;&gt;\n</code></pre><p>其中，name是必须的，系统需要以name为唯一标识来为ngModel创建控件FormControl指令，加入到ngForm管理的FormControl指令集合中，而name是管理的key</p>\n<p><strong>3.ngModelGroup</strong><br>用来组合一组的数据输入，比如地址包括：国家，城市，街道，这三个是独立的输入，组合成一个输入Group,它也有自己的value和状态</p>\n<pre><code>&lt;div ngModelGroup=&quot;address&quot; #address=&quot;ngModelGroup&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;country&quot; name=&quot;country&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;city&quot; name=&quot;city&quot;&gt;\n&lt;/div&gt;\n&lt;p&gt;{{address.value}}&lt;/p&gt;\n</code></pre><p>它的value是所有控件的数据对象：</p>\n<pre><code>address: {\n    &apos;country&apos;: &apos;&apos;,\n    &apos;city&apos;: &apos;&apos;\n}\n</code></pre><p><strong>4.ngSubmit</strong><br>用来进行表单的提交，当button标签不指定type时，默认type就是submit，所以点击时候会出发提交事件，而form就捕获了这个事件，来完成提交的自定义动作;<br>当然也可以制定type=”button”来避免这个事件，这样就可以直接使用点击事件来处理提交动作了<br>例如，下面两种写法的结果是一样的：</p>\n<pre><code>&lt;form #myform=&quot;ngForm&quot; (ngSubmit)=&quot;add()&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;name&quot; name=&quot;name&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;age&quot; name=&quot;age&quot;&gt;\n\n    &lt;button&gt;OK&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;form #myform=&quot;ngForm&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;name&quot; name=&quot;name&quot;&gt;\n    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;age&quot; name=&quot;age&quot;&gt;\n\n    &lt;button type=&quot;button&quot; (click)=&quot;add()&quot;&gt;OK&lt;/button&gt;\n&lt;/div&gt;\n</code></pre><p><strong>5.内置状态跟踪和校验</strong><br>表单控件和输入控件都有内置的状态，可以进行状态判断：</p>\n<ul>\n<li>valid: 表单或控件是否有效，当requied控件的值都有效的时候true</li>\n<li>pristine： 表单或控件的值是否是纯的和未改变过的，初始值为true</li>\n<li>dirty: 表单或控件的值是否已改变过，初始值为false</li>\n<li>touched: 表单或控件的值是否已访问过，初始值为false,访问过后失去焦点以后变为true</li>\n<li>untouched: 表单或控件的值是否已访问过，初始值为true</li>\n</ul>\n<p>常用内置校验指令：</p>\n<ul>\n<li>required</li>\n<li>minlength</li>\n<li>maxlength</li>\n<li>pattern</li>\n</ul>\n<p>直接在标签上使用即可，angular会自动为之创建指令实例</p>\n<p><strong>6.表单状态样式类</strong><br>对应于状态值，有相应的内置样式：</p>\n<ul>\n<li>valid –&gt; ng-valid    ng-invalid</li>\n<li>dirty –&gt; ng-dirty    ng-pristine</li>\n<li>touch –&gt; ng-touched  ng-untouched</li>\n</ul>\n<h2 id=\"完整表单例子\"><a href=\"#完整表单例子\" class=\"headerlink\" title=\"完整表单例子\"></a>完整表单例子</h2><p>上面描述了模板驱动表单的一些东西，下面是一个完整的构建例子，代码如下：</p>\n<p>Component.ts</p>\n<pre><code>import { Component } from &apos;@angular/core&apos;;\n\n@Component({\n  selector: &apos;template-form&apos;,\n  templateUrl: &apos;./template-form.component.html&apos;,\n  styleUrls: [&apos;./template-form.component.css&apos;]\n})\nexport class TemplateFormComponent {\n  name : any;\n  sexs : any[] = [{&apos;name&apos;:&apos;女&apos;,&apos;value&apos;:&apos;famale&apos;},{&apos;name&apos;:&apos;男&apos;,&apos;value&apos;:&apos;male&apos;}];\n  age : any = 18;\n  selectSex : any = &apos;male&apos;;\n  password : any;\n  address : any = {&apos;country&apos;: &apos;&apos;,&apos;city&apos;: &apos;&apos;};\n  shengri : any = &apos;1990-01-01&apos;;\n  likes : any[] = [{&apos;name&apos;:&apos;看电视&apos;,&apos;value&apos;:&apos;Watch Tv&apos;,&apos;isChecked&apos;:false},\n                   {&apos;name&apos;:&apos;读书&apos;,&apos;value&apos;:&apos;Book&apos;,&apos;isChecked&apos;:false}];\n  selectLike : any = &apos;&apos;;\n  skills : any[] = [{&apos;value&apos;:&apos;&apos;,&apos;isChecked&apos;:false}];\n  baocuns : any[] = [{&apos;name&apos;:&apos;是&apos;,&apos;value&apos;:&apos;Yes&apos;,&apos;isChecked&apos;:false},{&apos;name&apos;:&apos;否&apos;,&apos;value&apos;:&apos;No&apos;,&apos;isChecked&apos;:false}];\n  selectbao : any;\n\n  selectLikes() {\n    this.selectLike = &apos;&apos;;\n    this.likes.forEach((like) =&gt; {\n      if(like.isChecked) {\n        this.selectLike += like.value + &apos;; &apos;;\n      }\n    });\n  }\n\n  addSkill() {\n    let temp = {&apos;value&apos;:&apos;&apos;,&apos;isChecked&apos;:false};\n    this.skills.push(temp);\n  }\n\n  delSkill(item : any) {\n    let index = this.skills.indexOf(item);\n    if(index !== -1) {\n      this.skills.splice(index,1);\n    }\n  }\n\n  save() {\n    console.log(&apos;===save===&apos;);\n  }\n}\n</code></pre><p>Component.html</p>\n<pre><code>&lt;form #tForm=&quot;ngForm&quot; (ngSubmit)=&quot;save()&quot;&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;name&quot; minlength=&quot;3&quot; required #name1=&quot;ngModel&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;error&quot; *ngIf=&quot;(!name1.pristine || name1.dirty) &amp;&amp; name1.touched&quot;&gt;\n    &lt;p *ngIf=&quot;name1.errors?.required&quot;&gt;Name is requred!!&lt;/p&gt;\n    &lt;p *ngIf=&quot;name1.errors?.minlength&quot;&gt;Name length is under 3!!&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;性别&lt;/label&gt;\n    &lt;div  class=&quot;form-right&quot;&gt;\n      &lt;select name=&quot;Sex&quot; [(ngModel)]=&quot;selectSex&quot;&gt;\n        &lt;option *ngFor=&quot;let sex of sexs&quot; [value]=&quot;sex.value&quot;&gt;{{sex.name}}&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;出生年月&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;date&quot; name=&quot;shengti&quot; [(ngModel)]=&quot;shengri&quot; [value]=&quot;shengri&quot; required/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;密码&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;password&quot; name=&quot;password&quot; [(ngModel)]=&quot;password&quot; required/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;fieldset ngModelGroup=&quot;address&quot; #address=&quot;ngModelGroup&quot;&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;国家&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; name=&quot;coun&quot; [(ngModel)]=&quot;address.country&quot; /&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;城市&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; name=&quot;city&quot; [(ngModel)]=&quot;address.city&quot; /&gt;\n        &lt;/div&gt;\n    &lt;/div?\n  &lt;/fieldset&gt;\n\n  &lt;div  class=&quot;form-group&quot;  *ngFor=&quot;let like of likes;let i=index&quot;&gt;\n    &lt;label *ngIf=&quot;i ===0&quot; class=&quot;yes&quot;&gt;兴趣爱好&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !==0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div&gt;\n      &lt;input type=&quot;checkbox&quot; [(ngModel)]=&quot;like.isChecked&quot; name=&quot;like&quot; (ngModelChange)=&quot;selectLikes()&quot; /&gt;{{like.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot; *ngFor=&quot;let skill of skills;let i=index&quot;&gt;\n    &lt;label *ngIf=&quot;i ===0&quot; class=&quot;yes&quot;&gt;技能&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !==0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; name=&quot;coun&quot; [(ngModel)]=&quot;address.country&quot; /&gt;\n    &lt;/div&gt;\n    &lt;a (click)=&quot;delSkill(skill)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div class=&quot;add&quot;&gt;\n      &lt;a (click)=&quot;addSkill()&quot;&gt; + &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div *ngFor=&quot;let bao of baocuns;let i=index&quot; class=&quot;form-group&quot;&gt;\n    &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;是否保存&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div&gt;\n      &lt;input  type=&quot;radio&quot; [(ngModel)]=&quot;selectbao&quot; name=&quot;bao&quot; [value]=&quot;bao.value&quot; /&gt;{{bao.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;button-group&quot;&gt;\n    &lt;button class=&quot;confirm&quot; [disabled]=&quot;!tForm.form.valid&quot;&gt;提交&lt;/button&gt;\n    &lt;button class=&quot;concel&quot; (click)=&quot;tForm.reset()&quot;&gt;取消&lt;/button&gt;\n  &lt;/div&gt;\n\n&lt;/form&gt;\n</code></pre><p>效果如下：<br><img src=\"/images/templateform.png\" alt=\"templateform\"></p>\n<h2 id=\"自定义校验规则\"><a href=\"#自定义校验规则\" class=\"headerlink\" title=\"自定义校验规则\"></a>自定义校验规则</h2><p><strong>1）校验的内部</strong><br>表单的校验本质上是校验函数的调用，包括内置校验函数和自定义校验，比如:</p>\n<pre><code>&lt;input type=&quot;text&quot; minlength=&quot;3&quot; required&gt;\n</code></pre><p>angular会将两个校验属性转化成函数来处理</p>\n<ul>\n<li>required：调用的Validators.required()</li>\n<li>minlength=“3”： 调用的Validators.minlength(3)</li>\n</ul>\n<p>这是在模板驱动表单控件里校验，将校验函数转换成属性指令，这样模板标签就可以直接使用校验属性而在响应驱动表单中，可以直接使用校验函数<br>了解校验的实现，不难了解自定义校验是实现一个校验函数</p>\n<p><strong>2）自定义校验属性</strong></p>\n<p>例子要实现：输入文本不能包含特殊字符@ ￥ &amp; 和 数字，否则提示错误</p>\n<p>校验函数，有检查的字符就返回响应字符值，否则返回空：</p>\n<pre><code>import { AbstractControl, ValidatorFn } from &apos;@angular/forms&apos;;\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} =&gt; {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {&apos;forbiddenName&apos;: {value: control.value}} : null;\n  };\n}\n</code></pre><p>在模板驱动表单中使用需要转换成属性指令：</p>\n<pre><code>import { Directive, Input } from &apos;@angular/core&apos;;\nimport { AbstractControl, NG_VALIDATORS, Validator, Validators } from &apos;@angular/forms&apos;;\n\n@Directive({\n  selector: &apos;[forbiddenName]&apos;,\n  providers: [{provide: NG_VALIDATORS,\n              useExisting: ForbiddenValidatorDirective, multi: true}]\n})\nexport class ForbiddenValidatorDirective implements Validator {\n  @Input(forbiddenName) name: string;\n\n  validate(control: AbstractControl): {[key: string]: any} {\n    return this.name ? forbiddenNameValidator(new RegExp(&quot;[@\\$&amp;0-9]&quot;))(control)\n                              : null;\n  }\n}\n\n&lt;input type=&quot;text&quot; forbiddenName=&quot;name&quot; required&gt;\n&lt;div class=&quot;error&quot; *ngIf=&quot;(!name1.pristine || name1.dirty) &amp;&amp; name1.touched&quot;&gt;\n    &lt;p *ngIf=&quot;name1.errors?.forbiddenName&quot;&gt;\n    Name can not has @ $ &amp; and number!!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><p>响应式表单的校验在后面介绍</p>"},{"title":"Angular-路由器守卫","date":"2017-12-01T14:11:34.000Z","comments":1,"_content":"\n路由守卫，顾名思义，是守护路由的导航激活，在路由激活之前进行逻辑判断和数据处理;比如：路由权限的判断，表单填写丢弃的询问，以及路由激活前数据额预加载..等等，都是守卫干的工作，下面会根据使用场景不同介绍几种守卫的实现\n<!--more-->\n\n### 路由激活守卫\n\nCanActivate守卫，用于对某个页面导航的守卫，在导航前可以作逻辑判断，比如：是否有访问权限，来判断是否激活这个路由来查看页面\n主要步骤有：\n\n- 封装服务，实现CanActivate接口，返回true，则允许激活;否则，不允许激活\n- 注入服务到对应模块，在路由配置中添加对于服务\n\n定义守卫服务：实现CanActivate守卫接口，判断是否登录;若已登录,则返回true,激活路由;否则，则返回flase，无法激活路由并返回登录首页\n\n    import { Injectable }       from '@angular/core';\n    import {CanActivate, Router,ActivatedRouteSnapshot,RouterStateSnapshot}                           from '@angular/router';\n    import { AuthService }      from './auth.service';\n\n    @Injectable()\n    export class AuthGuard implements CanActivate {\n      constructor(private authService: AuthService, private router: Router) {}\n\n      canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        let url: string = state.url;\n\n        if (this.authService.isLoggedIn) {\n            return true;\n        } else {\n            this.authService.redirectUrl = url;\n            this.router.navigate(['/login']);\n            return false;\n        }\n      }\n    }\n\n    const adminRoutes: Routes = [\n      {\n        path: 'admin',\n        component: AdminComponent,\n        canActivate: [AuthGuard],\n        children: [\n          {\n              { path: 'crises', component: ManageCrisesComponent },\n              { path: 'heroes', component: ManageHeroesComponent }\n          }\n        ]\n      }\n    ];\n\n### 子路由激活守卫\n\nlinkCanAcitvateChild守卫，用于对某个子页面导航的守卫，在导航前可以作逻辑判断，比如：是否有访问权限，来判断是否激活这个路由来查看页面，实现与上面类似\n\n    import { Injectable }       from '@angular/core';\n    import {CanActivate, Router,ActivatedRouteSnapshot,\n      RouterStateSnapshot,CanActivateChild} from '@angular/router';\n    import { AuthService }      from './auth.service';\n\n    @Injectable()\n    export class AuthGuard implements CanActivate, CanActivateChild {\n      constructor(private authService: AuthService, private router: Router) {}\n\n      canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        let url: string = state.url;\n\n        if (this.authService.isLoggedIn) {\n            return true;\n        } else {\n            this.authService.redirectUrl = url;\n            this.router.navigate(['/login']);\n            return false;\n        }\n      }\n\n    /* . . . */\n    }\n\n    const adminRoutes: Routes = [\n      {\n        path: 'admin',\n        component: AdminComponent,\n        children: [\n          {\n            path: '',\n            canActivateChild: [AuthGuard],\n            children: [\n              { path: 'crises', component: ManageCrisesComponent },\n              { path: 'heroes', component: ManageHeroesComponent },\n              { path: '', component: AdminDashboardComponent }\n            ]\n          }\n        ]\n      }\n    ];\n\n### 表单去激活守卫\n\nCanDeactivate守卫，用于在填写表单时路由离开时使用，可进行判断是否离开，并进行一些数据处理\n\n- 封装服务，实现CanDeactivate接口，实现逻辑判断，返回true，则允许去激活，直接导航出去;否则，不允许激活，一般会以弹框询求确定\n- 注入服务到对应模块，在路由配置中添加对于服务\n\n去激活守卫有两种实现方式：公共方式和特有组件方式\n\n**1）公共方式**\n\n封装公共服务实现CanDeactivate接口，接受具体组件类的方法调用;各个需要使用的组件实现CanDeactivate方法即可\n\ndialog.ts\n\n    import 'rxjs/add/observable/of';\n    import { Injectable } from '@angular/core';\n    import { Observable } from 'rxjs/Observable';\n\n    /**\n     * Async modal dialog service\n     * DialogService makes this app easier to test by faking this service.\n     * TODO: better modal implementation that doesn't use window.confirm\n     */\n    @Injectable()\n    export class DialogService {\n      /**\n       * Ask user to confirm an action. `message` explains the action and choices.\n       * Returns observable resolving to `true`=confirm or `false`=cancel\n       */\n      confirm(message?: string): Observable<boolean> {\n        const confirmation = window.confirm(message || 'Is it OK?');\n\n        return Observable.of(confirmation);\n      };\n    }\n\ndeactive-guard.service\n\n    import { Injectable }    from '@angular/core';\n    import { CanDeactivate } from '@angular/router';\n    import { Observable }    from 'rxjs/Observable';\n\n    export interface CanComponentDeactivate {\n      canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n    }\n\n    @Injectable()\n    export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n      canDeactivate(component: CanComponentDeactivate) {\n        return component.canDeactivate ? component.canDeactivate() : true;\n      }\n    }\n\n具体组件内实现canDeactivate方法：\n\n    export class TemplateFormComponent {\n      name : any;\n      password : any;\n\n      constructor(public dialogService : DialogService) {\n\n      }\n\n      canDeactivate(): Observable<boolean> | boolean {\n        if (!this.name && !this.password) {\n          return true;\n        }\n\n        return this.dialogService.confirm('已有修改未保存，确定离开吗?');\n      }\n    }\n\n路由配置\n\n    const appRoutes: Routes = [\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard]}\n    ];\n\n**2）特定方式**\n\n即为具体组件实现对于的服务，注入特定组件的实例来进行逻辑判断\n\n    import { Injectable }           from '@angular/core';\n    import { Observable }           from 'rxjs/Observable';\n    import { CanDeactivate,\n      ActivatedRouteSnapshot,\n      RouterStateSnapshot }  from '@angular/router';\n\n    import { TemplateFormComponent } from './template-form/template-form.component';\n\n    @Injectable()\n    export class CanDeactivateGuard2 implements CanDeactivate<TemplateFormComponent> {\n\n      canDeactivate(\n        component: TemplateFormComponent,\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n      ): Observable<boolean> | boolean {\n        console.log(state.url);\n\n        if (!component.name && !component.password) {\n          return true;\n        }\n\n        return component.dialogService.confirm('已有修改未保存，确定离开吗?');\n      }\n    }\n\n    //路由\n    const appRoutes: Routes = [\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard2]}\n    ];\n\n\n\n### 数据预加载\n\n预加载，顾名思义，就是在路由激活前对路由模板组件所需要的数据进行预先的获取，这样在路由激活展现时数据就已经有了，提高体验;而且，对于加载失败的情况也能作相应处理\n\n- 封装服务，实现Resolve接口，进行数据获取，获取成功，返回结果Data，继续激活路由;否则，不允许激活，一般会导航到首页\n- 注入服务到对应模块，在路由配置中添加对应服务\n- 组件使用时，直接使用路由保存的data\n\n封装服务：\n\n    import { Injectable }             from '@angular/core';\n    import { Observable }             from 'rxjs/Observable';\n    import { Router, Resolve, RouterStateSnapshot,\n             ActivatedRouteSnapshot } from '@angular/router';\n    import { Crisis, CrisisService }  from './crisis.service';\n\n    @Injectable()\n    export class DataResolver implements Resolve<User> {\n      constructor(private userService: UserService, private router: Router) {}\n\n      resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Crisis> {\n        return this.userService.getUser(id).map(res => {\n          if (res) {\n            return res;\n          } else {\n            this.router.navigate(['/login']);\n            return null;\n          }\n        });\n      }\n    }\n\n配置路由：\n\n    const appRoutes: Routes = [\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard]，\n        resolve： {\n            user: DataResolver\n        }\n    ];\n\n组件使用：\n\n    export class TemplateFormComponent {\n      name : any;\n      user : any;\n\n      constructor(public dialogService : DialogService,private route: ActivatedRoute) {\n        this.route.data\n          .subscribe((data: { user: any }) => {\n            this.user = data.user;\n          });\n      }\n    }\n\n\n### 模块访问守卫\n\nCanLoad守卫，对懒加载模块的加载限制，加载前进行逻辑处理，满足条件才加载该模块\n\n- 封装服务，实现CanLoad接口，进行逻辑判断，若返回true，则加载模块并路由;否则，不再加载\n- 注入服务到对应模块，在路由配置中添加对应服务\n\n封装服务：\n\n    import { Injectable }       from '@angular/core';\n    import {\n       Router,\n      ActivatedRouteSnapshot,\n      RouterStateSnapshot,\n      CanLoad,Route\n    }                           from '@angular/router';\n    import { appService }      from './app.service';\n\n    @Injectable()\n    export class AuthGuard implements CanLoad {\n      constructor(private appS: appService, private router: Router) {}\n\n      canLoad(route: Route): boolean {\n        let url = `/${route.path}`;\n\n        if (this.appS.isLogin) { return true; }\n\n        this.appS.redirectUrl = url;\n        this.router.navigate(['/controls']);\n        return false;\n      }\n    }\n\n配置路由：\n\n    const appRoutes: Routes = [\n      { path: 'controls', component: ControlComponent },\n      { path: 'reactiveForm',\n        loadChildren: 'app/reactive-form/reactive-form.module#ReactiveModule',\n        canLoad: [AuthGuard]\n      }\n    ];\n\n\n### 模块预加载\n\n在每次成功的导航后，路由器会在自己的配置中查找尚未加载并且可以预加载的模块。 是否加载某个模块，以及要加载哪些模块，取决于预加载策略。\nRouter内置了两种预加载策略：\n\n- 完全不预加载，这是默认值。惰性加载的特性区仍然会按需加载。\n- 预加载所有惰性加载的特性区。\n\n默认情况下，路由器或者完全不预加载或者预加载每个惰性加载模块。 路由器还支持自定义预加载策略，以便完全控制要预加载哪些模块以及何时加载。\n\n**1) 预加载所有模块**\n\n只需在根路由模块的forRoot方法传入附加参数即可，将加载策略设置preloadingStrategy设置为PreloadAllModules\n\n    import { NgModule }              from '@angular/core';\n    import { RouterModule, Routes, PreloadAllModules }  from '@angular/router';\n    import { ControlComponent } from './control/control.component';\n    import { TemplateFormComponent } from './template-form/template-form.component';\n\n    import { CanDeactivateGuard } from './can-deactivate-guard.service';\n    import { CanDeactivateGuard2 } from './can-deactivate-guard2.service';\n    import { AuthGuard } from './auth-guard.service';\n\n    const appRoutes: Routes = [\n      { path: 'controls', component: ControlComponent },\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard2]},\n      { path: 'reactiveForm',\n        loadChildren: 'app/reactive-form/reactive-form.module#ReactiveModule',\n        canLoad: [AuthGuard]\n      },\n      { path: 'login',\n        loadChildren: 'app/login/login.module#LoginModule'\n      },\n      { path: '',   redirectTo: '/controls', pathMatch: 'full' }\n    ];\n\n    @NgModule({\n      imports: [\n        RouterModule.forRoot(appRoutes,\n          {\n            enableTracing: true,\n            preloadingStrategy: PreloadAllModules\n          })\n      ],\n      exports: [\n        RouterModule\n      ]\n    })\n\n> - 加载策略只能在根路由模块里设置，因为只有forRoot()可以配置参数，forChild()不行\n> - CanLoad守卫级别高于策略，会阻塞模块加载\n\n**2） 自定义加载策略**\n\n使用自定义预加载策略，可以控制路由器预加载哪些路由以及如何加载，作为例子，我们将只预加载那些data.preload标志为true的路由\n\n- 设置路由标识，标识哪些模块被预先加载\n- 定义策略服务，根据标识来判断并加载模块\n- 配置策略服务到路由模块\n\n策略服务\n\n    import 'rxjs/add/observable/of';\n    import { Injectable } from '@angular/core';\n    import { PreloadingStrategy, Route } from '@angular/router';\n    import { Observable } from 'rxjs/Observable';\n\n    @Injectable()\n    export class SelectivePreloadingStrategy implements PreloadingStrategy {\n      preloadedModules: string[] = [];\n\n      preload(route: Route, load: () => Observable<any>): Observable<any> {\n        if (route.data && route.data['preload']) {\n          // add the route path to the preloaded module array\n          this.preloadedModules.push(route.path);\n\n          // log the route path to the console\n          console.log('Preloaded: ' + route.path);\n\n          return load();\n        } else {\n          return Observable.of(null);\n        }\n      }\n    }\n\n策略配置\n\n    const appRoutes: Routes = [\n      { path: 'controls', component: ControlComponent },\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard2]},\n      { path: 'reactiveForm',\n        loadChildren: 'app/reactive-form/reactive-form.module#ReactiveModule',\n        data: {Preloaded: false}\n      },\n      { path: 'login',\n        loadChildren: 'app/login/login.module#LoginModule',\n        data: {Preloaded: true}\n      },\n      { path: '',   redirectTo: '/controls', pathMatch: 'full' }\n    ];\n\n    @NgModule({\n      imports: [\n        RouterModule.forRoot(appRoutes,\n          {\n            enableTracing: true,\n            preloadingStrategy: SelectivePreloadingStrategy\n          })\n      ],\n      exports: [\n        RouterModule\n      ]，\n      providers: [SelectivePreloadingStrategy]\n    })\n    export class AppRoutingModule {}\n\n\n\n","source":"_posts/2017-12-01-router-guard.md","raw":"---\ntitle: Angular-路由器守卫\ndate: 2017-12-01 22:11:34\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n路由守卫，顾名思义，是守护路由的导航激活，在路由激活之前进行逻辑判断和数据处理;比如：路由权限的判断，表单填写丢弃的询问，以及路由激活前数据额预加载..等等，都是守卫干的工作，下面会根据使用场景不同介绍几种守卫的实现\n<!--more-->\n\n### 路由激活守卫\n\nCanActivate守卫，用于对某个页面导航的守卫，在导航前可以作逻辑判断，比如：是否有访问权限，来判断是否激活这个路由来查看页面\n主要步骤有：\n\n- 封装服务，实现CanActivate接口，返回true，则允许激活;否则，不允许激活\n- 注入服务到对应模块，在路由配置中添加对于服务\n\n定义守卫服务：实现CanActivate守卫接口，判断是否登录;若已登录,则返回true,激活路由;否则，则返回flase，无法激活路由并返回登录首页\n\n    import { Injectable }       from '@angular/core';\n    import {CanActivate, Router,ActivatedRouteSnapshot,RouterStateSnapshot}                           from '@angular/router';\n    import { AuthService }      from './auth.service';\n\n    @Injectable()\n    export class AuthGuard implements CanActivate {\n      constructor(private authService: AuthService, private router: Router) {}\n\n      canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        let url: string = state.url;\n\n        if (this.authService.isLoggedIn) {\n            return true;\n        } else {\n            this.authService.redirectUrl = url;\n            this.router.navigate(['/login']);\n            return false;\n        }\n      }\n    }\n\n    const adminRoutes: Routes = [\n      {\n        path: 'admin',\n        component: AdminComponent,\n        canActivate: [AuthGuard],\n        children: [\n          {\n              { path: 'crises', component: ManageCrisesComponent },\n              { path: 'heroes', component: ManageHeroesComponent }\n          }\n        ]\n      }\n    ];\n\n### 子路由激活守卫\n\nlinkCanAcitvateChild守卫，用于对某个子页面导航的守卫，在导航前可以作逻辑判断，比如：是否有访问权限，来判断是否激活这个路由来查看页面，实现与上面类似\n\n    import { Injectable }       from '@angular/core';\n    import {CanActivate, Router,ActivatedRouteSnapshot,\n      RouterStateSnapshot,CanActivateChild} from '@angular/router';\n    import { AuthService }      from './auth.service';\n\n    @Injectable()\n    export class AuthGuard implements CanActivate, CanActivateChild {\n      constructor(private authService: AuthService, private router: Router) {}\n\n      canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        let url: string = state.url;\n\n        if (this.authService.isLoggedIn) {\n            return true;\n        } else {\n            this.authService.redirectUrl = url;\n            this.router.navigate(['/login']);\n            return false;\n        }\n      }\n\n    /* . . . */\n    }\n\n    const adminRoutes: Routes = [\n      {\n        path: 'admin',\n        component: AdminComponent,\n        children: [\n          {\n            path: '',\n            canActivateChild: [AuthGuard],\n            children: [\n              { path: 'crises', component: ManageCrisesComponent },\n              { path: 'heroes', component: ManageHeroesComponent },\n              { path: '', component: AdminDashboardComponent }\n            ]\n          }\n        ]\n      }\n    ];\n\n### 表单去激活守卫\n\nCanDeactivate守卫，用于在填写表单时路由离开时使用，可进行判断是否离开，并进行一些数据处理\n\n- 封装服务，实现CanDeactivate接口，实现逻辑判断，返回true，则允许去激活，直接导航出去;否则，不允许激活，一般会以弹框询求确定\n- 注入服务到对应模块，在路由配置中添加对于服务\n\n去激活守卫有两种实现方式：公共方式和特有组件方式\n\n**1）公共方式**\n\n封装公共服务实现CanDeactivate接口，接受具体组件类的方法调用;各个需要使用的组件实现CanDeactivate方法即可\n\ndialog.ts\n\n    import 'rxjs/add/observable/of';\n    import { Injectable } from '@angular/core';\n    import { Observable } from 'rxjs/Observable';\n\n    /**\n     * Async modal dialog service\n     * DialogService makes this app easier to test by faking this service.\n     * TODO: better modal implementation that doesn't use window.confirm\n     */\n    @Injectable()\n    export class DialogService {\n      /**\n       * Ask user to confirm an action. `message` explains the action and choices.\n       * Returns observable resolving to `true`=confirm or `false`=cancel\n       */\n      confirm(message?: string): Observable<boolean> {\n        const confirmation = window.confirm(message || 'Is it OK?');\n\n        return Observable.of(confirmation);\n      };\n    }\n\ndeactive-guard.service\n\n    import { Injectable }    from '@angular/core';\n    import { CanDeactivate } from '@angular/router';\n    import { Observable }    from 'rxjs/Observable';\n\n    export interface CanComponentDeactivate {\n      canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n    }\n\n    @Injectable()\n    export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n      canDeactivate(component: CanComponentDeactivate) {\n        return component.canDeactivate ? component.canDeactivate() : true;\n      }\n    }\n\n具体组件内实现canDeactivate方法：\n\n    export class TemplateFormComponent {\n      name : any;\n      password : any;\n\n      constructor(public dialogService : DialogService) {\n\n      }\n\n      canDeactivate(): Observable<boolean> | boolean {\n        if (!this.name && !this.password) {\n          return true;\n        }\n\n        return this.dialogService.confirm('已有修改未保存，确定离开吗?');\n      }\n    }\n\n路由配置\n\n    const appRoutes: Routes = [\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard]}\n    ];\n\n**2）特定方式**\n\n即为具体组件实现对于的服务，注入特定组件的实例来进行逻辑判断\n\n    import { Injectable }           from '@angular/core';\n    import { Observable }           from 'rxjs/Observable';\n    import { CanDeactivate,\n      ActivatedRouteSnapshot,\n      RouterStateSnapshot }  from '@angular/router';\n\n    import { TemplateFormComponent } from './template-form/template-form.component';\n\n    @Injectable()\n    export class CanDeactivateGuard2 implements CanDeactivate<TemplateFormComponent> {\n\n      canDeactivate(\n        component: TemplateFormComponent,\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n      ): Observable<boolean> | boolean {\n        console.log(state.url);\n\n        if (!component.name && !component.password) {\n          return true;\n        }\n\n        return component.dialogService.confirm('已有修改未保存，确定离开吗?');\n      }\n    }\n\n    //路由\n    const appRoutes: Routes = [\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard2]}\n    ];\n\n\n\n### 数据预加载\n\n预加载，顾名思义，就是在路由激活前对路由模板组件所需要的数据进行预先的获取，这样在路由激活展现时数据就已经有了，提高体验;而且，对于加载失败的情况也能作相应处理\n\n- 封装服务，实现Resolve接口，进行数据获取，获取成功，返回结果Data，继续激活路由;否则，不允许激活，一般会导航到首页\n- 注入服务到对应模块，在路由配置中添加对应服务\n- 组件使用时，直接使用路由保存的data\n\n封装服务：\n\n    import { Injectable }             from '@angular/core';\n    import { Observable }             from 'rxjs/Observable';\n    import { Router, Resolve, RouterStateSnapshot,\n             ActivatedRouteSnapshot } from '@angular/router';\n    import { Crisis, CrisisService }  from './crisis.service';\n\n    @Injectable()\n    export class DataResolver implements Resolve<User> {\n      constructor(private userService: UserService, private router: Router) {}\n\n      resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Crisis> {\n        return this.userService.getUser(id).map(res => {\n          if (res) {\n            return res;\n          } else {\n            this.router.navigate(['/login']);\n            return null;\n          }\n        });\n      }\n    }\n\n配置路由：\n\n    const appRoutes: Routes = [\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard]，\n        resolve： {\n            user: DataResolver\n        }\n    ];\n\n组件使用：\n\n    export class TemplateFormComponent {\n      name : any;\n      user : any;\n\n      constructor(public dialogService : DialogService,private route: ActivatedRoute) {\n        this.route.data\n          .subscribe((data: { user: any }) => {\n            this.user = data.user;\n          });\n      }\n    }\n\n\n### 模块访问守卫\n\nCanLoad守卫，对懒加载模块的加载限制，加载前进行逻辑处理，满足条件才加载该模块\n\n- 封装服务，实现CanLoad接口，进行逻辑判断，若返回true，则加载模块并路由;否则，不再加载\n- 注入服务到对应模块，在路由配置中添加对应服务\n\n封装服务：\n\n    import { Injectable }       from '@angular/core';\n    import {\n       Router,\n      ActivatedRouteSnapshot,\n      RouterStateSnapshot,\n      CanLoad,Route\n    }                           from '@angular/router';\n    import { appService }      from './app.service';\n\n    @Injectable()\n    export class AuthGuard implements CanLoad {\n      constructor(private appS: appService, private router: Router) {}\n\n      canLoad(route: Route): boolean {\n        let url = `/${route.path}`;\n\n        if (this.appS.isLogin) { return true; }\n\n        this.appS.redirectUrl = url;\n        this.router.navigate(['/controls']);\n        return false;\n      }\n    }\n\n配置路由：\n\n    const appRoutes: Routes = [\n      { path: 'controls', component: ControlComponent },\n      { path: 'reactiveForm',\n        loadChildren: 'app/reactive-form/reactive-form.module#ReactiveModule',\n        canLoad: [AuthGuard]\n      }\n    ];\n\n\n### 模块预加载\n\n在每次成功的导航后，路由器会在自己的配置中查找尚未加载并且可以预加载的模块。 是否加载某个模块，以及要加载哪些模块，取决于预加载策略。\nRouter内置了两种预加载策略：\n\n- 完全不预加载，这是默认值。惰性加载的特性区仍然会按需加载。\n- 预加载所有惰性加载的特性区。\n\n默认情况下，路由器或者完全不预加载或者预加载每个惰性加载模块。 路由器还支持自定义预加载策略，以便完全控制要预加载哪些模块以及何时加载。\n\n**1) 预加载所有模块**\n\n只需在根路由模块的forRoot方法传入附加参数即可，将加载策略设置preloadingStrategy设置为PreloadAllModules\n\n    import { NgModule }              from '@angular/core';\n    import { RouterModule, Routes, PreloadAllModules }  from '@angular/router';\n    import { ControlComponent } from './control/control.component';\n    import { TemplateFormComponent } from './template-form/template-form.component';\n\n    import { CanDeactivateGuard } from './can-deactivate-guard.service';\n    import { CanDeactivateGuard2 } from './can-deactivate-guard2.service';\n    import { AuthGuard } from './auth-guard.service';\n\n    const appRoutes: Routes = [\n      { path: 'controls', component: ControlComponent },\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard2]},\n      { path: 'reactiveForm',\n        loadChildren: 'app/reactive-form/reactive-form.module#ReactiveModule',\n        canLoad: [AuthGuard]\n      },\n      { path: 'login',\n        loadChildren: 'app/login/login.module#LoginModule'\n      },\n      { path: '',   redirectTo: '/controls', pathMatch: 'full' }\n    ];\n\n    @NgModule({\n      imports: [\n        RouterModule.forRoot(appRoutes,\n          {\n            enableTracing: true,\n            preloadingStrategy: PreloadAllModules\n          })\n      ],\n      exports: [\n        RouterModule\n      ]\n    })\n\n> - 加载策略只能在根路由模块里设置，因为只有forRoot()可以配置参数，forChild()不行\n> - CanLoad守卫级别高于策略，会阻塞模块加载\n\n**2） 自定义加载策略**\n\n使用自定义预加载策略，可以控制路由器预加载哪些路由以及如何加载，作为例子，我们将只预加载那些data.preload标志为true的路由\n\n- 设置路由标识，标识哪些模块被预先加载\n- 定义策略服务，根据标识来判断并加载模块\n- 配置策略服务到路由模块\n\n策略服务\n\n    import 'rxjs/add/observable/of';\n    import { Injectable } from '@angular/core';\n    import { PreloadingStrategy, Route } from '@angular/router';\n    import { Observable } from 'rxjs/Observable';\n\n    @Injectable()\n    export class SelectivePreloadingStrategy implements PreloadingStrategy {\n      preloadedModules: string[] = [];\n\n      preload(route: Route, load: () => Observable<any>): Observable<any> {\n        if (route.data && route.data['preload']) {\n          // add the route path to the preloaded module array\n          this.preloadedModules.push(route.path);\n\n          // log the route path to the console\n          console.log('Preloaded: ' + route.path);\n\n          return load();\n        } else {\n          return Observable.of(null);\n        }\n      }\n    }\n\n策略配置\n\n    const appRoutes: Routes = [\n      { path: 'controls', component: ControlComponent },\n      { path: 'templateForm',\n        component: TemplateFormComponent,\n        canDeactivate: [CanDeactivateGuard2]},\n      { path: 'reactiveForm',\n        loadChildren: 'app/reactive-form/reactive-form.module#ReactiveModule',\n        data: {Preloaded: false}\n      },\n      { path: 'login',\n        loadChildren: 'app/login/login.module#LoginModule',\n        data: {Preloaded: true}\n      },\n      { path: '',   redirectTo: '/controls', pathMatch: 'full' }\n    ];\n\n    @NgModule({\n      imports: [\n        RouterModule.forRoot(appRoutes,\n          {\n            enableTracing: true,\n            preloadingStrategy: SelectivePreloadingStrategy\n          })\n      ],\n      exports: [\n        RouterModule\n      ]，\n      providers: [SelectivePreloadingStrategy]\n    })\n    export class AppRoutingModule {}\n\n\n\n","slug":"router-guard","published":1,"updated":"2017-12-04T08:48:02.067Z","layout":"post","photos":[],"link":"","_id":"cjqwe42bh0052or0btsc2yzae","content":"<p>路由守卫，顾名思义，是守护路由的导航激活，在路由激活之前进行逻辑判断和数据处理;比如：路由权限的判断，表单填写丢弃的询问，以及路由激活前数据额预加载..等等，都是守卫干的工作，下面会根据使用场景不同介绍几种守卫的实现<br><a id=\"more\"></a></p>\n<h3 id=\"路由激活守卫\"><a href=\"#路由激活守卫\" class=\"headerlink\" title=\"路由激活守卫\"></a>路由激活守卫</h3><p>CanActivate守卫，用于对某个页面导航的守卫，在导航前可以作逻辑判断，比如：是否有访问权限，来判断是否激活这个路由来查看页面<br>主要步骤有：</p>\n<ul>\n<li>封装服务，实现CanActivate接口，返回true，则允许激活;否则，不允许激活</li>\n<li>注入服务到对应模块，在路由配置中添加对于服务</li>\n</ul>\n<p>定义守卫服务：实现CanActivate守卫接口，判断是否登录;若已登录,则返回true,激活路由;否则，则返回flase，无法激活路由并返回登录首页</p>\n<pre><code>import { Injectable }       from &apos;@angular/core&apos;;\nimport {CanActivate, Router,ActivatedRouteSnapshot,RouterStateSnapshot}                           from &apos;@angular/router&apos;;\nimport { AuthService }      from &apos;./auth.service&apos;;\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    let url: string = state.url;\n\n    if (this.authService.isLoggedIn) {\n        return true;\n    } else {\n        this.authService.redirectUrl = url;\n        this.router.navigate([&apos;/login&apos;]);\n        return false;\n    }\n  }\n}\n\nconst adminRoutes: Routes = [\n  {\n    path: &apos;admin&apos;,\n    component: AdminComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n          { path: &apos;crises&apos;, component: ManageCrisesComponent },\n          { path: &apos;heroes&apos;, component: ManageHeroesComponent }\n      }\n    ]\n  }\n];\n</code></pre><h3 id=\"子路由激活守卫\"><a href=\"#子路由激活守卫\" class=\"headerlink\" title=\"子路由激活守卫\"></a>子路由激活守卫</h3><p>linkCanAcitvateChild守卫，用于对某个子页面导航的守卫，在导航前可以作逻辑判断，比如：是否有访问权限，来判断是否激活这个路由来查看页面，实现与上面类似</p>\n<pre><code>import { Injectable }       from &apos;@angular/core&apos;;\nimport {CanActivate, Router,ActivatedRouteSnapshot,\n  RouterStateSnapshot,CanActivateChild} from &apos;@angular/router&apos;;\nimport { AuthService }      from &apos;./auth.service&apos;;\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    let url: string = state.url;\n\n    if (this.authService.isLoggedIn) {\n        return true;\n    } else {\n        this.authService.redirectUrl = url;\n        this.router.navigate([&apos;/login&apos;]);\n        return false;\n    }\n  }\n\n/* . . . */\n}\n\nconst adminRoutes: Routes = [\n  {\n    path: &apos;admin&apos;,\n    component: AdminComponent,\n    children: [\n      {\n        path: &apos;&apos;,\n        canActivateChild: [AuthGuard],\n        children: [\n          { path: &apos;crises&apos;, component: ManageCrisesComponent },\n          { path: &apos;heroes&apos;, component: ManageHeroesComponent },\n          { path: &apos;&apos;, component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n</code></pre><h3 id=\"表单去激活守卫\"><a href=\"#表单去激活守卫\" class=\"headerlink\" title=\"表单去激活守卫\"></a>表单去激活守卫</h3><p>CanDeactivate守卫，用于在填写表单时路由离开时使用，可进行判断是否离开，并进行一些数据处理</p>\n<ul>\n<li>封装服务，实现CanDeactivate接口，实现逻辑判断，返回true，则允许去激活，直接导航出去;否则，不允许激活，一般会以弹框询求确定</li>\n<li>注入服务到对应模块，在路由配置中添加对于服务</li>\n</ul>\n<p>去激活守卫有两种实现方式：公共方式和特有组件方式</p>\n<p><strong>1）公共方式</strong></p>\n<p>封装公共服务实现CanDeactivate接口，接受具体组件类的方法调用;各个需要使用的组件实现CanDeactivate方法即可</p>\n<p>dialog.ts</p>\n<pre><code>import &apos;rxjs/add/observable/of&apos;;\nimport { Injectable } from &apos;@angular/core&apos;;\nimport { Observable } from &apos;rxjs/Observable&apos;;\n\n/**\n * Async modal dialog service\n * DialogService makes this app easier to test by faking this service.\n * TODO: better modal implementation that doesn&apos;t use window.confirm\n */\n@Injectable()\nexport class DialogService {\n  /**\n   * Ask user to confirm an action. `message` explains the action and choices.\n   * Returns observable resolving to `true`=confirm or `false`=cancel\n   */\n  confirm(message?: string): Observable&lt;boolean&gt; {\n    const confirmation = window.confirm(message || &apos;Is it OK?&apos;);\n\n    return Observable.of(confirmation);\n  };\n}\n</code></pre><p>deactive-guard.service</p>\n<pre><code>import { Injectable }    from &apos;@angular/core&apos;;\nimport { CanDeactivate } from &apos;@angular/router&apos;;\nimport { Observable }    from &apos;rxjs/Observable&apos;;\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;\n}\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate&lt;CanComponentDeactivate&gt; {\n  canDeactivate(component: CanComponentDeactivate) {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n</code></pre><p>具体组件内实现canDeactivate方法：</p>\n<pre><code>export class TemplateFormComponent {\n  name : any;\n  password : any;\n\n  constructor(public dialogService : DialogService) {\n\n  }\n\n  canDeactivate(): Observable&lt;boolean&gt; | boolean {\n    if (!this.name &amp;&amp; !this.password) {\n      return true;\n    }\n\n    return this.dialogService.confirm(&apos;已有修改未保存，确定离开吗?&apos;);\n  }\n}\n</code></pre><p>路由配置</p>\n<pre><code>const appRoutes: Routes = [\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard]}\n];\n</code></pre><p><strong>2）特定方式</strong></p>\n<p>即为具体组件实现对于的服务，注入特定组件的实例来进行逻辑判断</p>\n<pre><code>import { Injectable }           from &apos;@angular/core&apos;;\nimport { Observable }           from &apos;rxjs/Observable&apos;;\nimport { CanDeactivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot }  from &apos;@angular/router&apos;;\n\nimport { TemplateFormComponent } from &apos;./template-form/template-form.component&apos;;\n\n@Injectable()\nexport class CanDeactivateGuard2 implements CanDeactivate&lt;TemplateFormComponent&gt; {\n\n  canDeactivate(\n    component: TemplateFormComponent,\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable&lt;boolean&gt; | boolean {\n    console.log(state.url);\n\n    if (!component.name &amp;&amp; !component.password) {\n      return true;\n    }\n\n    return component.dialogService.confirm(&apos;已有修改未保存，确定离开吗?&apos;);\n  }\n}\n\n//路由\nconst appRoutes: Routes = [\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard2]}\n];\n</code></pre><h3 id=\"数据预加载\"><a href=\"#数据预加载\" class=\"headerlink\" title=\"数据预加载\"></a>数据预加载</h3><p>预加载，顾名思义，就是在路由激活前对路由模板组件所需要的数据进行预先的获取，这样在路由激活展现时数据就已经有了，提高体验;而且，对于加载失败的情况也能作相应处理</p>\n<ul>\n<li>封装服务，实现Resolve接口，进行数据获取，获取成功，返回结果Data，继续激活路由;否则，不允许激活，一般会导航到首页</li>\n<li>注入服务到对应模块，在路由配置中添加对应服务</li>\n<li>组件使用时，直接使用路由保存的data</li>\n</ul>\n<p>封装服务：</p>\n<pre><code>import { Injectable }             from &apos;@angular/core&apos;;\nimport { Observable }             from &apos;rxjs/Observable&apos;;\nimport { Router, Resolve, RouterStateSnapshot,\n         ActivatedRouteSnapshot } from &apos;@angular/router&apos;;\nimport { Crisis, CrisisService }  from &apos;./crisis.service&apos;;\n\n@Injectable()\nexport class DataResolver implements Resolve&lt;User&gt; {\n  constructor(private userService: UserService, private router: Router) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable&lt;Crisis&gt; {\n    return this.userService.getUser(id).map(res =&gt; {\n      if (res) {\n        return res;\n      } else {\n        this.router.navigate([&apos;/login&apos;]);\n        return null;\n      }\n    });\n  }\n}\n</code></pre><p>配置路由：</p>\n<pre><code>const appRoutes: Routes = [\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard]，\n    resolve： {\n        user: DataResolver\n    }\n];\n</code></pre><p>组件使用：</p>\n<pre><code>export class TemplateFormComponent {\n  name : any;\n  user : any;\n\n  constructor(public dialogService : DialogService,private route: ActivatedRoute) {\n    this.route.data\n      .subscribe((data: { user: any }) =&gt; {\n        this.user = data.user;\n      });\n  }\n}\n</code></pre><h3 id=\"模块访问守卫\"><a href=\"#模块访问守卫\" class=\"headerlink\" title=\"模块访问守卫\"></a>模块访问守卫</h3><p>CanLoad守卫，对懒加载模块的加载限制，加载前进行逻辑处理，满足条件才加载该模块</p>\n<ul>\n<li>封装服务，实现CanLoad接口，进行逻辑判断，若返回true，则加载模块并路由;否则，不再加载</li>\n<li>注入服务到对应模块，在路由配置中添加对应服务</li>\n</ul>\n<p>封装服务：</p>\n<pre><code>import { Injectable }       from &apos;@angular/core&apos;;\nimport {\n   Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanLoad,Route\n}                           from &apos;@angular/router&apos;;\nimport { appService }      from &apos;./app.service&apos;;\n\n@Injectable()\nexport class AuthGuard implements CanLoad {\n  constructor(private appS: appService, private router: Router) {}\n\n  canLoad(route: Route): boolean {\n    let url = `/${route.path}`;\n\n    if (this.appS.isLogin) { return true; }\n\n    this.appS.redirectUrl = url;\n    this.router.navigate([&apos;/controls&apos;]);\n    return false;\n  }\n}\n</code></pre><p>配置路由：</p>\n<pre><code>const appRoutes: Routes = [\n  { path: &apos;controls&apos;, component: ControlComponent },\n  { path: &apos;reactiveForm&apos;,\n    loadChildren: &apos;app/reactive-form/reactive-form.module#ReactiveModule&apos;,\n    canLoad: [AuthGuard]\n  }\n];\n</code></pre><h3 id=\"模块预加载\"><a href=\"#模块预加载\" class=\"headerlink\" title=\"模块预加载\"></a>模块预加载</h3><p>在每次成功的导航后，路由器会在自己的配置中查找尚未加载并且可以预加载的模块。 是否加载某个模块，以及要加载哪些模块，取决于预加载策略。<br>Router内置了两种预加载策略：</p>\n<ul>\n<li>完全不预加载，这是默认值。惰性加载的特性区仍然会按需加载。</li>\n<li>预加载所有惰性加载的特性区。</li>\n</ul>\n<p>默认情况下，路由器或者完全不预加载或者预加载每个惰性加载模块。 路由器还支持自定义预加载策略，以便完全控制要预加载哪些模块以及何时加载。</p>\n<p><strong>1) 预加载所有模块</strong></p>\n<p>只需在根路由模块的forRoot方法传入附加参数即可，将加载策略设置preloadingStrategy设置为PreloadAllModules</p>\n<pre><code>import { NgModule }              from &apos;@angular/core&apos;;\nimport { RouterModule, Routes, PreloadAllModules }  from &apos;@angular/router&apos;;\nimport { ControlComponent } from &apos;./control/control.component&apos;;\nimport { TemplateFormComponent } from &apos;./template-form/template-form.component&apos;;\n\nimport { CanDeactivateGuard } from &apos;./can-deactivate-guard.service&apos;;\nimport { CanDeactivateGuard2 } from &apos;./can-deactivate-guard2.service&apos;;\nimport { AuthGuard } from &apos;./auth-guard.service&apos;;\n\nconst appRoutes: Routes = [\n  { path: &apos;controls&apos;, component: ControlComponent },\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard2]},\n  { path: &apos;reactiveForm&apos;,\n    loadChildren: &apos;app/reactive-form/reactive-form.module#ReactiveModule&apos;,\n    canLoad: [AuthGuard]\n  },\n  { path: &apos;login&apos;,\n    loadChildren: &apos;app/login/login.module#LoginModule&apos;\n  },\n  { path: &apos;&apos;,   redirectTo: &apos;/controls&apos;, pathMatch: &apos;full&apos; }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes,\n      {\n        enableTracing: true,\n        preloadingStrategy: PreloadAllModules\n      })\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n</code></pre><blockquote>\n<ul>\n<li>加载策略只能在根路由模块里设置，因为只有forRoot()可以配置参数，forChild()不行</li>\n<li>CanLoad守卫级别高于策略，会阻塞模块加载</li>\n</ul>\n</blockquote>\n<p><strong>2） 自定义加载策略</strong></p>\n<p>使用自定义预加载策略，可以控制路由器预加载哪些路由以及如何加载，作为例子，我们将只预加载那些data.preload标志为true的路由</p>\n<ul>\n<li>设置路由标识，标识哪些模块被预先加载</li>\n<li>定义策略服务，根据标识来判断并加载模块</li>\n<li>配置策略服务到路由模块</li>\n</ul>\n<p>策略服务</p>\n<pre><code>import &apos;rxjs/add/observable/of&apos;;\nimport { Injectable } from &apos;@angular/core&apos;;\nimport { PreloadingStrategy, Route } from &apos;@angular/router&apos;;\nimport { Observable } from &apos;rxjs/Observable&apos;;\n\n@Injectable()\nexport class SelectivePreloadingStrategy implements PreloadingStrategy {\n  preloadedModules: string[] = [];\n\n  preload(route: Route, load: () =&gt; Observable&lt;any&gt;): Observable&lt;any&gt; {\n    if (route.data &amp;&amp; route.data[&apos;preload&apos;]) {\n      // add the route path to the preloaded module array\n      this.preloadedModules.push(route.path);\n\n      // log the route path to the console\n      console.log(&apos;Preloaded: &apos; + route.path);\n\n      return load();\n    } else {\n      return Observable.of(null);\n    }\n  }\n}\n</code></pre><p>策略配置</p>\n<pre><code>const appRoutes: Routes = [\n  { path: &apos;controls&apos;, component: ControlComponent },\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard2]},\n  { path: &apos;reactiveForm&apos;,\n    loadChildren: &apos;app/reactive-form/reactive-form.module#ReactiveModule&apos;,\n    data: {Preloaded: false}\n  },\n  { path: &apos;login&apos;,\n    loadChildren: &apos;app/login/login.module#LoginModule&apos;,\n    data: {Preloaded: true}\n  },\n  { path: &apos;&apos;,   redirectTo: &apos;/controls&apos;, pathMatch: &apos;full&apos; }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes,\n      {\n        enableTracing: true,\n        preloadingStrategy: SelectivePreloadingStrategy\n      })\n  ],\n  exports: [\n    RouterModule\n  ]，\n  providers: [SelectivePreloadingStrategy]\n})\nexport class AppRoutingModule {}\n</code></pre>","site":{"data":{}},"excerpt":"<p>路由守卫，顾名思义，是守护路由的导航激活，在路由激活之前进行逻辑判断和数据处理;比如：路由权限的判断，表单填写丢弃的询问，以及路由激活前数据额预加载..等等，都是守卫干的工作，下面会根据使用场景不同介绍几种守卫的实现<br>","more":"</p>\n<h3 id=\"路由激活守卫\"><a href=\"#路由激活守卫\" class=\"headerlink\" title=\"路由激活守卫\"></a>路由激活守卫</h3><p>CanActivate守卫，用于对某个页面导航的守卫，在导航前可以作逻辑判断，比如：是否有访问权限，来判断是否激活这个路由来查看页面<br>主要步骤有：</p>\n<ul>\n<li>封装服务，实现CanActivate接口，返回true，则允许激活;否则，不允许激活</li>\n<li>注入服务到对应模块，在路由配置中添加对于服务</li>\n</ul>\n<p>定义守卫服务：实现CanActivate守卫接口，判断是否登录;若已登录,则返回true,激活路由;否则，则返回flase，无法激活路由并返回登录首页</p>\n<pre><code>import { Injectable }       from &apos;@angular/core&apos;;\nimport {CanActivate, Router,ActivatedRouteSnapshot,RouterStateSnapshot}                           from &apos;@angular/router&apos;;\nimport { AuthService }      from &apos;./auth.service&apos;;\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    let url: string = state.url;\n\n    if (this.authService.isLoggedIn) {\n        return true;\n    } else {\n        this.authService.redirectUrl = url;\n        this.router.navigate([&apos;/login&apos;]);\n        return false;\n    }\n  }\n}\n\nconst adminRoutes: Routes = [\n  {\n    path: &apos;admin&apos;,\n    component: AdminComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n          { path: &apos;crises&apos;, component: ManageCrisesComponent },\n          { path: &apos;heroes&apos;, component: ManageHeroesComponent }\n      }\n    ]\n  }\n];\n</code></pre><h3 id=\"子路由激活守卫\"><a href=\"#子路由激活守卫\" class=\"headerlink\" title=\"子路由激活守卫\"></a>子路由激活守卫</h3><p>linkCanAcitvateChild守卫，用于对某个子页面导航的守卫，在导航前可以作逻辑判断，比如：是否有访问权限，来判断是否激活这个路由来查看页面，实现与上面类似</p>\n<pre><code>import { Injectable }       from &apos;@angular/core&apos;;\nimport {CanActivate, Router,ActivatedRouteSnapshot,\n  RouterStateSnapshot,CanActivateChild} from &apos;@angular/router&apos;;\nimport { AuthService }      from &apos;./auth.service&apos;;\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    let url: string = state.url;\n\n    if (this.authService.isLoggedIn) {\n        return true;\n    } else {\n        this.authService.redirectUrl = url;\n        this.router.navigate([&apos;/login&apos;]);\n        return false;\n    }\n  }\n\n/* . . . */\n}\n\nconst adminRoutes: Routes = [\n  {\n    path: &apos;admin&apos;,\n    component: AdminComponent,\n    children: [\n      {\n        path: &apos;&apos;,\n        canActivateChild: [AuthGuard],\n        children: [\n          { path: &apos;crises&apos;, component: ManageCrisesComponent },\n          { path: &apos;heroes&apos;, component: ManageHeroesComponent },\n          { path: &apos;&apos;, component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n</code></pre><h3 id=\"表单去激活守卫\"><a href=\"#表单去激活守卫\" class=\"headerlink\" title=\"表单去激活守卫\"></a>表单去激活守卫</h3><p>CanDeactivate守卫，用于在填写表单时路由离开时使用，可进行判断是否离开，并进行一些数据处理</p>\n<ul>\n<li>封装服务，实现CanDeactivate接口，实现逻辑判断，返回true，则允许去激活，直接导航出去;否则，不允许激活，一般会以弹框询求确定</li>\n<li>注入服务到对应模块，在路由配置中添加对于服务</li>\n</ul>\n<p>去激活守卫有两种实现方式：公共方式和特有组件方式</p>\n<p><strong>1）公共方式</strong></p>\n<p>封装公共服务实现CanDeactivate接口，接受具体组件类的方法调用;各个需要使用的组件实现CanDeactivate方法即可</p>\n<p>dialog.ts</p>\n<pre><code>import &apos;rxjs/add/observable/of&apos;;\nimport { Injectable } from &apos;@angular/core&apos;;\nimport { Observable } from &apos;rxjs/Observable&apos;;\n\n/**\n * Async modal dialog service\n * DialogService makes this app easier to test by faking this service.\n * TODO: better modal implementation that doesn&apos;t use window.confirm\n */\n@Injectable()\nexport class DialogService {\n  /**\n   * Ask user to confirm an action. `message` explains the action and choices.\n   * Returns observable resolving to `true`=confirm or `false`=cancel\n   */\n  confirm(message?: string): Observable&lt;boolean&gt; {\n    const confirmation = window.confirm(message || &apos;Is it OK?&apos;);\n\n    return Observable.of(confirmation);\n  };\n}\n</code></pre><p>deactive-guard.service</p>\n<pre><code>import { Injectable }    from &apos;@angular/core&apos;;\nimport { CanDeactivate } from &apos;@angular/router&apos;;\nimport { Observable }    from &apos;rxjs/Observable&apos;;\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;\n}\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate&lt;CanComponentDeactivate&gt; {\n  canDeactivate(component: CanComponentDeactivate) {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n</code></pre><p>具体组件内实现canDeactivate方法：</p>\n<pre><code>export class TemplateFormComponent {\n  name : any;\n  password : any;\n\n  constructor(public dialogService : DialogService) {\n\n  }\n\n  canDeactivate(): Observable&lt;boolean&gt; | boolean {\n    if (!this.name &amp;&amp; !this.password) {\n      return true;\n    }\n\n    return this.dialogService.confirm(&apos;已有修改未保存，确定离开吗?&apos;);\n  }\n}\n</code></pre><p>路由配置</p>\n<pre><code>const appRoutes: Routes = [\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard]}\n];\n</code></pre><p><strong>2）特定方式</strong></p>\n<p>即为具体组件实现对于的服务，注入特定组件的实例来进行逻辑判断</p>\n<pre><code>import { Injectable }           from &apos;@angular/core&apos;;\nimport { Observable }           from &apos;rxjs/Observable&apos;;\nimport { CanDeactivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot }  from &apos;@angular/router&apos;;\n\nimport { TemplateFormComponent } from &apos;./template-form/template-form.component&apos;;\n\n@Injectable()\nexport class CanDeactivateGuard2 implements CanDeactivate&lt;TemplateFormComponent&gt; {\n\n  canDeactivate(\n    component: TemplateFormComponent,\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable&lt;boolean&gt; | boolean {\n    console.log(state.url);\n\n    if (!component.name &amp;&amp; !component.password) {\n      return true;\n    }\n\n    return component.dialogService.confirm(&apos;已有修改未保存，确定离开吗?&apos;);\n  }\n}\n\n//路由\nconst appRoutes: Routes = [\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard2]}\n];\n</code></pre><h3 id=\"数据预加载\"><a href=\"#数据预加载\" class=\"headerlink\" title=\"数据预加载\"></a>数据预加载</h3><p>预加载，顾名思义，就是在路由激活前对路由模板组件所需要的数据进行预先的获取，这样在路由激活展现时数据就已经有了，提高体验;而且，对于加载失败的情况也能作相应处理</p>\n<ul>\n<li>封装服务，实现Resolve接口，进行数据获取，获取成功，返回结果Data，继续激活路由;否则，不允许激活，一般会导航到首页</li>\n<li>注入服务到对应模块，在路由配置中添加对应服务</li>\n<li>组件使用时，直接使用路由保存的data</li>\n</ul>\n<p>封装服务：</p>\n<pre><code>import { Injectable }             from &apos;@angular/core&apos;;\nimport { Observable }             from &apos;rxjs/Observable&apos;;\nimport { Router, Resolve, RouterStateSnapshot,\n         ActivatedRouteSnapshot } from &apos;@angular/router&apos;;\nimport { Crisis, CrisisService }  from &apos;./crisis.service&apos;;\n\n@Injectable()\nexport class DataResolver implements Resolve&lt;User&gt; {\n  constructor(private userService: UserService, private router: Router) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable&lt;Crisis&gt; {\n    return this.userService.getUser(id).map(res =&gt; {\n      if (res) {\n        return res;\n      } else {\n        this.router.navigate([&apos;/login&apos;]);\n        return null;\n      }\n    });\n  }\n}\n</code></pre><p>配置路由：</p>\n<pre><code>const appRoutes: Routes = [\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard]，\n    resolve： {\n        user: DataResolver\n    }\n];\n</code></pre><p>组件使用：</p>\n<pre><code>export class TemplateFormComponent {\n  name : any;\n  user : any;\n\n  constructor(public dialogService : DialogService,private route: ActivatedRoute) {\n    this.route.data\n      .subscribe((data: { user: any }) =&gt; {\n        this.user = data.user;\n      });\n  }\n}\n</code></pre><h3 id=\"模块访问守卫\"><a href=\"#模块访问守卫\" class=\"headerlink\" title=\"模块访问守卫\"></a>模块访问守卫</h3><p>CanLoad守卫，对懒加载模块的加载限制，加载前进行逻辑处理，满足条件才加载该模块</p>\n<ul>\n<li>封装服务，实现CanLoad接口，进行逻辑判断，若返回true，则加载模块并路由;否则，不再加载</li>\n<li>注入服务到对应模块，在路由配置中添加对应服务</li>\n</ul>\n<p>封装服务：</p>\n<pre><code>import { Injectable }       from &apos;@angular/core&apos;;\nimport {\n   Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanLoad,Route\n}                           from &apos;@angular/router&apos;;\nimport { appService }      from &apos;./app.service&apos;;\n\n@Injectable()\nexport class AuthGuard implements CanLoad {\n  constructor(private appS: appService, private router: Router) {}\n\n  canLoad(route: Route): boolean {\n    let url = `/${route.path}`;\n\n    if (this.appS.isLogin) { return true; }\n\n    this.appS.redirectUrl = url;\n    this.router.navigate([&apos;/controls&apos;]);\n    return false;\n  }\n}\n</code></pre><p>配置路由：</p>\n<pre><code>const appRoutes: Routes = [\n  { path: &apos;controls&apos;, component: ControlComponent },\n  { path: &apos;reactiveForm&apos;,\n    loadChildren: &apos;app/reactive-form/reactive-form.module#ReactiveModule&apos;,\n    canLoad: [AuthGuard]\n  }\n];\n</code></pre><h3 id=\"模块预加载\"><a href=\"#模块预加载\" class=\"headerlink\" title=\"模块预加载\"></a>模块预加载</h3><p>在每次成功的导航后，路由器会在自己的配置中查找尚未加载并且可以预加载的模块。 是否加载某个模块，以及要加载哪些模块，取决于预加载策略。<br>Router内置了两种预加载策略：</p>\n<ul>\n<li>完全不预加载，这是默认值。惰性加载的特性区仍然会按需加载。</li>\n<li>预加载所有惰性加载的特性区。</li>\n</ul>\n<p>默认情况下，路由器或者完全不预加载或者预加载每个惰性加载模块。 路由器还支持自定义预加载策略，以便完全控制要预加载哪些模块以及何时加载。</p>\n<p><strong>1) 预加载所有模块</strong></p>\n<p>只需在根路由模块的forRoot方法传入附加参数即可，将加载策略设置preloadingStrategy设置为PreloadAllModules</p>\n<pre><code>import { NgModule }              from &apos;@angular/core&apos;;\nimport { RouterModule, Routes, PreloadAllModules }  from &apos;@angular/router&apos;;\nimport { ControlComponent } from &apos;./control/control.component&apos;;\nimport { TemplateFormComponent } from &apos;./template-form/template-form.component&apos;;\n\nimport { CanDeactivateGuard } from &apos;./can-deactivate-guard.service&apos;;\nimport { CanDeactivateGuard2 } from &apos;./can-deactivate-guard2.service&apos;;\nimport { AuthGuard } from &apos;./auth-guard.service&apos;;\n\nconst appRoutes: Routes = [\n  { path: &apos;controls&apos;, component: ControlComponent },\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard2]},\n  { path: &apos;reactiveForm&apos;,\n    loadChildren: &apos;app/reactive-form/reactive-form.module#ReactiveModule&apos;,\n    canLoad: [AuthGuard]\n  },\n  { path: &apos;login&apos;,\n    loadChildren: &apos;app/login/login.module#LoginModule&apos;\n  },\n  { path: &apos;&apos;,   redirectTo: &apos;/controls&apos;, pathMatch: &apos;full&apos; }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes,\n      {\n        enableTracing: true,\n        preloadingStrategy: PreloadAllModules\n      })\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n</code></pre><blockquote>\n<ul>\n<li>加载策略只能在根路由模块里设置，因为只有forRoot()可以配置参数，forChild()不行</li>\n<li>CanLoad守卫级别高于策略，会阻塞模块加载</li>\n</ul>\n</blockquote>\n<p><strong>2） 自定义加载策略</strong></p>\n<p>使用自定义预加载策略，可以控制路由器预加载哪些路由以及如何加载，作为例子，我们将只预加载那些data.preload标志为true的路由</p>\n<ul>\n<li>设置路由标识，标识哪些模块被预先加载</li>\n<li>定义策略服务，根据标识来判断并加载模块</li>\n<li>配置策略服务到路由模块</li>\n</ul>\n<p>策略服务</p>\n<pre><code>import &apos;rxjs/add/observable/of&apos;;\nimport { Injectable } from &apos;@angular/core&apos;;\nimport { PreloadingStrategy, Route } from &apos;@angular/router&apos;;\nimport { Observable } from &apos;rxjs/Observable&apos;;\n\n@Injectable()\nexport class SelectivePreloadingStrategy implements PreloadingStrategy {\n  preloadedModules: string[] = [];\n\n  preload(route: Route, load: () =&gt; Observable&lt;any&gt;): Observable&lt;any&gt; {\n    if (route.data &amp;&amp; route.data[&apos;preload&apos;]) {\n      // add the route path to the preloaded module array\n      this.preloadedModules.push(route.path);\n\n      // log the route path to the console\n      console.log(&apos;Preloaded: &apos; + route.path);\n\n      return load();\n    } else {\n      return Observable.of(null);\n    }\n  }\n}\n</code></pre><p>策略配置</p>\n<pre><code>const appRoutes: Routes = [\n  { path: &apos;controls&apos;, component: ControlComponent },\n  { path: &apos;templateForm&apos;,\n    component: TemplateFormComponent,\n    canDeactivate: [CanDeactivateGuard2]},\n  { path: &apos;reactiveForm&apos;,\n    loadChildren: &apos;app/reactive-form/reactive-form.module#ReactiveModule&apos;,\n    data: {Preloaded: false}\n  },\n  { path: &apos;login&apos;,\n    loadChildren: &apos;app/login/login.module#LoginModule&apos;,\n    data: {Preloaded: true}\n  },\n  { path: &apos;&apos;,   redirectTo: &apos;/controls&apos;, pathMatch: &apos;full&apos; }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes,\n      {\n        enableTracing: true,\n        preloadingStrategy: SelectivePreloadingStrategy\n      })\n  ],\n  exports: [\n    RouterModule\n  ]，\n  providers: [SelectivePreloadingStrategy]\n})\nexport class AppRoutingModule {}\n</code></pre>"},{"title":"Rxjs-响应式流编程","date":"2017-12-24T11:00:33.000Z","comments":1,"_content":"\n前端数据处理主要是异步的，来源于：用户操作，后台数据交互，定时处理等\n<!--more-->\n\n### Promise\n承诺promise是传统的异步数据处理方法，在业界广泛使用，主要使用方式：\n\n    function getData() {\n       return new Promise(Data);\n    }\n\n    getData().then((res) => {\n        callback(res);\n    });\n\n但是基于承诺的数据处理有诸多问题，比如：\n\n- 一次只能处理一个请求，连续多个数据的时候处理困难\n- 无失败重试\n- 不能请求取消\n\n但是由于它能处理大部分的数据且用法简单，所以仍是使用最多的\n\n### RXJS\nrxjs作为新的数据处理方式，可替代常用的promise/callback等，因为它拥有它们的粗里能力，同时也有新的其他方式所不及的能力\nrxjs能处理的数据包括：http请求，event事件回调，读取文件，用户操作，点击事件等等\n\n##### 1. 基本知识\nrxjs是数据流处理工具，在它看来，万物皆为流或者可转化为流来处理，流可以连续处理，可以截断，也可以进行转换，所以rxjs是对变化进行响应的响应式编程模式，主要有如下特点：\n\n- 面向数据流的变化与传播\n- 函数式编程，链式调用\n- 迭代器式编程，遍历机制\n- 观察者模式\n- 声明式编程\n\n##### 2. 组成部分\n\nRxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理。\n\n- Observable: 被观察者，也称为观察对象/数据生产者/数据流容器\n- Observer: 观察者，也称为数据流消费者\n- operators: 数据流操作动作\n- subscribe: 数据流订阅符\n- Subject: 发射数据给多个observer的Observable\n\n###### **1. Observable**\nObservable可以处理或包装处理**同**和**异步**的数据流，是数据流的生产者，产生的它的方式有很多，任何数据都可以包装成可观察对象来处理：\n\n    //单值\n    var obj = Observable.of(2017);\n    //多值\n    var obj = Observable.from([1,2,3,4,5]) or Observable.of(1,2,3,4,5);\n    //promise\n    var g = new Promise(...);\n    var obj = Observable.fromPromise(g);\n    //new\n    var obj = new Observable(observer => {});\n    //create\n    var obj = Rx.Observable.create(observer => {\n        observer.next();\n        observer.error();\n        observer.complete();\n    });\n    //来自事件\n    var obj = Rx.Observable.fromEvent(dom,'keyup');\n\n例子：\n\n    let obj = Rx.Observable.create(observer => {\n      console.log('AAA');\n      observer.next(22);\n    });\n\n    obj.subscribe(x => console.log('a_'+x));\n    obj.subscribe(y => console.log('b_'+y));\n\n结果：\n\n    AAA\n    a_22\n    AAA\n    b_22\n\n- 可以把obj想象成一个函数，你每次调用obj都会导致传入Rx.Observable.create里的回调函数重新执行一次, 调用的方式为obj.subscribe(callback), 相当于obj()\n- observer.next表示返回一个值, 你可以调用多次，每次调用observer.next后， 会先将next里的值返回给obj.subcribe里的回调函数, 执行完后再返回\n\n> - Observable类似于函数，但又不同于回调函数，Observable可发射多个值，而函数每次只能返回一个\n> - Observable可同步或异步推送数据给观察者，而观察者只是从数据生产者拉取数据，不关心是否同步\n\nobserver的next,complete, error可以用来来控制流程，比如:\n\n    var observable = Rx.Observable.create(observer => {\n      try {\n        console.log('AAA');\n        observer.next(11);\n        observer.next(22);\n        observer.complete();\n        observer.next(33);\n      } catch (err) {\n        observer.error(err);\n      }\n    });\n\n    let subcription = observable.subscribe(res => {\n      console.log(‘a_’+res);\n    })\n\n结果：\n\n    AAA\n    a_11\n    a_22\n\n可以看到，\n- observable的next(22)有效，而next(33)无效了，因为complete（）在其之前调用，阻止了值的发射\n- Observable可以连续发射和处理多个值，这是和Promise不同的地方，Promise只能通过链接的then()来实现\n- 当observable的执行出现异常的时候，通过observer.error将错误返回, 而observable.subscribe的回调函数无法接收到错误\n\n###### **2. Observer**\n对象观察者，数据消费者，即对Observable的数据流进行处理，通常不直接构造这个对象，而是在观察对象被订阅调用时创建这个对象，它有三个方法：\n\n    class Observer {\n        next(data) { //正常数据的反射出路 }\n        error(data) { //错误处理 }\n        complete(data) { //手动停止数据发射 }\n    }\n\n比如：\n\n    var obj = Rx.Observable.create(observer);\n\n    obj.subscribe(callback(res));\n\n其中回调函数callback(res)就是观察者，只不过实际运行时是将它内部转变成oberver对象来处理：\n\n    oo = new observer() {\n        next(value) {callback(value);}\n        error(error) {..}\n        complete() {}\n    }\n\n    Rx.Observable.create(oo);\n\n就这样回调函数被封装成观察者对象来进行数据处理，举个更简单的例子：\n\n    var observable = Observable.of([1,2,3]);\n\n    observable.subscribe(\n        (res) => {console.log('AB'+res);}，\n       （error）=> {console.log('Error'+error);}\n    );\n\n回调函数封装：\n\n    observer = {\n        next(v) => { console.log('AB-'+v); }\n        error(v) => { console.log('Error'+v); }\n        complete(v) => { ... }\n    }\n\n由observer来对被观察对象的数据流进行处理，结果如下：\n\n    AB-1\n    AB-2\n    AB-3\n\n由于观察者实例一般只有在订阅调用时被创建，所以就容易理解我们的“冷模式”了，只有订阅被调用时才有效\n\n###### **3. subscribe**\n\n当调用了 observable.subscribe ，观察者会被附加到新创建的 Observable 执行中。这个调用还返回一个对象，即 Subscription (订阅)：\n\n    var subscription = observable.subscribe(x => console.log(x));\n\nSubscription 表示进行中的执行，它有最小化的 API 以允许你取消执行。想了解更多订阅相关的内容，请参见 Subscription 类型。使用 subscription.unsubscribe() 你可以取消进行中的执行：\n\n    var observable = Rx.Observable.from([10, 20, 30]);\n    var subscription = observable.subscribe(x => console.log(x));\n    // 稍后：\n    subscription.unsubscribe();\n\n当你订阅了 Observable，你会得到一个 Subscription ，它表示进行中的执行。只要调用 unsubscribe() 方法就可以取消执行，否则会造成内存泄漏;\n\n**Subscription 还可以合在一起**，这样一个 Subscription 调用 unsubscribe() 方法，可能会有多个 Subscription 取消订阅 。你可以通过把一个 Subscription 添加到另一个上面来做这件事：\n\n    var observable1 = Rx.Observable.interval(400);\n    var observable2 = Rx.Observable.interval(300);\n\n    var subscription = observable1.subscribe(x => console.log('first: ' + x));\n    var childSubscription = observable2.subscribe(x => console.log('second: ' + x));\n\n    subscription.add(childSubscription);\n\n    setTimeout(() => {\n      // subscription 和 childSubscription 都会取消订阅\n      subscription.unsubscribe();\n    }, 1000);\n\n结果：\n\n    second: 0\n    first: 0\n    second: 1\n    first: 1\n    second: 2\n\nSubscriptions 还有一个 remove(otherSubscription) 方法，用来撤销一个已添加的子 Subscription\n\n> 取消订阅只是对数据流停止处理，并不能阻止数据的流动\n\n###### **4. operators**\n操作符分为实例操作符和静态操作符：\n- 实例操作符： 作用于对象实例，比如map，switch\n- 静态操作符: 属于Observable的静态方法，必须通过Observable来调用，比如：forkJoin()\n\n操作符对Observable对像的动作是纯的高阶函数，不会改变当前的对象，而是操作完返回一个新的Observable对象;这样可以供其他操作符处理，形成链式操作\nObservable的操作符很多，详细可参考官网：[Rxjs-opertors](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html)\n\n转换操作：\n\n- 改变数据形态：map, mapTo, pluck\n- 过滤一些值：filter, skip, first, last, take\n- 时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime\n- 累加：reduce, scan\n- 异常处理：throw, catch, retry, finally\n- 条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn\n- 转接：switch\n\n对若干个数据流进行组合：\n\n- concat，保持原来的序列顺序连接两个数据流\n- merge，合并序列\n- race，预设条件为其中一个数据流完成\n- forkJoin，预设条件为所有数据流都完成\n- zip，取各来源数据流最后一个值合并为对象\n- combineLatest，取各来源数据流最后一个值合并为数组\n\n***1)自己实现一个operators：***\n\n    function multiplyByTen(input) {\n      var output = Rx.Observable.create(function subscribe(observer) {\n        input.subscribe({\n          next: (v) => observer.next(10 * v),\n          error: (err) => observer.error(err),\n          complete: () => observer.complete()\n        });\n      });\n      return output;\n    }\n\n    var input = Rx.Observable.from([1, 2, 3, 4]);\n    var output = multiplyByTen(input);\n    output.subscribe(x => console.log(x));\n\n结果：\n\n    10\n    20\n    30\n    40\n\n***2) 数据流处理***\nRxJS一个很强大的特点是，它以流的方式来对待数据，因此，可以用一些操作符对整个流上所有的数据进行延时、取样、调整密集度等等。\n\n    const timeA$ = Observable.interval(1000)\n    const timeB$ = timeA$.filter(num => {\n        return (num % 2 != 0)\n          && (num % 3 != 0)\n          && (num % 5 != 0)\n          && (num % 7 != 0)\n      })\n\n    const timeC$ = timeB$.debounceTime(3000)\n    const timeD$ = timeC$.delay(2000)\n\n示例代码中，我们创建了四个流：\nA是由定时器产生的，每秒一个值\nB从A里面过滤掉了一些\nC在B的基础上，对每两个间距在3秒之内的值进行了处理，只留下后一个值\nD把C的结果整体向后平移了2秒\n\n所以结果大致如下：\n\n    A: 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21\n    B:    1                             11    13          17    19\n    C:          1                                   13                19\n    D:                1                                   13\n\n***3) 数据流处理***\n\n\n**5. Subject**\nSubject是一种能够发射数据给多个observer的Observable, 在 Subject 的内部，subscribe 不会调用发送值的新执行。\n它只是将给定的观察者注册到观察者列表中，类似于其他库或语言中的 addListener 的工作方式,例子：\n\n    var subject = new Rx.Subject();\n    subject.subscribe({\n      next: (v) => console.log('observerA: ' + v)\n    });\n    subject.subscribe({\n      next: (v) => console.log('observerB: ' + v)\n    });\n\n    subject.next(1);\n    subject.next(2);\n\n结果：\n\n    observerA: 1\n    observerB: 1\n    observerA: 2\n    observerB: 2\n\n可以看到\n- 与Observable不同的是， Subject发射数据给多个observer\n- 义subject的时候并没有传入callback， 这是因为subject自带next, complete, error等方法，从而可以发射数据给observer\n\nobserver只需要订阅处理数据即可，而并不关心数据来源是哪里\nSubject有各种特性不同的派生子类：\n- BehaviorSubject，能够保留最近的数据，使得当有subscribe的时候，立马发射出去\n- ReplaySubject，能够保留最近的一些数据， 使得当有subscribe的时候，将这些数据发射出去\n- AsyncSubject，只会发射结束前的一个数据\n\n既然subject有next, error, complete三种方法， 那subject就可以作为observer来使用，比如：\n\n    var subject = new Rx.Subject();\n\n    subject.subscribe({\n      next: (v) => console.log('AA: ' + v)\n    });\n    subject.subscribe({\n      next: (v) => console.log('BB: ' + v)\n    });\n\n    var observable = Rx.Observable.from([1, 2, 3]);\n\n    observable.subscribe(subject);\n\n输出结果：\n\n    AA: 1\n    BB: 1\n    AA: 2\n    BB: 2\n    AA: 3\n    BB: 3\n\n也就是说， observable.subscribe可以传入一个subject来订阅其消息，这就好像是Rxjs中的一颗语法糖\n\n##### 3. rxjs在angular里的使用\nangular是推荐使用rxjs进行http访问和其他的数据交互的，angular自身封装的Http服务返回的数据就是Observable对象，我们可以方便的运行rxjs的相关知识进行操作处理\n简单的例子：\n\n    getData() {\n        this.http.getAll(url).map((res) => {return res.json();})\n                             .catch(this.handleError)\n    }\n\n    handleError(error) {\n        console.error(error.msg);\n        Observable.throw(error.msg);\n    }\n\n    //使用\n    this.serve.getData().subscribe(\n        res => { this.data = res; }\n        error => { alert(error); }\n    );\n\n##### 4. rxjs使用\n\n**(1) 补丁方式**\n    npm install rxjs\n\n导入整个核心功能集：\n\n    import Rx from 'rxjs/Rx';\n    Rx.Observable.of(1,2,3)\n\n通过打补丁的方式只导入所需要的(这对于减少 bundling 的体积是十分有用的)：\n\n    import { Observable} from 'rxjs/Observable';\n    import 'rxjs/add/observable/of';\n    import 'rxjs/add/operator/map';\n\n    Observable.of(1,2,3).map(x => x + '!!!'); // 等等\n\n只导入需要的并且使用被提议的绑定操作符：\n> 注意：这个额外的预发需要编译器支持并且此语法可能会在没有任何通知的情况下完全从 TC39 撤回！要使用的话需要你自己来承担风险。\n\n    import { Observable } from 'rxjs/Observable';\n    import { of } from 'rxjs/observable/of';\n    import { map } from 'rxjs/operator/map';\n\n    Observable::of(1,2,3)::map(x => x + '!!!'); // 等等\n\n**（2）nodejs脚本使用**\n导入所有核心功能:\n\n    var Rx = require('rxjs/Rx');\n    Rx.Observable.of(1,2,3); // 等等\n\n通过打补丁的方式只导入所需要的(这对于减少 bundling 的体积是十分有用的)：\n\n    var Observable = require('rxjs/Observable').Observable;\n    // 使用适合的方法在 Observable 上打补丁\n    require('rxjs/add/observable/of');\n    require('rxjs/add/operator/map');\n\n    Observable.of(1,2,3).map(function (x) { return x + '!!!'; });\n\n导入操作符并手动地使用它们(这对于减少 bundling 的体积也十分有用)：\n\n    var of = require('rxjs/observable/of').of;\n    var map = require('rxjs/operator/map').map;\n    map.call(of(1,2,3), function (x) { return x + '!!!'; });\n\n\n","source":"_posts/2017-12-24-rxjs.md","raw":"---\ntitle: Rxjs-响应式流编程\ndate: 2017-12-24 19:00:33\ntags: rxjs\ncategories: 前端\ncomments: true\n---\n\n前端数据处理主要是异步的，来源于：用户操作，后台数据交互，定时处理等\n<!--more-->\n\n### Promise\n承诺promise是传统的异步数据处理方法，在业界广泛使用，主要使用方式：\n\n    function getData() {\n       return new Promise(Data);\n    }\n\n    getData().then((res) => {\n        callback(res);\n    });\n\n但是基于承诺的数据处理有诸多问题，比如：\n\n- 一次只能处理一个请求，连续多个数据的时候处理困难\n- 无失败重试\n- 不能请求取消\n\n但是由于它能处理大部分的数据且用法简单，所以仍是使用最多的\n\n### RXJS\nrxjs作为新的数据处理方式，可替代常用的promise/callback等，因为它拥有它们的粗里能力，同时也有新的其他方式所不及的能力\nrxjs能处理的数据包括：http请求，event事件回调，读取文件，用户操作，点击事件等等\n\n##### 1. 基本知识\nrxjs是数据流处理工具，在它看来，万物皆为流或者可转化为流来处理，流可以连续处理，可以截断，也可以进行转换，所以rxjs是对变化进行响应的响应式编程模式，主要有如下特点：\n\n- 面向数据流的变化与传播\n- 函数式编程，链式调用\n- 迭代器式编程，遍历机制\n- 观察者模式\n- 声明式编程\n\n##### 2. 组成部分\n\nRxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理。\n\n- Observable: 被观察者，也称为观察对象/数据生产者/数据流容器\n- Observer: 观察者，也称为数据流消费者\n- operators: 数据流操作动作\n- subscribe: 数据流订阅符\n- Subject: 发射数据给多个observer的Observable\n\n###### **1. Observable**\nObservable可以处理或包装处理**同**和**异步**的数据流，是数据流的生产者，产生的它的方式有很多，任何数据都可以包装成可观察对象来处理：\n\n    //单值\n    var obj = Observable.of(2017);\n    //多值\n    var obj = Observable.from([1,2,3,4,5]) or Observable.of(1,2,3,4,5);\n    //promise\n    var g = new Promise(...);\n    var obj = Observable.fromPromise(g);\n    //new\n    var obj = new Observable(observer => {});\n    //create\n    var obj = Rx.Observable.create(observer => {\n        observer.next();\n        observer.error();\n        observer.complete();\n    });\n    //来自事件\n    var obj = Rx.Observable.fromEvent(dom,'keyup');\n\n例子：\n\n    let obj = Rx.Observable.create(observer => {\n      console.log('AAA');\n      observer.next(22);\n    });\n\n    obj.subscribe(x => console.log('a_'+x));\n    obj.subscribe(y => console.log('b_'+y));\n\n结果：\n\n    AAA\n    a_22\n    AAA\n    b_22\n\n- 可以把obj想象成一个函数，你每次调用obj都会导致传入Rx.Observable.create里的回调函数重新执行一次, 调用的方式为obj.subscribe(callback), 相当于obj()\n- observer.next表示返回一个值, 你可以调用多次，每次调用observer.next后， 会先将next里的值返回给obj.subcribe里的回调函数, 执行完后再返回\n\n> - Observable类似于函数，但又不同于回调函数，Observable可发射多个值，而函数每次只能返回一个\n> - Observable可同步或异步推送数据给观察者，而观察者只是从数据生产者拉取数据，不关心是否同步\n\nobserver的next,complete, error可以用来来控制流程，比如:\n\n    var observable = Rx.Observable.create(observer => {\n      try {\n        console.log('AAA');\n        observer.next(11);\n        observer.next(22);\n        observer.complete();\n        observer.next(33);\n      } catch (err) {\n        observer.error(err);\n      }\n    });\n\n    let subcription = observable.subscribe(res => {\n      console.log(‘a_’+res);\n    })\n\n结果：\n\n    AAA\n    a_11\n    a_22\n\n可以看到，\n- observable的next(22)有效，而next(33)无效了，因为complete（）在其之前调用，阻止了值的发射\n- Observable可以连续发射和处理多个值，这是和Promise不同的地方，Promise只能通过链接的then()来实现\n- 当observable的执行出现异常的时候，通过observer.error将错误返回, 而observable.subscribe的回调函数无法接收到错误\n\n###### **2. Observer**\n对象观察者，数据消费者，即对Observable的数据流进行处理，通常不直接构造这个对象，而是在观察对象被订阅调用时创建这个对象，它有三个方法：\n\n    class Observer {\n        next(data) { //正常数据的反射出路 }\n        error(data) { //错误处理 }\n        complete(data) { //手动停止数据发射 }\n    }\n\n比如：\n\n    var obj = Rx.Observable.create(observer);\n\n    obj.subscribe(callback(res));\n\n其中回调函数callback(res)就是观察者，只不过实际运行时是将它内部转变成oberver对象来处理：\n\n    oo = new observer() {\n        next(value) {callback(value);}\n        error(error) {..}\n        complete() {}\n    }\n\n    Rx.Observable.create(oo);\n\n就这样回调函数被封装成观察者对象来进行数据处理，举个更简单的例子：\n\n    var observable = Observable.of([1,2,3]);\n\n    observable.subscribe(\n        (res) => {console.log('AB'+res);}，\n       （error）=> {console.log('Error'+error);}\n    );\n\n回调函数封装：\n\n    observer = {\n        next(v) => { console.log('AB-'+v); }\n        error(v) => { console.log('Error'+v); }\n        complete(v) => { ... }\n    }\n\n由observer来对被观察对象的数据流进行处理，结果如下：\n\n    AB-1\n    AB-2\n    AB-3\n\n由于观察者实例一般只有在订阅调用时被创建，所以就容易理解我们的“冷模式”了，只有订阅被调用时才有效\n\n###### **3. subscribe**\n\n当调用了 observable.subscribe ，观察者会被附加到新创建的 Observable 执行中。这个调用还返回一个对象，即 Subscription (订阅)：\n\n    var subscription = observable.subscribe(x => console.log(x));\n\nSubscription 表示进行中的执行，它有最小化的 API 以允许你取消执行。想了解更多订阅相关的内容，请参见 Subscription 类型。使用 subscription.unsubscribe() 你可以取消进行中的执行：\n\n    var observable = Rx.Observable.from([10, 20, 30]);\n    var subscription = observable.subscribe(x => console.log(x));\n    // 稍后：\n    subscription.unsubscribe();\n\n当你订阅了 Observable，你会得到一个 Subscription ，它表示进行中的执行。只要调用 unsubscribe() 方法就可以取消执行，否则会造成内存泄漏;\n\n**Subscription 还可以合在一起**，这样一个 Subscription 调用 unsubscribe() 方法，可能会有多个 Subscription 取消订阅 。你可以通过把一个 Subscription 添加到另一个上面来做这件事：\n\n    var observable1 = Rx.Observable.interval(400);\n    var observable2 = Rx.Observable.interval(300);\n\n    var subscription = observable1.subscribe(x => console.log('first: ' + x));\n    var childSubscription = observable2.subscribe(x => console.log('second: ' + x));\n\n    subscription.add(childSubscription);\n\n    setTimeout(() => {\n      // subscription 和 childSubscription 都会取消订阅\n      subscription.unsubscribe();\n    }, 1000);\n\n结果：\n\n    second: 0\n    first: 0\n    second: 1\n    first: 1\n    second: 2\n\nSubscriptions 还有一个 remove(otherSubscription) 方法，用来撤销一个已添加的子 Subscription\n\n> 取消订阅只是对数据流停止处理，并不能阻止数据的流动\n\n###### **4. operators**\n操作符分为实例操作符和静态操作符：\n- 实例操作符： 作用于对象实例，比如map，switch\n- 静态操作符: 属于Observable的静态方法，必须通过Observable来调用，比如：forkJoin()\n\n操作符对Observable对像的动作是纯的高阶函数，不会改变当前的对象，而是操作完返回一个新的Observable对象;这样可以供其他操作符处理，形成链式操作\nObservable的操作符很多，详细可参考官网：[Rxjs-opertors](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html)\n\n转换操作：\n\n- 改变数据形态：map, mapTo, pluck\n- 过滤一些值：filter, skip, first, last, take\n- 时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime\n- 累加：reduce, scan\n- 异常处理：throw, catch, retry, finally\n- 条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn\n- 转接：switch\n\n对若干个数据流进行组合：\n\n- concat，保持原来的序列顺序连接两个数据流\n- merge，合并序列\n- race，预设条件为其中一个数据流完成\n- forkJoin，预设条件为所有数据流都完成\n- zip，取各来源数据流最后一个值合并为对象\n- combineLatest，取各来源数据流最后一个值合并为数组\n\n***1)自己实现一个operators：***\n\n    function multiplyByTen(input) {\n      var output = Rx.Observable.create(function subscribe(observer) {\n        input.subscribe({\n          next: (v) => observer.next(10 * v),\n          error: (err) => observer.error(err),\n          complete: () => observer.complete()\n        });\n      });\n      return output;\n    }\n\n    var input = Rx.Observable.from([1, 2, 3, 4]);\n    var output = multiplyByTen(input);\n    output.subscribe(x => console.log(x));\n\n结果：\n\n    10\n    20\n    30\n    40\n\n***2) 数据流处理***\nRxJS一个很强大的特点是，它以流的方式来对待数据，因此，可以用一些操作符对整个流上所有的数据进行延时、取样、调整密集度等等。\n\n    const timeA$ = Observable.interval(1000)\n    const timeB$ = timeA$.filter(num => {\n        return (num % 2 != 0)\n          && (num % 3 != 0)\n          && (num % 5 != 0)\n          && (num % 7 != 0)\n      })\n\n    const timeC$ = timeB$.debounceTime(3000)\n    const timeD$ = timeC$.delay(2000)\n\n示例代码中，我们创建了四个流：\nA是由定时器产生的，每秒一个值\nB从A里面过滤掉了一些\nC在B的基础上，对每两个间距在3秒之内的值进行了处理，只留下后一个值\nD把C的结果整体向后平移了2秒\n\n所以结果大致如下：\n\n    A: 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21\n    B:    1                             11    13          17    19\n    C:          1                                   13                19\n    D:                1                                   13\n\n***3) 数据流处理***\n\n\n**5. Subject**\nSubject是一种能够发射数据给多个observer的Observable, 在 Subject 的内部，subscribe 不会调用发送值的新执行。\n它只是将给定的观察者注册到观察者列表中，类似于其他库或语言中的 addListener 的工作方式,例子：\n\n    var subject = new Rx.Subject();\n    subject.subscribe({\n      next: (v) => console.log('observerA: ' + v)\n    });\n    subject.subscribe({\n      next: (v) => console.log('observerB: ' + v)\n    });\n\n    subject.next(1);\n    subject.next(2);\n\n结果：\n\n    observerA: 1\n    observerB: 1\n    observerA: 2\n    observerB: 2\n\n可以看到\n- 与Observable不同的是， Subject发射数据给多个observer\n- 义subject的时候并没有传入callback， 这是因为subject自带next, complete, error等方法，从而可以发射数据给observer\n\nobserver只需要订阅处理数据即可，而并不关心数据来源是哪里\nSubject有各种特性不同的派生子类：\n- BehaviorSubject，能够保留最近的数据，使得当有subscribe的时候，立马发射出去\n- ReplaySubject，能够保留最近的一些数据， 使得当有subscribe的时候，将这些数据发射出去\n- AsyncSubject，只会发射结束前的一个数据\n\n既然subject有next, error, complete三种方法， 那subject就可以作为observer来使用，比如：\n\n    var subject = new Rx.Subject();\n\n    subject.subscribe({\n      next: (v) => console.log('AA: ' + v)\n    });\n    subject.subscribe({\n      next: (v) => console.log('BB: ' + v)\n    });\n\n    var observable = Rx.Observable.from([1, 2, 3]);\n\n    observable.subscribe(subject);\n\n输出结果：\n\n    AA: 1\n    BB: 1\n    AA: 2\n    BB: 2\n    AA: 3\n    BB: 3\n\n也就是说， observable.subscribe可以传入一个subject来订阅其消息，这就好像是Rxjs中的一颗语法糖\n\n##### 3. rxjs在angular里的使用\nangular是推荐使用rxjs进行http访问和其他的数据交互的，angular自身封装的Http服务返回的数据就是Observable对象，我们可以方便的运行rxjs的相关知识进行操作处理\n简单的例子：\n\n    getData() {\n        this.http.getAll(url).map((res) => {return res.json();})\n                             .catch(this.handleError)\n    }\n\n    handleError(error) {\n        console.error(error.msg);\n        Observable.throw(error.msg);\n    }\n\n    //使用\n    this.serve.getData().subscribe(\n        res => { this.data = res; }\n        error => { alert(error); }\n    );\n\n##### 4. rxjs使用\n\n**(1) 补丁方式**\n    npm install rxjs\n\n导入整个核心功能集：\n\n    import Rx from 'rxjs/Rx';\n    Rx.Observable.of(1,2,3)\n\n通过打补丁的方式只导入所需要的(这对于减少 bundling 的体积是十分有用的)：\n\n    import { Observable} from 'rxjs/Observable';\n    import 'rxjs/add/observable/of';\n    import 'rxjs/add/operator/map';\n\n    Observable.of(1,2,3).map(x => x + '!!!'); // 等等\n\n只导入需要的并且使用被提议的绑定操作符：\n> 注意：这个额外的预发需要编译器支持并且此语法可能会在没有任何通知的情况下完全从 TC39 撤回！要使用的话需要你自己来承担风险。\n\n    import { Observable } from 'rxjs/Observable';\n    import { of } from 'rxjs/observable/of';\n    import { map } from 'rxjs/operator/map';\n\n    Observable::of(1,2,3)::map(x => x + '!!!'); // 等等\n\n**（2）nodejs脚本使用**\n导入所有核心功能:\n\n    var Rx = require('rxjs/Rx');\n    Rx.Observable.of(1,2,3); // 等等\n\n通过打补丁的方式只导入所需要的(这对于减少 bundling 的体积是十分有用的)：\n\n    var Observable = require('rxjs/Observable').Observable;\n    // 使用适合的方法在 Observable 上打补丁\n    require('rxjs/add/observable/of');\n    require('rxjs/add/operator/map');\n\n    Observable.of(1,2,3).map(function (x) { return x + '!!!'; });\n\n导入操作符并手动地使用它们(这对于减少 bundling 的体积也十分有用)：\n\n    var of = require('rxjs/observable/of').of;\n    var map = require('rxjs/operator/map').map;\n    map.call(of(1,2,3), function (x) { return x + '!!!'; });\n\n\n","slug":"rxjs","published":1,"updated":"2017-12-28T15:40:57.275Z","layout":"post","photos":[],"link":"","_id":"cjqwe42bj0055or0bocslw6r5","content":"<p>前端数据处理主要是异步的，来源于：用户操作，后台数据交互，定时处理等<br><a id=\"more\"></a></p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>承诺promise是传统的异步数据处理方法，在业界广泛使用，主要使用方式：</p>\n<pre><code>function getData() {\n   return new Promise(Data);\n}\n\ngetData().then((res) =&gt; {\n    callback(res);\n});\n</code></pre><p>但是基于承诺的数据处理有诸多问题，比如：</p>\n<ul>\n<li>一次只能处理一个请求，连续多个数据的时候处理困难</li>\n<li>无失败重试</li>\n<li>不能请求取消</li>\n</ul>\n<p>但是由于它能处理大部分的数据且用法简单，所以仍是使用最多的</p>\n<h3 id=\"RXJS\"><a href=\"#RXJS\" class=\"headerlink\" title=\"RXJS\"></a>RXJS</h3><p>rxjs作为新的数据处理方式，可替代常用的promise/callback等，因为它拥有它们的粗里能力，同时也有新的其他方式所不及的能力<br>rxjs能处理的数据包括：http请求，event事件回调，读取文件，用户操作，点击事件等等</p>\n<h5 id=\"1-基本知识\"><a href=\"#1-基本知识\" class=\"headerlink\" title=\"1. 基本知识\"></a>1. 基本知识</h5><p>rxjs是数据流处理工具，在它看来，万物皆为流或者可转化为流来处理，流可以连续处理，可以截断，也可以进行转换，所以rxjs是对变化进行响应的响应式编程模式，主要有如下特点：</p>\n<ul>\n<li>面向数据流的变化与传播</li>\n<li>函数式编程，链式调用</li>\n<li>迭代器式编程，遍历机制</li>\n<li>观察者模式</li>\n<li>声明式编程</li>\n</ul>\n<h5 id=\"2-组成部分\"><a href=\"#2-组成部分\" class=\"headerlink\" title=\"2. 组成部分\"></a>2. 组成部分</h5><p>RxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理。</p>\n<ul>\n<li>Observable: 被观察者，也称为观察对象/数据生产者/数据流容器</li>\n<li>Observer: 观察者，也称为数据流消费者</li>\n<li>operators: 数据流操作动作</li>\n<li>subscribe: 数据流订阅符</li>\n<li>Subject: 发射数据给多个observer的Observable</li>\n</ul>\n<h6 id=\"1-Observable\"><a href=\"#1-Observable\" class=\"headerlink\" title=\"1. Observable\"></a><strong>1. Observable</strong></h6><p>Observable可以处理或包装处理<strong>同</strong>和<strong>异步</strong>的数据流，是数据流的生产者，产生的它的方式有很多，任何数据都可以包装成可观察对象来处理：</p>\n<pre><code>//单值\nvar obj = Observable.of(2017);\n//多值\nvar obj = Observable.from([1,2,3,4,5]) or Observable.of(1,2,3,4,5);\n//promise\nvar g = new Promise(...);\nvar obj = Observable.fromPromise(g);\n//new\nvar obj = new Observable(observer =&gt; {});\n//create\nvar obj = Rx.Observable.create(observer =&gt; {\n    observer.next();\n    observer.error();\n    observer.complete();\n});\n//来自事件\nvar obj = Rx.Observable.fromEvent(dom,&apos;keyup&apos;);\n</code></pre><p>例子：</p>\n<pre><code>let obj = Rx.Observable.create(observer =&gt; {\n  console.log(&apos;AAA&apos;);\n  observer.next(22);\n});\n\nobj.subscribe(x =&gt; console.log(&apos;a_&apos;+x));\nobj.subscribe(y =&gt; console.log(&apos;b_&apos;+y));\n</code></pre><p>结果：</p>\n<pre><code>AAA\na_22\nAAA\nb_22\n</code></pre><ul>\n<li>可以把obj想象成一个函数，你每次调用obj都会导致传入Rx.Observable.create里的回调函数重新执行一次, 调用的方式为obj.subscribe(callback), 相当于obj()</li>\n<li>observer.next表示返回一个值, 你可以调用多次，每次调用observer.next后， 会先将next里的值返回给obj.subcribe里的回调函数, 执行完后再返回</li>\n</ul>\n<blockquote>\n<ul>\n<li>Observable类似于函数，但又不同于回调函数，Observable可发射多个值，而函数每次只能返回一个</li>\n<li>Observable可同步或异步推送数据给观察者，而观察者只是从数据生产者拉取数据，不关心是否同步</li>\n</ul>\n</blockquote>\n<p>observer的next,complete, error可以用来来控制流程，比如:</p>\n<pre><code>var observable = Rx.Observable.create(observer =&gt; {\n  try {\n    console.log(&apos;AAA&apos;);\n    observer.next(11);\n    observer.next(22);\n    observer.complete();\n    observer.next(33);\n  } catch (err) {\n    observer.error(err);\n  }\n});\n\nlet subcription = observable.subscribe(res =&gt; {\n  console.log(‘a_’+res);\n})\n</code></pre><p>结果：</p>\n<pre><code>AAA\na_11\na_22\n</code></pre><p>可以看到，</p>\n<ul>\n<li>observable的next(22)有效，而next(33)无效了，因为complete（）在其之前调用，阻止了值的发射</li>\n<li>Observable可以连续发射和处理多个值，这是和Promise不同的地方，Promise只能通过链接的then()来实现</li>\n<li>当observable的执行出现异常的时候，通过observer.error将错误返回, 而observable.subscribe的回调函数无法接收到错误</li>\n</ul>\n<h6 id=\"2-Observer\"><a href=\"#2-Observer\" class=\"headerlink\" title=\"2. Observer\"></a><strong>2. Observer</strong></h6><p>对象观察者，数据消费者，即对Observable的数据流进行处理，通常不直接构造这个对象，而是在观察对象被订阅调用时创建这个对象，它有三个方法：</p>\n<pre><code>class Observer {\n    next(data) { //正常数据的反射出路 }\n    error(data) { //错误处理 }\n    complete(data) { //手动停止数据发射 }\n}\n</code></pre><p>比如：</p>\n<pre><code>var obj = Rx.Observable.create(observer);\n\nobj.subscribe(callback(res));\n</code></pre><p>其中回调函数callback(res)就是观察者，只不过实际运行时是将它内部转变成oberver对象来处理：</p>\n<pre><code>oo = new observer() {\n    next(value) {callback(value);}\n    error(error) {..}\n    complete() {}\n}\n\nRx.Observable.create(oo);\n</code></pre><p>就这样回调函数被封装成观察者对象来进行数据处理，举个更简单的例子：</p>\n<pre><code>var observable = Observable.of([1,2,3]);\n\nobservable.subscribe(\n    (res) =&gt; {console.log(&apos;AB&apos;+res);}，\n   （error）=&gt; {console.log(&apos;Error&apos;+error);}\n);\n</code></pre><p>回调函数封装：</p>\n<pre><code>observer = {\n    next(v) =&gt; { console.log(&apos;AB-&apos;+v); }\n    error(v) =&gt; { console.log(&apos;Error&apos;+v); }\n    complete(v) =&gt; { ... }\n}\n</code></pre><p>由observer来对被观察对象的数据流进行处理，结果如下：</p>\n<pre><code>AB-1\nAB-2\nAB-3\n</code></pre><p>由于观察者实例一般只有在订阅调用时被创建，所以就容易理解我们的“冷模式”了，只有订阅被调用时才有效</p>\n<h6 id=\"3-subscribe\"><a href=\"#3-subscribe\" class=\"headerlink\" title=\"3. subscribe\"></a><strong>3. subscribe</strong></h6><p>当调用了 observable.subscribe ，观察者会被附加到新创建的 Observable 执行中。这个调用还返回一个对象，即 Subscription (订阅)：</p>\n<pre><code>var subscription = observable.subscribe(x =&gt; console.log(x));\n</code></pre><p>Subscription 表示进行中的执行，它有最小化的 API 以允许你取消执行。想了解更多订阅相关的内容，请参见 Subscription 类型。使用 subscription.unsubscribe() 你可以取消进行中的执行：</p>\n<pre><code>var observable = Rx.Observable.from([10, 20, 30]);\nvar subscription = observable.subscribe(x =&gt; console.log(x));\n// 稍后：\nsubscription.unsubscribe();\n</code></pre><p>当你订阅了 Observable，你会得到一个 Subscription ，它表示进行中的执行。只要调用 unsubscribe() 方法就可以取消执行，否则会造成内存泄漏;</p>\n<p><strong>Subscription 还可以合在一起</strong>，这样一个 Subscription 调用 unsubscribe() 方法，可能会有多个 Subscription 取消订阅 。你可以通过把一个 Subscription 添加到另一个上面来做这件事：</p>\n<pre><code>var observable1 = Rx.Observable.interval(400);\nvar observable2 = Rx.Observable.interval(300);\n\nvar subscription = observable1.subscribe(x =&gt; console.log(&apos;first: &apos; + x));\nvar childSubscription = observable2.subscribe(x =&gt; console.log(&apos;second: &apos; + x));\n\nsubscription.add(childSubscription);\n\nsetTimeout(() =&gt; {\n  // subscription 和 childSubscription 都会取消订阅\n  subscription.unsubscribe();\n}, 1000);\n</code></pre><p>结果：</p>\n<pre><code>second: 0\nfirst: 0\nsecond: 1\nfirst: 1\nsecond: 2\n</code></pre><p>Subscriptions 还有一个 remove(otherSubscription) 方法，用来撤销一个已添加的子 Subscription</p>\n<blockquote>\n<p>取消订阅只是对数据流停止处理，并不能阻止数据的流动</p>\n</blockquote>\n<h6 id=\"4-operators\"><a href=\"#4-operators\" class=\"headerlink\" title=\"4. operators\"></a><strong>4. operators</strong></h6><p>操作符分为实例操作符和静态操作符：</p>\n<ul>\n<li>实例操作符： 作用于对象实例，比如map，switch</li>\n<li>静态操作符: 属于Observable的静态方法，必须通过Observable来调用，比如：forkJoin()</li>\n</ul>\n<p>操作符对Observable对像的动作是纯的高阶函数，不会改变当前的对象，而是操作完返回一个新的Observable对象;这样可以供其他操作符处理，形成链式操作<br>Observable的操作符很多，详细可参考官网：<a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html\" target=\"_blank\" rel=\"external\">Rxjs-opertors</a></p>\n<p>转换操作：</p>\n<ul>\n<li>改变数据形态：map, mapTo, pluck</li>\n<li>过滤一些值：filter, skip, first, last, take</li>\n<li>时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime</li>\n<li>累加：reduce, scan</li>\n<li>异常处理：throw, catch, retry, finally</li>\n<li>条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn</li>\n<li>转接：switch</li>\n</ul>\n<p>对若干个数据流进行组合：</p>\n<ul>\n<li>concat，保持原来的序列顺序连接两个数据流</li>\n<li>merge，合并序列</li>\n<li>race，预设条件为其中一个数据流完成</li>\n<li>forkJoin，预设条件为所有数据流都完成</li>\n<li>zip，取各来源数据流最后一个值合并为对象</li>\n<li>combineLatest，取各来源数据流最后一个值合并为数组</li>\n</ul>\n<p><strong><em>1)自己实现一个operators：</em></strong></p>\n<pre><code>function multiplyByTen(input) {\n  var output = Rx.Observable.create(function subscribe(observer) {\n    input.subscribe({\n      next: (v) =&gt; observer.next(10 * v),\n      error: (err) =&gt; observer.error(err),\n      complete: () =&gt; observer.complete()\n    });\n  });\n  return output;\n}\n\nvar input = Rx.Observable.from([1, 2, 3, 4]);\nvar output = multiplyByTen(input);\noutput.subscribe(x =&gt; console.log(x));\n</code></pre><p>结果：</p>\n<pre><code>10\n20\n30\n40\n</code></pre><p><strong><em>2) 数据流处理</em></strong><br>RxJS一个很强大的特点是，它以流的方式来对待数据，因此，可以用一些操作符对整个流上所有的数据进行延时、取样、调整密集度等等。</p>\n<pre><code>const timeA$ = Observable.interval(1000)\nconst timeB$ = timeA$.filter(num =&gt; {\n    return (num % 2 != 0)\n      &amp;&amp; (num % 3 != 0)\n      &amp;&amp; (num % 5 != 0)\n      &amp;&amp; (num % 7 != 0)\n  })\n\nconst timeC$ = timeB$.debounceTime(3000)\nconst timeD$ = timeC$.delay(2000)\n</code></pre><p>示例代码中，我们创建了四个流：<br>A是由定时器产生的，每秒一个值<br>B从A里面过滤掉了一些<br>C在B的基础上，对每两个间距在3秒之内的值进行了处理，只留下后一个值<br>D把C的结果整体向后平移了2秒</p>\n<p>所以结果大致如下：</p>\n<pre><code>A: 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21\nB:    1                             11    13          17    19\nC:          1                                   13                19\nD:                1                                   13\n</code></pre><p><strong><em>3) 数据流处理</em></strong></p>\n<p><strong>5. Subject</strong><br>Subject是一种能够发射数据给多个observer的Observable, 在 Subject 的内部，subscribe 不会调用发送值的新执行。<br>它只是将给定的观察者注册到观察者列表中，类似于其他库或语言中的 addListener 的工作方式,例子：</p>\n<pre><code>var subject = new Rx.Subject();\nsubject.subscribe({\n  next: (v) =&gt; console.log(&apos;observerA: &apos; + v)\n});\nsubject.subscribe({\n  next: (v) =&gt; console.log(&apos;observerB: &apos; + v)\n});\n\nsubject.next(1);\nsubject.next(2);\n</code></pre><p>结果：</p>\n<pre><code>observerA: 1\nobserverB: 1\nobserverA: 2\nobserverB: 2\n</code></pre><p>可以看到</p>\n<ul>\n<li>与Observable不同的是， Subject发射数据给多个observer</li>\n<li>义subject的时候并没有传入callback， 这是因为subject自带next, complete, error等方法，从而可以发射数据给observer</li>\n</ul>\n<p>observer只需要订阅处理数据即可，而并不关心数据来源是哪里<br>Subject有各种特性不同的派生子类：</p>\n<ul>\n<li>BehaviorSubject，能够保留最近的数据，使得当有subscribe的时候，立马发射出去</li>\n<li>ReplaySubject，能够保留最近的一些数据， 使得当有subscribe的时候，将这些数据发射出去</li>\n<li>AsyncSubject，只会发射结束前的一个数据</li>\n</ul>\n<p>既然subject有next, error, complete三种方法， 那subject就可以作为observer来使用，比如：</p>\n<pre><code>var subject = new Rx.Subject();\n\nsubject.subscribe({\n  next: (v) =&gt; console.log(&apos;AA: &apos; + v)\n});\nsubject.subscribe({\n  next: (v) =&gt; console.log(&apos;BB: &apos; + v)\n});\n\nvar observable = Rx.Observable.from([1, 2, 3]);\n\nobservable.subscribe(subject);\n</code></pre><p>输出结果：</p>\n<pre><code>AA: 1\nBB: 1\nAA: 2\nBB: 2\nAA: 3\nBB: 3\n</code></pre><p>也就是说， observable.subscribe可以传入一个subject来订阅其消息，这就好像是Rxjs中的一颗语法糖</p>\n<h5 id=\"3-rxjs在angular里的使用\"><a href=\"#3-rxjs在angular里的使用\" class=\"headerlink\" title=\"3. rxjs在angular里的使用\"></a>3. rxjs在angular里的使用</h5><p>angular是推荐使用rxjs进行http访问和其他的数据交互的，angular自身封装的Http服务返回的数据就是Observable对象，我们可以方便的运行rxjs的相关知识进行操作处理<br>简单的例子：</p>\n<pre><code>getData() {\n    this.http.getAll(url).map((res) =&gt; {return res.json();})\n                         .catch(this.handleError)\n}\n\nhandleError(error) {\n    console.error(error.msg);\n    Observable.throw(error.msg);\n}\n\n//使用\nthis.serve.getData().subscribe(\n    res =&gt; { this.data = res; }\n    error =&gt; { alert(error); }\n);\n</code></pre><h5 id=\"4-rxjs使用\"><a href=\"#4-rxjs使用\" class=\"headerlink\" title=\"4. rxjs使用\"></a>4. rxjs使用</h5><p><strong>(1) 补丁方式</strong><br>    npm install rxjs</p>\n<p>导入整个核心功能集：</p>\n<pre><code>import Rx from &apos;rxjs/Rx&apos;;\nRx.Observable.of(1,2,3)\n</code></pre><p>通过打补丁的方式只导入所需要的(这对于减少 bundling 的体积是十分有用的)：</p>\n<pre><code>import { Observable} from &apos;rxjs/Observable&apos;;\nimport &apos;rxjs/add/observable/of&apos;;\nimport &apos;rxjs/add/operator/map&apos;;\n\nObservable.of(1,2,3).map(x =&gt; x + &apos;!!!&apos;); // 等等\n</code></pre><p>只导入需要的并且使用被提议的绑定操作符：</p>\n<blockquote>\n<p>注意：这个额外的预发需要编译器支持并且此语法可能会在没有任何通知的情况下完全从 TC39 撤回！要使用的话需要你自己来承担风险。</p>\n</blockquote>\n<pre><code>import { Observable } from &apos;rxjs/Observable&apos;;\nimport { of } from &apos;rxjs/observable/of&apos;;\nimport { map } from &apos;rxjs/operator/map&apos;;\n\nObservable::of(1,2,3)::map(x =&gt; x + &apos;!!!&apos;); // 等等\n</code></pre><p><strong>（2）nodejs脚本使用</strong><br>导入所有核心功能:</p>\n<pre><code>var Rx = require(&apos;rxjs/Rx&apos;);\nRx.Observable.of(1,2,3); // 等等\n</code></pre><p>通过打补丁的方式只导入所需要的(这对于减少 bundling 的体积是十分有用的)：</p>\n<pre><code>var Observable = require(&apos;rxjs/Observable&apos;).Observable;\n// 使用适合的方法在 Observable 上打补丁\nrequire(&apos;rxjs/add/observable/of&apos;);\nrequire(&apos;rxjs/add/operator/map&apos;);\n\nObservable.of(1,2,3).map(function (x) { return x + &apos;!!!&apos;; });\n</code></pre><p>导入操作符并手动地使用它们(这对于减少 bundling 的体积也十分有用)：</p>\n<pre><code>var of = require(&apos;rxjs/observable/of&apos;).of;\nvar map = require(&apos;rxjs/operator/map&apos;).map;\nmap.call(of(1,2,3), function (x) { return x + &apos;!!!&apos;; });\n</code></pre>","site":{"data":{}},"excerpt":"<p>前端数据处理主要是异步的，来源于：用户操作，后台数据交互，定时处理等<br>","more":"</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>承诺promise是传统的异步数据处理方法，在业界广泛使用，主要使用方式：</p>\n<pre><code>function getData() {\n   return new Promise(Data);\n}\n\ngetData().then((res) =&gt; {\n    callback(res);\n});\n</code></pre><p>但是基于承诺的数据处理有诸多问题，比如：</p>\n<ul>\n<li>一次只能处理一个请求，连续多个数据的时候处理困难</li>\n<li>无失败重试</li>\n<li>不能请求取消</li>\n</ul>\n<p>但是由于它能处理大部分的数据且用法简单，所以仍是使用最多的</p>\n<h3 id=\"RXJS\"><a href=\"#RXJS\" class=\"headerlink\" title=\"RXJS\"></a>RXJS</h3><p>rxjs作为新的数据处理方式，可替代常用的promise/callback等，因为它拥有它们的粗里能力，同时也有新的其他方式所不及的能力<br>rxjs能处理的数据包括：http请求，event事件回调，读取文件，用户操作，点击事件等等</p>\n<h5 id=\"1-基本知识\"><a href=\"#1-基本知识\" class=\"headerlink\" title=\"1. 基本知识\"></a>1. 基本知识</h5><p>rxjs是数据流处理工具，在它看来，万物皆为流或者可转化为流来处理，流可以连续处理，可以截断，也可以进行转换，所以rxjs是对变化进行响应的响应式编程模式，主要有如下特点：</p>\n<ul>\n<li>面向数据流的变化与传播</li>\n<li>函数式编程，链式调用</li>\n<li>迭代器式编程，遍历机制</li>\n<li>观察者模式</li>\n<li>声明式编程</li>\n</ul>\n<h5 id=\"2-组成部分\"><a href=\"#2-组成部分\" class=\"headerlink\" title=\"2. 组成部分\"></a>2. 组成部分</h5><p>RxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理。</p>\n<ul>\n<li>Observable: 被观察者，也称为观察对象/数据生产者/数据流容器</li>\n<li>Observer: 观察者，也称为数据流消费者</li>\n<li>operators: 数据流操作动作</li>\n<li>subscribe: 数据流订阅符</li>\n<li>Subject: 发射数据给多个observer的Observable</li>\n</ul>\n<h6 id=\"1-Observable\"><a href=\"#1-Observable\" class=\"headerlink\" title=\"1. Observable\"></a><strong>1. Observable</strong></h6><p>Observable可以处理或包装处理<strong>同</strong>和<strong>异步</strong>的数据流，是数据流的生产者，产生的它的方式有很多，任何数据都可以包装成可观察对象来处理：</p>\n<pre><code>//单值\nvar obj = Observable.of(2017);\n//多值\nvar obj = Observable.from([1,2,3,4,5]) or Observable.of(1,2,3,4,5);\n//promise\nvar g = new Promise(...);\nvar obj = Observable.fromPromise(g);\n//new\nvar obj = new Observable(observer =&gt; {});\n//create\nvar obj = Rx.Observable.create(observer =&gt; {\n    observer.next();\n    observer.error();\n    observer.complete();\n});\n//来自事件\nvar obj = Rx.Observable.fromEvent(dom,&apos;keyup&apos;);\n</code></pre><p>例子：</p>\n<pre><code>let obj = Rx.Observable.create(observer =&gt; {\n  console.log(&apos;AAA&apos;);\n  observer.next(22);\n});\n\nobj.subscribe(x =&gt; console.log(&apos;a_&apos;+x));\nobj.subscribe(y =&gt; console.log(&apos;b_&apos;+y));\n</code></pre><p>结果：</p>\n<pre><code>AAA\na_22\nAAA\nb_22\n</code></pre><ul>\n<li>可以把obj想象成一个函数，你每次调用obj都会导致传入Rx.Observable.create里的回调函数重新执行一次, 调用的方式为obj.subscribe(callback), 相当于obj()</li>\n<li>observer.next表示返回一个值, 你可以调用多次，每次调用observer.next后， 会先将next里的值返回给obj.subcribe里的回调函数, 执行完后再返回</li>\n</ul>\n<blockquote>\n<ul>\n<li>Observable类似于函数，但又不同于回调函数，Observable可发射多个值，而函数每次只能返回一个</li>\n<li>Observable可同步或异步推送数据给观察者，而观察者只是从数据生产者拉取数据，不关心是否同步</li>\n</ul>\n</blockquote>\n<p>observer的next,complete, error可以用来来控制流程，比如:</p>\n<pre><code>var observable = Rx.Observable.create(observer =&gt; {\n  try {\n    console.log(&apos;AAA&apos;);\n    observer.next(11);\n    observer.next(22);\n    observer.complete();\n    observer.next(33);\n  } catch (err) {\n    observer.error(err);\n  }\n});\n\nlet subcription = observable.subscribe(res =&gt; {\n  console.log(‘a_’+res);\n})\n</code></pre><p>结果：</p>\n<pre><code>AAA\na_11\na_22\n</code></pre><p>可以看到，</p>\n<ul>\n<li>observable的next(22)有效，而next(33)无效了，因为complete（）在其之前调用，阻止了值的发射</li>\n<li>Observable可以连续发射和处理多个值，这是和Promise不同的地方，Promise只能通过链接的then()来实现</li>\n<li>当observable的执行出现异常的时候，通过observer.error将错误返回, 而observable.subscribe的回调函数无法接收到错误</li>\n</ul>\n<h6 id=\"2-Observer\"><a href=\"#2-Observer\" class=\"headerlink\" title=\"2. Observer\"></a><strong>2. Observer</strong></h6><p>对象观察者，数据消费者，即对Observable的数据流进行处理，通常不直接构造这个对象，而是在观察对象被订阅调用时创建这个对象，它有三个方法：</p>\n<pre><code>class Observer {\n    next(data) { //正常数据的反射出路 }\n    error(data) { //错误处理 }\n    complete(data) { //手动停止数据发射 }\n}\n</code></pre><p>比如：</p>\n<pre><code>var obj = Rx.Observable.create(observer);\n\nobj.subscribe(callback(res));\n</code></pre><p>其中回调函数callback(res)就是观察者，只不过实际运行时是将它内部转变成oberver对象来处理：</p>\n<pre><code>oo = new observer() {\n    next(value) {callback(value);}\n    error(error) {..}\n    complete() {}\n}\n\nRx.Observable.create(oo);\n</code></pre><p>就这样回调函数被封装成观察者对象来进行数据处理，举个更简单的例子：</p>\n<pre><code>var observable = Observable.of([1,2,3]);\n\nobservable.subscribe(\n    (res) =&gt; {console.log(&apos;AB&apos;+res);}，\n   （error）=&gt; {console.log(&apos;Error&apos;+error);}\n);\n</code></pre><p>回调函数封装：</p>\n<pre><code>observer = {\n    next(v) =&gt; { console.log(&apos;AB-&apos;+v); }\n    error(v) =&gt; { console.log(&apos;Error&apos;+v); }\n    complete(v) =&gt; { ... }\n}\n</code></pre><p>由observer来对被观察对象的数据流进行处理，结果如下：</p>\n<pre><code>AB-1\nAB-2\nAB-3\n</code></pre><p>由于观察者实例一般只有在订阅调用时被创建，所以就容易理解我们的“冷模式”了，只有订阅被调用时才有效</p>\n<h6 id=\"3-subscribe\"><a href=\"#3-subscribe\" class=\"headerlink\" title=\"3. subscribe\"></a><strong>3. subscribe</strong></h6><p>当调用了 observable.subscribe ，观察者会被附加到新创建的 Observable 执行中。这个调用还返回一个对象，即 Subscription (订阅)：</p>\n<pre><code>var subscription = observable.subscribe(x =&gt; console.log(x));\n</code></pre><p>Subscription 表示进行中的执行，它有最小化的 API 以允许你取消执行。想了解更多订阅相关的内容，请参见 Subscription 类型。使用 subscription.unsubscribe() 你可以取消进行中的执行：</p>\n<pre><code>var observable = Rx.Observable.from([10, 20, 30]);\nvar subscription = observable.subscribe(x =&gt; console.log(x));\n// 稍后：\nsubscription.unsubscribe();\n</code></pre><p>当你订阅了 Observable，你会得到一个 Subscription ，它表示进行中的执行。只要调用 unsubscribe() 方法就可以取消执行，否则会造成内存泄漏;</p>\n<p><strong>Subscription 还可以合在一起</strong>，这样一个 Subscription 调用 unsubscribe() 方法，可能会有多个 Subscription 取消订阅 。你可以通过把一个 Subscription 添加到另一个上面来做这件事：</p>\n<pre><code>var observable1 = Rx.Observable.interval(400);\nvar observable2 = Rx.Observable.interval(300);\n\nvar subscription = observable1.subscribe(x =&gt; console.log(&apos;first: &apos; + x));\nvar childSubscription = observable2.subscribe(x =&gt; console.log(&apos;second: &apos; + x));\n\nsubscription.add(childSubscription);\n\nsetTimeout(() =&gt; {\n  // subscription 和 childSubscription 都会取消订阅\n  subscription.unsubscribe();\n}, 1000);\n</code></pre><p>结果：</p>\n<pre><code>second: 0\nfirst: 0\nsecond: 1\nfirst: 1\nsecond: 2\n</code></pre><p>Subscriptions 还有一个 remove(otherSubscription) 方法，用来撤销一个已添加的子 Subscription</p>\n<blockquote>\n<p>取消订阅只是对数据流停止处理，并不能阻止数据的流动</p>\n</blockquote>\n<h6 id=\"4-operators\"><a href=\"#4-operators\" class=\"headerlink\" title=\"4. operators\"></a><strong>4. operators</strong></h6><p>操作符分为实例操作符和静态操作符：</p>\n<ul>\n<li>实例操作符： 作用于对象实例，比如map，switch</li>\n<li>静态操作符: 属于Observable的静态方法，必须通过Observable来调用，比如：forkJoin()</li>\n</ul>\n<p>操作符对Observable对像的动作是纯的高阶函数，不会改变当前的对象，而是操作完返回一个新的Observable对象;这样可以供其他操作符处理，形成链式操作<br>Observable的操作符很多，详细可参考官网：<a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html\" target=\"_blank\" rel=\"external\">Rxjs-opertors</a></p>\n<p>转换操作：</p>\n<ul>\n<li>改变数据形态：map, mapTo, pluck</li>\n<li>过滤一些值：filter, skip, first, last, take</li>\n<li>时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime</li>\n<li>累加：reduce, scan</li>\n<li>异常处理：throw, catch, retry, finally</li>\n<li>条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn</li>\n<li>转接：switch</li>\n</ul>\n<p>对若干个数据流进行组合：</p>\n<ul>\n<li>concat，保持原来的序列顺序连接两个数据流</li>\n<li>merge，合并序列</li>\n<li>race，预设条件为其中一个数据流完成</li>\n<li>forkJoin，预设条件为所有数据流都完成</li>\n<li>zip，取各来源数据流最后一个值合并为对象</li>\n<li>combineLatest，取各来源数据流最后一个值合并为数组</li>\n</ul>\n<p><strong><em>1)自己实现一个operators：</em></strong></p>\n<pre><code>function multiplyByTen(input) {\n  var output = Rx.Observable.create(function subscribe(observer) {\n    input.subscribe({\n      next: (v) =&gt; observer.next(10 * v),\n      error: (err) =&gt; observer.error(err),\n      complete: () =&gt; observer.complete()\n    });\n  });\n  return output;\n}\n\nvar input = Rx.Observable.from([1, 2, 3, 4]);\nvar output = multiplyByTen(input);\noutput.subscribe(x =&gt; console.log(x));\n</code></pre><p>结果：</p>\n<pre><code>10\n20\n30\n40\n</code></pre><p><strong><em>2) 数据流处理</em></strong><br>RxJS一个很强大的特点是，它以流的方式来对待数据，因此，可以用一些操作符对整个流上所有的数据进行延时、取样、调整密集度等等。</p>\n<pre><code>const timeA$ = Observable.interval(1000)\nconst timeB$ = timeA$.filter(num =&gt; {\n    return (num % 2 != 0)\n      &amp;&amp; (num % 3 != 0)\n      &amp;&amp; (num % 5 != 0)\n      &amp;&amp; (num % 7 != 0)\n  })\n\nconst timeC$ = timeB$.debounceTime(3000)\nconst timeD$ = timeC$.delay(2000)\n</code></pre><p>示例代码中，我们创建了四个流：<br>A是由定时器产生的，每秒一个值<br>B从A里面过滤掉了一些<br>C在B的基础上，对每两个间距在3秒之内的值进行了处理，只留下后一个值<br>D把C的结果整体向后平移了2秒</p>\n<p>所以结果大致如下：</p>\n<pre><code>A: 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21\nB:    1                             11    13          17    19\nC:          1                                   13                19\nD:                1                                   13\n</code></pre><p><strong><em>3) 数据流处理</em></strong></p>\n<p><strong>5. Subject</strong><br>Subject是一种能够发射数据给多个observer的Observable, 在 Subject 的内部，subscribe 不会调用发送值的新执行。<br>它只是将给定的观察者注册到观察者列表中，类似于其他库或语言中的 addListener 的工作方式,例子：</p>\n<pre><code>var subject = new Rx.Subject();\nsubject.subscribe({\n  next: (v) =&gt; console.log(&apos;observerA: &apos; + v)\n});\nsubject.subscribe({\n  next: (v) =&gt; console.log(&apos;observerB: &apos; + v)\n});\n\nsubject.next(1);\nsubject.next(2);\n</code></pre><p>结果：</p>\n<pre><code>observerA: 1\nobserverB: 1\nobserverA: 2\nobserverB: 2\n</code></pre><p>可以看到</p>\n<ul>\n<li>与Observable不同的是， Subject发射数据给多个observer</li>\n<li>义subject的时候并没有传入callback， 这是因为subject自带next, complete, error等方法，从而可以发射数据给observer</li>\n</ul>\n<p>observer只需要订阅处理数据即可，而并不关心数据来源是哪里<br>Subject有各种特性不同的派生子类：</p>\n<ul>\n<li>BehaviorSubject，能够保留最近的数据，使得当有subscribe的时候，立马发射出去</li>\n<li>ReplaySubject，能够保留最近的一些数据， 使得当有subscribe的时候，将这些数据发射出去</li>\n<li>AsyncSubject，只会发射结束前的一个数据</li>\n</ul>\n<p>既然subject有next, error, complete三种方法， 那subject就可以作为observer来使用，比如：</p>\n<pre><code>var subject = new Rx.Subject();\n\nsubject.subscribe({\n  next: (v) =&gt; console.log(&apos;AA: &apos; + v)\n});\nsubject.subscribe({\n  next: (v) =&gt; console.log(&apos;BB: &apos; + v)\n});\n\nvar observable = Rx.Observable.from([1, 2, 3]);\n\nobservable.subscribe(subject);\n</code></pre><p>输出结果：</p>\n<pre><code>AA: 1\nBB: 1\nAA: 2\nBB: 2\nAA: 3\nBB: 3\n</code></pre><p>也就是说， observable.subscribe可以传入一个subject来订阅其消息，这就好像是Rxjs中的一颗语法糖</p>\n<h5 id=\"3-rxjs在angular里的使用\"><a href=\"#3-rxjs在angular里的使用\" class=\"headerlink\" title=\"3. rxjs在angular里的使用\"></a>3. rxjs在angular里的使用</h5><p>angular是推荐使用rxjs进行http访问和其他的数据交互的，angular自身封装的Http服务返回的数据就是Observable对象，我们可以方便的运行rxjs的相关知识进行操作处理<br>简单的例子：</p>\n<pre><code>getData() {\n    this.http.getAll(url).map((res) =&gt; {return res.json();})\n                         .catch(this.handleError)\n}\n\nhandleError(error) {\n    console.error(error.msg);\n    Observable.throw(error.msg);\n}\n\n//使用\nthis.serve.getData().subscribe(\n    res =&gt; { this.data = res; }\n    error =&gt; { alert(error); }\n);\n</code></pre><h5 id=\"4-rxjs使用\"><a href=\"#4-rxjs使用\" class=\"headerlink\" title=\"4. rxjs使用\"></a>4. rxjs使用</h5><p><strong>(1) 补丁方式</strong><br>    npm install rxjs</p>\n<p>导入整个核心功能集：</p>\n<pre><code>import Rx from &apos;rxjs/Rx&apos;;\nRx.Observable.of(1,2,3)\n</code></pre><p>通过打补丁的方式只导入所需要的(这对于减少 bundling 的体积是十分有用的)：</p>\n<pre><code>import { Observable} from &apos;rxjs/Observable&apos;;\nimport &apos;rxjs/add/observable/of&apos;;\nimport &apos;rxjs/add/operator/map&apos;;\n\nObservable.of(1,2,3).map(x =&gt; x + &apos;!!!&apos;); // 等等\n</code></pre><p>只导入需要的并且使用被提议的绑定操作符：</p>\n<blockquote>\n<p>注意：这个额外的预发需要编译器支持并且此语法可能会在没有任何通知的情况下完全从 TC39 撤回！要使用的话需要你自己来承担风险。</p>\n</blockquote>\n<pre><code>import { Observable } from &apos;rxjs/Observable&apos;;\nimport { of } from &apos;rxjs/observable/of&apos;;\nimport { map } from &apos;rxjs/operator/map&apos;;\n\nObservable::of(1,2,3)::map(x =&gt; x + &apos;!!!&apos;); // 等等\n</code></pre><p><strong>（2）nodejs脚本使用</strong><br>导入所有核心功能:</p>\n<pre><code>var Rx = require(&apos;rxjs/Rx&apos;);\nRx.Observable.of(1,2,3); // 等等\n</code></pre><p>通过打补丁的方式只导入所需要的(这对于减少 bundling 的体积是十分有用的)：</p>\n<pre><code>var Observable = require(&apos;rxjs/Observable&apos;).Observable;\n// 使用适合的方法在 Observable 上打补丁\nrequire(&apos;rxjs/add/observable/of&apos;);\nrequire(&apos;rxjs/add/operator/map&apos;);\n\nObservable.of(1,2,3).map(function (x) { return x + &apos;!!!&apos;; });\n</code></pre><p>导入操作符并手动地使用它们(这对于减少 bundling 的体积也十分有用)：</p>\n<pre><code>var of = require(&apos;rxjs/observable/of&apos;).of;\nvar map = require(&apos;rxjs/operator/map&apos;).map;\nmap.call(of(1,2,3), function (x) { return x + &apos;!!!&apos;; });\n</code></pre>"},{"title":"设计模式一","date":"2018-03-09T14:59:29.000Z","comments":1,"_content":"\n设计模式是一种经验总结，是软件开发人员在长期的实践中对所遇问题的常用解决方案。设计模式的目的是让我们的软件设计方法化，开发的程序更具重用性，灵活性和可扩展性。\n<!--more-->\n设计模式是针对面向对象的设计方法总结，有一个需要遵从的“开放-闭合原则”：**对扩展的开放，对修改的闭合**，即功能扩展时易增加且不改动原有代码，功能变更时可以少修改代码，这个原则可以借助面向对象的抽象和继承来设计实现。\n设计模式有很多设计原则，我摘取了几个，认为只要符合下面几个原则，基本上是较好的设计：\n\n- 单个类封装设计，功能职责单一\n- 对对象或者行为接口进行隔离，减低耦合\n- 针对接口编程，而非过程编程\n- 依赖于抽象而非具体\n- 优先对象组合而非继承，只在有意义的时候进行继承\n\n> 以下例子均以C++实现\n\n### 工厂模式\n工厂模式封装对象的创建，配合类的抽象继承，隐藏子对象的创建过程，提供统一的创建接口\n比如，宠物店的例子：\n\n    class Pet {\n        private:\n            string name;\n        public:\n            Pet(string name) { name = name; }\n            ~Pet() { name = \"\"; }\n            void sayName() {\n                cout << \"My name is : \" << name << \" ! \";\n            }\n            virtual void shut() = 0;\n    }\n    class Dog: public Pet {\n        Dog(string name): Pet(name) {}\n        ~Dog() {}\n        void shut() {\n            sayName();\n            cout << \"旺旺～\" << endl;\n        }\n    }\n    class Cat: public Pet {\n        Cat(string name): Pet(name) {}\n        ~Cat() {}\n        void shut() {\n            sayName();\n            cout << \"喵喵～\" << endl;\n        }\n    }\n    class PetStore {\n        Pet * pInst;\n        PetStore() { pInst = null; }\n        ~PetStore() { pInst = null; }\n        getOnePet(string type,string name) {\n            switch(type) {\n                case \"DOG\":\n                    pInst = new Dog(name);\n                    break;\n                case \"CAT\":\n                    pInst = new Cat(name);\n                    break;\n                default: break;\n            }\n            return pInst;\n        }\n    }\n    int main() {\n        PetStore petStore = new PetStore();\n        Pet * myPet;\n        myPet = petStore.getOnePet(\"DOG\",\"旺财\");\n        myPet->shut();\n        myPet = petStore.getOnePet(\"CAT\",\"加菲\");\n        myPet->shut();\n    }\n\n输出：\nMy name is : 旺财 ; 旺旺～\nMy name is : 加菲 ; 喵喵～\n\n### 抽象工厂模式\n抽象工厂是处理多集群的一种方式，将工厂抽象化，先创建工厂，再让具体的工厂创建具体的实例对象，比如：\n\n- 宠物 - 小猫/小狗 - 宠物店 - 店铺\n- 服装 - 衣服/裤子 - 服装店 - 店铺\n\n如上，将工厂对象-店铺先作对象，创建具体的店铺后，由相应的店铺创建各自的对象，实现方式和工厂模式相似，这就不描述了\n\n### 工厂方法模式\n工厂模式可以看到隐藏了对象的创建细节，提供了统一的接口，但是可以看到的是当功能扩展时需要修改对象工厂的内部实现，比如：想增加个小猪，除了新增小猪类外，还要修改store的创建逻辑，这就不符合“开放-闭合”原则，可以使用工厂方法将各个对象的工厂独立开来\n\n    class Pet {\n        private:\n            string name;\n        public:\n            Pet(string name) { name = name; }\n            ~Pet() { name = \"\"; }\n            void sayName() {\n                cout << \"My name is : \" << name << \" ! \";\n            }\n            virtual void shut() = 0;\n    }\n    class Dog: public Pet {\n        Dog(string name): Pet(name) {}\n        ~Dog() {}\n        void shut() {\n            sayName();\n            cout << \"旺旺～\" << endl;\n        }\n    }\n    class Cat: public Pet {\n        Cat(string name): Pet(name) {}\n        ~Cat() {}\n        void shut() {\n            sayName();\n            cout << \"喵喵～\" << endl;\n        }\n    }\n    class Store {\n        Pet * pInst;\n        Store() { pInst = null; }\n        ~Store() { pInst = null; }\n        virtual Pet * getOnePet(string name) = 0;\n    }\n    class DogStore: public Store {\n        DogStore() { }\n        ~DogStore() {}\n        Pet * getOnePet(string name) {\n            pInst = new Dog(name);\n            return pInst;\n        }\n    }\n    class CatStore: public Store  {\n        CatStore() {}\n        ~CatStore() {}\n        Pet * getOnePet(string name) {\n            pInst = new Cat(name);\n            return pInst;\n        }\n    }\n    int main() {\n        Store *petStore = null;\n        Pet * myPet;\n        petStore = new DogStore();\n        myPet = petStore->getOnePet(\"旺财\");\n        myPet->shut();\n        petStore = new CatStore();\n        myPet = petStore->getOnePet(\"加菲\");\n        myPet->shut();\n    }\n\n如上，每种宠物一个工厂，增加只要继承扩展就行。简单工厂模式就好比是大商城，啥都卖;而工厂方法模式就是专卖店，只卖一种类型的宠物。\n\n> 两种模式各有优缺点，当种类不多时可以采用简单工厂，而当种类多而且各工厂内部复杂时可考虑工厂方法\n\n### 策略模式\n工厂模式是对事物属性变化的封装，当对象的属性相对稳定，行为变化频繁的时候，就需要对行为进行封装适应。而策略模式正是针对这种问题的一个解决方法。\n比如，简易计算器，数字的四则运算，处理的属性不变，而计算方式却大不相同：\n\n    class OPerate {\n        private:\n            int num1;\n            int num2;\n            int operResult;\n        public:\n            Operate(int n1,int n2) {\n                num1 = n1;\n                num2 = n2;\n                operResult = 0;\n            }\n            ~Operate(int n1,int n2) {\n                num1 = 0;\n                num2 = 0;\n                operResult = 0;\n            }\n            void displayResult() {\n                cout << \"The result is : \" << operResult << endl;\n            }\n            virtual void doOperation() = 0;\n    }\n    class OperateAdd: public OPerate {\n        OperateAdd(int n1,int n2): OPerate(n1,n2) {}\n        ~OperateAdd() {}\n        void doOperation() {\n            operResult = num1 + num2;\n        }\n    }\n    class OperateMultiple: public OPerate {\n        OperateMultiple(int n1,int n2): OPerate(n1,n2) {}\n        ~OperateMultiple() {}\n        void doOperation() {\n            operResult = num1 * num2;\n        }\n    }\n    class OperateContext {\n        private:\n            OPerate * pInst;\n        public:\n            OperateContext(OPerate * pInstz) { pInst = pInstz; }\n            ~OperateContext() { pInst = null; }\n            void getOperateResult() {\n                pInst->doOperation();\n            }\n            void dump() {\n                pInst->displayResult();\n            }\n    }\n    int main() {\n        OperateContext context;\n        context = new OperateContext(new OperateAdd(3,5));\n        context.getOperateResult();\n        context.dump();\n        context = new OperateContext(new OperateMultiple(3,5));\n        context.getOperateResult();\n        context.dump();\n    }\n\n输出：\nThe result is : 8\nThe result is : 15\n\n### 策略-工厂组合模式\n策略模式最后的使用将对象的行为暴露出来不合适，结合工厂模式来隐藏内部过程，提供统一使用对象和接口，重构上面的部分代码：\n\n    class OperateContext {\n        private:\n            OPerate * pInst = null;\n        public:\n            OperateContext(string type,int n1,int n2) {\n                if(pInst == null) {\n                    pInst = createInst(type,n1,n2);\n                }\n            }\n            ~OperateContext() { pInst = null; }\n            OPerate * createInst(string type,int n1,int n2) {\n                switch(type) {\n                    case \"ADD\":\n                        return new OperateAdd(n1,n2);\n                    case \"MULTIPLE\":\n                        return new OperateMultiple(n1,n2);\n                    default:\n                        return null;\n                }\n            }\n            void getOperateResult() {\n                if(pInst != null) {\n                    pInst->doOperation();\n                }\n            }\n            void dump() {\n                if(pInst != null) {\n                    pInst->displayResult();\n                }\n            }\n    }\n    int main() {\n        OperateContext *pcontext = null;\n        pcontext = (OperateContext *)new OperateContext(\"ADD\",3,5);\n        context->getOperateResult();\n        context->dump();\n        pcontext = (OperateContext *)new OperateContext(\"MULTIPLE\",3,5);\n        context->getOperateResult();\n        context->dump();\n    }\n\n### 单例模式\n单例模式利用类的静态属性的特点使得一个类有且只能有一个实例，减少内存消耗\n比如：\n\n    char g_auData[sizeof(Sington)];\n    Sington * Sington::pInst = null;\n    class Sington {\n        private:\n            static Sington * pInst;\n        public:\n            static Sington * getInstance() {\n                if(pInst != null) {\n                    return pInst;\n                } else {\n                    pInst = (Sington * )g_auData;\n                    new (pInst) Sington();\n                    return pInst;\n                }\n                void display() {\n                    cout << \"I am sington!\" << endl;\n                }\n            }\n    }\n    int main() {\n        Sington * pContext = Sington::getInstance();\n        pContext->display();\n    }\n\n输出：I am sington!\n\n\n","source":"_posts/2018-03-09-design-pattern-1.md","raw":"---\ntitle: 设计模式一\ndate: 2018-03-09 22:59:29\ntags: 设计\ncategories: 后端\ncomments: true\n---\n\n设计模式是一种经验总结，是软件开发人员在长期的实践中对所遇问题的常用解决方案。设计模式的目的是让我们的软件设计方法化，开发的程序更具重用性，灵活性和可扩展性。\n<!--more-->\n设计模式是针对面向对象的设计方法总结，有一个需要遵从的“开放-闭合原则”：**对扩展的开放，对修改的闭合**，即功能扩展时易增加且不改动原有代码，功能变更时可以少修改代码，这个原则可以借助面向对象的抽象和继承来设计实现。\n设计模式有很多设计原则，我摘取了几个，认为只要符合下面几个原则，基本上是较好的设计：\n\n- 单个类封装设计，功能职责单一\n- 对对象或者行为接口进行隔离，减低耦合\n- 针对接口编程，而非过程编程\n- 依赖于抽象而非具体\n- 优先对象组合而非继承，只在有意义的时候进行继承\n\n> 以下例子均以C++实现\n\n### 工厂模式\n工厂模式封装对象的创建，配合类的抽象继承，隐藏子对象的创建过程，提供统一的创建接口\n比如，宠物店的例子：\n\n    class Pet {\n        private:\n            string name;\n        public:\n            Pet(string name) { name = name; }\n            ~Pet() { name = \"\"; }\n            void sayName() {\n                cout << \"My name is : \" << name << \" ! \";\n            }\n            virtual void shut() = 0;\n    }\n    class Dog: public Pet {\n        Dog(string name): Pet(name) {}\n        ~Dog() {}\n        void shut() {\n            sayName();\n            cout << \"旺旺～\" << endl;\n        }\n    }\n    class Cat: public Pet {\n        Cat(string name): Pet(name) {}\n        ~Cat() {}\n        void shut() {\n            sayName();\n            cout << \"喵喵～\" << endl;\n        }\n    }\n    class PetStore {\n        Pet * pInst;\n        PetStore() { pInst = null; }\n        ~PetStore() { pInst = null; }\n        getOnePet(string type,string name) {\n            switch(type) {\n                case \"DOG\":\n                    pInst = new Dog(name);\n                    break;\n                case \"CAT\":\n                    pInst = new Cat(name);\n                    break;\n                default: break;\n            }\n            return pInst;\n        }\n    }\n    int main() {\n        PetStore petStore = new PetStore();\n        Pet * myPet;\n        myPet = petStore.getOnePet(\"DOG\",\"旺财\");\n        myPet->shut();\n        myPet = petStore.getOnePet(\"CAT\",\"加菲\");\n        myPet->shut();\n    }\n\n输出：\nMy name is : 旺财 ; 旺旺～\nMy name is : 加菲 ; 喵喵～\n\n### 抽象工厂模式\n抽象工厂是处理多集群的一种方式，将工厂抽象化，先创建工厂，再让具体的工厂创建具体的实例对象，比如：\n\n- 宠物 - 小猫/小狗 - 宠物店 - 店铺\n- 服装 - 衣服/裤子 - 服装店 - 店铺\n\n如上，将工厂对象-店铺先作对象，创建具体的店铺后，由相应的店铺创建各自的对象，实现方式和工厂模式相似，这就不描述了\n\n### 工厂方法模式\n工厂模式可以看到隐藏了对象的创建细节，提供了统一的接口，但是可以看到的是当功能扩展时需要修改对象工厂的内部实现，比如：想增加个小猪，除了新增小猪类外，还要修改store的创建逻辑，这就不符合“开放-闭合”原则，可以使用工厂方法将各个对象的工厂独立开来\n\n    class Pet {\n        private:\n            string name;\n        public:\n            Pet(string name) { name = name; }\n            ~Pet() { name = \"\"; }\n            void sayName() {\n                cout << \"My name is : \" << name << \" ! \";\n            }\n            virtual void shut() = 0;\n    }\n    class Dog: public Pet {\n        Dog(string name): Pet(name) {}\n        ~Dog() {}\n        void shut() {\n            sayName();\n            cout << \"旺旺～\" << endl;\n        }\n    }\n    class Cat: public Pet {\n        Cat(string name): Pet(name) {}\n        ~Cat() {}\n        void shut() {\n            sayName();\n            cout << \"喵喵～\" << endl;\n        }\n    }\n    class Store {\n        Pet * pInst;\n        Store() { pInst = null; }\n        ~Store() { pInst = null; }\n        virtual Pet * getOnePet(string name) = 0;\n    }\n    class DogStore: public Store {\n        DogStore() { }\n        ~DogStore() {}\n        Pet * getOnePet(string name) {\n            pInst = new Dog(name);\n            return pInst;\n        }\n    }\n    class CatStore: public Store  {\n        CatStore() {}\n        ~CatStore() {}\n        Pet * getOnePet(string name) {\n            pInst = new Cat(name);\n            return pInst;\n        }\n    }\n    int main() {\n        Store *petStore = null;\n        Pet * myPet;\n        petStore = new DogStore();\n        myPet = petStore->getOnePet(\"旺财\");\n        myPet->shut();\n        petStore = new CatStore();\n        myPet = petStore->getOnePet(\"加菲\");\n        myPet->shut();\n    }\n\n如上，每种宠物一个工厂，增加只要继承扩展就行。简单工厂模式就好比是大商城，啥都卖;而工厂方法模式就是专卖店，只卖一种类型的宠物。\n\n> 两种模式各有优缺点，当种类不多时可以采用简单工厂，而当种类多而且各工厂内部复杂时可考虑工厂方法\n\n### 策略模式\n工厂模式是对事物属性变化的封装，当对象的属性相对稳定，行为变化频繁的时候，就需要对行为进行封装适应。而策略模式正是针对这种问题的一个解决方法。\n比如，简易计算器，数字的四则运算，处理的属性不变，而计算方式却大不相同：\n\n    class OPerate {\n        private:\n            int num1;\n            int num2;\n            int operResult;\n        public:\n            Operate(int n1,int n2) {\n                num1 = n1;\n                num2 = n2;\n                operResult = 0;\n            }\n            ~Operate(int n1,int n2) {\n                num1 = 0;\n                num2 = 0;\n                operResult = 0;\n            }\n            void displayResult() {\n                cout << \"The result is : \" << operResult << endl;\n            }\n            virtual void doOperation() = 0;\n    }\n    class OperateAdd: public OPerate {\n        OperateAdd(int n1,int n2): OPerate(n1,n2) {}\n        ~OperateAdd() {}\n        void doOperation() {\n            operResult = num1 + num2;\n        }\n    }\n    class OperateMultiple: public OPerate {\n        OperateMultiple(int n1,int n2): OPerate(n1,n2) {}\n        ~OperateMultiple() {}\n        void doOperation() {\n            operResult = num1 * num2;\n        }\n    }\n    class OperateContext {\n        private:\n            OPerate * pInst;\n        public:\n            OperateContext(OPerate * pInstz) { pInst = pInstz; }\n            ~OperateContext() { pInst = null; }\n            void getOperateResult() {\n                pInst->doOperation();\n            }\n            void dump() {\n                pInst->displayResult();\n            }\n    }\n    int main() {\n        OperateContext context;\n        context = new OperateContext(new OperateAdd(3,5));\n        context.getOperateResult();\n        context.dump();\n        context = new OperateContext(new OperateMultiple(3,5));\n        context.getOperateResult();\n        context.dump();\n    }\n\n输出：\nThe result is : 8\nThe result is : 15\n\n### 策略-工厂组合模式\n策略模式最后的使用将对象的行为暴露出来不合适，结合工厂模式来隐藏内部过程，提供统一使用对象和接口，重构上面的部分代码：\n\n    class OperateContext {\n        private:\n            OPerate * pInst = null;\n        public:\n            OperateContext(string type,int n1,int n2) {\n                if(pInst == null) {\n                    pInst = createInst(type,n1,n2);\n                }\n            }\n            ~OperateContext() { pInst = null; }\n            OPerate * createInst(string type,int n1,int n2) {\n                switch(type) {\n                    case \"ADD\":\n                        return new OperateAdd(n1,n2);\n                    case \"MULTIPLE\":\n                        return new OperateMultiple(n1,n2);\n                    default:\n                        return null;\n                }\n            }\n            void getOperateResult() {\n                if(pInst != null) {\n                    pInst->doOperation();\n                }\n            }\n            void dump() {\n                if(pInst != null) {\n                    pInst->displayResult();\n                }\n            }\n    }\n    int main() {\n        OperateContext *pcontext = null;\n        pcontext = (OperateContext *)new OperateContext(\"ADD\",3,5);\n        context->getOperateResult();\n        context->dump();\n        pcontext = (OperateContext *)new OperateContext(\"MULTIPLE\",3,5);\n        context->getOperateResult();\n        context->dump();\n    }\n\n### 单例模式\n单例模式利用类的静态属性的特点使得一个类有且只能有一个实例，减少内存消耗\n比如：\n\n    char g_auData[sizeof(Sington)];\n    Sington * Sington::pInst = null;\n    class Sington {\n        private:\n            static Sington * pInst;\n        public:\n            static Sington * getInstance() {\n                if(pInst != null) {\n                    return pInst;\n                } else {\n                    pInst = (Sington * )g_auData;\n                    new (pInst) Sington();\n                    return pInst;\n                }\n                void display() {\n                    cout << \"I am sington!\" << endl;\n                }\n            }\n    }\n    int main() {\n        Sington * pContext = Sington::getInstance();\n        pContext->display();\n    }\n\n输出：I am sington!\n\n\n","slug":"design-pattern-1","published":1,"updated":"2018-03-17T13:41:32.856Z","layout":"post","photos":[],"link":"","_id":"cjqwe42bl0058or0bwkuvhezb","content":"<p>设计模式是一种经验总结，是软件开发人员在长期的实践中对所遇问题的常用解决方案。设计模式的目的是让我们的软件设计方法化，开发的程序更具重用性，灵活性和可扩展性。<br><a id=\"more\"></a><br>设计模式是针对面向对象的设计方法总结，有一个需要遵从的“开放-闭合原则”：<strong>对扩展的开放，对修改的闭合</strong>，即功能扩展时易增加且不改动原有代码，功能变更时可以少修改代码，这个原则可以借助面向对象的抽象和继承来设计实现。<br>设计模式有很多设计原则，我摘取了几个，认为只要符合下面几个原则，基本上是较好的设计：</p>\n<ul>\n<li>单个类封装设计，功能职责单一</li>\n<li>对对象或者行为接口进行隔离，减低耦合</li>\n<li>针对接口编程，而非过程编程</li>\n<li>依赖于抽象而非具体</li>\n<li>优先对象组合而非继承，只在有意义的时候进行继承</li>\n</ul>\n<blockquote>\n<p>以下例子均以C++实现</p>\n</blockquote>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式封装对象的创建，配合类的抽象继承，隐藏子对象的创建过程，提供统一的创建接口<br>比如，宠物店的例子：</p>\n<pre><code>class Pet {\n    private:\n        string name;\n    public:\n        Pet(string name) { name = name; }\n        ~Pet() { name = &quot;&quot;; }\n        void sayName() {\n            cout &lt;&lt; &quot;My name is : &quot; &lt;&lt; name &lt;&lt; &quot; ! &quot;;\n        }\n        virtual void shut() = 0;\n}\nclass Dog: public Pet {\n    Dog(string name): Pet(name) {}\n    ~Dog() {}\n    void shut() {\n        sayName();\n        cout &lt;&lt; &quot;旺旺～&quot; &lt;&lt; endl;\n    }\n}\nclass Cat: public Pet {\n    Cat(string name): Pet(name) {}\n    ~Cat() {}\n    void shut() {\n        sayName();\n        cout &lt;&lt; &quot;喵喵～&quot; &lt;&lt; endl;\n    }\n}\nclass PetStore {\n    Pet * pInst;\n    PetStore() { pInst = null; }\n    ~PetStore() { pInst = null; }\n    getOnePet(string type,string name) {\n        switch(type) {\n            case &quot;DOG&quot;:\n                pInst = new Dog(name);\n                break;\n            case &quot;CAT&quot;:\n                pInst = new Cat(name);\n                break;\n            default: break;\n        }\n        return pInst;\n    }\n}\nint main() {\n    PetStore petStore = new PetStore();\n    Pet * myPet;\n    myPet = petStore.getOnePet(&quot;DOG&quot;,&quot;旺财&quot;);\n    myPet-&gt;shut();\n    myPet = petStore.getOnePet(&quot;CAT&quot;,&quot;加菲&quot;);\n    myPet-&gt;shut();\n}\n</code></pre><p>输出：<br>My name is : 旺财 ; 旺旺～<br>My name is : 加菲 ; 喵喵～</p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>抽象工厂是处理多集群的一种方式，将工厂抽象化，先创建工厂，再让具体的工厂创建具体的实例对象，比如：</p>\n<ul>\n<li>宠物 - 小猫/小狗 - 宠物店 - 店铺</li>\n<li>服装 - 衣服/裤子 - 服装店 - 店铺</li>\n</ul>\n<p>如上，将工厂对象-店铺先作对象，创建具体的店铺后，由相应的店铺创建各自的对象，实现方式和工厂模式相似，这就不描述了</p>\n<h3 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h3><p>工厂模式可以看到隐藏了对象的创建细节，提供了统一的接口，但是可以看到的是当功能扩展时需要修改对象工厂的内部实现，比如：想增加个小猪，除了新增小猪类外，还要修改store的创建逻辑，这就不符合“开放-闭合”原则，可以使用工厂方法将各个对象的工厂独立开来</p>\n<pre><code>class Pet {\n    private:\n        string name;\n    public:\n        Pet(string name) { name = name; }\n        ~Pet() { name = &quot;&quot;; }\n        void sayName() {\n            cout &lt;&lt; &quot;My name is : &quot; &lt;&lt; name &lt;&lt; &quot; ! &quot;;\n        }\n        virtual void shut() = 0;\n}\nclass Dog: public Pet {\n    Dog(string name): Pet(name) {}\n    ~Dog() {}\n    void shut() {\n        sayName();\n        cout &lt;&lt; &quot;旺旺～&quot; &lt;&lt; endl;\n    }\n}\nclass Cat: public Pet {\n    Cat(string name): Pet(name) {}\n    ~Cat() {}\n    void shut() {\n        sayName();\n        cout &lt;&lt; &quot;喵喵～&quot; &lt;&lt; endl;\n    }\n}\nclass Store {\n    Pet * pInst;\n    Store() { pInst = null; }\n    ~Store() { pInst = null; }\n    virtual Pet * getOnePet(string name) = 0;\n}\nclass DogStore: public Store {\n    DogStore() { }\n    ~DogStore() {}\n    Pet * getOnePet(string name) {\n        pInst = new Dog(name);\n        return pInst;\n    }\n}\nclass CatStore: public Store  {\n    CatStore() {}\n    ~CatStore() {}\n    Pet * getOnePet(string name) {\n        pInst = new Cat(name);\n        return pInst;\n    }\n}\nint main() {\n    Store *petStore = null;\n    Pet * myPet;\n    petStore = new DogStore();\n    myPet = petStore-&gt;getOnePet(&quot;旺财&quot;);\n    myPet-&gt;shut();\n    petStore = new CatStore();\n    myPet = petStore-&gt;getOnePet(&quot;加菲&quot;);\n    myPet-&gt;shut();\n}\n</code></pre><p>如上，每种宠物一个工厂，增加只要继承扩展就行。简单工厂模式就好比是大商城，啥都卖;而工厂方法模式就是专卖店，只卖一种类型的宠物。</p>\n<blockquote>\n<p>两种模式各有优缺点，当种类不多时可以采用简单工厂，而当种类多而且各工厂内部复杂时可考虑工厂方法</p>\n</blockquote>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>工厂模式是对事物属性变化的封装，当对象的属性相对稳定，行为变化频繁的时候，就需要对行为进行封装适应。而策略模式正是针对这种问题的一个解决方法。<br>比如，简易计算器，数字的四则运算，处理的属性不变，而计算方式却大不相同：</p>\n<pre><code>class OPerate {\n    private:\n        int num1;\n        int num2;\n        int operResult;\n    public:\n        Operate(int n1,int n2) {\n            num1 = n1;\n            num2 = n2;\n            operResult = 0;\n        }\n        ~Operate(int n1,int n2) {\n            num1 = 0;\n            num2 = 0;\n            operResult = 0;\n        }\n        void displayResult() {\n            cout &lt;&lt; &quot;The result is : &quot; &lt;&lt; operResult &lt;&lt; endl;\n        }\n        virtual void doOperation() = 0;\n}\nclass OperateAdd: public OPerate {\n    OperateAdd(int n1,int n2): OPerate(n1,n2) {}\n    ~OperateAdd() {}\n    void doOperation() {\n        operResult = num1 + num2;\n    }\n}\nclass OperateMultiple: public OPerate {\n    OperateMultiple(int n1,int n2): OPerate(n1,n2) {}\n    ~OperateMultiple() {}\n    void doOperation() {\n        operResult = num1 * num2;\n    }\n}\nclass OperateContext {\n    private:\n        OPerate * pInst;\n    public:\n        OperateContext(OPerate * pInstz) { pInst = pInstz; }\n        ~OperateContext() { pInst = null; }\n        void getOperateResult() {\n            pInst-&gt;doOperation();\n        }\n        void dump() {\n            pInst-&gt;displayResult();\n        }\n}\nint main() {\n    OperateContext context;\n    context = new OperateContext(new OperateAdd(3,5));\n    context.getOperateResult();\n    context.dump();\n    context = new OperateContext(new OperateMultiple(3,5));\n    context.getOperateResult();\n    context.dump();\n}\n</code></pre><p>输出：<br>The result is : 8<br>The result is : 15</p>\n<h3 id=\"策略-工厂组合模式\"><a href=\"#策略-工厂组合模式\" class=\"headerlink\" title=\"策略-工厂组合模式\"></a>策略-工厂组合模式</h3><p>策略模式最后的使用将对象的行为暴露出来不合适，结合工厂模式来隐藏内部过程，提供统一使用对象和接口，重构上面的部分代码：</p>\n<pre><code>class OperateContext {\n    private:\n        OPerate * pInst = null;\n    public:\n        OperateContext(string type,int n1,int n2) {\n            if(pInst == null) {\n                pInst = createInst(type,n1,n2);\n            }\n        }\n        ~OperateContext() { pInst = null; }\n        OPerate * createInst(string type,int n1,int n2) {\n            switch(type) {\n                case &quot;ADD&quot;:\n                    return new OperateAdd(n1,n2);\n                case &quot;MULTIPLE&quot;:\n                    return new OperateMultiple(n1,n2);\n                default:\n                    return null;\n            }\n        }\n        void getOperateResult() {\n            if(pInst != null) {\n                pInst-&gt;doOperation();\n            }\n        }\n        void dump() {\n            if(pInst != null) {\n                pInst-&gt;displayResult();\n            }\n        }\n}\nint main() {\n    OperateContext *pcontext = null;\n    pcontext = (OperateContext *)new OperateContext(&quot;ADD&quot;,3,5);\n    context-&gt;getOperateResult();\n    context-&gt;dump();\n    pcontext = (OperateContext *)new OperateContext(&quot;MULTIPLE&quot;,3,5);\n    context-&gt;getOperateResult();\n    context-&gt;dump();\n}\n</code></pre><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例模式利用类的静态属性的特点使得一个类有且只能有一个实例，减少内存消耗<br>比如：</p>\n<pre><code>char g_auData[sizeof(Sington)];\nSington * Sington::pInst = null;\nclass Sington {\n    private:\n        static Sington * pInst;\n    public:\n        static Sington * getInstance() {\n            if(pInst != null) {\n                return pInst;\n            } else {\n                pInst = (Sington * )g_auData;\n                new (pInst) Sington();\n                return pInst;\n            }\n            void display() {\n                cout &lt;&lt; &quot;I am sington!&quot; &lt;&lt; endl;\n            }\n        }\n}\nint main() {\n    Sington * pContext = Sington::getInstance();\n    pContext-&gt;display();\n}\n</code></pre><p>输出：I am sington!</p>\n","site":{"data":{}},"excerpt":"<p>设计模式是一种经验总结，是软件开发人员在长期的实践中对所遇问题的常用解决方案。设计模式的目的是让我们的软件设计方法化，开发的程序更具重用性，灵活性和可扩展性。<br>","more":"<br>设计模式是针对面向对象的设计方法总结，有一个需要遵从的“开放-闭合原则”：<strong>对扩展的开放，对修改的闭合</strong>，即功能扩展时易增加且不改动原有代码，功能变更时可以少修改代码，这个原则可以借助面向对象的抽象和继承来设计实现。<br>设计模式有很多设计原则，我摘取了几个，认为只要符合下面几个原则，基本上是较好的设计：</p>\n<ul>\n<li>单个类封装设计，功能职责单一</li>\n<li>对对象或者行为接口进行隔离，减低耦合</li>\n<li>针对接口编程，而非过程编程</li>\n<li>依赖于抽象而非具体</li>\n<li>优先对象组合而非继承，只在有意义的时候进行继承</li>\n</ul>\n<blockquote>\n<p>以下例子均以C++实现</p>\n</blockquote>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式封装对象的创建，配合类的抽象继承，隐藏子对象的创建过程，提供统一的创建接口<br>比如，宠物店的例子：</p>\n<pre><code>class Pet {\n    private:\n        string name;\n    public:\n        Pet(string name) { name = name; }\n        ~Pet() { name = &quot;&quot;; }\n        void sayName() {\n            cout &lt;&lt; &quot;My name is : &quot; &lt;&lt; name &lt;&lt; &quot; ! &quot;;\n        }\n        virtual void shut() = 0;\n}\nclass Dog: public Pet {\n    Dog(string name): Pet(name) {}\n    ~Dog() {}\n    void shut() {\n        sayName();\n        cout &lt;&lt; &quot;旺旺～&quot; &lt;&lt; endl;\n    }\n}\nclass Cat: public Pet {\n    Cat(string name): Pet(name) {}\n    ~Cat() {}\n    void shut() {\n        sayName();\n        cout &lt;&lt; &quot;喵喵～&quot; &lt;&lt; endl;\n    }\n}\nclass PetStore {\n    Pet * pInst;\n    PetStore() { pInst = null; }\n    ~PetStore() { pInst = null; }\n    getOnePet(string type,string name) {\n        switch(type) {\n            case &quot;DOG&quot;:\n                pInst = new Dog(name);\n                break;\n            case &quot;CAT&quot;:\n                pInst = new Cat(name);\n                break;\n            default: break;\n        }\n        return pInst;\n    }\n}\nint main() {\n    PetStore petStore = new PetStore();\n    Pet * myPet;\n    myPet = petStore.getOnePet(&quot;DOG&quot;,&quot;旺财&quot;);\n    myPet-&gt;shut();\n    myPet = petStore.getOnePet(&quot;CAT&quot;,&quot;加菲&quot;);\n    myPet-&gt;shut();\n}\n</code></pre><p>输出：<br>My name is : 旺财 ; 旺旺～<br>My name is : 加菲 ; 喵喵～</p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>抽象工厂是处理多集群的一种方式，将工厂抽象化，先创建工厂，再让具体的工厂创建具体的实例对象，比如：</p>\n<ul>\n<li>宠物 - 小猫/小狗 - 宠物店 - 店铺</li>\n<li>服装 - 衣服/裤子 - 服装店 - 店铺</li>\n</ul>\n<p>如上，将工厂对象-店铺先作对象，创建具体的店铺后，由相应的店铺创建各自的对象，实现方式和工厂模式相似，这就不描述了</p>\n<h3 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h3><p>工厂模式可以看到隐藏了对象的创建细节，提供了统一的接口，但是可以看到的是当功能扩展时需要修改对象工厂的内部实现，比如：想增加个小猪，除了新增小猪类外，还要修改store的创建逻辑，这就不符合“开放-闭合”原则，可以使用工厂方法将各个对象的工厂独立开来</p>\n<pre><code>class Pet {\n    private:\n        string name;\n    public:\n        Pet(string name) { name = name; }\n        ~Pet() { name = &quot;&quot;; }\n        void sayName() {\n            cout &lt;&lt; &quot;My name is : &quot; &lt;&lt; name &lt;&lt; &quot; ! &quot;;\n        }\n        virtual void shut() = 0;\n}\nclass Dog: public Pet {\n    Dog(string name): Pet(name) {}\n    ~Dog() {}\n    void shut() {\n        sayName();\n        cout &lt;&lt; &quot;旺旺～&quot; &lt;&lt; endl;\n    }\n}\nclass Cat: public Pet {\n    Cat(string name): Pet(name) {}\n    ~Cat() {}\n    void shut() {\n        sayName();\n        cout &lt;&lt; &quot;喵喵～&quot; &lt;&lt; endl;\n    }\n}\nclass Store {\n    Pet * pInst;\n    Store() { pInst = null; }\n    ~Store() { pInst = null; }\n    virtual Pet * getOnePet(string name) = 0;\n}\nclass DogStore: public Store {\n    DogStore() { }\n    ~DogStore() {}\n    Pet * getOnePet(string name) {\n        pInst = new Dog(name);\n        return pInst;\n    }\n}\nclass CatStore: public Store  {\n    CatStore() {}\n    ~CatStore() {}\n    Pet * getOnePet(string name) {\n        pInst = new Cat(name);\n        return pInst;\n    }\n}\nint main() {\n    Store *petStore = null;\n    Pet * myPet;\n    petStore = new DogStore();\n    myPet = petStore-&gt;getOnePet(&quot;旺财&quot;);\n    myPet-&gt;shut();\n    petStore = new CatStore();\n    myPet = petStore-&gt;getOnePet(&quot;加菲&quot;);\n    myPet-&gt;shut();\n}\n</code></pre><p>如上，每种宠物一个工厂，增加只要继承扩展就行。简单工厂模式就好比是大商城，啥都卖;而工厂方法模式就是专卖店，只卖一种类型的宠物。</p>\n<blockquote>\n<p>两种模式各有优缺点，当种类不多时可以采用简单工厂，而当种类多而且各工厂内部复杂时可考虑工厂方法</p>\n</blockquote>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>工厂模式是对事物属性变化的封装，当对象的属性相对稳定，行为变化频繁的时候，就需要对行为进行封装适应。而策略模式正是针对这种问题的一个解决方法。<br>比如，简易计算器，数字的四则运算，处理的属性不变，而计算方式却大不相同：</p>\n<pre><code>class OPerate {\n    private:\n        int num1;\n        int num2;\n        int operResult;\n    public:\n        Operate(int n1,int n2) {\n            num1 = n1;\n            num2 = n2;\n            operResult = 0;\n        }\n        ~Operate(int n1,int n2) {\n            num1 = 0;\n            num2 = 0;\n            operResult = 0;\n        }\n        void displayResult() {\n            cout &lt;&lt; &quot;The result is : &quot; &lt;&lt; operResult &lt;&lt; endl;\n        }\n        virtual void doOperation() = 0;\n}\nclass OperateAdd: public OPerate {\n    OperateAdd(int n1,int n2): OPerate(n1,n2) {}\n    ~OperateAdd() {}\n    void doOperation() {\n        operResult = num1 + num2;\n    }\n}\nclass OperateMultiple: public OPerate {\n    OperateMultiple(int n1,int n2): OPerate(n1,n2) {}\n    ~OperateMultiple() {}\n    void doOperation() {\n        operResult = num1 * num2;\n    }\n}\nclass OperateContext {\n    private:\n        OPerate * pInst;\n    public:\n        OperateContext(OPerate * pInstz) { pInst = pInstz; }\n        ~OperateContext() { pInst = null; }\n        void getOperateResult() {\n            pInst-&gt;doOperation();\n        }\n        void dump() {\n            pInst-&gt;displayResult();\n        }\n}\nint main() {\n    OperateContext context;\n    context = new OperateContext(new OperateAdd(3,5));\n    context.getOperateResult();\n    context.dump();\n    context = new OperateContext(new OperateMultiple(3,5));\n    context.getOperateResult();\n    context.dump();\n}\n</code></pre><p>输出：<br>The result is : 8<br>The result is : 15</p>\n<h3 id=\"策略-工厂组合模式\"><a href=\"#策略-工厂组合模式\" class=\"headerlink\" title=\"策略-工厂组合模式\"></a>策略-工厂组合模式</h3><p>策略模式最后的使用将对象的行为暴露出来不合适，结合工厂模式来隐藏内部过程，提供统一使用对象和接口，重构上面的部分代码：</p>\n<pre><code>class OperateContext {\n    private:\n        OPerate * pInst = null;\n    public:\n        OperateContext(string type,int n1,int n2) {\n            if(pInst == null) {\n                pInst = createInst(type,n1,n2);\n            }\n        }\n        ~OperateContext() { pInst = null; }\n        OPerate * createInst(string type,int n1,int n2) {\n            switch(type) {\n                case &quot;ADD&quot;:\n                    return new OperateAdd(n1,n2);\n                case &quot;MULTIPLE&quot;:\n                    return new OperateMultiple(n1,n2);\n                default:\n                    return null;\n            }\n        }\n        void getOperateResult() {\n            if(pInst != null) {\n                pInst-&gt;doOperation();\n            }\n        }\n        void dump() {\n            if(pInst != null) {\n                pInst-&gt;displayResult();\n            }\n        }\n}\nint main() {\n    OperateContext *pcontext = null;\n    pcontext = (OperateContext *)new OperateContext(&quot;ADD&quot;,3,5);\n    context-&gt;getOperateResult();\n    context-&gt;dump();\n    pcontext = (OperateContext *)new OperateContext(&quot;MULTIPLE&quot;,3,5);\n    context-&gt;getOperateResult();\n    context-&gt;dump();\n}\n</code></pre><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例模式利用类的静态属性的特点使得一个类有且只能有一个实例，减少内存消耗<br>比如：</p>\n<pre><code>char g_auData[sizeof(Sington)];\nSington * Sington::pInst = null;\nclass Sington {\n    private:\n        static Sington * pInst;\n    public:\n        static Sington * getInstance() {\n            if(pInst != null) {\n                return pInst;\n            } else {\n                pInst = (Sington * )g_auData;\n                new (pInst) Sington();\n                return pInst;\n            }\n            void display() {\n                cout &lt;&lt; &quot;I am sington!&quot; &lt;&lt; endl;\n            }\n        }\n}\nint main() {\n    Sington * pContext = Sington::getInstance();\n    pContext-&gt;display();\n}\n</code></pre><p>输出：I am sington!</p>"},{"title":"设计模式二","date":"2018-03-17T13:39:54.000Z","comments":1,"_content":"设计模式作为软件设计的经验总结，有三大原则需要遵守：\n\n- 类对象职责单一，即在封装数据时尽量使类的功能单一，各类之间通过消息或者接口组合在一起\n- 开放-闭合原则，即对扩展的开放，对修改的闭合\n- 依赖倒转原则，对象抽象时应该依赖于抽象，而不应该依赖于细节，即面向接口编程\n<!--more-->\n\n### 建造者模式\n建造者模式是将多个不同的对象组合成负责复杂对象的一种设计模式，而各个子对象可以独立抽象和发展而互不影响，通过建造者可以组合成不同的复杂对象，灵活多变。\n同时，可以构建多层的建造者对象来得到更加复杂的类对象\n建造者模式是设计中比较常用的设计方法，我们在程序设计中处理的事物总是零散，通过分析抽象可将零散的事物进行抽象分类，在使用中就可以直接使用\n下面通过吃火锅点单系统来说明模式的使用方式，火锅订单包括：\n\n- 锅底，麻辣/清汤\n- 蘸料碟，芝麻/花生\n- 餐具，筷子/碗\n- 荤菜，牛肉/鱼肉/鸡肉\n- 素菜，白菜/土豆/玉米\n- 盛菜盘子，陶瓷盘/玻璃盘\n\n下面来进行构造：\n\n    class ProductItem {\n        int price = 0;\n        ProductItem(int price) { price = price; }\n        ProductItem() {}\n        ~ProductItem() {price = 0;}\n        virtual void display() = 0;\n        int getPrice() {\n            return price;\n        }\n    }\n    //锅底\n    //麻辣锅底\n    class SpicyHotPotSoup: public ProductItem {\n        SpicyHotPotSoup(int price): ProductItem(price) {}\n        ~SpicyHotPotSoup() {}\n        void display() {\n            cout << \"名称：麻辣锅底\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //清汤锅底\n    class LightHotPotSoup: public ProductItem {\n        LightHotPotSoup(int price): ProductItem(price) {}\n        ~LightHotPotSoup() {}\n        void display() {\n            cout << \"名称：清汤锅底\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    //蘸料\n    //芝麻蘸料\n    class SesameSauce: public ProductItem {\n        SesameSauce(int price): ProductItem(price) {}\n        ~SesameSauce() {}\n        void display() {\n            cout << \"名称：芝麻蘸料\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //花生蘸料\n    class PeanutSauce: public ProductItem  {\n        PeanutSauce(int price): ProductItem(price) {}\n        ~PeanutSauce() {}\n        void display() {\n            cout << \"名称：花生蘸料\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    //餐具\n    //碗\n    class Bowl: public ProductItem {\n        Bowl() {}\n        ~Bowl() {}\n        void display() {\n            cout << \"名称：碗\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //筷子\n    class Chopsticks: public ProductItem {\n        Chopsticks() {}\n        ~Chopsticks() {}\n        void display() {\n            cout << \"名称：筷子\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    //盛菜盘子\n    class Plate {\n        Plate() {}\n        ~Plate() {}\n    }\n    //陶瓷盘\n    class CermicPlate: public Plate {\n        CermicPlate() {}\n        ~CermicPlate() {}\n    }\n    //玻璃盘\n    class GlassPlate: public Plate {\n        GlassPlate() {}\n        ~GlassPlate() {}\n    }\n\n    //荤菜\n    class Meat: public ProductItem {\n        Plate m_plate;\n        Meat(Plate plate,int price): ProductItem(price) {\n            m_plate = new CermicPlate();\n        }\n        ~Meat() {m_plate = null;}\n    }\n    //牛肉\n    class Beef: public Meat {\n        Beef(int price): Meat(price) {\n        }\n        ~Beef() {}\n        void display() {\n            cout << \"名称：牛肉\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //鱼肉\n    class Fish: public Meat {\n        Fish(int price): Meat(price) {}\n        ~Fish() {}\n        void display() {\n            cout << \"名称：鱼肉\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //鸡肉\n    class Chicken: public Meat {\n        Chicken(int price): Meat(price) {}\n        ~Chicken() {}\n        void display() {\n            cout << \"名称：鸡肉\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    //素菜\n    class Vagetble: public ProductItem {\n        Plate m_plate;\n        Vagetble(int price): ProductItem(price) {\n            m_plate = new GlassPlate();\n        }\n        ~Vagetble() {m_plate = null;}\n    }\n    //白菜\n    class Cabbage: public Vagetble {\n        Cabbage(int price): Vagetble(price) {}\n        ~Cabbage() {}\n        void display() {\n            cout << \"名称：白菜\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //土豆\n    class Potato: public Vagetble {\n        Potato(int price): Vagetble(price) {}\n        ~Potato() {}\n        void display() {\n            cout << \"名称：土豆\" << \" 价格：\" << price << \" \";\n        }\n    }\n     //玉米\n    class Maize: public Vagetble {\n        Maize(int price): Vagetble(price) {}\n        ~Maize() {}\n        void display() {\n            cout << \"名称：玉米\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    class Order {\n        ProductItem *m_product;\n        int num;\n\n        Order(ProductItem *pitem,int num) {\n            m_productList = pitem;\n            num = num;\n        }\n        ~Order() {\n            m_productList = null;\n            num = 0;\n        }\n\n        int getOrderPrice() {\n            return m_productList->getPrice() * num;\n        }\n\n        void display() {\n            m_product->display();\n            cout << \" 数量：\" << num << endl;\n        }\n    }\n\n    class OrderMeal {\n        Order orders[] = [];\n        OrderMeal() {}\n        ~OrderMeal() {}\n\n        void addOrder(string type,int price,int num) {\n            switch(type) {\n                case \"SpicyHotPotSoup\": {\n                    orders.push(new SpicyHotPotSoup(price),num);\n                    break;\n                }\n                case \"LightHotPotSoup\": {\n                    orders.push(new LightHotPotSoup(price),num);\n                    break;\n                }\n                case \"SesameSauce\": {\n                    orders.push(new SesameSauce(price),num);\n                    break;\n                }\n                case \"PeanutSauce\": {\n                    orders.push(new PeanutSauce(price),num);\n                    break;\n                }\n                case \"Bowl\": {\n                    orders.push(new Bowl(price),num);\n                    break;\n                }\n                case \"Chopsticks\": {\n                    orders.push(new Chopsticks(price),num);\n                    break;\n                }\n                case \"Beef\": {\n                    orders.push(new Beef(price),num);\n                    break;\n                }\n                case \"Fish\": {\n                    orders.push(new Fish(price),num);\n                    break;\n                }\n                case \"Chicken\": {\n                    orders.push(new Chicken(price),num);\n                    break;\n                }\n                case \"Cabbage\": {\n                    orders.push(new Cabbage(price),num);\n                    break;\n                }\n                case \"Potato\": {\n                    orders.push(new Potato(price),num);\n                    break;\n                }\n                case \"Maize\": {\n                    orders.push(new Maize(price),num);\n                    break;\n                }\n            }\n        }\n\n        int getTotalBill() {\n            int total = 0;\n            for(int index = 0;index < orders.length;index++) {\n                total += orders[index].getOrderPrice();\n            }\n            return total;\n        }\n\n        void dump() {\n            for(int index = 0;index < orders.length;index++) {\n                total += orders[index].display();\n            }\n            cout << \" 总共：\" << getTotalBill() << endl;\n        }\n    }\n\n    int main() {\n        OrderMeal myMeal = new OrderMeal();\n        myMeal.addOrder(\"SpicyHotPotSoup\",30,1);\n        myMeal.addOrder(\"LightHotPotSoup\",30,1);\n        myMeal.addOrder(\"SesameSauce\",5,1);\n        myMeal.addOrder(\"PeanutSauce\",5,1);\n        myMeal.addOrder(\"Bowl\",0,2);\n        myMeal.addOrder(\"Chopsticks\",0,2);\n        myMeal.addOrder(\"Beef\",20,4);\n        myMeal.addOrder(\"Fish\",35,1);\n        myMeal.addOrder(\"Chicken\",15,1);\n        myMeal.addOrder(\"Cabbage\",10,1);\n        myMeal.addOrder(\"Potato\",8,2);\n        myMeal.addOrder(\"Maize\",12,1);\n        myMeal.dump();\n    }\n\n输出：\n名称：麻辣锅底  价格：30  数量：1\n名称：清汤锅底  价格：30  数量：1\n名称：芝麻蘸料  价格：5   数量：1\n名称：花生蘸料  价格：5   数量：1\n名称：碗       价格：0   数量：2\n名称：筷子     价格：0   数量：2\n名称：牛肉     价格：20  数量：4\n名称：鱼肉     价格：35  数量：1\n名称：鸡肉     价格：30  数量：1\n名称：白菜     价格：10  数量：1\n名称：土豆     价格：8   数量：2\n名称：玉米     价格：12  数量：1\n总共：253\n\n### 组合模式\n组合模式比较简单，主要是解决那些树形接口的系统或者事物，而又想在各个系统节点上有类似的属性和接口\n比如一个集团，有总公司，总公司下属有财务和人事部门,负责财务的结算和人员招聘;总公司下面有区分中心公司，中心公司下属又有各个城市的子公司，这些不同级别的子公司都需要财务和人事部门，这就涉及到节点的接口统一问题了，可以用到组合模式，例子：\n\n    class Department {\n        Department() {}\n        ~Department() {}\n        virtual void display() = 0;\n    }\n    class Finance: public Department {\n        Finance() {}\n        ~Finance() {}\n        void display() {\n            cout << \"部门: 财务\" << endl;\n        }\n    }\n    class Personnel: public Department {\n        Personnel() {}\n        ~Personnel() {}\n        void display() {\n            cout << \"部门: 人事\" << endl;\n        }\n    }\n    class Company {\n        string name;\n        Department * m_departments[] = [];\n        Company *m_pcompanys[] = [];\n        string qinzui = \"=\";\n        Company(string name) {\n            name = name;\n            m_departments.push(new Finance());\n            m_departments.push(new Personnel());\n        }\n        ~Company() {}\n\n        virtual void addCompany() = 0;\n        virtual void removeCompany() = 0;\n        virtual void display() = 0;\n        void addQinzui(string qinzui) {\n            qinzui = qinzui;\n        }\n    }\n    class ConCompany: public Company {\n        ConCompany(string name): Company(name) {}\n        ~ConCompany() {}\n\n        void addCompany(Company *pcomp) {\n            pcomp.addQinzui(qinzui+\"===\");\n            m_pcompanys.push(pcomp);\n        }\n\n        void removeCompany(Company *pcomp) {\n            m_pcompanys.remove(pcomp);\n        }\n\n        void dump() {\n            cout << qinzui << name << endl;\n            if(m_departments.length != 0) {\n                for(int index=0;index < m_departments.length;index++) {\n                    cout << qinzui;\n                    m_departments[index].display();\n                }\n            }\n            if(m_pcompanys.length != 0) {\n                for(int index=0;index < m_departments.length;index++) {\n                    m_pcompanys[index].dump();\n                }\n            }\n        }\n    }\n\n    int main() {\n        ConCompany huadong = new ConCompany(\"华东分公司\");\n        huadong.addCompany(new ConCompany(\"上海分公司\"))；\n        huadong.addCompany(new ConCompany(\"杭州分公司\"));\n        ConCompany huabei = new ConCompany(\"华北分公司\");\n        huabei.addCompany(new ConCompany(\"北京分公司\"));\n        huabei.addCompany(new ConCompany(\"天津分公司\"));\n        ConCompany zong = new ConCompany(\"总公司\");\n        zong.addCompany(huadong);\n        zong.addCompany(huabei);\n        zong.dump();\n    }\n\n    输出：\n    =总公司\n    =部门: 财务\n    =部门: 人事\n    ====华东分公司\n    ====部门: 财务\n    ====部门: 人事\n    ========上海分公司\n    ========部门: 财务\n    ========部门: 人事\n    ========杭州分公司\n    ========部门: 财务\n    ========部门: 人事\n    ====华北分公司\n    ====部门: 财务\n    ====部门: 人事\n    ========北京分公司\n    ========部门: 财务\n    ========部门: 人事\n    ========天津分公司\n    ========部门: 财务\n    ========部门: 人事\n\n","source":"_posts/2018-03-17-design-pattern-2.md","raw":"---\ntitle: 设计模式二\ndate: 2018-03-17 21:39:54\ntags: 设计\ncategories: 后端\ncomments: true\n---\n设计模式作为软件设计的经验总结，有三大原则需要遵守：\n\n- 类对象职责单一，即在封装数据时尽量使类的功能单一，各类之间通过消息或者接口组合在一起\n- 开放-闭合原则，即对扩展的开放，对修改的闭合\n- 依赖倒转原则，对象抽象时应该依赖于抽象，而不应该依赖于细节，即面向接口编程\n<!--more-->\n\n### 建造者模式\n建造者模式是将多个不同的对象组合成负责复杂对象的一种设计模式，而各个子对象可以独立抽象和发展而互不影响，通过建造者可以组合成不同的复杂对象，灵活多变。\n同时，可以构建多层的建造者对象来得到更加复杂的类对象\n建造者模式是设计中比较常用的设计方法，我们在程序设计中处理的事物总是零散，通过分析抽象可将零散的事物进行抽象分类，在使用中就可以直接使用\n下面通过吃火锅点单系统来说明模式的使用方式，火锅订单包括：\n\n- 锅底，麻辣/清汤\n- 蘸料碟，芝麻/花生\n- 餐具，筷子/碗\n- 荤菜，牛肉/鱼肉/鸡肉\n- 素菜，白菜/土豆/玉米\n- 盛菜盘子，陶瓷盘/玻璃盘\n\n下面来进行构造：\n\n    class ProductItem {\n        int price = 0;\n        ProductItem(int price) { price = price; }\n        ProductItem() {}\n        ~ProductItem() {price = 0;}\n        virtual void display() = 0;\n        int getPrice() {\n            return price;\n        }\n    }\n    //锅底\n    //麻辣锅底\n    class SpicyHotPotSoup: public ProductItem {\n        SpicyHotPotSoup(int price): ProductItem(price) {}\n        ~SpicyHotPotSoup() {}\n        void display() {\n            cout << \"名称：麻辣锅底\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //清汤锅底\n    class LightHotPotSoup: public ProductItem {\n        LightHotPotSoup(int price): ProductItem(price) {}\n        ~LightHotPotSoup() {}\n        void display() {\n            cout << \"名称：清汤锅底\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    //蘸料\n    //芝麻蘸料\n    class SesameSauce: public ProductItem {\n        SesameSauce(int price): ProductItem(price) {}\n        ~SesameSauce() {}\n        void display() {\n            cout << \"名称：芝麻蘸料\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //花生蘸料\n    class PeanutSauce: public ProductItem  {\n        PeanutSauce(int price): ProductItem(price) {}\n        ~PeanutSauce() {}\n        void display() {\n            cout << \"名称：花生蘸料\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    //餐具\n    //碗\n    class Bowl: public ProductItem {\n        Bowl() {}\n        ~Bowl() {}\n        void display() {\n            cout << \"名称：碗\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //筷子\n    class Chopsticks: public ProductItem {\n        Chopsticks() {}\n        ~Chopsticks() {}\n        void display() {\n            cout << \"名称：筷子\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    //盛菜盘子\n    class Plate {\n        Plate() {}\n        ~Plate() {}\n    }\n    //陶瓷盘\n    class CermicPlate: public Plate {\n        CermicPlate() {}\n        ~CermicPlate() {}\n    }\n    //玻璃盘\n    class GlassPlate: public Plate {\n        GlassPlate() {}\n        ~GlassPlate() {}\n    }\n\n    //荤菜\n    class Meat: public ProductItem {\n        Plate m_plate;\n        Meat(Plate plate,int price): ProductItem(price) {\n            m_plate = new CermicPlate();\n        }\n        ~Meat() {m_plate = null;}\n    }\n    //牛肉\n    class Beef: public Meat {\n        Beef(int price): Meat(price) {\n        }\n        ~Beef() {}\n        void display() {\n            cout << \"名称：牛肉\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //鱼肉\n    class Fish: public Meat {\n        Fish(int price): Meat(price) {}\n        ~Fish() {}\n        void display() {\n            cout << \"名称：鱼肉\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //鸡肉\n    class Chicken: public Meat {\n        Chicken(int price): Meat(price) {}\n        ~Chicken() {}\n        void display() {\n            cout << \"名称：鸡肉\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    //素菜\n    class Vagetble: public ProductItem {\n        Plate m_plate;\n        Vagetble(int price): ProductItem(price) {\n            m_plate = new GlassPlate();\n        }\n        ~Vagetble() {m_plate = null;}\n    }\n    //白菜\n    class Cabbage: public Vagetble {\n        Cabbage(int price): Vagetble(price) {}\n        ~Cabbage() {}\n        void display() {\n            cout << \"名称：白菜\" << \" 价格：\" << price << \" \";\n        }\n    }\n    //土豆\n    class Potato: public Vagetble {\n        Potato(int price): Vagetble(price) {}\n        ~Potato() {}\n        void display() {\n            cout << \"名称：土豆\" << \" 价格：\" << price << \" \";\n        }\n    }\n     //玉米\n    class Maize: public Vagetble {\n        Maize(int price): Vagetble(price) {}\n        ~Maize() {}\n        void display() {\n            cout << \"名称：玉米\" << \" 价格：\" << price << \" \";\n        }\n    }\n\n    class Order {\n        ProductItem *m_product;\n        int num;\n\n        Order(ProductItem *pitem,int num) {\n            m_productList = pitem;\n            num = num;\n        }\n        ~Order() {\n            m_productList = null;\n            num = 0;\n        }\n\n        int getOrderPrice() {\n            return m_productList->getPrice() * num;\n        }\n\n        void display() {\n            m_product->display();\n            cout << \" 数量：\" << num << endl;\n        }\n    }\n\n    class OrderMeal {\n        Order orders[] = [];\n        OrderMeal() {}\n        ~OrderMeal() {}\n\n        void addOrder(string type,int price,int num) {\n            switch(type) {\n                case \"SpicyHotPotSoup\": {\n                    orders.push(new SpicyHotPotSoup(price),num);\n                    break;\n                }\n                case \"LightHotPotSoup\": {\n                    orders.push(new LightHotPotSoup(price),num);\n                    break;\n                }\n                case \"SesameSauce\": {\n                    orders.push(new SesameSauce(price),num);\n                    break;\n                }\n                case \"PeanutSauce\": {\n                    orders.push(new PeanutSauce(price),num);\n                    break;\n                }\n                case \"Bowl\": {\n                    orders.push(new Bowl(price),num);\n                    break;\n                }\n                case \"Chopsticks\": {\n                    orders.push(new Chopsticks(price),num);\n                    break;\n                }\n                case \"Beef\": {\n                    orders.push(new Beef(price),num);\n                    break;\n                }\n                case \"Fish\": {\n                    orders.push(new Fish(price),num);\n                    break;\n                }\n                case \"Chicken\": {\n                    orders.push(new Chicken(price),num);\n                    break;\n                }\n                case \"Cabbage\": {\n                    orders.push(new Cabbage(price),num);\n                    break;\n                }\n                case \"Potato\": {\n                    orders.push(new Potato(price),num);\n                    break;\n                }\n                case \"Maize\": {\n                    orders.push(new Maize(price),num);\n                    break;\n                }\n            }\n        }\n\n        int getTotalBill() {\n            int total = 0;\n            for(int index = 0;index < orders.length;index++) {\n                total += orders[index].getOrderPrice();\n            }\n            return total;\n        }\n\n        void dump() {\n            for(int index = 0;index < orders.length;index++) {\n                total += orders[index].display();\n            }\n            cout << \" 总共：\" << getTotalBill() << endl;\n        }\n    }\n\n    int main() {\n        OrderMeal myMeal = new OrderMeal();\n        myMeal.addOrder(\"SpicyHotPotSoup\",30,1);\n        myMeal.addOrder(\"LightHotPotSoup\",30,1);\n        myMeal.addOrder(\"SesameSauce\",5,1);\n        myMeal.addOrder(\"PeanutSauce\",5,1);\n        myMeal.addOrder(\"Bowl\",0,2);\n        myMeal.addOrder(\"Chopsticks\",0,2);\n        myMeal.addOrder(\"Beef\",20,4);\n        myMeal.addOrder(\"Fish\",35,1);\n        myMeal.addOrder(\"Chicken\",15,1);\n        myMeal.addOrder(\"Cabbage\",10,1);\n        myMeal.addOrder(\"Potato\",8,2);\n        myMeal.addOrder(\"Maize\",12,1);\n        myMeal.dump();\n    }\n\n输出：\n名称：麻辣锅底  价格：30  数量：1\n名称：清汤锅底  价格：30  数量：1\n名称：芝麻蘸料  价格：5   数量：1\n名称：花生蘸料  价格：5   数量：1\n名称：碗       价格：0   数量：2\n名称：筷子     价格：0   数量：2\n名称：牛肉     价格：20  数量：4\n名称：鱼肉     价格：35  数量：1\n名称：鸡肉     价格：30  数量：1\n名称：白菜     价格：10  数量：1\n名称：土豆     价格：8   数量：2\n名称：玉米     价格：12  数量：1\n总共：253\n\n### 组合模式\n组合模式比较简单，主要是解决那些树形接口的系统或者事物，而又想在各个系统节点上有类似的属性和接口\n比如一个集团，有总公司，总公司下属有财务和人事部门,负责财务的结算和人员招聘;总公司下面有区分中心公司，中心公司下属又有各个城市的子公司，这些不同级别的子公司都需要财务和人事部门，这就涉及到节点的接口统一问题了，可以用到组合模式，例子：\n\n    class Department {\n        Department() {}\n        ~Department() {}\n        virtual void display() = 0;\n    }\n    class Finance: public Department {\n        Finance() {}\n        ~Finance() {}\n        void display() {\n            cout << \"部门: 财务\" << endl;\n        }\n    }\n    class Personnel: public Department {\n        Personnel() {}\n        ~Personnel() {}\n        void display() {\n            cout << \"部门: 人事\" << endl;\n        }\n    }\n    class Company {\n        string name;\n        Department * m_departments[] = [];\n        Company *m_pcompanys[] = [];\n        string qinzui = \"=\";\n        Company(string name) {\n            name = name;\n            m_departments.push(new Finance());\n            m_departments.push(new Personnel());\n        }\n        ~Company() {}\n\n        virtual void addCompany() = 0;\n        virtual void removeCompany() = 0;\n        virtual void display() = 0;\n        void addQinzui(string qinzui) {\n            qinzui = qinzui;\n        }\n    }\n    class ConCompany: public Company {\n        ConCompany(string name): Company(name) {}\n        ~ConCompany() {}\n\n        void addCompany(Company *pcomp) {\n            pcomp.addQinzui(qinzui+\"===\");\n            m_pcompanys.push(pcomp);\n        }\n\n        void removeCompany(Company *pcomp) {\n            m_pcompanys.remove(pcomp);\n        }\n\n        void dump() {\n            cout << qinzui << name << endl;\n            if(m_departments.length != 0) {\n                for(int index=0;index < m_departments.length;index++) {\n                    cout << qinzui;\n                    m_departments[index].display();\n                }\n            }\n            if(m_pcompanys.length != 0) {\n                for(int index=0;index < m_departments.length;index++) {\n                    m_pcompanys[index].dump();\n                }\n            }\n        }\n    }\n\n    int main() {\n        ConCompany huadong = new ConCompany(\"华东分公司\");\n        huadong.addCompany(new ConCompany(\"上海分公司\"))；\n        huadong.addCompany(new ConCompany(\"杭州分公司\"));\n        ConCompany huabei = new ConCompany(\"华北分公司\");\n        huabei.addCompany(new ConCompany(\"北京分公司\"));\n        huabei.addCompany(new ConCompany(\"天津分公司\"));\n        ConCompany zong = new ConCompany(\"总公司\");\n        zong.addCompany(huadong);\n        zong.addCompany(huabei);\n        zong.dump();\n    }\n\n    输出：\n    =总公司\n    =部门: 财务\n    =部门: 人事\n    ====华东分公司\n    ====部门: 财务\n    ====部门: 人事\n    ========上海分公司\n    ========部门: 财务\n    ========部门: 人事\n    ========杭州分公司\n    ========部门: 财务\n    ========部门: 人事\n    ====华北分公司\n    ====部门: 财务\n    ====部门: 人事\n    ========北京分公司\n    ========部门: 财务\n    ========部门: 人事\n    ========天津分公司\n    ========部门: 财务\n    ========部门: 人事\n\n","slug":"design-pattern-2","published":1,"updated":"2018-03-18T13:08:01.210Z","layout":"post","photos":[],"link":"","_id":"cjqwe42bz005bor0b5vru3ogk","content":"<p>设计模式作为软件设计的经验总结，有三大原则需要遵守：</p>\n<ul>\n<li>类对象职责单一，即在封装数据时尽量使类的功能单一，各类之间通过消息或者接口组合在一起</li>\n<li>开放-闭合原则，即对扩展的开放，对修改的闭合</li>\n<li>依赖倒转原则，对象抽象时应该依赖于抽象，而不应该依赖于细节，即面向接口编程<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>建造者模式是将多个不同的对象组合成负责复杂对象的一种设计模式，而各个子对象可以独立抽象和发展而互不影响，通过建造者可以组合成不同的复杂对象，灵活多变。<br>同时，可以构建多层的建造者对象来得到更加复杂的类对象<br>建造者模式是设计中比较常用的设计方法，我们在程序设计中处理的事物总是零散，通过分析抽象可将零散的事物进行抽象分类，在使用中就可以直接使用<br>下面通过吃火锅点单系统来说明模式的使用方式，火锅订单包括：</p>\n<ul>\n<li>锅底，麻辣/清汤</li>\n<li>蘸料碟，芝麻/花生</li>\n<li>餐具，筷子/碗</li>\n<li>荤菜，牛肉/鱼肉/鸡肉</li>\n<li>素菜，白菜/土豆/玉米</li>\n<li>盛菜盘子，陶瓷盘/玻璃盘</li>\n</ul>\n<p>下面来进行构造：</p>\n<pre><code>class ProductItem {\n    int price = 0;\n    ProductItem(int price) { price = price; }\n    ProductItem() {}\n    ~ProductItem() {price = 0;}\n    virtual void display() = 0;\n    int getPrice() {\n        return price;\n    }\n}\n//锅底\n//麻辣锅底\nclass SpicyHotPotSoup: public ProductItem {\n    SpicyHotPotSoup(int price): ProductItem(price) {}\n    ~SpicyHotPotSoup() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：麻辣锅底&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//清汤锅底\nclass LightHotPotSoup: public ProductItem {\n    LightHotPotSoup(int price): ProductItem(price) {}\n    ~LightHotPotSoup() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：清汤锅底&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\n//蘸料\n//芝麻蘸料\nclass SesameSauce: public ProductItem {\n    SesameSauce(int price): ProductItem(price) {}\n    ~SesameSauce() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：芝麻蘸料&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//花生蘸料\nclass PeanutSauce: public ProductItem  {\n    PeanutSauce(int price): ProductItem(price) {}\n    ~PeanutSauce() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：花生蘸料&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\n//餐具\n//碗\nclass Bowl: public ProductItem {\n    Bowl() {}\n    ~Bowl() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：碗&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//筷子\nclass Chopsticks: public ProductItem {\n    Chopsticks() {}\n    ~Chopsticks() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：筷子&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\n//盛菜盘子\nclass Plate {\n    Plate() {}\n    ~Plate() {}\n}\n//陶瓷盘\nclass CermicPlate: public Plate {\n    CermicPlate() {}\n    ~CermicPlate() {}\n}\n//玻璃盘\nclass GlassPlate: public Plate {\n    GlassPlate() {}\n    ~GlassPlate() {}\n}\n\n//荤菜\nclass Meat: public ProductItem {\n    Plate m_plate;\n    Meat(Plate plate,int price): ProductItem(price) {\n        m_plate = new CermicPlate();\n    }\n    ~Meat() {m_plate = null;}\n}\n//牛肉\nclass Beef: public Meat {\n    Beef(int price): Meat(price) {\n    }\n    ~Beef() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：牛肉&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//鱼肉\nclass Fish: public Meat {\n    Fish(int price): Meat(price) {}\n    ~Fish() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：鱼肉&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//鸡肉\nclass Chicken: public Meat {\n    Chicken(int price): Meat(price) {}\n    ~Chicken() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：鸡肉&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\n//素菜\nclass Vagetble: public ProductItem {\n    Plate m_plate;\n    Vagetble(int price): ProductItem(price) {\n        m_plate = new GlassPlate();\n    }\n    ~Vagetble() {m_plate = null;}\n}\n//白菜\nclass Cabbage: public Vagetble {\n    Cabbage(int price): Vagetble(price) {}\n    ~Cabbage() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：白菜&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//土豆\nclass Potato: public Vagetble {\n    Potato(int price): Vagetble(price) {}\n    ~Potato() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：土豆&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n //玉米\nclass Maize: public Vagetble {\n    Maize(int price): Vagetble(price) {}\n    ~Maize() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：玉米&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\nclass Order {\n    ProductItem *m_product;\n    int num;\n\n    Order(ProductItem *pitem,int num) {\n        m_productList = pitem;\n        num = num;\n    }\n    ~Order() {\n        m_productList = null;\n        num = 0;\n    }\n\n    int getOrderPrice() {\n        return m_productList-&gt;getPrice() * num;\n    }\n\n    void display() {\n        m_product-&gt;display();\n        cout &lt;&lt; &quot; 数量：&quot; &lt;&lt; num &lt;&lt; endl;\n    }\n}\n\nclass OrderMeal {\n    Order orders[] = [];\n    OrderMeal() {}\n    ~OrderMeal() {}\n\n    void addOrder(string type,int price,int num) {\n        switch(type) {\n            case &quot;SpicyHotPotSoup&quot;: {\n                orders.push(new SpicyHotPotSoup(price),num);\n                break;\n            }\n            case &quot;LightHotPotSoup&quot;: {\n                orders.push(new LightHotPotSoup(price),num);\n                break;\n            }\n            case &quot;SesameSauce&quot;: {\n                orders.push(new SesameSauce(price),num);\n                break;\n            }\n            case &quot;PeanutSauce&quot;: {\n                orders.push(new PeanutSauce(price),num);\n                break;\n            }\n            case &quot;Bowl&quot;: {\n                orders.push(new Bowl(price),num);\n                break;\n            }\n            case &quot;Chopsticks&quot;: {\n                orders.push(new Chopsticks(price),num);\n                break;\n            }\n            case &quot;Beef&quot;: {\n                orders.push(new Beef(price),num);\n                break;\n            }\n            case &quot;Fish&quot;: {\n                orders.push(new Fish(price),num);\n                break;\n            }\n            case &quot;Chicken&quot;: {\n                orders.push(new Chicken(price),num);\n                break;\n            }\n            case &quot;Cabbage&quot;: {\n                orders.push(new Cabbage(price),num);\n                break;\n            }\n            case &quot;Potato&quot;: {\n                orders.push(new Potato(price),num);\n                break;\n            }\n            case &quot;Maize&quot;: {\n                orders.push(new Maize(price),num);\n                break;\n            }\n        }\n    }\n\n    int getTotalBill() {\n        int total = 0;\n        for(int index = 0;index &lt; orders.length;index++) {\n            total += orders[index].getOrderPrice();\n        }\n        return total;\n    }\n\n    void dump() {\n        for(int index = 0;index &lt; orders.length;index++) {\n            total += orders[index].display();\n        }\n        cout &lt;&lt; &quot; 总共：&quot; &lt;&lt; getTotalBill() &lt;&lt; endl;\n    }\n}\n\nint main() {\n    OrderMeal myMeal = new OrderMeal();\n    myMeal.addOrder(&quot;SpicyHotPotSoup&quot;,30,1);\n    myMeal.addOrder(&quot;LightHotPotSoup&quot;,30,1);\n    myMeal.addOrder(&quot;SesameSauce&quot;,5,1);\n    myMeal.addOrder(&quot;PeanutSauce&quot;,5,1);\n    myMeal.addOrder(&quot;Bowl&quot;,0,2);\n    myMeal.addOrder(&quot;Chopsticks&quot;,0,2);\n    myMeal.addOrder(&quot;Beef&quot;,20,4);\n    myMeal.addOrder(&quot;Fish&quot;,35,1);\n    myMeal.addOrder(&quot;Chicken&quot;,15,1);\n    myMeal.addOrder(&quot;Cabbage&quot;,10,1);\n    myMeal.addOrder(&quot;Potato&quot;,8,2);\n    myMeal.addOrder(&quot;Maize&quot;,12,1);\n    myMeal.dump();\n}\n</code></pre><p>输出：<br>名称：麻辣锅底  价格：30  数量：1<br>名称：清汤锅底  价格：30  数量：1<br>名称：芝麻蘸料  价格：5   数量：1<br>名称：花生蘸料  价格：5   数量：1<br>名称：碗       价格：0   数量：2<br>名称：筷子     价格：0   数量：2<br>名称：牛肉     价格：20  数量：4<br>名称：鱼肉     价格：35  数量：1<br>名称：鸡肉     价格：30  数量：1<br>名称：白菜     价格：10  数量：1<br>名称：土豆     价格：8   数量：2<br>名称：玉米     价格：12  数量：1<br>总共：253</p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>组合模式比较简单，主要是解决那些树形接口的系统或者事物，而又想在各个系统节点上有类似的属性和接口<br>比如一个集团，有总公司，总公司下属有财务和人事部门,负责财务的结算和人员招聘;总公司下面有区分中心公司，中心公司下属又有各个城市的子公司，这些不同级别的子公司都需要财务和人事部门，这就涉及到节点的接口统一问题了，可以用到组合模式，例子：</p>\n<pre><code>class Department {\n    Department() {}\n    ~Department() {}\n    virtual void display() = 0;\n}\nclass Finance: public Department {\n    Finance() {}\n    ~Finance() {}\n    void display() {\n        cout &lt;&lt; &quot;部门: 财务&quot; &lt;&lt; endl;\n    }\n}\nclass Personnel: public Department {\n    Personnel() {}\n    ~Personnel() {}\n    void display() {\n        cout &lt;&lt; &quot;部门: 人事&quot; &lt;&lt; endl;\n    }\n}\nclass Company {\n    string name;\n    Department * m_departments[] = [];\n    Company *m_pcompanys[] = [];\n    string qinzui = &quot;=&quot;;\n    Company(string name) {\n        name = name;\n        m_departments.push(new Finance());\n        m_departments.push(new Personnel());\n    }\n    ~Company() {}\n\n    virtual void addCompany() = 0;\n    virtual void removeCompany() = 0;\n    virtual void display() = 0;\n    void addQinzui(string qinzui) {\n        qinzui = qinzui;\n    }\n}\nclass ConCompany: public Company {\n    ConCompany(string name): Company(name) {}\n    ~ConCompany() {}\n\n    void addCompany(Company *pcomp) {\n        pcomp.addQinzui(qinzui+&quot;===&quot;);\n        m_pcompanys.push(pcomp);\n    }\n\n    void removeCompany(Company *pcomp) {\n        m_pcompanys.remove(pcomp);\n    }\n\n    void dump() {\n        cout &lt;&lt; qinzui &lt;&lt; name &lt;&lt; endl;\n        if(m_departments.length != 0) {\n            for(int index=0;index &lt; m_departments.length;index++) {\n                cout &lt;&lt; qinzui;\n                m_departments[index].display();\n            }\n        }\n        if(m_pcompanys.length != 0) {\n            for(int index=0;index &lt; m_departments.length;index++) {\n                m_pcompanys[index].dump();\n            }\n        }\n    }\n}\n\nint main() {\n    ConCompany huadong = new ConCompany(&quot;华东分公司&quot;);\n    huadong.addCompany(new ConCompany(&quot;上海分公司&quot;))；\n    huadong.addCompany(new ConCompany(&quot;杭州分公司&quot;));\n    ConCompany huabei = new ConCompany(&quot;华北分公司&quot;);\n    huabei.addCompany(new ConCompany(&quot;北京分公司&quot;));\n    huabei.addCompany(new ConCompany(&quot;天津分公司&quot;));\n    ConCompany zong = new ConCompany(&quot;总公司&quot;);\n    zong.addCompany(huadong);\n    zong.addCompany(huabei);\n    zong.dump();\n}\n\n输出：\n=总公司\n=部门: 财务\n=部门: 人事\n====华东分公司\n====部门: 财务\n====部门: 人事\n========上海分公司\n========部门: 财务\n========部门: 人事\n========杭州分公司\n========部门: 财务\n========部门: 人事\n====华北分公司\n====部门: 财务\n====部门: 人事\n========北京分公司\n========部门: 财务\n========部门: 人事\n========天津分公司\n========部门: 财务\n========部门: 人事\n</code></pre>","site":{"data":{}},"excerpt":"<p>设计模式作为软件设计的经验总结，有三大原则需要遵守：</p>\n<ul>\n<li>类对象职责单一，即在封装数据时尽量使类的功能单一，各类之间通过消息或者接口组合在一起</li>\n<li>开放-闭合原则，即对扩展的开放，对修改的闭合</li>\n<li>依赖倒转原则，对象抽象时应该依赖于抽象，而不应该依赖于细节，即面向接口编程","more":"</li>\n</ul>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>建造者模式是将多个不同的对象组合成负责复杂对象的一种设计模式，而各个子对象可以独立抽象和发展而互不影响，通过建造者可以组合成不同的复杂对象，灵活多变。<br>同时，可以构建多层的建造者对象来得到更加复杂的类对象<br>建造者模式是设计中比较常用的设计方法，我们在程序设计中处理的事物总是零散，通过分析抽象可将零散的事物进行抽象分类，在使用中就可以直接使用<br>下面通过吃火锅点单系统来说明模式的使用方式，火锅订单包括：</p>\n<ul>\n<li>锅底，麻辣/清汤</li>\n<li>蘸料碟，芝麻/花生</li>\n<li>餐具，筷子/碗</li>\n<li>荤菜，牛肉/鱼肉/鸡肉</li>\n<li>素菜，白菜/土豆/玉米</li>\n<li>盛菜盘子，陶瓷盘/玻璃盘</li>\n</ul>\n<p>下面来进行构造：</p>\n<pre><code>class ProductItem {\n    int price = 0;\n    ProductItem(int price) { price = price; }\n    ProductItem() {}\n    ~ProductItem() {price = 0;}\n    virtual void display() = 0;\n    int getPrice() {\n        return price;\n    }\n}\n//锅底\n//麻辣锅底\nclass SpicyHotPotSoup: public ProductItem {\n    SpicyHotPotSoup(int price): ProductItem(price) {}\n    ~SpicyHotPotSoup() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：麻辣锅底&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//清汤锅底\nclass LightHotPotSoup: public ProductItem {\n    LightHotPotSoup(int price): ProductItem(price) {}\n    ~LightHotPotSoup() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：清汤锅底&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\n//蘸料\n//芝麻蘸料\nclass SesameSauce: public ProductItem {\n    SesameSauce(int price): ProductItem(price) {}\n    ~SesameSauce() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：芝麻蘸料&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//花生蘸料\nclass PeanutSauce: public ProductItem  {\n    PeanutSauce(int price): ProductItem(price) {}\n    ~PeanutSauce() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：花生蘸料&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\n//餐具\n//碗\nclass Bowl: public ProductItem {\n    Bowl() {}\n    ~Bowl() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：碗&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//筷子\nclass Chopsticks: public ProductItem {\n    Chopsticks() {}\n    ~Chopsticks() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：筷子&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\n//盛菜盘子\nclass Plate {\n    Plate() {}\n    ~Plate() {}\n}\n//陶瓷盘\nclass CermicPlate: public Plate {\n    CermicPlate() {}\n    ~CermicPlate() {}\n}\n//玻璃盘\nclass GlassPlate: public Plate {\n    GlassPlate() {}\n    ~GlassPlate() {}\n}\n\n//荤菜\nclass Meat: public ProductItem {\n    Plate m_plate;\n    Meat(Plate plate,int price): ProductItem(price) {\n        m_plate = new CermicPlate();\n    }\n    ~Meat() {m_plate = null;}\n}\n//牛肉\nclass Beef: public Meat {\n    Beef(int price): Meat(price) {\n    }\n    ~Beef() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：牛肉&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//鱼肉\nclass Fish: public Meat {\n    Fish(int price): Meat(price) {}\n    ~Fish() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：鱼肉&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//鸡肉\nclass Chicken: public Meat {\n    Chicken(int price): Meat(price) {}\n    ~Chicken() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：鸡肉&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\n//素菜\nclass Vagetble: public ProductItem {\n    Plate m_plate;\n    Vagetble(int price): ProductItem(price) {\n        m_plate = new GlassPlate();\n    }\n    ~Vagetble() {m_plate = null;}\n}\n//白菜\nclass Cabbage: public Vagetble {\n    Cabbage(int price): Vagetble(price) {}\n    ~Cabbage() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：白菜&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n//土豆\nclass Potato: public Vagetble {\n    Potato(int price): Vagetble(price) {}\n    ~Potato() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：土豆&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n //玉米\nclass Maize: public Vagetble {\n    Maize(int price): Vagetble(price) {}\n    ~Maize() {}\n    void display() {\n        cout &lt;&lt; &quot;名称：玉米&quot; &lt;&lt; &quot; 价格：&quot; &lt;&lt; price &lt;&lt; &quot; &quot;;\n    }\n}\n\nclass Order {\n    ProductItem *m_product;\n    int num;\n\n    Order(ProductItem *pitem,int num) {\n        m_productList = pitem;\n        num = num;\n    }\n    ~Order() {\n        m_productList = null;\n        num = 0;\n    }\n\n    int getOrderPrice() {\n        return m_productList-&gt;getPrice() * num;\n    }\n\n    void display() {\n        m_product-&gt;display();\n        cout &lt;&lt; &quot; 数量：&quot; &lt;&lt; num &lt;&lt; endl;\n    }\n}\n\nclass OrderMeal {\n    Order orders[] = [];\n    OrderMeal() {}\n    ~OrderMeal() {}\n\n    void addOrder(string type,int price,int num) {\n        switch(type) {\n            case &quot;SpicyHotPotSoup&quot;: {\n                orders.push(new SpicyHotPotSoup(price),num);\n                break;\n            }\n            case &quot;LightHotPotSoup&quot;: {\n                orders.push(new LightHotPotSoup(price),num);\n                break;\n            }\n            case &quot;SesameSauce&quot;: {\n                orders.push(new SesameSauce(price),num);\n                break;\n            }\n            case &quot;PeanutSauce&quot;: {\n                orders.push(new PeanutSauce(price),num);\n                break;\n            }\n            case &quot;Bowl&quot;: {\n                orders.push(new Bowl(price),num);\n                break;\n            }\n            case &quot;Chopsticks&quot;: {\n                orders.push(new Chopsticks(price),num);\n                break;\n            }\n            case &quot;Beef&quot;: {\n                orders.push(new Beef(price),num);\n                break;\n            }\n            case &quot;Fish&quot;: {\n                orders.push(new Fish(price),num);\n                break;\n            }\n            case &quot;Chicken&quot;: {\n                orders.push(new Chicken(price),num);\n                break;\n            }\n            case &quot;Cabbage&quot;: {\n                orders.push(new Cabbage(price),num);\n                break;\n            }\n            case &quot;Potato&quot;: {\n                orders.push(new Potato(price),num);\n                break;\n            }\n            case &quot;Maize&quot;: {\n                orders.push(new Maize(price),num);\n                break;\n            }\n        }\n    }\n\n    int getTotalBill() {\n        int total = 0;\n        for(int index = 0;index &lt; orders.length;index++) {\n            total += orders[index].getOrderPrice();\n        }\n        return total;\n    }\n\n    void dump() {\n        for(int index = 0;index &lt; orders.length;index++) {\n            total += orders[index].display();\n        }\n        cout &lt;&lt; &quot; 总共：&quot; &lt;&lt; getTotalBill() &lt;&lt; endl;\n    }\n}\n\nint main() {\n    OrderMeal myMeal = new OrderMeal();\n    myMeal.addOrder(&quot;SpicyHotPotSoup&quot;,30,1);\n    myMeal.addOrder(&quot;LightHotPotSoup&quot;,30,1);\n    myMeal.addOrder(&quot;SesameSauce&quot;,5,1);\n    myMeal.addOrder(&quot;PeanutSauce&quot;,5,1);\n    myMeal.addOrder(&quot;Bowl&quot;,0,2);\n    myMeal.addOrder(&quot;Chopsticks&quot;,0,2);\n    myMeal.addOrder(&quot;Beef&quot;,20,4);\n    myMeal.addOrder(&quot;Fish&quot;,35,1);\n    myMeal.addOrder(&quot;Chicken&quot;,15,1);\n    myMeal.addOrder(&quot;Cabbage&quot;,10,1);\n    myMeal.addOrder(&quot;Potato&quot;,8,2);\n    myMeal.addOrder(&quot;Maize&quot;,12,1);\n    myMeal.dump();\n}\n</code></pre><p>输出：<br>名称：麻辣锅底  价格：30  数量：1<br>名称：清汤锅底  价格：30  数量：1<br>名称：芝麻蘸料  价格：5   数量：1<br>名称：花生蘸料  价格：5   数量：1<br>名称：碗       价格：0   数量：2<br>名称：筷子     价格：0   数量：2<br>名称：牛肉     价格：20  数量：4<br>名称：鱼肉     价格：35  数量：1<br>名称：鸡肉     价格：30  数量：1<br>名称：白菜     价格：10  数量：1<br>名称：土豆     价格：8   数量：2<br>名称：玉米     价格：12  数量：1<br>总共：253</p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>组合模式比较简单，主要是解决那些树形接口的系统或者事物，而又想在各个系统节点上有类似的属性和接口<br>比如一个集团，有总公司，总公司下属有财务和人事部门,负责财务的结算和人员招聘;总公司下面有区分中心公司，中心公司下属又有各个城市的子公司，这些不同级别的子公司都需要财务和人事部门，这就涉及到节点的接口统一问题了，可以用到组合模式，例子：</p>\n<pre><code>class Department {\n    Department() {}\n    ~Department() {}\n    virtual void display() = 0;\n}\nclass Finance: public Department {\n    Finance() {}\n    ~Finance() {}\n    void display() {\n        cout &lt;&lt; &quot;部门: 财务&quot; &lt;&lt; endl;\n    }\n}\nclass Personnel: public Department {\n    Personnel() {}\n    ~Personnel() {}\n    void display() {\n        cout &lt;&lt; &quot;部门: 人事&quot; &lt;&lt; endl;\n    }\n}\nclass Company {\n    string name;\n    Department * m_departments[] = [];\n    Company *m_pcompanys[] = [];\n    string qinzui = &quot;=&quot;;\n    Company(string name) {\n        name = name;\n        m_departments.push(new Finance());\n        m_departments.push(new Personnel());\n    }\n    ~Company() {}\n\n    virtual void addCompany() = 0;\n    virtual void removeCompany() = 0;\n    virtual void display() = 0;\n    void addQinzui(string qinzui) {\n        qinzui = qinzui;\n    }\n}\nclass ConCompany: public Company {\n    ConCompany(string name): Company(name) {}\n    ~ConCompany() {}\n\n    void addCompany(Company *pcomp) {\n        pcomp.addQinzui(qinzui+&quot;===&quot;);\n        m_pcompanys.push(pcomp);\n    }\n\n    void removeCompany(Company *pcomp) {\n        m_pcompanys.remove(pcomp);\n    }\n\n    void dump() {\n        cout &lt;&lt; qinzui &lt;&lt; name &lt;&lt; endl;\n        if(m_departments.length != 0) {\n            for(int index=0;index &lt; m_departments.length;index++) {\n                cout &lt;&lt; qinzui;\n                m_departments[index].display();\n            }\n        }\n        if(m_pcompanys.length != 0) {\n            for(int index=0;index &lt; m_departments.length;index++) {\n                m_pcompanys[index].dump();\n            }\n        }\n    }\n}\n\nint main() {\n    ConCompany huadong = new ConCompany(&quot;华东分公司&quot;);\n    huadong.addCompany(new ConCompany(&quot;上海分公司&quot;))；\n    huadong.addCompany(new ConCompany(&quot;杭州分公司&quot;));\n    ConCompany huabei = new ConCompany(&quot;华北分公司&quot;);\n    huabei.addCompany(new ConCompany(&quot;北京分公司&quot;));\n    huabei.addCompany(new ConCompany(&quot;天津分公司&quot;));\n    ConCompany zong = new ConCompany(&quot;总公司&quot;);\n    zong.addCompany(huadong);\n    zong.addCompany(huabei);\n    zong.dump();\n}\n\n输出：\n=总公司\n=部门: 财务\n=部门: 人事\n====华东分公司\n====部门: 财务\n====部门: 人事\n========上海分公司\n========部门: 财务\n========部门: 人事\n========杭州分公司\n========部门: 财务\n========部门: 人事\n====华北分公司\n====部门: 财务\n====部门: 人事\n========北京分公司\n========部门: 财务\n========部门: 人事\n========天津分公司\n========部门: 财务\n========部门: 人事\n</code></pre>"},{"title":"Javascript-面向对象","date":"2018-05-05T11:30:58.000Z","comments":1,"_content":"\njavascript是一门面向对象的脚本语言，但又于传统的面向对象语言不同，它没有类的概念  然而，在js中，对象被声明为一种无序属性的集合，属性值可以是普通数据，子对象，和方法对象，于是通过一些技术手段，能够在js中实现面向对象的编程特性\n<!--more-->\n\n## 1 对象\n在ECMAScript里，对象的概念在我理解来说，可以类似于传统面向对象编程语言的“类”，而实例化出的多个实体叫对象实例\n构建对象的方法很多，介绍几种常用的方法以及使用场景\n\n#### 1.1 原始方式\n通过原始对象Object直接构造,比较粗暴,实际上得到的是一个对象实例\n\n    var animal = new Object();\n    animal.type = \"dog\";\n    animal.name = \"wangcai\";\n    animal.display = function() {\n        alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    animal.display();\n    //I am a dog，my name is wangcai\n\n#### 1.2 字面量对象\n同上，实际上得到的是一个对象实例，可用于简单的临时对象使用或放回值等\n\n    var animal = {\n        type: \"dog\",\n        name: \"wangcai\",\n        display: function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        }\n    };\n\n    animal.display();\n    //I am a dog，my name is wangcai\n\n#### 1.3 工厂方法\n简单工厂，封装对象构造过程\n\n    function getAnimal(type,name) {\n        var animal = new Object()\n        animal.type = \"dog\";\n        animal.name = \"wangcai\";\n        animal.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n        return animal;\n    }\n\n    var dog = getAnimal(\"dog\",\"wangcai\");\n    dog.display();\n    //I am a dog，my name is wangcai\n\n#### 1.4 构造函数方法\n在js中由于函数本身其实是对象，对象是属性集合，故可以使用函数作为“构造函数”来模拟对象创建\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n        this.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n    }\n\n    var dog = new Animal('dog','wangcai');\n    dog.display();\n    //I am a dog，my name is wangcai\n\n这种方式特别简单，使用起来也比较像传统的面向对象类的用法，但缺点就是每个对象实例都会创建各自的方法对象，比较消耗内存，这是和类不一样的，我们知道类的函数是保存在堆上的，又实例共享\n\n#### 1.5 原型方法\n为了解决构造函数的内存问题，引入原型方式\n在js中，每创建一个函数，会自动创建一个prototype属性指针，指向同时引入的函数的原型对象，这个原型对象保存在堆中，存储公共的属性和方法\n当使用这个函数创建实例的时候会复制对象的prototype属性，所以每个对象实例都指向同一个原型对象\n\n    function Animal() {}\n\n    Animal.prototype.type = 'dog';\n    Animal.prototype.eysNum = 2;\n    Animal.prototype.name = 'wangcai';\n    Animal.prototype.display = function() {\n        alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    var animal1 = new Animal();\n    var animal2 = new Animal();\n    animal1.display();\n    animal2.display();\n    //I am a dog，my name is wangcai\n    //I am a dog，my name is wangcai\n\n可以看到对象属性被实例共用，可以使用方法判断是否是某实例的原型或得到实例原型\n\n    Animal1.prototype.isPrototypeOf(animal1); // true\n    Object.getPrototypeOf(Animal1); // Animal1.prototype\n\njs使用原型链搜索需要的属性或者方法，搜索顺序：**实例 --> 原型对象**\n在实例中添加或重写原型的属性，可覆盖原型的同名变量，同上\n\n    animal1.color = 'black';\n    animal1.name = 'wangwang';\n    console.log(animal1.color);  // black\n    console.log(animal1.name);   // wangwang\n    delete animal1.name;\n    console.log(animal1.name);   // wangcai\n\n    var animal3 = new Animal();\n    console.log(animal3.color);  // undefined\n    console.log(animal3.name);   // wangcai\n\n- key in object和for-in可以判断和遍历对象实例的属性，不论属性在存在于实例还是原型中\n- obj.hasOwnProperty(key)可检测属性是否在对象实例中\n- obj.propertyIsEnumerable()判断属性是否可提高for-in遍历\n- Object.keys()或者可遍历属性名\n\n原型方式的缺点很明显，既然属性是实例共享的，当某一实例改变了属性值会立刻体现到所有实例上，尤其是对引用型变量的改变，这往往是不被希望的\n\n#### 1.6 构造函数-原型混合\n结合上面两个方式的优点，使用构造函数保存多变属性，使用原型保存共享属性/方法，混合方式也是使用最多的\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n        this.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n    }\n    Animal.prototype = {\n        constructor: Animal,\n        eyeNum: 2,\n        dump: function() {\n            console.log('I am '+ this.name + ', i have ' + this.eysNum + 'eyes.');\n        }\n    };\n\n    var dog = new Animal('dog','wangcai');\n    dog.display();\n    dog.dump();\n    // I am a dog，my name is wangcai\n    // I am wangcai , i have 2 eyes.\n\n    var cat = new Animal('cat','jiafei');\n    cat.display();\n    cat.dump();\n    // I am a cat，my name is jiafei\n    // I am jiafei , i have 2 eyes.\n\n\n#### 1.7 工厂-构造函数混合\n使用工厂方式，和装饰器模式来构造\n\n    function Animal(type,name) {\n        var animal = new Object()\n        animal.type = \"dog\";\n        animal.name = \"wangcai\";\n        animal.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n        return animal;\n    }\n\n    var dog = new Animal('dog','wangcai');\n\n\n### 2 继承\n在js中没有真正意义上的继承，主要依靠原型链的替换来实现“继承”的特性，再加上对象组合增强等设计方法，来优化实现\n\n##### 2.1 原型链替换\n这种方式其实很简单，想想之前说的原型链，对象和对象实例都通过prototype指针指向堆上的原型对象，所以通过指针实现原型链搜索来访问原型的属性\n***如果把prototype指针替换成“父对象”的实例，这个子对象实例便可以通过自身的prototype访问“父对象实例”的属性，同时通过“父对象实例”的prototype访问“父对象”的原型属性，间接实现继承***\n可以通过不断替换prototype属性多级继承\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    function Dog(color) {\n        this.color = color;\n        this.legNum = 4;\n    }\n    Dog.prototype = new Animal('dog','wangcai');\n\n    var dog = new Dog('black');\n    dog.display();\n    // I am a dog，my name is wangcai\n\n可以重写父对象的属性或添加新的属性，但记住要在prototype替换以后\n\n    Dog.prototype.display = function() {\n        console.log('HAHAHA');\n    }\n    Dog.prototype.dump = function() {\n        console.log('my name is'+this.name+',my color is '+this.color);\n    }\n\n    var dog = new Dog('black');\n    dog.display();\n    // I am a dog，my name is wangcai\n    dog.dump();\n    // my name is wangcai,my color is black\n\n当然父对象的方法也可使用子对的属性，比如\n\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my color is \" + this.color);\n    };\n\n在调用时会根据原型链来查找属性变量，先子对象 --> 父对象 --> ...,当然这不是好的设计方式，在此只是为了说明而已\n与原型方式的对象方式一样，有着原型属性共享的问题，当其他继承者修改了“父对象”的属性时，将会反映在所有子类，即使设计时不是这样的\n\n##### 2.2 仿冒子对象\n利用函数的call()或apply()方法，在子对象的构造函数中直接调用执行“父对象”函数，并传入子对象的指针，间接使子对象继承了父对象的属性，且实例之间相互独立，类似于“组合模式”\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n        this.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n    }\n\n    function Dog(type,name,color) {\n        Animal.call(this,type,name);\n        this.color = color;\n        this.legNum = 4;\n    }\n    Dog.prototype.dump = function() {\n    \talert(\"I am \" + this.name + \",color is \" + this.color);\n    }\n\n    var dog = new Dog('dog','wangcai','black');\n    dog.display();\n    // I am a dog，my name is wangcai\n    dog.dump();\n    // I am wangcai,color is black\n\n这种继承方式实际上是在子对像中实例化父对象的属性，上例就相当于直接在子对象添加父对象的属性，只不过是通过调用函数来实例化而已，与下面类似：\n\n    function Dog(type,name,color) {\n        //Animal\n        this.type = type;\n        this.name = name;\n        this.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n        //Animal\n\n        this.color = color;\n        this.legNum = 4;\n    }\n    Dog.prototype.dump = function() {\n    \talert(\"I am \" + this.name + \",color is \" + this.color);\n    }\n\n可以看到，这种方式实际上是在子对像内部实例化“父类”的一个副本，增加内存负担，没有什么共享可言\n\n##### 2.3 原型链-仿冒混合\n和对象构建类似，也可以通过混合使用原型链和仿冒对象来获取各自的优点\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    function Dog(type,name,color) {\n        Animal.call(this,type,name);\n        this.color = color;\n        this.legNum = 4;\n    }\n    Dog.prototype = new Animal();\n    Dog.prototype.dump = function() {\n    \talert(\"I am \" + this.name + \",color is \" + this.color);\n    }\n\n    var dog = new Dog('dog','KA','black');\n    dog.display();\n    //I am a dog,my name is KA\n    dog.dump();\n    //I am KA,color is black\n\n##### 2.4 原型式\n这个其实就是将原型链的实现进行“工厂化”，传入父对象，隐藏继承的实现\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    function SubAnimal(super_o,color) {\n        function sub(color) {\n         this.color = color;\n\t};\n        sub.prototype = super_o;\n        sub.prototype.dump = function() {\n            alert(this.name + '@' + this.color);\n        };\n        return new sub(color);\n    }\n\n    var dog = SubAnimal(new Animal('dog','wangwang'),'BLUE');\n    dog.display();\n    // I am a dog，my name is wangwang\n    dog.dump();\n    // wangwang@BLUE\n\nECMAScript5引入了Object.create()方法进行原型式继承，如下\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    var dog = Object.create(new Animal('dog','wangwan22g'));\n    dog.display();\n\n上例中传入父对象来构建子对象dog,当只有着一个参数时其实没啥用，主要是第二个参数来为子对象添加属性，上面的例子还可以这样写：\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    var dog = Object.create(new Animal('dog','wangwang'),\n                        {\n                            color: {value: 'BLUE'},\n                            dump: {\n                                value: function() {\n                                   alert(this.name + '@' + this.color);\n                                }\n                            }\n                        });\n    dog.display();\n    dog.dump();\n    // I am a dog，my name is wangwang\n    // wangwang@BLUE\n\n##### 2.5 寄生式\n这种方式我的理解其实就是在原型式基础上进一步进行了工厂包装\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    function GetAnimal(super_o,color) {\n        var sub = Object.create(super_o);\n        sub.color = color;\n        sub.dump = function() {\n            alert(this.name + '@' + this.color);\n        };\n        return sub;\n    }\n\n    var dog = GetAnimal(new Animal('dog','wangwang'),'BLUE');\n    dog.display();\n    dog.dump();\n\n##### 2.6 寄生组合式\n寄生组合方式也是原型/寄生/构造函数等的组合应用，只是create子对象不是使用父对象实例，而是使用父对象的原型作为入参\n\n    function GetAnimal(super_o,color) {\n        var sub = Object.create(super_o.prototype);\n        sub.color = color;\n        sub.dump = function() {\n            alert(this.name + '@' + this.color);\n        };\n        return sub;\n    }","source":"_posts/2018-05-05-ECMAScript-mianxiangduixiang.md","raw":"---\ntitle: Javascript-面向对象\ndate: 2018-05-05 19:30:58\ntags: js\ncategories: 前端\ncomments: true\n---\n\njavascript是一门面向对象的脚本语言，但又于传统的面向对象语言不同，它没有类的概念  然而，在js中，对象被声明为一种无序属性的集合，属性值可以是普通数据，子对象，和方法对象，于是通过一些技术手段，能够在js中实现面向对象的编程特性\n<!--more-->\n\n## 1 对象\n在ECMAScript里，对象的概念在我理解来说，可以类似于传统面向对象编程语言的“类”，而实例化出的多个实体叫对象实例\n构建对象的方法很多，介绍几种常用的方法以及使用场景\n\n#### 1.1 原始方式\n通过原始对象Object直接构造,比较粗暴,实际上得到的是一个对象实例\n\n    var animal = new Object();\n    animal.type = \"dog\";\n    animal.name = \"wangcai\";\n    animal.display = function() {\n        alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    animal.display();\n    //I am a dog，my name is wangcai\n\n#### 1.2 字面量对象\n同上，实际上得到的是一个对象实例，可用于简单的临时对象使用或放回值等\n\n    var animal = {\n        type: \"dog\",\n        name: \"wangcai\",\n        display: function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        }\n    };\n\n    animal.display();\n    //I am a dog，my name is wangcai\n\n#### 1.3 工厂方法\n简单工厂，封装对象构造过程\n\n    function getAnimal(type,name) {\n        var animal = new Object()\n        animal.type = \"dog\";\n        animal.name = \"wangcai\";\n        animal.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n        return animal;\n    }\n\n    var dog = getAnimal(\"dog\",\"wangcai\");\n    dog.display();\n    //I am a dog，my name is wangcai\n\n#### 1.4 构造函数方法\n在js中由于函数本身其实是对象，对象是属性集合，故可以使用函数作为“构造函数”来模拟对象创建\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n        this.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n    }\n\n    var dog = new Animal('dog','wangcai');\n    dog.display();\n    //I am a dog，my name is wangcai\n\n这种方式特别简单，使用起来也比较像传统的面向对象类的用法，但缺点就是每个对象实例都会创建各自的方法对象，比较消耗内存，这是和类不一样的，我们知道类的函数是保存在堆上的，又实例共享\n\n#### 1.5 原型方法\n为了解决构造函数的内存问题，引入原型方式\n在js中，每创建一个函数，会自动创建一个prototype属性指针，指向同时引入的函数的原型对象，这个原型对象保存在堆中，存储公共的属性和方法\n当使用这个函数创建实例的时候会复制对象的prototype属性，所以每个对象实例都指向同一个原型对象\n\n    function Animal() {}\n\n    Animal.prototype.type = 'dog';\n    Animal.prototype.eysNum = 2;\n    Animal.prototype.name = 'wangcai';\n    Animal.prototype.display = function() {\n        alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    var animal1 = new Animal();\n    var animal2 = new Animal();\n    animal1.display();\n    animal2.display();\n    //I am a dog，my name is wangcai\n    //I am a dog，my name is wangcai\n\n可以看到对象属性被实例共用，可以使用方法判断是否是某实例的原型或得到实例原型\n\n    Animal1.prototype.isPrototypeOf(animal1); // true\n    Object.getPrototypeOf(Animal1); // Animal1.prototype\n\njs使用原型链搜索需要的属性或者方法，搜索顺序：**实例 --> 原型对象**\n在实例中添加或重写原型的属性，可覆盖原型的同名变量，同上\n\n    animal1.color = 'black';\n    animal1.name = 'wangwang';\n    console.log(animal1.color);  // black\n    console.log(animal1.name);   // wangwang\n    delete animal1.name;\n    console.log(animal1.name);   // wangcai\n\n    var animal3 = new Animal();\n    console.log(animal3.color);  // undefined\n    console.log(animal3.name);   // wangcai\n\n- key in object和for-in可以判断和遍历对象实例的属性，不论属性在存在于实例还是原型中\n- obj.hasOwnProperty(key)可检测属性是否在对象实例中\n- obj.propertyIsEnumerable()判断属性是否可提高for-in遍历\n- Object.keys()或者可遍历属性名\n\n原型方式的缺点很明显，既然属性是实例共享的，当某一实例改变了属性值会立刻体现到所有实例上，尤其是对引用型变量的改变，这往往是不被希望的\n\n#### 1.6 构造函数-原型混合\n结合上面两个方式的优点，使用构造函数保存多变属性，使用原型保存共享属性/方法，混合方式也是使用最多的\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n        this.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n    }\n    Animal.prototype = {\n        constructor: Animal,\n        eyeNum: 2,\n        dump: function() {\n            console.log('I am '+ this.name + ', i have ' + this.eysNum + 'eyes.');\n        }\n    };\n\n    var dog = new Animal('dog','wangcai');\n    dog.display();\n    dog.dump();\n    // I am a dog，my name is wangcai\n    // I am wangcai , i have 2 eyes.\n\n    var cat = new Animal('cat','jiafei');\n    cat.display();\n    cat.dump();\n    // I am a cat，my name is jiafei\n    // I am jiafei , i have 2 eyes.\n\n\n#### 1.7 工厂-构造函数混合\n使用工厂方式，和装饰器模式来构造\n\n    function Animal(type,name) {\n        var animal = new Object()\n        animal.type = \"dog\";\n        animal.name = \"wangcai\";\n        animal.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n        return animal;\n    }\n\n    var dog = new Animal('dog','wangcai');\n\n\n### 2 继承\n在js中没有真正意义上的继承，主要依靠原型链的替换来实现“继承”的特性，再加上对象组合增强等设计方法，来优化实现\n\n##### 2.1 原型链替换\n这种方式其实很简单，想想之前说的原型链，对象和对象实例都通过prototype指针指向堆上的原型对象，所以通过指针实现原型链搜索来访问原型的属性\n***如果把prototype指针替换成“父对象”的实例，这个子对象实例便可以通过自身的prototype访问“父对象实例”的属性，同时通过“父对象实例”的prototype访问“父对象”的原型属性，间接实现继承***\n可以通过不断替换prototype属性多级继承\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    function Dog(color) {\n        this.color = color;\n        this.legNum = 4;\n    }\n    Dog.prototype = new Animal('dog','wangcai');\n\n    var dog = new Dog('black');\n    dog.display();\n    // I am a dog，my name is wangcai\n\n可以重写父对象的属性或添加新的属性，但记住要在prototype替换以后\n\n    Dog.prototype.display = function() {\n        console.log('HAHAHA');\n    }\n    Dog.prototype.dump = function() {\n        console.log('my name is'+this.name+',my color is '+this.color);\n    }\n\n    var dog = new Dog('black');\n    dog.display();\n    // I am a dog，my name is wangcai\n    dog.dump();\n    // my name is wangcai,my color is black\n\n当然父对象的方法也可使用子对的属性，比如\n\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my color is \" + this.color);\n    };\n\n在调用时会根据原型链来查找属性变量，先子对象 --> 父对象 --> ...,当然这不是好的设计方式，在此只是为了说明而已\n与原型方式的对象方式一样，有着原型属性共享的问题，当其他继承者修改了“父对象”的属性时，将会反映在所有子类，即使设计时不是这样的\n\n##### 2.2 仿冒子对象\n利用函数的call()或apply()方法，在子对象的构造函数中直接调用执行“父对象”函数，并传入子对象的指针，间接使子对象继承了父对象的属性，且实例之间相互独立，类似于“组合模式”\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n        this.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n    }\n\n    function Dog(type,name,color) {\n        Animal.call(this,type,name);\n        this.color = color;\n        this.legNum = 4;\n    }\n    Dog.prototype.dump = function() {\n    \talert(\"I am \" + this.name + \",color is \" + this.color);\n    }\n\n    var dog = new Dog('dog','wangcai','black');\n    dog.display();\n    // I am a dog，my name is wangcai\n    dog.dump();\n    // I am wangcai,color is black\n\n这种继承方式实际上是在子对像中实例化父对象的属性，上例就相当于直接在子对象添加父对象的属性，只不过是通过调用函数来实例化而已，与下面类似：\n\n    function Dog(type,name,color) {\n        //Animal\n        this.type = type;\n        this.name = name;\n        this.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n        };\n        //Animal\n\n        this.color = color;\n        this.legNum = 4;\n    }\n    Dog.prototype.dump = function() {\n    \talert(\"I am \" + this.name + \",color is \" + this.color);\n    }\n\n可以看到，这种方式实际上是在子对像内部实例化“父类”的一个副本，增加内存负担，没有什么共享可言\n\n##### 2.3 原型链-仿冒混合\n和对象构建类似，也可以通过混合使用原型链和仿冒对象来获取各自的优点\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    function Dog(type,name,color) {\n        Animal.call(this,type,name);\n        this.color = color;\n        this.legNum = 4;\n    }\n    Dog.prototype = new Animal();\n    Dog.prototype.dump = function() {\n    \talert(\"I am \" + this.name + \",color is \" + this.color);\n    }\n\n    var dog = new Dog('dog','KA','black');\n    dog.display();\n    //I am a dog,my name is KA\n    dog.dump();\n    //I am KA,color is black\n\n##### 2.4 原型式\n这个其实就是将原型链的实现进行“工厂化”，传入父对象，隐藏继承的实现\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    function SubAnimal(super_o,color) {\n        function sub(color) {\n         this.color = color;\n\t};\n        sub.prototype = super_o;\n        sub.prototype.dump = function() {\n            alert(this.name + '@' + this.color);\n        };\n        return new sub(color);\n    }\n\n    var dog = SubAnimal(new Animal('dog','wangwang'),'BLUE');\n    dog.display();\n    // I am a dog，my name is wangwang\n    dog.dump();\n    // wangwang@BLUE\n\nECMAScript5引入了Object.create()方法进行原型式继承，如下\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    var dog = Object.create(new Animal('dog','wangwan22g'));\n    dog.display();\n\n上例中传入父对象来构建子对象dog,当只有着一个参数时其实没啥用，主要是第二个参数来为子对象添加属性，上面的例子还可以这样写：\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    var dog = Object.create(new Animal('dog','wangwang'),\n                        {\n                            color: {value: 'BLUE'},\n                            dump: {\n                                value: function() {\n                                   alert(this.name + '@' + this.color);\n                                }\n                            }\n                        });\n    dog.display();\n    dog.dump();\n    // I am a dog，my name is wangwang\n    // wangwang@BLUE\n\n##### 2.5 寄生式\n这种方式我的理解其实就是在原型式基础上进一步进行了工厂包装\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    function GetAnimal(super_o,color) {\n        var sub = Object.create(super_o);\n        sub.color = color;\n        sub.dump = function() {\n            alert(this.name + '@' + this.color);\n        };\n        return sub;\n    }\n\n    var dog = GetAnimal(new Animal('dog','wangwang'),'BLUE');\n    dog.display();\n    dog.dump();\n\n##### 2.6 寄生组合式\n寄生组合方式也是原型/寄生/构造函数等的组合应用，只是create子对象不是使用父对象实例，而是使用父对象的原型作为入参\n\n    function GetAnimal(super_o,color) {\n        var sub = Object.create(super_o.prototype);\n        sub.color = color;\n        sub.dump = function() {\n            alert(this.name + '@' + this.color);\n        };\n        return sub;\n    }","slug":"ECMAScript-mianxiangduixiang","published":1,"updated":"2018-05-05T11:32:59.349Z","layout":"post","photos":[],"link":"","_id":"cjqwe42c1005eor0b3zn287el","content":"<p>javascript是一门面向对象的脚本语言，但又于传统的面向对象语言不同，它没有类的概念  然而，在js中，对象被声明为一种无序属性的集合，属性值可以是普通数据，子对象，和方法对象，于是通过一些技术手段，能够在js中实现面向对象的编程特性<br><a id=\"more\"></a></p>\n<h2 id=\"1-对象\"><a href=\"#1-对象\" class=\"headerlink\" title=\"1 对象\"></a>1 对象</h2><p>在ECMAScript里，对象的概念在我理解来说，可以类似于传统面向对象编程语言的“类”，而实例化出的多个实体叫对象实例<br>构建对象的方法很多，介绍几种常用的方法以及使用场景</p>\n<h4 id=\"1-1-原始方式\"><a href=\"#1-1-原始方式\" class=\"headerlink\" title=\"1.1 原始方式\"></a>1.1 原始方式</h4><p>通过原始对象Object直接构造,比较粗暴,实际上得到的是一个对象实例</p>\n<pre><code>var animal = new Object();\nanimal.type = &quot;dog&quot;;\nanimal.name = &quot;wangcai&quot;;\nanimal.display = function() {\n    alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nanimal.display();\n//I am a dog，my name is wangcai\n</code></pre><h4 id=\"1-2-字面量对象\"><a href=\"#1-2-字面量对象\" class=\"headerlink\" title=\"1.2 字面量对象\"></a>1.2 字面量对象</h4><p>同上，实际上得到的是一个对象实例，可用于简单的临时对象使用或放回值等</p>\n<pre><code>var animal = {\n    type: &quot;dog&quot;,\n    name: &quot;wangcai&quot;,\n    display: function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    }\n};\n\nanimal.display();\n//I am a dog，my name is wangcai\n</code></pre><h4 id=\"1-3-工厂方法\"><a href=\"#1-3-工厂方法\" class=\"headerlink\" title=\"1.3 工厂方法\"></a>1.3 工厂方法</h4><p>简单工厂，封装对象构造过程</p>\n<pre><code>function getAnimal(type,name) {\n    var animal = new Object()\n    animal.type = &quot;dog&quot;;\n    animal.name = &quot;wangcai&quot;;\n    animal.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n    return animal;\n}\n\nvar dog = getAnimal(&quot;dog&quot;,&quot;wangcai&quot;);\ndog.display();\n//I am a dog，my name is wangcai\n</code></pre><h4 id=\"1-4-构造函数方法\"><a href=\"#1-4-构造函数方法\" class=\"headerlink\" title=\"1.4 构造函数方法\"></a>1.4 构造函数方法</h4><p>在js中由于函数本身其实是对象，对象是属性集合，故可以使用函数作为“构造函数”来模拟对象创建</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n    this.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n}\n\nvar dog = new Animal(&apos;dog&apos;,&apos;wangcai&apos;);\ndog.display();\n//I am a dog，my name is wangcai\n</code></pre><p>这种方式特别简单，使用起来也比较像传统的面向对象类的用法，但缺点就是每个对象实例都会创建各自的方法对象，比较消耗内存，这是和类不一样的，我们知道类的函数是保存在堆上的，又实例共享</p>\n<h4 id=\"1-5-原型方法\"><a href=\"#1-5-原型方法\" class=\"headerlink\" title=\"1.5 原型方法\"></a>1.5 原型方法</h4><p>为了解决构造函数的内存问题，引入原型方式<br>在js中，每创建一个函数，会自动创建一个prototype属性指针，指向同时引入的函数的原型对象，这个原型对象保存在堆中，存储公共的属性和方法<br>当使用这个函数创建实例的时候会复制对象的prototype属性，所以每个对象实例都指向同一个原型对象</p>\n<pre><code>function Animal() {}\n\nAnimal.prototype.type = &apos;dog&apos;;\nAnimal.prototype.eysNum = 2;\nAnimal.prototype.name = &apos;wangcai&apos;;\nAnimal.prototype.display = function() {\n    alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nvar animal1 = new Animal();\nvar animal2 = new Animal();\nanimal1.display();\nanimal2.display();\n//I am a dog，my name is wangcai\n//I am a dog，my name is wangcai\n</code></pre><p>可以看到对象属性被实例共用，可以使用方法判断是否是某实例的原型或得到实例原型</p>\n<pre><code>Animal1.prototype.isPrototypeOf(animal1); // true\nObject.getPrototypeOf(Animal1); // Animal1.prototype\n</code></pre><p>js使用原型链搜索需要的属性或者方法，搜索顺序：<strong>实例 –&gt; 原型对象</strong><br>在实例中添加或重写原型的属性，可覆盖原型的同名变量，同上</p>\n<pre><code>animal1.color = &apos;black&apos;;\nanimal1.name = &apos;wangwang&apos;;\nconsole.log(animal1.color);  // black\nconsole.log(animal1.name);   // wangwang\ndelete animal1.name;\nconsole.log(animal1.name);   // wangcai\n\nvar animal3 = new Animal();\nconsole.log(animal3.color);  // undefined\nconsole.log(animal3.name);   // wangcai\n</code></pre><ul>\n<li>key in object和for-in可以判断和遍历对象实例的属性，不论属性在存在于实例还是原型中</li>\n<li>obj.hasOwnProperty(key)可检测属性是否在对象实例中</li>\n<li>obj.propertyIsEnumerable()判断属性是否可提高for-in遍历</li>\n<li>Object.keys()或者可遍历属性名</li>\n</ul>\n<p>原型方式的缺点很明显，既然属性是实例共享的，当某一实例改变了属性值会立刻体现到所有实例上，尤其是对引用型变量的改变，这往往是不被希望的</p>\n<h4 id=\"1-6-构造函数-原型混合\"><a href=\"#1-6-构造函数-原型混合\" class=\"headerlink\" title=\"1.6 构造函数-原型混合\"></a>1.6 构造函数-原型混合</h4><p>结合上面两个方式的优点，使用构造函数保存多变属性，使用原型保存共享属性/方法，混合方式也是使用最多的</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n    this.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n}\nAnimal.prototype = {\n    constructor: Animal,\n    eyeNum: 2,\n    dump: function() {\n        console.log(&apos;I am &apos;+ this.name + &apos;, i have &apos; + this.eysNum + &apos;eyes.&apos;);\n    }\n};\n\nvar dog = new Animal(&apos;dog&apos;,&apos;wangcai&apos;);\ndog.display();\ndog.dump();\n// I am a dog，my name is wangcai\n// I am wangcai , i have 2 eyes.\n\nvar cat = new Animal(&apos;cat&apos;,&apos;jiafei&apos;);\ncat.display();\ncat.dump();\n// I am a cat，my name is jiafei\n// I am jiafei , i have 2 eyes.\n</code></pre><h4 id=\"1-7-工厂-构造函数混合\"><a href=\"#1-7-工厂-构造函数混合\" class=\"headerlink\" title=\"1.7 工厂-构造函数混合\"></a>1.7 工厂-构造函数混合</h4><p>使用工厂方式，和装饰器模式来构造</p>\n<pre><code>function Animal(type,name) {\n    var animal = new Object()\n    animal.type = &quot;dog&quot;;\n    animal.name = &quot;wangcai&quot;;\n    animal.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n    return animal;\n}\n\nvar dog = new Animal(&apos;dog&apos;,&apos;wangcai&apos;);\n</code></pre><h3 id=\"2-继承\"><a href=\"#2-继承\" class=\"headerlink\" title=\"2 继承\"></a>2 继承</h3><p>在js中没有真正意义上的继承，主要依靠原型链的替换来实现“继承”的特性，再加上对象组合增强等设计方法，来优化实现</p>\n<h5 id=\"2-1-原型链替换\"><a href=\"#2-1-原型链替换\" class=\"headerlink\" title=\"2.1 原型链替换\"></a>2.1 原型链替换</h5><p>这种方式其实很简单，想想之前说的原型链，对象和对象实例都通过prototype指针指向堆上的原型对象，所以通过指针实现原型链搜索来访问原型的属性<br><strong><em>如果把prototype指针替换成“父对象”的实例，这个子对象实例便可以通过自身的prototype访问“父对象实例”的属性，同时通过“父对象实例”的prototype访问“父对象”的原型属性，间接实现继承</em></strong><br>可以通过不断替换prototype属性多级继承</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nfunction Dog(color) {\n    this.color = color;\n    this.legNum = 4;\n}\nDog.prototype = new Animal(&apos;dog&apos;,&apos;wangcai&apos;);\n\nvar dog = new Dog(&apos;black&apos;);\ndog.display();\n// I am a dog，my name is wangcai\n</code></pre><p>可以重写父对象的属性或添加新的属性，但记住要在prototype替换以后</p>\n<pre><code>Dog.prototype.display = function() {\n    console.log(&apos;HAHAHA&apos;);\n}\nDog.prototype.dump = function() {\n    console.log(&apos;my name is&apos;+this.name+&apos;,my color is &apos;+this.color);\n}\n\nvar dog = new Dog(&apos;black&apos;);\ndog.display();\n// I am a dog，my name is wangcai\ndog.dump();\n// my name is wangcai,my color is black\n</code></pre><p>当然父对象的方法也可使用子对的属性，比如</p>\n<pre><code>Animal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my color is &quot; + this.color);\n};\n</code></pre><p>在调用时会根据原型链来查找属性变量，先子对象 –&gt; 父对象 –&gt; …,当然这不是好的设计方式，在此只是为了说明而已<br>与原型方式的对象方式一样，有着原型属性共享的问题，当其他继承者修改了“父对象”的属性时，将会反映在所有子类，即使设计时不是这样的</p>\n<h5 id=\"2-2-仿冒子对象\"><a href=\"#2-2-仿冒子对象\" class=\"headerlink\" title=\"2.2 仿冒子对象\"></a>2.2 仿冒子对象</h5><p>利用函数的call()或apply()方法，在子对象的构造函数中直接调用执行“父对象”函数，并传入子对象的指针，间接使子对象继承了父对象的属性，且实例之间相互独立，类似于“组合模式”</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n    this.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n}\n\nfunction Dog(type,name,color) {\n    Animal.call(this,type,name);\n    this.color = color;\n    this.legNum = 4;\n}\nDog.prototype.dump = function() {\n    alert(&quot;I am &quot; + this.name + &quot;,color is &quot; + this.color);\n}\n\nvar dog = new Dog(&apos;dog&apos;,&apos;wangcai&apos;,&apos;black&apos;);\ndog.display();\n// I am a dog，my name is wangcai\ndog.dump();\n// I am wangcai,color is black\n</code></pre><p>这种继承方式实际上是在子对像中实例化父对象的属性，上例就相当于直接在子对象添加父对象的属性，只不过是通过调用函数来实例化而已，与下面类似：</p>\n<pre><code>function Dog(type,name,color) {\n    //Animal\n    this.type = type;\n    this.name = name;\n    this.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n    //Animal\n\n    this.color = color;\n    this.legNum = 4;\n}\nDog.prototype.dump = function() {\n    alert(&quot;I am &quot; + this.name + &quot;,color is &quot; + this.color);\n}\n</code></pre><p>可以看到，这种方式实际上是在子对像内部实例化“父类”的一个副本，增加内存负担，没有什么共享可言</p>\n<h5 id=\"2-3-原型链-仿冒混合\"><a href=\"#2-3-原型链-仿冒混合\" class=\"headerlink\" title=\"2.3 原型链-仿冒混合\"></a>2.3 原型链-仿冒混合</h5><p>和对象构建类似，也可以通过混合使用原型链和仿冒对象来获取各自的优点</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nfunction Dog(type,name,color) {\n    Animal.call(this,type,name);\n    this.color = color;\n    this.legNum = 4;\n}\nDog.prototype = new Animal();\nDog.prototype.dump = function() {\n    alert(&quot;I am &quot; + this.name + &quot;,color is &quot; + this.color);\n}\n\nvar dog = new Dog(&apos;dog&apos;,&apos;KA&apos;,&apos;black&apos;);\ndog.display();\n//I am a dog,my name is KA\ndog.dump();\n//I am KA,color is black\n</code></pre><h5 id=\"2-4-原型式\"><a href=\"#2-4-原型式\" class=\"headerlink\" title=\"2.4 原型式\"></a>2.4 原型式</h5><p>这个其实就是将原型链的实现进行“工厂化”，传入父对象，隐藏继承的实现</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nfunction SubAnimal(super_o,color) {\n    function sub(color) {\n     this.color = color;\n};\n    sub.prototype = super_o;\n    sub.prototype.dump = function() {\n        alert(this.name + &apos;@&apos; + this.color);\n    };\n    return new sub(color);\n}\n\nvar dog = SubAnimal(new Animal(&apos;dog&apos;,&apos;wangwang&apos;),&apos;BLUE&apos;);\ndog.display();\n// I am a dog，my name is wangwang\ndog.dump();\n// wangwang@BLUE\n</code></pre><p>ECMAScript5引入了Object.create()方法进行原型式继承，如下</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nvar dog = Object.create(new Animal(&apos;dog&apos;,&apos;wangwan22g&apos;));\ndog.display();\n</code></pre><p>上例中传入父对象来构建子对象dog,当只有着一个参数时其实没啥用，主要是第二个参数来为子对象添加属性，上面的例子还可以这样写：</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nvar dog = Object.create(new Animal(&apos;dog&apos;,&apos;wangwang&apos;),\n                    {\n                        color: {value: &apos;BLUE&apos;},\n                        dump: {\n                            value: function() {\n                               alert(this.name + &apos;@&apos; + this.color);\n                            }\n                        }\n                    });\ndog.display();\ndog.dump();\n// I am a dog，my name is wangwang\n// wangwang@BLUE\n</code></pre><h5 id=\"2-5-寄生式\"><a href=\"#2-5-寄生式\" class=\"headerlink\" title=\"2.5 寄生式\"></a>2.5 寄生式</h5><p>这种方式我的理解其实就是在原型式基础上进一步进行了工厂包装</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nfunction GetAnimal(super_o,color) {\n    var sub = Object.create(super_o);\n    sub.color = color;\n    sub.dump = function() {\n        alert(this.name + &apos;@&apos; + this.color);\n    };\n    return sub;\n}\n\nvar dog = GetAnimal(new Animal(&apos;dog&apos;,&apos;wangwang&apos;),&apos;BLUE&apos;);\ndog.display();\ndog.dump();\n</code></pre><h5 id=\"2-6-寄生组合式\"><a href=\"#2-6-寄生组合式\" class=\"headerlink\" title=\"2.6 寄生组合式\"></a>2.6 寄生组合式</h5><p>寄生组合方式也是原型/寄生/构造函数等的组合应用，只是create子对象不是使用父对象实例，而是使用父对象的原型作为入参</p>\n<pre><code>function GetAnimal(super_o,color) {\n    var sub = Object.create(super_o.prototype);\n    sub.color = color;\n    sub.dump = function() {\n        alert(this.name + &apos;@&apos; + this.color);\n    };\n    return sub;\n}\n</code></pre>","site":{"data":{}},"excerpt":"<p>javascript是一门面向对象的脚本语言，但又于传统的面向对象语言不同，它没有类的概念  然而，在js中，对象被声明为一种无序属性的集合，属性值可以是普通数据，子对象，和方法对象，于是通过一些技术手段，能够在js中实现面向对象的编程特性<br>","more":"</p>\n<h2 id=\"1-对象\"><a href=\"#1-对象\" class=\"headerlink\" title=\"1 对象\"></a>1 对象</h2><p>在ECMAScript里，对象的概念在我理解来说，可以类似于传统面向对象编程语言的“类”，而实例化出的多个实体叫对象实例<br>构建对象的方法很多，介绍几种常用的方法以及使用场景</p>\n<h4 id=\"1-1-原始方式\"><a href=\"#1-1-原始方式\" class=\"headerlink\" title=\"1.1 原始方式\"></a>1.1 原始方式</h4><p>通过原始对象Object直接构造,比较粗暴,实际上得到的是一个对象实例</p>\n<pre><code>var animal = new Object();\nanimal.type = &quot;dog&quot;;\nanimal.name = &quot;wangcai&quot;;\nanimal.display = function() {\n    alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nanimal.display();\n//I am a dog，my name is wangcai\n</code></pre><h4 id=\"1-2-字面量对象\"><a href=\"#1-2-字面量对象\" class=\"headerlink\" title=\"1.2 字面量对象\"></a>1.2 字面量对象</h4><p>同上，实际上得到的是一个对象实例，可用于简单的临时对象使用或放回值等</p>\n<pre><code>var animal = {\n    type: &quot;dog&quot;,\n    name: &quot;wangcai&quot;,\n    display: function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    }\n};\n\nanimal.display();\n//I am a dog，my name is wangcai\n</code></pre><h4 id=\"1-3-工厂方法\"><a href=\"#1-3-工厂方法\" class=\"headerlink\" title=\"1.3 工厂方法\"></a>1.3 工厂方法</h4><p>简单工厂，封装对象构造过程</p>\n<pre><code>function getAnimal(type,name) {\n    var animal = new Object()\n    animal.type = &quot;dog&quot;;\n    animal.name = &quot;wangcai&quot;;\n    animal.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n    return animal;\n}\n\nvar dog = getAnimal(&quot;dog&quot;,&quot;wangcai&quot;);\ndog.display();\n//I am a dog，my name is wangcai\n</code></pre><h4 id=\"1-4-构造函数方法\"><a href=\"#1-4-构造函数方法\" class=\"headerlink\" title=\"1.4 构造函数方法\"></a>1.4 构造函数方法</h4><p>在js中由于函数本身其实是对象，对象是属性集合，故可以使用函数作为“构造函数”来模拟对象创建</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n    this.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n}\n\nvar dog = new Animal(&apos;dog&apos;,&apos;wangcai&apos;);\ndog.display();\n//I am a dog，my name is wangcai\n</code></pre><p>这种方式特别简单，使用起来也比较像传统的面向对象类的用法，但缺点就是每个对象实例都会创建各自的方法对象，比较消耗内存，这是和类不一样的，我们知道类的函数是保存在堆上的，又实例共享</p>\n<h4 id=\"1-5-原型方法\"><a href=\"#1-5-原型方法\" class=\"headerlink\" title=\"1.5 原型方法\"></a>1.5 原型方法</h4><p>为了解决构造函数的内存问题，引入原型方式<br>在js中，每创建一个函数，会自动创建一个prototype属性指针，指向同时引入的函数的原型对象，这个原型对象保存在堆中，存储公共的属性和方法<br>当使用这个函数创建实例的时候会复制对象的prototype属性，所以每个对象实例都指向同一个原型对象</p>\n<pre><code>function Animal() {}\n\nAnimal.prototype.type = &apos;dog&apos;;\nAnimal.prototype.eysNum = 2;\nAnimal.prototype.name = &apos;wangcai&apos;;\nAnimal.prototype.display = function() {\n    alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nvar animal1 = new Animal();\nvar animal2 = new Animal();\nanimal1.display();\nanimal2.display();\n//I am a dog，my name is wangcai\n//I am a dog，my name is wangcai\n</code></pre><p>可以看到对象属性被实例共用，可以使用方法判断是否是某实例的原型或得到实例原型</p>\n<pre><code>Animal1.prototype.isPrototypeOf(animal1); // true\nObject.getPrototypeOf(Animal1); // Animal1.prototype\n</code></pre><p>js使用原型链搜索需要的属性或者方法，搜索顺序：<strong>实例 –&gt; 原型对象</strong><br>在实例中添加或重写原型的属性，可覆盖原型的同名变量，同上</p>\n<pre><code>animal1.color = &apos;black&apos;;\nanimal1.name = &apos;wangwang&apos;;\nconsole.log(animal1.color);  // black\nconsole.log(animal1.name);   // wangwang\ndelete animal1.name;\nconsole.log(animal1.name);   // wangcai\n\nvar animal3 = new Animal();\nconsole.log(animal3.color);  // undefined\nconsole.log(animal3.name);   // wangcai\n</code></pre><ul>\n<li>key in object和for-in可以判断和遍历对象实例的属性，不论属性在存在于实例还是原型中</li>\n<li>obj.hasOwnProperty(key)可检测属性是否在对象实例中</li>\n<li>obj.propertyIsEnumerable()判断属性是否可提高for-in遍历</li>\n<li>Object.keys()或者可遍历属性名</li>\n</ul>\n<p>原型方式的缺点很明显，既然属性是实例共享的，当某一实例改变了属性值会立刻体现到所有实例上，尤其是对引用型变量的改变，这往往是不被希望的</p>\n<h4 id=\"1-6-构造函数-原型混合\"><a href=\"#1-6-构造函数-原型混合\" class=\"headerlink\" title=\"1.6 构造函数-原型混合\"></a>1.6 构造函数-原型混合</h4><p>结合上面两个方式的优点，使用构造函数保存多变属性，使用原型保存共享属性/方法，混合方式也是使用最多的</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n    this.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n}\nAnimal.prototype = {\n    constructor: Animal,\n    eyeNum: 2,\n    dump: function() {\n        console.log(&apos;I am &apos;+ this.name + &apos;, i have &apos; + this.eysNum + &apos;eyes.&apos;);\n    }\n};\n\nvar dog = new Animal(&apos;dog&apos;,&apos;wangcai&apos;);\ndog.display();\ndog.dump();\n// I am a dog，my name is wangcai\n// I am wangcai , i have 2 eyes.\n\nvar cat = new Animal(&apos;cat&apos;,&apos;jiafei&apos;);\ncat.display();\ncat.dump();\n// I am a cat，my name is jiafei\n// I am jiafei , i have 2 eyes.\n</code></pre><h4 id=\"1-7-工厂-构造函数混合\"><a href=\"#1-7-工厂-构造函数混合\" class=\"headerlink\" title=\"1.7 工厂-构造函数混合\"></a>1.7 工厂-构造函数混合</h4><p>使用工厂方式，和装饰器模式来构造</p>\n<pre><code>function Animal(type,name) {\n    var animal = new Object()\n    animal.type = &quot;dog&quot;;\n    animal.name = &quot;wangcai&quot;;\n    animal.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n    return animal;\n}\n\nvar dog = new Animal(&apos;dog&apos;,&apos;wangcai&apos;);\n</code></pre><h3 id=\"2-继承\"><a href=\"#2-继承\" class=\"headerlink\" title=\"2 继承\"></a>2 继承</h3><p>在js中没有真正意义上的继承，主要依靠原型链的替换来实现“继承”的特性，再加上对象组合增强等设计方法，来优化实现</p>\n<h5 id=\"2-1-原型链替换\"><a href=\"#2-1-原型链替换\" class=\"headerlink\" title=\"2.1 原型链替换\"></a>2.1 原型链替换</h5><p>这种方式其实很简单，想想之前说的原型链，对象和对象实例都通过prototype指针指向堆上的原型对象，所以通过指针实现原型链搜索来访问原型的属性<br><strong><em>如果把prototype指针替换成“父对象”的实例，这个子对象实例便可以通过自身的prototype访问“父对象实例”的属性，同时通过“父对象实例”的prototype访问“父对象”的原型属性，间接实现继承</em></strong><br>可以通过不断替换prototype属性多级继承</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nfunction Dog(color) {\n    this.color = color;\n    this.legNum = 4;\n}\nDog.prototype = new Animal(&apos;dog&apos;,&apos;wangcai&apos;);\n\nvar dog = new Dog(&apos;black&apos;);\ndog.display();\n// I am a dog，my name is wangcai\n</code></pre><p>可以重写父对象的属性或添加新的属性，但记住要在prototype替换以后</p>\n<pre><code>Dog.prototype.display = function() {\n    console.log(&apos;HAHAHA&apos;);\n}\nDog.prototype.dump = function() {\n    console.log(&apos;my name is&apos;+this.name+&apos;,my color is &apos;+this.color);\n}\n\nvar dog = new Dog(&apos;black&apos;);\ndog.display();\n// I am a dog，my name is wangcai\ndog.dump();\n// my name is wangcai,my color is black\n</code></pre><p>当然父对象的方法也可使用子对的属性，比如</p>\n<pre><code>Animal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my color is &quot; + this.color);\n};\n</code></pre><p>在调用时会根据原型链来查找属性变量，先子对象 –&gt; 父对象 –&gt; …,当然这不是好的设计方式，在此只是为了说明而已<br>与原型方式的对象方式一样，有着原型属性共享的问题，当其他继承者修改了“父对象”的属性时，将会反映在所有子类，即使设计时不是这样的</p>\n<h5 id=\"2-2-仿冒子对象\"><a href=\"#2-2-仿冒子对象\" class=\"headerlink\" title=\"2.2 仿冒子对象\"></a>2.2 仿冒子对象</h5><p>利用函数的call()或apply()方法，在子对象的构造函数中直接调用执行“父对象”函数，并传入子对象的指针，间接使子对象继承了父对象的属性，且实例之间相互独立，类似于“组合模式”</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n    this.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n}\n\nfunction Dog(type,name,color) {\n    Animal.call(this,type,name);\n    this.color = color;\n    this.legNum = 4;\n}\nDog.prototype.dump = function() {\n    alert(&quot;I am &quot; + this.name + &quot;,color is &quot; + this.color);\n}\n\nvar dog = new Dog(&apos;dog&apos;,&apos;wangcai&apos;,&apos;black&apos;);\ndog.display();\n// I am a dog，my name is wangcai\ndog.dump();\n// I am wangcai,color is black\n</code></pre><p>这种继承方式实际上是在子对像中实例化父对象的属性，上例就相当于直接在子对象添加父对象的属性，只不过是通过调用函数来实例化而已，与下面类似：</p>\n<pre><code>function Dog(type,name,color) {\n    //Animal\n    this.type = type;\n    this.name = name;\n    this.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n    };\n    //Animal\n\n    this.color = color;\n    this.legNum = 4;\n}\nDog.prototype.dump = function() {\n    alert(&quot;I am &quot; + this.name + &quot;,color is &quot; + this.color);\n}\n</code></pre><p>可以看到，这种方式实际上是在子对像内部实例化“父类”的一个副本，增加内存负担，没有什么共享可言</p>\n<h5 id=\"2-3-原型链-仿冒混合\"><a href=\"#2-3-原型链-仿冒混合\" class=\"headerlink\" title=\"2.3 原型链-仿冒混合\"></a>2.3 原型链-仿冒混合</h5><p>和对象构建类似，也可以通过混合使用原型链和仿冒对象来获取各自的优点</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nfunction Dog(type,name,color) {\n    Animal.call(this,type,name);\n    this.color = color;\n    this.legNum = 4;\n}\nDog.prototype = new Animal();\nDog.prototype.dump = function() {\n    alert(&quot;I am &quot; + this.name + &quot;,color is &quot; + this.color);\n}\n\nvar dog = new Dog(&apos;dog&apos;,&apos;KA&apos;,&apos;black&apos;);\ndog.display();\n//I am a dog,my name is KA\ndog.dump();\n//I am KA,color is black\n</code></pre><h5 id=\"2-4-原型式\"><a href=\"#2-4-原型式\" class=\"headerlink\" title=\"2.4 原型式\"></a>2.4 原型式</h5><p>这个其实就是将原型链的实现进行“工厂化”，传入父对象，隐藏继承的实现</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nfunction SubAnimal(super_o,color) {\n    function sub(color) {\n     this.color = color;\n};\n    sub.prototype = super_o;\n    sub.prototype.dump = function() {\n        alert(this.name + &apos;@&apos; + this.color);\n    };\n    return new sub(color);\n}\n\nvar dog = SubAnimal(new Animal(&apos;dog&apos;,&apos;wangwang&apos;),&apos;BLUE&apos;);\ndog.display();\n// I am a dog，my name is wangwang\ndog.dump();\n// wangwang@BLUE\n</code></pre><p>ECMAScript5引入了Object.create()方法进行原型式继承，如下</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nvar dog = Object.create(new Animal(&apos;dog&apos;,&apos;wangwan22g&apos;));\ndog.display();\n</code></pre><p>上例中传入父对象来构建子对象dog,当只有着一个参数时其实没啥用，主要是第二个参数来为子对象添加属性，上面的例子还可以这样写：</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nvar dog = Object.create(new Animal(&apos;dog&apos;,&apos;wangwang&apos;),\n                    {\n                        color: {value: &apos;BLUE&apos;},\n                        dump: {\n                            value: function() {\n                               alert(this.name + &apos;@&apos; + this.color);\n                            }\n                        }\n                    });\ndog.display();\ndog.dump();\n// I am a dog，my name is wangwang\n// wangwang@BLUE\n</code></pre><h5 id=\"2-5-寄生式\"><a href=\"#2-5-寄生式\" class=\"headerlink\" title=\"2.5 寄生式\"></a>2.5 寄生式</h5><p>这种方式我的理解其实就是在原型式基础上进一步进行了工厂包装</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nfunction GetAnimal(super_o,color) {\n    var sub = Object.create(super_o);\n    sub.color = color;\n    sub.dump = function() {\n        alert(this.name + &apos;@&apos; + this.color);\n    };\n    return sub;\n}\n\nvar dog = GetAnimal(new Animal(&apos;dog&apos;,&apos;wangwang&apos;),&apos;BLUE&apos;);\ndog.display();\ndog.dump();\n</code></pre><h5 id=\"2-6-寄生组合式\"><a href=\"#2-6-寄生组合式\" class=\"headerlink\" title=\"2.6 寄生组合式\"></a>2.6 寄生组合式</h5><p>寄生组合方式也是原型/寄生/构造函数等的组合应用，只是create子对象不是使用父对象实例，而是使用父对象的原型作为入参</p>\n<pre><code>function GetAnimal(super_o,color) {\n    var sub = Object.create(super_o.prototype);\n    sub.color = color;\n    sub.dump = function() {\n        alert(this.name + &apos;@&apos; + this.color);\n    };\n    return sub;\n}\n</code></pre>"},{"title":"javascipt-闭包/作用域和this","date":"2018-05-06T12:00:23.000Z","comments":1,"_content":"\n在javascript中，有一些特有且容易出错的特性，包括闭包，作用域，和this,这里将个人理解记录一波\n<!--more-->\n\n### 1 闭包\n当函数在执行时，会自动创建自身的执行环境，包括：作用域链和活动对象，然后执行时每遇到一个子函数就会形成新的执行环境，并推进执行环境栈里...，于是形成了执行环境链\n\n- 作用域链，函数所能访问的作用范围，包含执行环境所能访问的所有活动对象，从外层环境到当前环境，在访问变量时将从当前执行环境的活动对象开始往外搜索变量\n- 活动对象，保存当前执行环境的变量和方法\n\n创建闭包的常用方法是在一个函数创建子函数，子函数可访问外层函数的变量，形成闭包\n\n    function ageAdd(defalutAge) {\n        var age = defalutAge;\n        return function() {\n            if(age < 10) {\n                age += 5;\n                return age;\n            } else if(age < 20) {\n                age += 2;\n                return ++age;\n            } else {\n                return defalutAge++;\n            }\n        }\n    }\n    var funAdd = ageAdd(4)\n    funAdd();  // 9\n    funAdd();  // 14\n    funAdd();  // 16\n    funAdd();  // 18\n    funAdd();  // 20\n    funAdd();  // 4\n\n当外层函数执行完以后，其执行环境和作用域链将会销毁，但是由于它的活动对象被子函数引用，故不会被销毁直到子函数执行完毕，于是形成了闭包\n*常见的普通函数对全局变量的引用也算是一种特殊的闭包*\njs没有块作用域，只有全局作用域和函数级作用域，但是，利用闭包可模拟块作用域，如下：\n\n    (function() {\n        块作用域...\n    })()\n\n例子\n\n    var Age = (function() {\n            var age = 10;\n            return ++age;\n    })();\n\n    alert('age is : ' + Age);  // age is : 11\n    alert('age is : ' + age);  // 出错\n\n### 2 作用域\n在传统的面向对象里，对象属性有公开/受保护/私有之分，但是在js中没有这些限制，js是动态脚本语言，对象额所以属性都是公开的，换句话说，在对象定义以外，可以随意访问对象属性和方法\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    var dog = new Dog('black');\n    //直接访问\n    dog.display();\n    alert(dog.name);\n\n设计所致，没有办法，但是在设计中为了区分去私有还是共有属性，开发者之间形成了一个约定，对于私有属性的命名，两边加下划线或下划线开头，比如这样\n\n    function Animal(type,name) {\n        this._type_ = type;\n        this._name = name;\n    }\n\n写法不能改变属性的特征，只是起到提示效果\n\n> 当然可以使用闭包实对象的私有变量效果，但是没有实际意义\n\n### 3 this指针\n在javaScript中，在创建函数或对象(其实也是函数)时，会自动生成两个参数：arguments和this指针，由于this指针总是指向调用者，即函数执行时的“上下文”，所以this是动态的，需要具体分析\n##### 3.1 作为普通函数调用\n\n    function test() {\n      alert(this);\n    }\n    test(); // Window\n\n由于所有全局函数都属于window对象，所以上面的调用其实是:\n\n    window.test();\n    // 调用者是window\n\n同理如下\n\n    (function test() {\n      alert(this);\n    })();\n    // Window\n\n##### 3.2 作为对象方法调用\n当函数作为对象方法定义时，在对象实例化时会自动创建作用域并把this指针指向该对象\n\n    var animal = {\n        name: 'wangcai',\n        display: function() {\n            alert(this.name);\n        }\n    };\n    animal.display(); // wangcai\n\n即使先创建的对象，后添加给对象或原型的方法也一样会绑定this给对象，比如：\n\n    function test() {\n      alert(this.name);\n    }\n    var animal= {\n        name: 'wangcai'\n    };\n    animal.display = test;\n    animal.display(); // wangcai\n\n**对于构造函数方式创建的对象来说**，在实例化对象的时候在除了携带入参数组初始化内部属性以外，还将绑定this指针，即使后面再添加方法也一样\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.getName = function() {\n                alert(this.name);\n            }\n    }\n    var jenny = new Person('wangwang',24);\n    Person.prototype.getAge = function() {\n        alert(this.age);\n    };\n\n    jenny.getName(); // wangwang\n    jenny.getAge();  // 24\n\n**对于多重对象来说，**this将匹配直接包含本方法的对象，比如：\n\n    function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n            alert(this.name);\n        }\n        this.dog = {\n            name: '汪汪',\n            display: function() {\n                alert(this.name);\n            }\n        }\n\n    }\n    var ani = new Animal('wangcai',24);\n    ani.display();  // wangcai\n    ani.dog.display(); // 汪汪\n\n但是有对象的方法里再调用外部函数时又有所不同，\n\n    function FF() {\n            alert(this);\n    }\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.display = function() {\n                    alert(this.name);\n                    FF();\n\n            }\n    }\n    var ani = new Animal('wangcai',24);\n    ani.display();\n    // wangcai\n    // Window\n\n由于FF()是全局函数，执行的时候其实在使用的全局对象，即使是在对象方法调用的\n**同理，在对象方法定义并执行内部函数意一样，比如：**\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.display = function() {\n                alert(this.name);\n                (function() {\n                    alert(this);\n                })();\n\n            }\n    }\n    var ani = new Animal('wangcai',24);\n    ani.display();\n    // wangcai\n    // Window\n\n和调用全局函数一样，这里实际关联的是全局对象上下文，但是这个普遍认为是脚本设计问题，可以通过保存this规避\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.display = function() {\n                    alert(this.name);\n                    var that = this; //临时保存\n                    (function() {\n                            alert(that.name); //使用保存的this\n                     })()\n\n            }\n    }\n    var ani = new Animal('wangcai',24);\n    ani.display();\n    // wangcai\n    // wangcai\n\n**然而当把上面的对象方法赋值给全局变量来执行，又是完全不一样的结果：**\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.display = function() {\n                    alert(this);\n                    var that = this; //临时保存\n                    (function() {\n                            alert(that); //使用保存的this\n                     })()\n\n            }\n    }\n    var ani = new Animal('wangcai',24);\n    var dump = ani.display;\n    dump();\n    // Window\n    // Window\n\n这里其实就验证了一句话，this关联的调用者的上下文，虽然display方法是对象内部方法，但是方法是对象，对象名仅仅只是个指针，这里只是让全局变量指向函数代码而已，最终调用的是全局对象，实际上和下面没有任何区分\n\n    var dump = function() {\n                    alert(this);\n                    var that = this; //临时保存\n                    (function() {\n                        alert(that); //使用保存的this\n                    })()\n\n                };\n\n##### 3.3 对象/函数作为返回值的场景\n当把对象或者函数作为函数返回时，有一些有趣的事情\n\n    function Animal(name) {\n       this.name = name;\n       return {};\n    }\n    var ani = new Animal('汪汪');\n    alert(ani.name); // undefined\n\n    function Animal(name) {\n       this.name = name;\n       return function() {};\n    }\n    var ani = new Animal('汪汪');\n    alert(ani.name); // undefined\n\n    function Animal(name) {\n       this.name = name;\n       return 12;\n    }\n    var ani = new Animal('汪汪');\n    alert(ani.name); // 汪汪\n\n    function Animal(name) {\n       this.name = name;\n       return null; // 或undefined;\n    }\n    var ani = new Animal('汪汪');\n    alert(ani.name); // 汪汪\n\n可以看到，当函数返回空对象或空函数时，this指针发生了变化，指向了返回的对象/函数;但是当返回是变量，常量，甚至是null/undefined时，this无法进行指向切换，故还是指向的原来的对象，即new对象时创建的对象\n\n##### 3.4 call,apply改变this指向\n我们知道函数有两个特殊的方法：call(this,..),apply(this,[..]),函数恶意通过它们来执行\n这两个方法的第一个参数都是this,即方法内部变量的指向，可以通过她们来人为改变函数执行的this指向\n以全局函数为里例\n\n    function test() {\n      alert(this.name);\n    }\n    test(); // undefined\n\n使用call改变\n\n    var ani = {\n        name: 'wangwang',\n        age: 24,\n        display: function() {alert(this.name);}\n    }\n    test.call(ani);\n    // wangwang\n\n> 在严格版中的默认的this不再是window，而是undefined","source":"_posts/2018-05-06-javascipt-bibao-and-this.md","raw":"---\ntitle: javascipt-闭包/作用域和this\ndate: 2018-05-06 20:00:23\ntags: js\ncategories: 前端\ncomments: true\n---\n\n在javascript中，有一些特有且容易出错的特性，包括闭包，作用域，和this,这里将个人理解记录一波\n<!--more-->\n\n### 1 闭包\n当函数在执行时，会自动创建自身的执行环境，包括：作用域链和活动对象，然后执行时每遇到一个子函数就会形成新的执行环境，并推进执行环境栈里...，于是形成了执行环境链\n\n- 作用域链，函数所能访问的作用范围，包含执行环境所能访问的所有活动对象，从外层环境到当前环境，在访问变量时将从当前执行环境的活动对象开始往外搜索变量\n- 活动对象，保存当前执行环境的变量和方法\n\n创建闭包的常用方法是在一个函数创建子函数，子函数可访问外层函数的变量，形成闭包\n\n    function ageAdd(defalutAge) {\n        var age = defalutAge;\n        return function() {\n            if(age < 10) {\n                age += 5;\n                return age;\n            } else if(age < 20) {\n                age += 2;\n                return ++age;\n            } else {\n                return defalutAge++;\n            }\n        }\n    }\n    var funAdd = ageAdd(4)\n    funAdd();  // 9\n    funAdd();  // 14\n    funAdd();  // 16\n    funAdd();  // 18\n    funAdd();  // 20\n    funAdd();  // 4\n\n当外层函数执行完以后，其执行环境和作用域链将会销毁，但是由于它的活动对象被子函数引用，故不会被销毁直到子函数执行完毕，于是形成了闭包\n*常见的普通函数对全局变量的引用也算是一种特殊的闭包*\njs没有块作用域，只有全局作用域和函数级作用域，但是，利用闭包可模拟块作用域，如下：\n\n    (function() {\n        块作用域...\n    })()\n\n例子\n\n    var Age = (function() {\n            var age = 10;\n            return ++age;\n    })();\n\n    alert('age is : ' + Age);  // age is : 11\n    alert('age is : ' + age);  // 出错\n\n### 2 作用域\n在传统的面向对象里，对象属性有公开/受保护/私有之分，但是在js中没有这些限制，js是动态脚本语言，对象额所以属性都是公开的，换句话说，在对象定义以外，可以随意访问对象属性和方法\n\n    function Animal(type,name) {\n        this.type = type;\n        this.name = name;\n    }\n    Animal.prototype.display = function() {\n            alert(\"I am a \" + this.type + \",my name is \" + this.name);\n    };\n\n    var dog = new Dog('black');\n    //直接访问\n    dog.display();\n    alert(dog.name);\n\n设计所致，没有办法，但是在设计中为了区分去私有还是共有属性，开发者之间形成了一个约定，对于私有属性的命名，两边加下划线或下划线开头，比如这样\n\n    function Animal(type,name) {\n        this._type_ = type;\n        this._name = name;\n    }\n\n写法不能改变属性的特征，只是起到提示效果\n\n> 当然可以使用闭包实对象的私有变量效果，但是没有实际意义\n\n### 3 this指针\n在javaScript中，在创建函数或对象(其实也是函数)时，会自动生成两个参数：arguments和this指针，由于this指针总是指向调用者，即函数执行时的“上下文”，所以this是动态的，需要具体分析\n##### 3.1 作为普通函数调用\n\n    function test() {\n      alert(this);\n    }\n    test(); // Window\n\n由于所有全局函数都属于window对象，所以上面的调用其实是:\n\n    window.test();\n    // 调用者是window\n\n同理如下\n\n    (function test() {\n      alert(this);\n    })();\n    // Window\n\n##### 3.2 作为对象方法调用\n当函数作为对象方法定义时，在对象实例化时会自动创建作用域并把this指针指向该对象\n\n    var animal = {\n        name: 'wangcai',\n        display: function() {\n            alert(this.name);\n        }\n    };\n    animal.display(); // wangcai\n\n即使先创建的对象，后添加给对象或原型的方法也一样会绑定this给对象，比如：\n\n    function test() {\n      alert(this.name);\n    }\n    var animal= {\n        name: 'wangcai'\n    };\n    animal.display = test;\n    animal.display(); // wangcai\n\n**对于构造函数方式创建的对象来说**，在实例化对象的时候在除了携带入参数组初始化内部属性以外，还将绑定this指针，即使后面再添加方法也一样\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.getName = function() {\n                alert(this.name);\n            }\n    }\n    var jenny = new Person('wangwang',24);\n    Person.prototype.getAge = function() {\n        alert(this.age);\n    };\n\n    jenny.getName(); // wangwang\n    jenny.getAge();  // 24\n\n**对于多重对象来说，**this将匹配直接包含本方法的对象，比如：\n\n    function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n            alert(this.name);\n        }\n        this.dog = {\n            name: '汪汪',\n            display: function() {\n                alert(this.name);\n            }\n        }\n\n    }\n    var ani = new Animal('wangcai',24);\n    ani.display();  // wangcai\n    ani.dog.display(); // 汪汪\n\n但是有对象的方法里再调用外部函数时又有所不同，\n\n    function FF() {\n            alert(this);\n    }\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.display = function() {\n                    alert(this.name);\n                    FF();\n\n            }\n    }\n    var ani = new Animal('wangcai',24);\n    ani.display();\n    // wangcai\n    // Window\n\n由于FF()是全局函数，执行的时候其实在使用的全局对象，即使是在对象方法调用的\n**同理，在对象方法定义并执行内部函数意一样，比如：**\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.display = function() {\n                alert(this.name);\n                (function() {\n                    alert(this);\n                })();\n\n            }\n    }\n    var ani = new Animal('wangcai',24);\n    ani.display();\n    // wangcai\n    // Window\n\n和调用全局函数一样，这里实际关联的是全局对象上下文，但是这个普遍认为是脚本设计问题，可以通过保存this规避\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.display = function() {\n                    alert(this.name);\n                    var that = this; //临时保存\n                    (function() {\n                            alert(that.name); //使用保存的this\n                     })()\n\n            }\n    }\n    var ani = new Animal('wangcai',24);\n    ani.display();\n    // wangcai\n    // wangcai\n\n**然而当把上面的对象方法赋值给全局变量来执行，又是完全不一样的结果：**\n\n    function Animal(name,age) {\n            this.name = name;\n            this.age = age;\n            this.display = function() {\n                    alert(this);\n                    var that = this; //临时保存\n                    (function() {\n                            alert(that); //使用保存的this\n                     })()\n\n            }\n    }\n    var ani = new Animal('wangcai',24);\n    var dump = ani.display;\n    dump();\n    // Window\n    // Window\n\n这里其实就验证了一句话，this关联的调用者的上下文，虽然display方法是对象内部方法，但是方法是对象，对象名仅仅只是个指针，这里只是让全局变量指向函数代码而已，最终调用的是全局对象，实际上和下面没有任何区分\n\n    var dump = function() {\n                    alert(this);\n                    var that = this; //临时保存\n                    (function() {\n                        alert(that); //使用保存的this\n                    })()\n\n                };\n\n##### 3.3 对象/函数作为返回值的场景\n当把对象或者函数作为函数返回时，有一些有趣的事情\n\n    function Animal(name) {\n       this.name = name;\n       return {};\n    }\n    var ani = new Animal('汪汪');\n    alert(ani.name); // undefined\n\n    function Animal(name) {\n       this.name = name;\n       return function() {};\n    }\n    var ani = new Animal('汪汪');\n    alert(ani.name); // undefined\n\n    function Animal(name) {\n       this.name = name;\n       return 12;\n    }\n    var ani = new Animal('汪汪');\n    alert(ani.name); // 汪汪\n\n    function Animal(name) {\n       this.name = name;\n       return null; // 或undefined;\n    }\n    var ani = new Animal('汪汪');\n    alert(ani.name); // 汪汪\n\n可以看到，当函数返回空对象或空函数时，this指针发生了变化，指向了返回的对象/函数;但是当返回是变量，常量，甚至是null/undefined时，this无法进行指向切换，故还是指向的原来的对象，即new对象时创建的对象\n\n##### 3.4 call,apply改变this指向\n我们知道函数有两个特殊的方法：call(this,..),apply(this,[..]),函数恶意通过它们来执行\n这两个方法的第一个参数都是this,即方法内部变量的指向，可以通过她们来人为改变函数执行的this指向\n以全局函数为里例\n\n    function test() {\n      alert(this.name);\n    }\n    test(); // undefined\n\n使用call改变\n\n    var ani = {\n        name: 'wangwang',\n        age: 24,\n        display: function() {alert(this.name);}\n    }\n    test.call(ani);\n    // wangwang\n\n> 在严格版中的默认的this不再是window，而是undefined","slug":"javascipt-bibao-and-this","published":1,"updated":"2018-05-06T12:03:02.660Z","layout":"post","photos":[],"link":"","_id":"cjqwe42c3005hor0b531uzswo","content":"<p>在javascript中，有一些特有且容易出错的特性，包括闭包，作用域，和this,这里将个人理解记录一波<br><a id=\"more\"></a></p>\n<h3 id=\"1-闭包\"><a href=\"#1-闭包\" class=\"headerlink\" title=\"1 闭包\"></a>1 闭包</h3><p>当函数在执行时，会自动创建自身的执行环境，包括：作用域链和活动对象，然后执行时每遇到一个子函数就会形成新的执行环境，并推进执行环境栈里…，于是形成了执行环境链</p>\n<ul>\n<li>作用域链，函数所能访问的作用范围，包含执行环境所能访问的所有活动对象，从外层环境到当前环境，在访问变量时将从当前执行环境的活动对象开始往外搜索变量</li>\n<li>活动对象，保存当前执行环境的变量和方法</li>\n</ul>\n<p>创建闭包的常用方法是在一个函数创建子函数，子函数可访问外层函数的变量，形成闭包</p>\n<pre><code>function ageAdd(defalutAge) {\n    var age = defalutAge;\n    return function() {\n        if(age &lt; 10) {\n            age += 5;\n            return age;\n        } else if(age &lt; 20) {\n            age += 2;\n            return ++age;\n        } else {\n            return defalutAge++;\n        }\n    }\n}\nvar funAdd = ageAdd(4)\nfunAdd();  // 9\nfunAdd();  // 14\nfunAdd();  // 16\nfunAdd();  // 18\nfunAdd();  // 20\nfunAdd();  // 4\n</code></pre><p>当外层函数执行完以后，其执行环境和作用域链将会销毁，但是由于它的活动对象被子函数引用，故不会被销毁直到子函数执行完毕，于是形成了闭包<br><em>常见的普通函数对全局变量的引用也算是一种特殊的闭包</em><br>js没有块作用域，只有全局作用域和函数级作用域，但是，利用闭包可模拟块作用域，如下：</p>\n<pre><code>(function() {\n    块作用域...\n})()\n</code></pre><p>例子</p>\n<pre><code>var Age = (function() {\n        var age = 10;\n        return ++age;\n})();\n\nalert(&apos;age is : &apos; + Age);  // age is : 11\nalert(&apos;age is : &apos; + age);  // 出错\n</code></pre><h3 id=\"2-作用域\"><a href=\"#2-作用域\" class=\"headerlink\" title=\"2 作用域\"></a>2 作用域</h3><p>在传统的面向对象里，对象属性有公开/受保护/私有之分，但是在js中没有这些限制，js是动态脚本语言，对象额所以属性都是公开的，换句话说，在对象定义以外，可以随意访问对象属性和方法</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nvar dog = new Dog(&apos;black&apos;);\n//直接访问\ndog.display();\nalert(dog.name);\n</code></pre><p>设计所致，没有办法，但是在设计中为了区分去私有还是共有属性，开发者之间形成了一个约定，对于私有属性的命名，两边加下划线或下划线开头，比如这样</p>\n<pre><code>function Animal(type,name) {\n    this._type_ = type;\n    this._name = name;\n}\n</code></pre><p>写法不能改变属性的特征，只是起到提示效果</p>\n<blockquote>\n<p>当然可以使用闭包实对象的私有变量效果，但是没有实际意义</p>\n</blockquote>\n<h3 id=\"3-this指针\"><a href=\"#3-this指针\" class=\"headerlink\" title=\"3 this指针\"></a>3 this指针</h3><p>在javaScript中，在创建函数或对象(其实也是函数)时，会自动生成两个参数：arguments和this指针，由于this指针总是指向调用者，即函数执行时的“上下文”，所以this是动态的，需要具体分析</p>\n<h5 id=\"3-1-作为普通函数调用\"><a href=\"#3-1-作为普通函数调用\" class=\"headerlink\" title=\"3.1 作为普通函数调用\"></a>3.1 作为普通函数调用</h5><pre><code>function test() {\n  alert(this);\n}\ntest(); // Window\n</code></pre><p>由于所有全局函数都属于window对象，所以上面的调用其实是:</p>\n<pre><code>window.test();\n// 调用者是window\n</code></pre><p>同理如下</p>\n<pre><code>(function test() {\n  alert(this);\n})();\n// Window\n</code></pre><h5 id=\"3-2-作为对象方法调用\"><a href=\"#3-2-作为对象方法调用\" class=\"headerlink\" title=\"3.2 作为对象方法调用\"></a>3.2 作为对象方法调用</h5><p>当函数作为对象方法定义时，在对象实例化时会自动创建作用域并把this指针指向该对象</p>\n<pre><code>var animal = {\n    name: &apos;wangcai&apos;,\n    display: function() {\n        alert(this.name);\n    }\n};\nanimal.display(); // wangcai\n</code></pre><p>即使先创建的对象，后添加给对象或原型的方法也一样会绑定this给对象，比如：</p>\n<pre><code>function test() {\n  alert(this.name);\n}\nvar animal= {\n    name: &apos;wangcai&apos;\n};\nanimal.display = test;\nanimal.display(); // wangcai\n</code></pre><p><strong>对于构造函数方式创建的对象来说</strong>，在实例化对象的时候在除了携带入参数组初始化内部属性以外，还将绑定this指针，即使后面再添加方法也一样</p>\n<pre><code>function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.getName = function() {\n            alert(this.name);\n        }\n}\nvar jenny = new Person(&apos;wangwang&apos;,24);\nPerson.prototype.getAge = function() {\n    alert(this.age);\n};\n\njenny.getName(); // wangwang\njenny.getAge();  // 24\n</code></pre><p><strong>对于多重对象来说，</strong>this将匹配直接包含本方法的对象，比如：</p>\n<pre><code>function Animal(name,age) {\n    this.name = name;\n    this.age = age;\n    this.display = function() {\n        alert(this.name);\n    }\n    this.dog = {\n        name: &apos;汪汪&apos;,\n        display: function() {\n            alert(this.name);\n        }\n    }\n\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nani.display();  // wangcai\nani.dog.display(); // 汪汪\n</code></pre><p>但是有对象的方法里再调用外部函数时又有所不同，</p>\n<pre><code>function FF() {\n        alert(this);\n}\n\nfunction Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n                alert(this.name);\n                FF();\n\n        }\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nani.display();\n// wangcai\n// Window\n</code></pre><p>由于FF()是全局函数，执行的时候其实在使用的全局对象，即使是在对象方法调用的<br><strong>同理，在对象方法定义并执行内部函数意一样，比如：</strong></p>\n<pre><code>function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n            alert(this.name);\n            (function() {\n                alert(this);\n            })();\n\n        }\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nani.display();\n// wangcai\n// Window\n</code></pre><p>和调用全局函数一样，这里实际关联的是全局对象上下文，但是这个普遍认为是脚本设计问题，可以通过保存this规避</p>\n<pre><code>function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n                alert(this.name);\n                var that = this; //临时保存\n                (function() {\n                        alert(that.name); //使用保存的this\n                 })()\n\n        }\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nani.display();\n// wangcai\n// wangcai\n</code></pre><p><strong>然而当把上面的对象方法赋值给全局变量来执行，又是完全不一样的结果：</strong></p>\n<pre><code>function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n                alert(this);\n                var that = this; //临时保存\n                (function() {\n                        alert(that); //使用保存的this\n                 })()\n\n        }\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nvar dump = ani.display;\ndump();\n// Window\n// Window\n</code></pre><p>这里其实就验证了一句话，this关联的调用者的上下文，虽然display方法是对象内部方法，但是方法是对象，对象名仅仅只是个指针，这里只是让全局变量指向函数代码而已，最终调用的是全局对象，实际上和下面没有任何区分</p>\n<pre><code>var dump = function() {\n                alert(this);\n                var that = this; //临时保存\n                (function() {\n                    alert(that); //使用保存的this\n                })()\n\n            };\n</code></pre><h5 id=\"3-3-对象-函数作为返回值的场景\"><a href=\"#3-3-对象-函数作为返回值的场景\" class=\"headerlink\" title=\"3.3 对象/函数作为返回值的场景\"></a>3.3 对象/函数作为返回值的场景</h5><p>当把对象或者函数作为函数返回时，有一些有趣的事情</p>\n<pre><code>function Animal(name) {\n   this.name = name;\n   return {};\n}\nvar ani = new Animal(&apos;汪汪&apos;);\nalert(ani.name); // undefined\n\nfunction Animal(name) {\n   this.name = name;\n   return function() {};\n}\nvar ani = new Animal(&apos;汪汪&apos;);\nalert(ani.name); // undefined\n\nfunction Animal(name) {\n   this.name = name;\n   return 12;\n}\nvar ani = new Animal(&apos;汪汪&apos;);\nalert(ani.name); // 汪汪\n\nfunction Animal(name) {\n   this.name = name;\n   return null; // 或undefined;\n}\nvar ani = new Animal(&apos;汪汪&apos;);\nalert(ani.name); // 汪汪\n</code></pre><p>可以看到，当函数返回空对象或空函数时，this指针发生了变化，指向了返回的对象/函数;但是当返回是变量，常量，甚至是null/undefined时，this无法进行指向切换，故还是指向的原来的对象，即new对象时创建的对象</p>\n<h5 id=\"3-4-call-apply改变this指向\"><a href=\"#3-4-call-apply改变this指向\" class=\"headerlink\" title=\"3.4 call,apply改变this指向\"></a>3.4 call,apply改变this指向</h5><p>我们知道函数有两个特殊的方法：call(this,..),apply(this,[..]),函数恶意通过它们来执行<br>这两个方法的第一个参数都是this,即方法内部变量的指向，可以通过她们来人为改变函数执行的this指向<br>以全局函数为里例</p>\n<pre><code>function test() {\n  alert(this.name);\n}\ntest(); // undefined\n</code></pre><p>使用call改变</p>\n<pre><code>var ani = {\n    name: &apos;wangwang&apos;,\n    age: 24,\n    display: function() {alert(this.name);}\n}\ntest.call(ani);\n// wangwang\n</code></pre><blockquote>\n<p>在严格版中的默认的this不再是window，而是undefined</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在javascript中，有一些特有且容易出错的特性，包括闭包，作用域，和this,这里将个人理解记录一波<br>","more":"</p>\n<h3 id=\"1-闭包\"><a href=\"#1-闭包\" class=\"headerlink\" title=\"1 闭包\"></a>1 闭包</h3><p>当函数在执行时，会自动创建自身的执行环境，包括：作用域链和活动对象，然后执行时每遇到一个子函数就会形成新的执行环境，并推进执行环境栈里…，于是形成了执行环境链</p>\n<ul>\n<li>作用域链，函数所能访问的作用范围，包含执行环境所能访问的所有活动对象，从外层环境到当前环境，在访问变量时将从当前执行环境的活动对象开始往外搜索变量</li>\n<li>活动对象，保存当前执行环境的变量和方法</li>\n</ul>\n<p>创建闭包的常用方法是在一个函数创建子函数，子函数可访问外层函数的变量，形成闭包</p>\n<pre><code>function ageAdd(defalutAge) {\n    var age = defalutAge;\n    return function() {\n        if(age &lt; 10) {\n            age += 5;\n            return age;\n        } else if(age &lt; 20) {\n            age += 2;\n            return ++age;\n        } else {\n            return defalutAge++;\n        }\n    }\n}\nvar funAdd = ageAdd(4)\nfunAdd();  // 9\nfunAdd();  // 14\nfunAdd();  // 16\nfunAdd();  // 18\nfunAdd();  // 20\nfunAdd();  // 4\n</code></pre><p>当外层函数执行完以后，其执行环境和作用域链将会销毁，但是由于它的活动对象被子函数引用，故不会被销毁直到子函数执行完毕，于是形成了闭包<br><em>常见的普通函数对全局变量的引用也算是一种特殊的闭包</em><br>js没有块作用域，只有全局作用域和函数级作用域，但是，利用闭包可模拟块作用域，如下：</p>\n<pre><code>(function() {\n    块作用域...\n})()\n</code></pre><p>例子</p>\n<pre><code>var Age = (function() {\n        var age = 10;\n        return ++age;\n})();\n\nalert(&apos;age is : &apos; + Age);  // age is : 11\nalert(&apos;age is : &apos; + age);  // 出错\n</code></pre><h3 id=\"2-作用域\"><a href=\"#2-作用域\" class=\"headerlink\" title=\"2 作用域\"></a>2 作用域</h3><p>在传统的面向对象里，对象属性有公开/受保护/私有之分，但是在js中没有这些限制，js是动态脚本语言，对象额所以属性都是公开的，换句话说，在对象定义以外，可以随意访问对象属性和方法</p>\n<pre><code>function Animal(type,name) {\n    this.type = type;\n    this.name = name;\n}\nAnimal.prototype.display = function() {\n        alert(&quot;I am a &quot; + this.type + &quot;,my name is &quot; + this.name);\n};\n\nvar dog = new Dog(&apos;black&apos;);\n//直接访问\ndog.display();\nalert(dog.name);\n</code></pre><p>设计所致，没有办法，但是在设计中为了区分去私有还是共有属性，开发者之间形成了一个约定，对于私有属性的命名，两边加下划线或下划线开头，比如这样</p>\n<pre><code>function Animal(type,name) {\n    this._type_ = type;\n    this._name = name;\n}\n</code></pre><p>写法不能改变属性的特征，只是起到提示效果</p>\n<blockquote>\n<p>当然可以使用闭包实对象的私有变量效果，但是没有实际意义</p>\n</blockquote>\n<h3 id=\"3-this指针\"><a href=\"#3-this指针\" class=\"headerlink\" title=\"3 this指针\"></a>3 this指针</h3><p>在javaScript中，在创建函数或对象(其实也是函数)时，会自动生成两个参数：arguments和this指针，由于this指针总是指向调用者，即函数执行时的“上下文”，所以this是动态的，需要具体分析</p>\n<h5 id=\"3-1-作为普通函数调用\"><a href=\"#3-1-作为普通函数调用\" class=\"headerlink\" title=\"3.1 作为普通函数调用\"></a>3.1 作为普通函数调用</h5><pre><code>function test() {\n  alert(this);\n}\ntest(); // Window\n</code></pre><p>由于所有全局函数都属于window对象，所以上面的调用其实是:</p>\n<pre><code>window.test();\n// 调用者是window\n</code></pre><p>同理如下</p>\n<pre><code>(function test() {\n  alert(this);\n})();\n// Window\n</code></pre><h5 id=\"3-2-作为对象方法调用\"><a href=\"#3-2-作为对象方法调用\" class=\"headerlink\" title=\"3.2 作为对象方法调用\"></a>3.2 作为对象方法调用</h5><p>当函数作为对象方法定义时，在对象实例化时会自动创建作用域并把this指针指向该对象</p>\n<pre><code>var animal = {\n    name: &apos;wangcai&apos;,\n    display: function() {\n        alert(this.name);\n    }\n};\nanimal.display(); // wangcai\n</code></pre><p>即使先创建的对象，后添加给对象或原型的方法也一样会绑定this给对象，比如：</p>\n<pre><code>function test() {\n  alert(this.name);\n}\nvar animal= {\n    name: &apos;wangcai&apos;\n};\nanimal.display = test;\nanimal.display(); // wangcai\n</code></pre><p><strong>对于构造函数方式创建的对象来说</strong>，在实例化对象的时候在除了携带入参数组初始化内部属性以外，还将绑定this指针，即使后面再添加方法也一样</p>\n<pre><code>function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.getName = function() {\n            alert(this.name);\n        }\n}\nvar jenny = new Person(&apos;wangwang&apos;,24);\nPerson.prototype.getAge = function() {\n    alert(this.age);\n};\n\njenny.getName(); // wangwang\njenny.getAge();  // 24\n</code></pre><p><strong>对于多重对象来说，</strong>this将匹配直接包含本方法的对象，比如：</p>\n<pre><code>function Animal(name,age) {\n    this.name = name;\n    this.age = age;\n    this.display = function() {\n        alert(this.name);\n    }\n    this.dog = {\n        name: &apos;汪汪&apos;,\n        display: function() {\n            alert(this.name);\n        }\n    }\n\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nani.display();  // wangcai\nani.dog.display(); // 汪汪\n</code></pre><p>但是有对象的方法里再调用外部函数时又有所不同，</p>\n<pre><code>function FF() {\n        alert(this);\n}\n\nfunction Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n                alert(this.name);\n                FF();\n\n        }\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nani.display();\n// wangcai\n// Window\n</code></pre><p>由于FF()是全局函数，执行的时候其实在使用的全局对象，即使是在对象方法调用的<br><strong>同理，在对象方法定义并执行内部函数意一样，比如：</strong></p>\n<pre><code>function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n            alert(this.name);\n            (function() {\n                alert(this);\n            })();\n\n        }\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nani.display();\n// wangcai\n// Window\n</code></pre><p>和调用全局函数一样，这里实际关联的是全局对象上下文，但是这个普遍认为是脚本设计问题，可以通过保存this规避</p>\n<pre><code>function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n                alert(this.name);\n                var that = this; //临时保存\n                (function() {\n                        alert(that.name); //使用保存的this\n                 })()\n\n        }\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nani.display();\n// wangcai\n// wangcai\n</code></pre><p><strong>然而当把上面的对象方法赋值给全局变量来执行，又是完全不一样的结果：</strong></p>\n<pre><code>function Animal(name,age) {\n        this.name = name;\n        this.age = age;\n        this.display = function() {\n                alert(this);\n                var that = this; //临时保存\n                (function() {\n                        alert(that); //使用保存的this\n                 })()\n\n        }\n}\nvar ani = new Animal(&apos;wangcai&apos;,24);\nvar dump = ani.display;\ndump();\n// Window\n// Window\n</code></pre><p>这里其实就验证了一句话，this关联的调用者的上下文，虽然display方法是对象内部方法，但是方法是对象，对象名仅仅只是个指针，这里只是让全局变量指向函数代码而已，最终调用的是全局对象，实际上和下面没有任何区分</p>\n<pre><code>var dump = function() {\n                alert(this);\n                var that = this; //临时保存\n                (function() {\n                    alert(that); //使用保存的this\n                })()\n\n            };\n</code></pre><h5 id=\"3-3-对象-函数作为返回值的场景\"><a href=\"#3-3-对象-函数作为返回值的场景\" class=\"headerlink\" title=\"3.3 对象/函数作为返回值的场景\"></a>3.3 对象/函数作为返回值的场景</h5><p>当把对象或者函数作为函数返回时，有一些有趣的事情</p>\n<pre><code>function Animal(name) {\n   this.name = name;\n   return {};\n}\nvar ani = new Animal(&apos;汪汪&apos;);\nalert(ani.name); // undefined\n\nfunction Animal(name) {\n   this.name = name;\n   return function() {};\n}\nvar ani = new Animal(&apos;汪汪&apos;);\nalert(ani.name); // undefined\n\nfunction Animal(name) {\n   this.name = name;\n   return 12;\n}\nvar ani = new Animal(&apos;汪汪&apos;);\nalert(ani.name); // 汪汪\n\nfunction Animal(name) {\n   this.name = name;\n   return null; // 或undefined;\n}\nvar ani = new Animal(&apos;汪汪&apos;);\nalert(ani.name); // 汪汪\n</code></pre><p>可以看到，当函数返回空对象或空函数时，this指针发生了变化，指向了返回的对象/函数;但是当返回是变量，常量，甚至是null/undefined时，this无法进行指向切换，故还是指向的原来的对象，即new对象时创建的对象</p>\n<h5 id=\"3-4-call-apply改变this指向\"><a href=\"#3-4-call-apply改变this指向\" class=\"headerlink\" title=\"3.4 call,apply改变this指向\"></a>3.4 call,apply改变this指向</h5><p>我们知道函数有两个特殊的方法：call(this,..),apply(this,[..]),函数恶意通过它们来执行<br>这两个方法的第一个参数都是this,即方法内部变量的指向，可以通过她们来人为改变函数执行的this指向<br>以全局函数为里例</p>\n<pre><code>function test() {\n  alert(this.name);\n}\ntest(); // undefined\n</code></pre><p>使用call改变</p>\n<pre><code>var ani = {\n    name: &apos;wangwang&apos;,\n    age: 24,\n    display: function() {alert(this.name);}\n}\ntest.call(ani);\n// wangwang\n</code></pre><blockquote>\n<p>在严格版中的默认的this不再是window，而是undefined</p>\n</blockquote>"},{"title":"less深入指南三-@import导入（译）","date":"2018-08-22T16:00:30.000Z","comments":1,"toc":true,"_content":"\n# @import导入\n在标准CSS中，@import语句必须在所有其他类型的规则之前声明，但Less并不关心你放置@import语句的位置\n\n    .foo {\n      background: #900;\n    }\n    @import \"this-is-valid.less\";\n\n<!--more-->\n\n## 识别文件扩展名\n根据文件扩展名的不同，Less在处理@import导入的时候的方式也有所不同\n\n- 如果文件具有.css扩展名，则将其视为CSS文件，并将@import语句保留为原样（请参阅下面的内联选项）。\n- 如果它有任何其他扩展名，它将被视为less文件并导入。\n- 如果它没有扩展名，则会附加.less，它将作为导入的Less文件包含在内。\n例子：\n\n    @import \"foo\";      // foo.less is imported\n    @import \"foo.less\"; // foo.less is imported\n    @import \"foo.php\";  // foo.php imported as a Less file\n    @import \"foo.css\";  // statement left in place, as-is\n\n下面要讲到的选项可以覆盖此行为。\n\n## 导入选项\nLess为CSS的@import提供了几个扩展，比使用外部文件具有更多的灵活性。\n语法：\n\n    @import（keyword）“filename”;\n\n以下是支持的导入选项：\n\n- reference: 使用Less文件但不输出\n- inline: 在输出中包含源文件但不处理它\n- less: 无论文件扩展名是什么，都将文件视为Less文件\n- css: 无论文件扩展名是什么，都将文件视为CSS文件\n- once: 只包含文件一次（默认行为）\n- multiple: 多次包含该文件\n- optional: 在找不到文件时继续编译\n\n每个@import允许使用多个关键字，关键字之间使用逗号分隔，比如：\n\n    @import (optional, reference) \"foo.less\";\n\n### reference\n> Released v1.5.0\n\n    @import（reference）“foo.less”;\n\n导入外部文件，但不将引入的样式添加到已编译的输出，只是引用它们。\n\n想象一下，在导入的文件中，reference使用一个引用来标记每一个at-rule和selector，就像正常导入一样。但是当生成CSS时，却不输出“reference”选择器，甚至是任何仅仅包含引用选择器的媒体查询。\n除非参考样式被用作mixins或extend，否则引用样式不会显示在生成的CSS中。根据使用的方法（mixin或extend）不同，会产生不同的结果。\n\n- extend：当使用扩展选择器时，只有新选择器被标记为未引用，并且它将被引入到@import引用语句的位置。\n- mixins：当参考样式被用作隐式mixin时，其规则是混合的，标记为“非引用”，并且正常显示在引用的位置。\n\n例子：\n允许您通过执行以下操作从Bootstrap等库中仅提取特定的，有针对性的样式：\n\n    .navbar：extend（.navbar all）{}\n\n并且您将仅从Bootstrap中提取.navbar相关样式。\n\n### inline\n> Released v1.5.0\n\n    @import (inline) \"not-less-compatible.css\";\n\n在输出中包含源文件但不处理它\n当CSS文件可能不兼容时，您将使用此选项; 这是因为虽然Less支持大多数已知标准CSS，但它不支持某些注释，并且不支持所有已知的CSS补丁，它是不修改CSS的。\n\n您可以使用它将文件包含在输出中，以便所有CSS都在一个文件中。\n\n### less\n> Released v1.4.0\n\n    @import (less) \"foo.css\";\n\n将导入的文件视为Less，无论文件扩展名如何。\n\n### css\n> Released v1.4.0\n\n    @import (css) \"foo.less\";\n\n    //outputs\n\n    @import \"foo.less\";\n\n将导入的文件视为常规CSS，无论文件扩展名如何。 这意味着import语句将保持原样。\n\n### once\n> Released v1.4.0\n\n@import语句的默认行为。 这意味着文件仅导入一次，并且将忽略该文件的后续导入语句。\n\n    @import (once) \"foo.less\";\n    @import (once) \"foo.less\"; // this statement will be ignored\n\n### multiple\n> Released v1.4.0\n\n使用@import（multiple）可以导入多个相同名称的文件，这是和once相反的行为。\n\n    // file: foo.less\n    .a {\n      color: green;\n    }\n    // file: main.less\n    @import (multiple) \"foo.less\";\n    @import (multiple) \"foo.less\";\n\n输出\n\n    .a {\n      color: green;\n    }\n    .a {\n      color: green;\n    }\n\n### optional\n> Released v2.3.0\n\n    @import (optional) \"foo.less\";\n\n使用@import（optional）仅允许在文件存在时导入文件，在没有optional关键字时，Less会抛出FileError并在导入无法找到的文件时停止编译。\n\n## @plugin插件\n> Released v2.5.0\n\n可以通过导入JavaScript插件以添加Less.js函数和功能\n\n### 编写你的第一个插件\n使用@plugin的方式类似于使用@import导入.less文件。\n\n    @plugin \"my-plugin\";  // 字段添加.js后缀，如果不带扩展名\n\n由于Less插件是在Less作用域范围内评估的，因此插件定义可以非常简单，比如：\n\n    registerPlugin({\n        install: function(less, pluginManager, functions) {\n            functions.add('pi', function() {\n                return Math.PI;\n            });\n        }\n    })\n\n或者你可以使用module.exports（在浏览器和Node.js中工作）。\n\n    module.exports = {\n        install: function(less, pluginManager, functions) {\n            functions.add('pi', function() {\n                return Math.PI;\n            });\n        }\n    };\n\n> 请注意，浏览器中不支持其他Node.js库比如CommonJS的使用方式，例如require（）。 编写跨平台插件时请记住这一点。\n\n你能用插件做什么？ 很多，但让我们从基础开始。我们将首先关注您可能放在插件中放置的内容：\n\n    // my-plugin.js\n    install: function(less, pluginManager, functions) {\n        functions.add('pi', function() {\n            return Math.PI;\n        });\n    }\n\n恭喜！ 你写了一个Less插件！您可以在样式表中这样使用它：\n\n    @plugin \"my-plugin\";\n    .show-me-pi {\n      value: pi();\n    }\n\n输出：\n\n    .show-me-pi {\n      value: 3.141592653589793;\n    }\n\n但是，如果您希望将其与其他值相乘或执行其他Less操作，则需要返回正确的Less节点。 否则，在样式表中的输出是纯文本。\n\n    functions.add('pi', function() {\n        return less.dimension(Math.PI);\n    });\n\n> 注意：dimension的参数可以带单位，也可以不带单位，比如：dimension(10) 或 dimension(10,\"px\")。\n\n现在您可以在运算操作中使用您的插件：\n\n    @plugin \"my-plugin\";\n    .show-me-pi {\n      value: pi() * 2;\n    }\n\n您可能已经注意到插件文件有可用的全局变量，即函数注册表（函数对象）和较少的对象。 这些都是为了方便起见。\n\n### 插件作用域范围\n在使用@plugin添加函数的时候，是遵循Less作用域规则的。 这对于想要在不引入命名冲突的情况下添加函数的Less库作者来说非常有用。\n例如，假设您有两个来自两个第三方库的插件，这两个插件都有一个名为“foo”的函数。\n\n    // lib1.js\n    // ...\n        functions.add('foo', function() {\n            return \"foo\";\n        });\n    // ...\n\n    // lib2.js\n    // ...\n        functions.add('foo', function() {\n            return \"bar\";\n        });\n    // ...\n\n没关系！ 您可以选择哪个库的功能创建哪个输出。\n\n    .el-1 {\n        @plugin \"lib1\";\n        value: foo();\n    }\n    .el-2 {\n        @plugin \"lib2\";\n        value: foo();\n    }\n\n输出：\n\n    .el-1 {\n        value: foo;\n    }\n    .el-2 {\n        value: bar;\n    }\n\n对于共享插件的插件作者，这意味着您还可以通过将私有函数放在特定范围内来有效地创建私有函数。 所以，如下的使用方式是错误的：\n\n    .el {\n        @plugin \"lib1\";\n    }\n    @value: foo();\n\n从Less 3.0开始，函数可以返回任何类型的Node类型，并且可以在任何级别调用。\n但是，这会在2.x中引发错误，因为在2.x中函数必须是属性或变量赋值的一部分：\n\n    .block {\n        color: blue;\n        my-function-rules();\n    }\n\n在3.x中，不再是这种情况，函数可以返回At-Rules，Rulesets，任何其他Less节点，字符串和数字（后两个转换为匿名节点）。\n\n### 空函数\n有时您可能想要调用一个函数，但是您不需要任何输出（例如存储值以供以后使用）。 在这种情况下，您只需要从函数返回false。\n\n    var collection = [];\n    functions.add('store', function(val) {\n        collection.push(val);  // imma store this for later\n        return false;\n    });\n    //输出\n    @plugin \"collections\";\n    @var: 32;\n    store(@var);\n\n或者可以这么写\n\n    functions.add('retrieve', function(val) {\n        return less.value(collection);\n    });\n    //输出\n    .get-my-values {\n        @plugin \"collections\";\n        values: retrieve();\n    }\n\n### Less.js插件对象\nLess.js插件应该导出具有一个或多个属性的对象。\n\n    {\n        /* Called immediately after the plugin is\n         * first imported, only once. */\n        install: function(less, pluginManager, functions) { },\n\n        /* Called for each instance of your @plugin. */\n        use: function(context) { },\n\n        /* Called for each instance of your @plugin,\n         * when rules are being evaluated.\n         * It's just later in the evaluation lifecycle */\n        eval: function(context) { },\n\n        /* Passes an arbitrary string to your plugin\n         * e.g. @plugin (args) \"file\";\n         * This string is not parsed for you,\n         * so it can contain (almost) anything */\n        setOptions: function(argumentString) { },\n\n        /* Set a minimum Less compatibility string\n         * You can also use an array, as in [3, 0] */\n        minVersion: ['3.0'],\n\n        /* Used for lessc only, to explain\n         * options in a Terminal */\n        printUsage: function() { },\n\n    }\n\nPluginManager为 install() function作实例化，并且提供了添加访问者，文件管理器和后处理器的方法。\n以下是一些显示不同插件类型的示例，可分别链接查看。\n\n- [后处理器](https://github.com/less/less-plugin-clean-css)\n- [访问者](https://github.com/less/less-plugin-inline-urls)\n- [文件管理器](https://github.com/less/less-plugin-npm-import)\n\n### 预加载插件\n虽然@plugin调用适用于大多数情况，但有时您可能希望在解析开始之前加载插件。\n请参阅：“使用Less.js”部分中的预加载插件，了解如何执行此操作。\n\n# Maps(新)\n> Released v3.5.0-beta.4\n\n使用规则集和mixins作为值的映射\n通过将命名空间与[]语法相结合，您可以将规则集/ mixin转换为映射，比如：\n\n    @sizes: {\n      mobile: 320px;\n      tablet: 768px;\n      desktop: 1024px;\n    }\n\n    .navbar {\n      display: block;\n\n      @media (min-width: @sizes[tablet]) {\n        display: inline-block;\n      }\n    }\n\n输出：\n\n    .navbar {\n      display: block;\n    }\n    @media (min-width: 768px) {\n      .navbar {\n        display: inline-block;\n      }\n    }\n\n由于命名空间和重载混合的能力，Mixins比Map更具通用性。\n\n    #library() {\n      .colors() {\n        primary: green;\n        secondary: blue;\n      }\n    }\n\n    #library() {\n      .colors() { primary: grey; }\n    }\n\n    .button {\n      color: #library.colors[primary];\n      border-color: #library.colors[secondary];\n    }\n\n输出：\n\n    .button {\n      color: grey;\n      border-color: blue;\n    }\n\n此外，你还可以通过别名访问mixins，那是个更容易的方式。\n\n    .button {\n      @colors: #library.colors();\n      color: @colors[primary];\n      border-color: @colors[secondary];\n    }\n\n请注意，当存在多个嵌套的规则集的时候，可以使用多个[]来进行查找访问，如下所示：\n\n    @config: {\n      @options: {\n        library-on: true\n      }\n    }\n\n    & when (@config[@options][library-on] = true) {\n      .produce-ruleset {\n        prop: val;\n      }\n    }\n\n通过这种方式，规则集和变量调用可以模拟一种类型的“命名空间”，类似于mixins\n\n至于是否将分配给变量的mixins或规则集用作映射，这取决于您。 您可能希望通过重新声明分配给rulset的变量来替换整个Map来使用； 或者您可能想要“合并”单个键/值对，在这种情况下，把mixins作为Map可能更合适。\n\n## 在[]中使用变量的变量\n有一件重要的事情需要注意，查找表达式[@lookup]中的@lookup是查找的主键，一般只接受常量，不能使用变量来访问，但是可以使用变量的变量来作为索引键值\n例子：\n\n    .foods() {\n      @dessert: ice cream;\n    }\n\n    @key-to-lookup: dessert;\n\n    .lunch {\n      treat: .foods[@@key-to-lookup];\n    }\n\n编译输出:\n\n    .lunch {\n      treat: ice cream;\n    }\n","source":"_posts/2018-10-22-less-import.md","raw":"---\ntitle: less深入指南三-@import导入（译）\ndate: 2018-08-23 00:00:30\ntags: Less\ncategories: 前端\ncomments: true\ntoc: true\n---\n\n# @import导入\n在标准CSS中，@import语句必须在所有其他类型的规则之前声明，但Less并不关心你放置@import语句的位置\n\n    .foo {\n      background: #900;\n    }\n    @import \"this-is-valid.less\";\n\n<!--more-->\n\n## 识别文件扩展名\n根据文件扩展名的不同，Less在处理@import导入的时候的方式也有所不同\n\n- 如果文件具有.css扩展名，则将其视为CSS文件，并将@import语句保留为原样（请参阅下面的内联选项）。\n- 如果它有任何其他扩展名，它将被视为less文件并导入。\n- 如果它没有扩展名，则会附加.less，它将作为导入的Less文件包含在内。\n例子：\n\n    @import \"foo\";      // foo.less is imported\n    @import \"foo.less\"; // foo.less is imported\n    @import \"foo.php\";  // foo.php imported as a Less file\n    @import \"foo.css\";  // statement left in place, as-is\n\n下面要讲到的选项可以覆盖此行为。\n\n## 导入选项\nLess为CSS的@import提供了几个扩展，比使用外部文件具有更多的灵活性。\n语法：\n\n    @import（keyword）“filename”;\n\n以下是支持的导入选项：\n\n- reference: 使用Less文件但不输出\n- inline: 在输出中包含源文件但不处理它\n- less: 无论文件扩展名是什么，都将文件视为Less文件\n- css: 无论文件扩展名是什么，都将文件视为CSS文件\n- once: 只包含文件一次（默认行为）\n- multiple: 多次包含该文件\n- optional: 在找不到文件时继续编译\n\n每个@import允许使用多个关键字，关键字之间使用逗号分隔，比如：\n\n    @import (optional, reference) \"foo.less\";\n\n### reference\n> Released v1.5.0\n\n    @import（reference）“foo.less”;\n\n导入外部文件，但不将引入的样式添加到已编译的输出，只是引用它们。\n\n想象一下，在导入的文件中，reference使用一个引用来标记每一个at-rule和selector，就像正常导入一样。但是当生成CSS时，却不输出“reference”选择器，甚至是任何仅仅包含引用选择器的媒体查询。\n除非参考样式被用作mixins或extend，否则引用样式不会显示在生成的CSS中。根据使用的方法（mixin或extend）不同，会产生不同的结果。\n\n- extend：当使用扩展选择器时，只有新选择器被标记为未引用，并且它将被引入到@import引用语句的位置。\n- mixins：当参考样式被用作隐式mixin时，其规则是混合的，标记为“非引用”，并且正常显示在引用的位置。\n\n例子：\n允许您通过执行以下操作从Bootstrap等库中仅提取特定的，有针对性的样式：\n\n    .navbar：extend（.navbar all）{}\n\n并且您将仅从Bootstrap中提取.navbar相关样式。\n\n### inline\n> Released v1.5.0\n\n    @import (inline) \"not-less-compatible.css\";\n\n在输出中包含源文件但不处理它\n当CSS文件可能不兼容时，您将使用此选项; 这是因为虽然Less支持大多数已知标准CSS，但它不支持某些注释，并且不支持所有已知的CSS补丁，它是不修改CSS的。\n\n您可以使用它将文件包含在输出中，以便所有CSS都在一个文件中。\n\n### less\n> Released v1.4.0\n\n    @import (less) \"foo.css\";\n\n将导入的文件视为Less，无论文件扩展名如何。\n\n### css\n> Released v1.4.0\n\n    @import (css) \"foo.less\";\n\n    //outputs\n\n    @import \"foo.less\";\n\n将导入的文件视为常规CSS，无论文件扩展名如何。 这意味着import语句将保持原样。\n\n### once\n> Released v1.4.0\n\n@import语句的默认行为。 这意味着文件仅导入一次，并且将忽略该文件的后续导入语句。\n\n    @import (once) \"foo.less\";\n    @import (once) \"foo.less\"; // this statement will be ignored\n\n### multiple\n> Released v1.4.0\n\n使用@import（multiple）可以导入多个相同名称的文件，这是和once相反的行为。\n\n    // file: foo.less\n    .a {\n      color: green;\n    }\n    // file: main.less\n    @import (multiple) \"foo.less\";\n    @import (multiple) \"foo.less\";\n\n输出\n\n    .a {\n      color: green;\n    }\n    .a {\n      color: green;\n    }\n\n### optional\n> Released v2.3.0\n\n    @import (optional) \"foo.less\";\n\n使用@import（optional）仅允许在文件存在时导入文件，在没有optional关键字时，Less会抛出FileError并在导入无法找到的文件时停止编译。\n\n## @plugin插件\n> Released v2.5.0\n\n可以通过导入JavaScript插件以添加Less.js函数和功能\n\n### 编写你的第一个插件\n使用@plugin的方式类似于使用@import导入.less文件。\n\n    @plugin \"my-plugin\";  // 字段添加.js后缀，如果不带扩展名\n\n由于Less插件是在Less作用域范围内评估的，因此插件定义可以非常简单，比如：\n\n    registerPlugin({\n        install: function(less, pluginManager, functions) {\n            functions.add('pi', function() {\n                return Math.PI;\n            });\n        }\n    })\n\n或者你可以使用module.exports（在浏览器和Node.js中工作）。\n\n    module.exports = {\n        install: function(less, pluginManager, functions) {\n            functions.add('pi', function() {\n                return Math.PI;\n            });\n        }\n    };\n\n> 请注意，浏览器中不支持其他Node.js库比如CommonJS的使用方式，例如require（）。 编写跨平台插件时请记住这一点。\n\n你能用插件做什么？ 很多，但让我们从基础开始。我们将首先关注您可能放在插件中放置的内容：\n\n    // my-plugin.js\n    install: function(less, pluginManager, functions) {\n        functions.add('pi', function() {\n            return Math.PI;\n        });\n    }\n\n恭喜！ 你写了一个Less插件！您可以在样式表中这样使用它：\n\n    @plugin \"my-plugin\";\n    .show-me-pi {\n      value: pi();\n    }\n\n输出：\n\n    .show-me-pi {\n      value: 3.141592653589793;\n    }\n\n但是，如果您希望将其与其他值相乘或执行其他Less操作，则需要返回正确的Less节点。 否则，在样式表中的输出是纯文本。\n\n    functions.add('pi', function() {\n        return less.dimension(Math.PI);\n    });\n\n> 注意：dimension的参数可以带单位，也可以不带单位，比如：dimension(10) 或 dimension(10,\"px\")。\n\n现在您可以在运算操作中使用您的插件：\n\n    @plugin \"my-plugin\";\n    .show-me-pi {\n      value: pi() * 2;\n    }\n\n您可能已经注意到插件文件有可用的全局变量，即函数注册表（函数对象）和较少的对象。 这些都是为了方便起见。\n\n### 插件作用域范围\n在使用@plugin添加函数的时候，是遵循Less作用域规则的。 这对于想要在不引入命名冲突的情况下添加函数的Less库作者来说非常有用。\n例如，假设您有两个来自两个第三方库的插件，这两个插件都有一个名为“foo”的函数。\n\n    // lib1.js\n    // ...\n        functions.add('foo', function() {\n            return \"foo\";\n        });\n    // ...\n\n    // lib2.js\n    // ...\n        functions.add('foo', function() {\n            return \"bar\";\n        });\n    // ...\n\n没关系！ 您可以选择哪个库的功能创建哪个输出。\n\n    .el-1 {\n        @plugin \"lib1\";\n        value: foo();\n    }\n    .el-2 {\n        @plugin \"lib2\";\n        value: foo();\n    }\n\n输出：\n\n    .el-1 {\n        value: foo;\n    }\n    .el-2 {\n        value: bar;\n    }\n\n对于共享插件的插件作者，这意味着您还可以通过将私有函数放在特定范围内来有效地创建私有函数。 所以，如下的使用方式是错误的：\n\n    .el {\n        @plugin \"lib1\";\n    }\n    @value: foo();\n\n从Less 3.0开始，函数可以返回任何类型的Node类型，并且可以在任何级别调用。\n但是，这会在2.x中引发错误，因为在2.x中函数必须是属性或变量赋值的一部分：\n\n    .block {\n        color: blue;\n        my-function-rules();\n    }\n\n在3.x中，不再是这种情况，函数可以返回At-Rules，Rulesets，任何其他Less节点，字符串和数字（后两个转换为匿名节点）。\n\n### 空函数\n有时您可能想要调用一个函数，但是您不需要任何输出（例如存储值以供以后使用）。 在这种情况下，您只需要从函数返回false。\n\n    var collection = [];\n    functions.add('store', function(val) {\n        collection.push(val);  // imma store this for later\n        return false;\n    });\n    //输出\n    @plugin \"collections\";\n    @var: 32;\n    store(@var);\n\n或者可以这么写\n\n    functions.add('retrieve', function(val) {\n        return less.value(collection);\n    });\n    //输出\n    .get-my-values {\n        @plugin \"collections\";\n        values: retrieve();\n    }\n\n### Less.js插件对象\nLess.js插件应该导出具有一个或多个属性的对象。\n\n    {\n        /* Called immediately after the plugin is\n         * first imported, only once. */\n        install: function(less, pluginManager, functions) { },\n\n        /* Called for each instance of your @plugin. */\n        use: function(context) { },\n\n        /* Called for each instance of your @plugin,\n         * when rules are being evaluated.\n         * It's just later in the evaluation lifecycle */\n        eval: function(context) { },\n\n        /* Passes an arbitrary string to your plugin\n         * e.g. @plugin (args) \"file\";\n         * This string is not parsed for you,\n         * so it can contain (almost) anything */\n        setOptions: function(argumentString) { },\n\n        /* Set a minimum Less compatibility string\n         * You can also use an array, as in [3, 0] */\n        minVersion: ['3.0'],\n\n        /* Used for lessc only, to explain\n         * options in a Terminal */\n        printUsage: function() { },\n\n    }\n\nPluginManager为 install() function作实例化，并且提供了添加访问者，文件管理器和后处理器的方法。\n以下是一些显示不同插件类型的示例，可分别链接查看。\n\n- [后处理器](https://github.com/less/less-plugin-clean-css)\n- [访问者](https://github.com/less/less-plugin-inline-urls)\n- [文件管理器](https://github.com/less/less-plugin-npm-import)\n\n### 预加载插件\n虽然@plugin调用适用于大多数情况，但有时您可能希望在解析开始之前加载插件。\n请参阅：“使用Less.js”部分中的预加载插件，了解如何执行此操作。\n\n# Maps(新)\n> Released v3.5.0-beta.4\n\n使用规则集和mixins作为值的映射\n通过将命名空间与[]语法相结合，您可以将规则集/ mixin转换为映射，比如：\n\n    @sizes: {\n      mobile: 320px;\n      tablet: 768px;\n      desktop: 1024px;\n    }\n\n    .navbar {\n      display: block;\n\n      @media (min-width: @sizes[tablet]) {\n        display: inline-block;\n      }\n    }\n\n输出：\n\n    .navbar {\n      display: block;\n    }\n    @media (min-width: 768px) {\n      .navbar {\n        display: inline-block;\n      }\n    }\n\n由于命名空间和重载混合的能力，Mixins比Map更具通用性。\n\n    #library() {\n      .colors() {\n        primary: green;\n        secondary: blue;\n      }\n    }\n\n    #library() {\n      .colors() { primary: grey; }\n    }\n\n    .button {\n      color: #library.colors[primary];\n      border-color: #library.colors[secondary];\n    }\n\n输出：\n\n    .button {\n      color: grey;\n      border-color: blue;\n    }\n\n此外，你还可以通过别名访问mixins，那是个更容易的方式。\n\n    .button {\n      @colors: #library.colors();\n      color: @colors[primary];\n      border-color: @colors[secondary];\n    }\n\n请注意，当存在多个嵌套的规则集的时候，可以使用多个[]来进行查找访问，如下所示：\n\n    @config: {\n      @options: {\n        library-on: true\n      }\n    }\n\n    & when (@config[@options][library-on] = true) {\n      .produce-ruleset {\n        prop: val;\n      }\n    }\n\n通过这种方式，规则集和变量调用可以模拟一种类型的“命名空间”，类似于mixins\n\n至于是否将分配给变量的mixins或规则集用作映射，这取决于您。 您可能希望通过重新声明分配给rulset的变量来替换整个Map来使用； 或者您可能想要“合并”单个键/值对，在这种情况下，把mixins作为Map可能更合适。\n\n## 在[]中使用变量的变量\n有一件重要的事情需要注意，查找表达式[@lookup]中的@lookup是查找的主键，一般只接受常量，不能使用变量来访问，但是可以使用变量的变量来作为索引键值\n例子：\n\n    .foods() {\n      @dessert: ice cream;\n    }\n\n    @key-to-lookup: dessert;\n\n    .lunch {\n      treat: .foods[@@key-to-lookup];\n    }\n\n编译输出:\n\n    .lunch {\n      treat: ice cream;\n    }\n","slug":"less-import","published":1,"updated":"2018-10-25T16:16:26.279Z","layout":"post","photos":[],"link":"","_id":"cjqwe42cf005kor0bvv8hvkfr","content":"<h1 id=\"import导入\"><a href=\"#import导入\" class=\"headerlink\" title=\"@import导入\"></a>@import导入</h1><p>在标准CSS中，@import语句必须在所有其他类型的规则之前声明，但Less并不关心你放置@import语句的位置</p>\n<pre><code>.foo {\n  background: #900;\n}\n@import &quot;this-is-valid.less&quot;;\n</code></pre><a id=\"more\"></a>\n<h2 id=\"识别文件扩展名\"><a href=\"#识别文件扩展名\" class=\"headerlink\" title=\"识别文件扩展名\"></a>识别文件扩展名</h2><p>根据文件扩展名的不同，Less在处理@import导入的时候的方式也有所不同</p>\n<ul>\n<li>如果文件具有.css扩展名，则将其视为CSS文件，并将@import语句保留为原样（请参阅下面的内联选项）。</li>\n<li>如果它有任何其他扩展名，它将被视为less文件并导入。</li>\n<li><p>如果它没有扩展名，则会附加.less，它将作为导入的Less文件包含在内。<br>例子：</p>\n<p>  @import “foo”;      // foo.less is imported<br>  @import “foo.less”; // foo.less is imported<br>  @import “foo.php”;  // foo.php imported as a Less file<br>  @import “foo.css”;  // statement left in place, as-is</p>\n</li>\n</ul>\n<p>下面要讲到的选项可以覆盖此行为。</p>\n<h2 id=\"导入选项\"><a href=\"#导入选项\" class=\"headerlink\" title=\"导入选项\"></a>导入选项</h2><p>Less为CSS的@import提供了几个扩展，比使用外部文件具有更多的灵活性。<br>语法：</p>\n<pre><code>@import（keyword）“filename”;\n</code></pre><p>以下是支持的导入选项：</p>\n<ul>\n<li>reference: 使用Less文件但不输出</li>\n<li>inline: 在输出中包含源文件但不处理它</li>\n<li>less: 无论文件扩展名是什么，都将文件视为Less文件</li>\n<li>css: 无论文件扩展名是什么，都将文件视为CSS文件</li>\n<li>once: 只包含文件一次（默认行为）</li>\n<li>multiple: 多次包含该文件</li>\n<li>optional: 在找不到文件时继续编译</li>\n</ul>\n<p>每个@import允许使用多个关键字，关键字之间使用逗号分隔，比如：</p>\n<pre><code>@import (optional, reference) &quot;foo.less&quot;;\n</code></pre><h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><blockquote>\n<p>Released v1.5.0</p>\n</blockquote>\n<pre><code>@import（reference）“foo.less”;\n</code></pre><p>导入外部文件，但不将引入的样式添加到已编译的输出，只是引用它们。</p>\n<p>想象一下，在导入的文件中，reference使用一个引用来标记每一个at-rule和selector，就像正常导入一样。但是当生成CSS时，却不输出“reference”选择器，甚至是任何仅仅包含引用选择器的媒体查询。<br>除非参考样式被用作mixins或extend，否则引用样式不会显示在生成的CSS中。根据使用的方法（mixin或extend）不同，会产生不同的结果。</p>\n<ul>\n<li>extend：当使用扩展选择器时，只有新选择器被标记为未引用，并且它将被引入到@import引用语句的位置。</li>\n<li>mixins：当参考样式被用作隐式mixin时，其规则是混合的，标记为“非引用”，并且正常显示在引用的位置。</li>\n</ul>\n<p>例子：<br>允许您通过执行以下操作从Bootstrap等库中仅提取特定的，有针对性的样式：</p>\n<pre><code>.navbar：extend（.navbar all）{}\n</code></pre><p>并且您将仅从Bootstrap中提取.navbar相关样式。</p>\n<h3 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h3><blockquote>\n<p>Released v1.5.0</p>\n</blockquote>\n<pre><code>@import (inline) &quot;not-less-compatible.css&quot;;\n</code></pre><p>在输出中包含源文件但不处理它<br>当CSS文件可能不兼容时，您将使用此选项; 这是因为虽然Less支持大多数已知标准CSS，但它不支持某些注释，并且不支持所有已知的CSS补丁，它是不修改CSS的。</p>\n<p>您可以使用它将文件包含在输出中，以便所有CSS都在一个文件中。</p>\n<h3 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h3><blockquote>\n<p>Released v1.4.0</p>\n</blockquote>\n<pre><code>@import (less) &quot;foo.css&quot;;\n</code></pre><p>将导入的文件视为Less，无论文件扩展名如何。</p>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><blockquote>\n<p>Released v1.4.0</p>\n</blockquote>\n<pre><code>@import (css) &quot;foo.less&quot;;\n\n//outputs\n\n@import &quot;foo.less&quot;;\n</code></pre><p>将导入的文件视为常规CSS，无论文件扩展名如何。 这意味着import语句将保持原样。</p>\n<h3 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a>once</h3><blockquote>\n<p>Released v1.4.0</p>\n</blockquote>\n<p>@import语句的默认行为。 这意味着文件仅导入一次，并且将忽略该文件的后续导入语句。</p>\n<pre><code>@import (once) &quot;foo.less&quot;;\n@import (once) &quot;foo.less&quot;; // this statement will be ignored\n</code></pre><h3 id=\"multiple\"><a href=\"#multiple\" class=\"headerlink\" title=\"multiple\"></a>multiple</h3><blockquote>\n<p>Released v1.4.0</p>\n</blockquote>\n<p>使用@import（multiple）可以导入多个相同名称的文件，这是和once相反的行为。</p>\n<pre><code>// file: foo.less\n.a {\n  color: green;\n}\n// file: main.less\n@import (multiple) &quot;foo.less&quot;;\n@import (multiple) &quot;foo.less&quot;;\n</code></pre><p>输出</p>\n<pre><code>.a {\n  color: green;\n}\n.a {\n  color: green;\n}\n</code></pre><h3 id=\"optional\"><a href=\"#optional\" class=\"headerlink\" title=\"optional\"></a>optional</h3><blockquote>\n<p>Released v2.3.0</p>\n</blockquote>\n<pre><code>@import (optional) &quot;foo.less&quot;;\n</code></pre><p>使用@import（optional）仅允许在文件存在时导入文件，在没有optional关键字时，Less会抛出FileError并在导入无法找到的文件时停止编译。</p>\n<h2 id=\"plugin插件\"><a href=\"#plugin插件\" class=\"headerlink\" title=\"@plugin插件\"></a>@plugin插件</h2><blockquote>\n<p>Released v2.5.0</p>\n</blockquote>\n<p>可以通过导入JavaScript插件以添加Less.js函数和功能</p>\n<h3 id=\"编写你的第一个插件\"><a href=\"#编写你的第一个插件\" class=\"headerlink\" title=\"编写你的第一个插件\"></a>编写你的第一个插件</h3><p>使用@plugin的方式类似于使用@import导入.less文件。</p>\n<pre><code>@plugin &quot;my-plugin&quot;;  // 字段添加.js后缀，如果不带扩展名\n</code></pre><p>由于Less插件是在Less作用域范围内评估的，因此插件定义可以非常简单，比如：</p>\n<pre><code>registerPlugin({\n    install: function(less, pluginManager, functions) {\n        functions.add(&apos;pi&apos;, function() {\n            return Math.PI;\n        });\n    }\n})\n</code></pre><p>或者你可以使用module.exports（在浏览器和Node.js中工作）。</p>\n<pre><code>module.exports = {\n    install: function(less, pluginManager, functions) {\n        functions.add(&apos;pi&apos;, function() {\n            return Math.PI;\n        });\n    }\n};\n</code></pre><blockquote>\n<p>请注意，浏览器中不支持其他Node.js库比如CommonJS的使用方式，例如require（）。 编写跨平台插件时请记住这一点。</p>\n</blockquote>\n<p>你能用插件做什么？ 很多，但让我们从基础开始。我们将首先关注您可能放在插件中放置的内容：</p>\n<pre><code>// my-plugin.js\ninstall: function(less, pluginManager, functions) {\n    functions.add(&apos;pi&apos;, function() {\n        return Math.PI;\n    });\n}\n</code></pre><p>恭喜！ 你写了一个Less插件！您可以在样式表中这样使用它：</p>\n<pre><code>@plugin &quot;my-plugin&quot;;\n.show-me-pi {\n  value: pi();\n}\n</code></pre><p>输出：</p>\n<pre><code>.show-me-pi {\n  value: 3.141592653589793;\n}\n</code></pre><p>但是，如果您希望将其与其他值相乘或执行其他Less操作，则需要返回正确的Less节点。 否则，在样式表中的输出是纯文本。</p>\n<pre><code>functions.add(&apos;pi&apos;, function() {\n    return less.dimension(Math.PI);\n});\n</code></pre><blockquote>\n<p>注意：dimension的参数可以带单位，也可以不带单位，比如：dimension(10) 或 dimension(10,”px”)。</p>\n</blockquote>\n<p>现在您可以在运算操作中使用您的插件：</p>\n<pre><code>@plugin &quot;my-plugin&quot;;\n.show-me-pi {\n  value: pi() * 2;\n}\n</code></pre><p>您可能已经注意到插件文件有可用的全局变量，即函数注册表（函数对象）和较少的对象。 这些都是为了方便起见。</p>\n<h3 id=\"插件作用域范围\"><a href=\"#插件作用域范围\" class=\"headerlink\" title=\"插件作用域范围\"></a>插件作用域范围</h3><p>在使用@plugin添加函数的时候，是遵循Less作用域规则的。 这对于想要在不引入命名冲突的情况下添加函数的Less库作者来说非常有用。<br>例如，假设您有两个来自两个第三方库的插件，这两个插件都有一个名为“foo”的函数。</p>\n<pre><code>// lib1.js\n// ...\n    functions.add(&apos;foo&apos;, function() {\n        return &quot;foo&quot;;\n    });\n// ...\n\n// lib2.js\n// ...\n    functions.add(&apos;foo&apos;, function() {\n        return &quot;bar&quot;;\n    });\n// ...\n</code></pre><p>没关系！ 您可以选择哪个库的功能创建哪个输出。</p>\n<pre><code>.el-1 {\n    @plugin &quot;lib1&quot;;\n    value: foo();\n}\n.el-2 {\n    @plugin &quot;lib2&quot;;\n    value: foo();\n}\n</code></pre><p>输出：</p>\n<pre><code>.el-1 {\n    value: foo;\n}\n.el-2 {\n    value: bar;\n}\n</code></pre><p>对于共享插件的插件作者，这意味着您还可以通过将私有函数放在特定范围内来有效地创建私有函数。 所以，如下的使用方式是错误的：</p>\n<pre><code>.el {\n    @plugin &quot;lib1&quot;;\n}\n@value: foo();\n</code></pre><p>从Less 3.0开始，函数可以返回任何类型的Node类型，并且可以在任何级别调用。<br>但是，这会在2.x中引发错误，因为在2.x中函数必须是属性或变量赋值的一部分：</p>\n<pre><code>.block {\n    color: blue;\n    my-function-rules();\n}\n</code></pre><p>在3.x中，不再是这种情况，函数可以返回At-Rules，Rulesets，任何其他Less节点，字符串和数字（后两个转换为匿名节点）。</p>\n<h3 id=\"空函数\"><a href=\"#空函数\" class=\"headerlink\" title=\"空函数\"></a>空函数</h3><p>有时您可能想要调用一个函数，但是您不需要任何输出（例如存储值以供以后使用）。 在这种情况下，您只需要从函数返回false。</p>\n<pre><code>var collection = [];\nfunctions.add(&apos;store&apos;, function(val) {\n    collection.push(val);  // imma store this for later\n    return false;\n});\n//输出\n@plugin &quot;collections&quot;;\n@var: 32;\nstore(@var);\n</code></pre><p>或者可以这么写</p>\n<pre><code>functions.add(&apos;retrieve&apos;, function(val) {\n    return less.value(collection);\n});\n//输出\n.get-my-values {\n    @plugin &quot;collections&quot;;\n    values: retrieve();\n}\n</code></pre><h3 id=\"Less-js插件对象\"><a href=\"#Less-js插件对象\" class=\"headerlink\" title=\"Less.js插件对象\"></a>Less.js插件对象</h3><p>Less.js插件应该导出具有一个或多个属性的对象。</p>\n<pre><code>{\n    /* Called immediately after the plugin is\n     * first imported, only once. */\n    install: function(less, pluginManager, functions) { },\n\n    /* Called for each instance of your @plugin. */\n    use: function(context) { },\n\n    /* Called for each instance of your @plugin,\n     * when rules are being evaluated.\n     * It&apos;s just later in the evaluation lifecycle */\n    eval: function(context) { },\n\n    /* Passes an arbitrary string to your plugin\n     * e.g. @plugin (args) &quot;file&quot;;\n     * This string is not parsed for you,\n     * so it can contain (almost) anything */\n    setOptions: function(argumentString) { },\n\n    /* Set a minimum Less compatibility string\n     * You can also use an array, as in [3, 0] */\n    minVersion: [&apos;3.0&apos;],\n\n    /* Used for lessc only, to explain\n     * options in a Terminal */\n    printUsage: function() { },\n\n}\n</code></pre><p>PluginManager为 install() function作实例化，并且提供了添加访问者，文件管理器和后处理器的方法。<br>以下是一些显示不同插件类型的示例，可分别链接查看。</p>\n<ul>\n<li><a href=\"https://github.com/less/less-plugin-clean-css\" target=\"_blank\" rel=\"external\">后处理器</a></li>\n<li><a href=\"https://github.com/less/less-plugin-inline-urls\" target=\"_blank\" rel=\"external\">访问者</a></li>\n<li><a href=\"https://github.com/less/less-plugin-npm-import\" target=\"_blank\" rel=\"external\">文件管理器</a></li>\n</ul>\n<h3 id=\"预加载插件\"><a href=\"#预加载插件\" class=\"headerlink\" title=\"预加载插件\"></a>预加载插件</h3><p>虽然@plugin调用适用于大多数情况，但有时您可能希望在解析开始之前加载插件。<br>请参阅：“使用Less.js”部分中的预加载插件，了解如何执行此操作。</p>\n<h1 id=\"Maps-新\"><a href=\"#Maps-新\" class=\"headerlink\" title=\"Maps(新)\"></a>Maps(新)</h1><blockquote>\n<p>Released v3.5.0-beta.4</p>\n</blockquote>\n<p>使用规则集和mixins作为值的映射<br>通过将命名空间与[]语法相结合，您可以将规则集/ mixin转换为映射，比如：</p>\n<pre><code>@sizes: {\n  mobile: 320px;\n  tablet: 768px;\n  desktop: 1024px;\n}\n\n.navbar {\n  display: block;\n\n  @media (min-width: @sizes[tablet]) {\n    display: inline-block;\n  }\n}\n</code></pre><p>输出：</p>\n<pre><code>.navbar {\n  display: block;\n}\n@media (min-width: 768px) {\n  .navbar {\n    display: inline-block;\n  }\n}\n</code></pre><p>由于命名空间和重载混合的能力，Mixins比Map更具通用性。</p>\n<pre><code>#library() {\n  .colors() {\n    primary: green;\n    secondary: blue;\n  }\n}\n\n#library() {\n  .colors() { primary: grey; }\n}\n\n.button {\n  color: #library.colors[primary];\n  border-color: #library.colors[secondary];\n}\n</code></pre><p>输出：</p>\n<pre><code>.button {\n  color: grey;\n  border-color: blue;\n}\n</code></pre><p>此外，你还可以通过别名访问mixins，那是个更容易的方式。</p>\n<pre><code>.button {\n  @colors: #library.colors();\n  color: @colors[primary];\n  border-color: @colors[secondary];\n}\n</code></pre><p>请注意，当存在多个嵌套的规则集的时候，可以使用多个[]来进行查找访问，如下所示：</p>\n<pre><code>@config: {\n  @options: {\n    library-on: true\n  }\n}\n\n&amp; when (@config[@options][library-on] = true) {\n  .produce-ruleset {\n    prop: val;\n  }\n}\n</code></pre><p>通过这种方式，规则集和变量调用可以模拟一种类型的“命名空间”，类似于mixins</p>\n<p>至于是否将分配给变量的mixins或规则集用作映射，这取决于您。 您可能希望通过重新声明分配给rulset的变量来替换整个Map来使用； 或者您可能想要“合并”单个键/值对，在这种情况下，把mixins作为Map可能更合适。</p>\n<h2 id=\"在-中使用变量的变量\"><a href=\"#在-中使用变量的变量\" class=\"headerlink\" title=\"在[]中使用变量的变量\"></a>在[]中使用变量的变量</h2><p>有一件重要的事情需要注意，查找表达式[@lookup]中的@lookup是查找的主键，一般只接受常量，不能使用变量来访问，但是可以使用变量的变量来作为索引键值<br>例子：</p>\n<pre><code>.foods() {\n  @dessert: ice cream;\n}\n\n@key-to-lookup: dessert;\n\n.lunch {\n  treat: .foods[@@key-to-lookup];\n}\n</code></pre><p>编译输出:</p>\n<pre><code>.lunch {\n  treat: ice cream;\n}\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"import导入\"><a href=\"#import导入\" class=\"headerlink\" title=\"@import导入\"></a>@import导入</h1><p>在标准CSS中，@import语句必须在所有其他类型的规则之前声明，但Less并不关心你放置@import语句的位置</p>\n<pre><code>.foo {\n  background: #900;\n}\n@import &quot;this-is-valid.less&quot;;\n</code></pre>","more":"<h2 id=\"识别文件扩展名\"><a href=\"#识别文件扩展名\" class=\"headerlink\" title=\"识别文件扩展名\"></a>识别文件扩展名</h2><p>根据文件扩展名的不同，Less在处理@import导入的时候的方式也有所不同</p>\n<ul>\n<li>如果文件具有.css扩展名，则将其视为CSS文件，并将@import语句保留为原样（请参阅下面的内联选项）。</li>\n<li>如果它有任何其他扩展名，它将被视为less文件并导入。</li>\n<li><p>如果它没有扩展名，则会附加.less，它将作为导入的Less文件包含在内。<br>例子：</p>\n<p>  @import “foo”;      // foo.less is imported<br>  @import “foo.less”; // foo.less is imported<br>  @import “foo.php”;  // foo.php imported as a Less file<br>  @import “foo.css”;  // statement left in place, as-is</p>\n</li>\n</ul>\n<p>下面要讲到的选项可以覆盖此行为。</p>\n<h2 id=\"导入选项\"><a href=\"#导入选项\" class=\"headerlink\" title=\"导入选项\"></a>导入选项</h2><p>Less为CSS的@import提供了几个扩展，比使用外部文件具有更多的灵活性。<br>语法：</p>\n<pre><code>@import（keyword）“filename”;\n</code></pre><p>以下是支持的导入选项：</p>\n<ul>\n<li>reference: 使用Less文件但不输出</li>\n<li>inline: 在输出中包含源文件但不处理它</li>\n<li>less: 无论文件扩展名是什么，都将文件视为Less文件</li>\n<li>css: 无论文件扩展名是什么，都将文件视为CSS文件</li>\n<li>once: 只包含文件一次（默认行为）</li>\n<li>multiple: 多次包含该文件</li>\n<li>optional: 在找不到文件时继续编译</li>\n</ul>\n<p>每个@import允许使用多个关键字，关键字之间使用逗号分隔，比如：</p>\n<pre><code>@import (optional, reference) &quot;foo.less&quot;;\n</code></pre><h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><blockquote>\n<p>Released v1.5.0</p>\n</blockquote>\n<pre><code>@import（reference）“foo.less”;\n</code></pre><p>导入外部文件，但不将引入的样式添加到已编译的输出，只是引用它们。</p>\n<p>想象一下，在导入的文件中，reference使用一个引用来标记每一个at-rule和selector，就像正常导入一样。但是当生成CSS时，却不输出“reference”选择器，甚至是任何仅仅包含引用选择器的媒体查询。<br>除非参考样式被用作mixins或extend，否则引用样式不会显示在生成的CSS中。根据使用的方法（mixin或extend）不同，会产生不同的结果。</p>\n<ul>\n<li>extend：当使用扩展选择器时，只有新选择器被标记为未引用，并且它将被引入到@import引用语句的位置。</li>\n<li>mixins：当参考样式被用作隐式mixin时，其规则是混合的，标记为“非引用”，并且正常显示在引用的位置。</li>\n</ul>\n<p>例子：<br>允许您通过执行以下操作从Bootstrap等库中仅提取特定的，有针对性的样式：</p>\n<pre><code>.navbar：extend（.navbar all）{}\n</code></pre><p>并且您将仅从Bootstrap中提取.navbar相关样式。</p>\n<h3 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h3><blockquote>\n<p>Released v1.5.0</p>\n</blockquote>\n<pre><code>@import (inline) &quot;not-less-compatible.css&quot;;\n</code></pre><p>在输出中包含源文件但不处理它<br>当CSS文件可能不兼容时，您将使用此选项; 这是因为虽然Less支持大多数已知标准CSS，但它不支持某些注释，并且不支持所有已知的CSS补丁，它是不修改CSS的。</p>\n<p>您可以使用它将文件包含在输出中，以便所有CSS都在一个文件中。</p>\n<h3 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h3><blockquote>\n<p>Released v1.4.0</p>\n</blockquote>\n<pre><code>@import (less) &quot;foo.css&quot;;\n</code></pre><p>将导入的文件视为Less，无论文件扩展名如何。</p>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><blockquote>\n<p>Released v1.4.0</p>\n</blockquote>\n<pre><code>@import (css) &quot;foo.less&quot;;\n\n//outputs\n\n@import &quot;foo.less&quot;;\n</code></pre><p>将导入的文件视为常规CSS，无论文件扩展名如何。 这意味着import语句将保持原样。</p>\n<h3 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a>once</h3><blockquote>\n<p>Released v1.4.0</p>\n</blockquote>\n<p>@import语句的默认行为。 这意味着文件仅导入一次，并且将忽略该文件的后续导入语句。</p>\n<pre><code>@import (once) &quot;foo.less&quot;;\n@import (once) &quot;foo.less&quot;; // this statement will be ignored\n</code></pre><h3 id=\"multiple\"><a href=\"#multiple\" class=\"headerlink\" title=\"multiple\"></a>multiple</h3><blockquote>\n<p>Released v1.4.0</p>\n</blockquote>\n<p>使用@import（multiple）可以导入多个相同名称的文件，这是和once相反的行为。</p>\n<pre><code>// file: foo.less\n.a {\n  color: green;\n}\n// file: main.less\n@import (multiple) &quot;foo.less&quot;;\n@import (multiple) &quot;foo.less&quot;;\n</code></pre><p>输出</p>\n<pre><code>.a {\n  color: green;\n}\n.a {\n  color: green;\n}\n</code></pre><h3 id=\"optional\"><a href=\"#optional\" class=\"headerlink\" title=\"optional\"></a>optional</h3><blockquote>\n<p>Released v2.3.0</p>\n</blockquote>\n<pre><code>@import (optional) &quot;foo.less&quot;;\n</code></pre><p>使用@import（optional）仅允许在文件存在时导入文件，在没有optional关键字时，Less会抛出FileError并在导入无法找到的文件时停止编译。</p>\n<h2 id=\"plugin插件\"><a href=\"#plugin插件\" class=\"headerlink\" title=\"@plugin插件\"></a>@plugin插件</h2><blockquote>\n<p>Released v2.5.0</p>\n</blockquote>\n<p>可以通过导入JavaScript插件以添加Less.js函数和功能</p>\n<h3 id=\"编写你的第一个插件\"><a href=\"#编写你的第一个插件\" class=\"headerlink\" title=\"编写你的第一个插件\"></a>编写你的第一个插件</h3><p>使用@plugin的方式类似于使用@import导入.less文件。</p>\n<pre><code>@plugin &quot;my-plugin&quot;;  // 字段添加.js后缀，如果不带扩展名\n</code></pre><p>由于Less插件是在Less作用域范围内评估的，因此插件定义可以非常简单，比如：</p>\n<pre><code>registerPlugin({\n    install: function(less, pluginManager, functions) {\n        functions.add(&apos;pi&apos;, function() {\n            return Math.PI;\n        });\n    }\n})\n</code></pre><p>或者你可以使用module.exports（在浏览器和Node.js中工作）。</p>\n<pre><code>module.exports = {\n    install: function(less, pluginManager, functions) {\n        functions.add(&apos;pi&apos;, function() {\n            return Math.PI;\n        });\n    }\n};\n</code></pre><blockquote>\n<p>请注意，浏览器中不支持其他Node.js库比如CommonJS的使用方式，例如require（）。 编写跨平台插件时请记住这一点。</p>\n</blockquote>\n<p>你能用插件做什么？ 很多，但让我们从基础开始。我们将首先关注您可能放在插件中放置的内容：</p>\n<pre><code>// my-plugin.js\ninstall: function(less, pluginManager, functions) {\n    functions.add(&apos;pi&apos;, function() {\n        return Math.PI;\n    });\n}\n</code></pre><p>恭喜！ 你写了一个Less插件！您可以在样式表中这样使用它：</p>\n<pre><code>@plugin &quot;my-plugin&quot;;\n.show-me-pi {\n  value: pi();\n}\n</code></pre><p>输出：</p>\n<pre><code>.show-me-pi {\n  value: 3.141592653589793;\n}\n</code></pre><p>但是，如果您希望将其与其他值相乘或执行其他Less操作，则需要返回正确的Less节点。 否则，在样式表中的输出是纯文本。</p>\n<pre><code>functions.add(&apos;pi&apos;, function() {\n    return less.dimension(Math.PI);\n});\n</code></pre><blockquote>\n<p>注意：dimension的参数可以带单位，也可以不带单位，比如：dimension(10) 或 dimension(10,”px”)。</p>\n</blockquote>\n<p>现在您可以在运算操作中使用您的插件：</p>\n<pre><code>@plugin &quot;my-plugin&quot;;\n.show-me-pi {\n  value: pi() * 2;\n}\n</code></pre><p>您可能已经注意到插件文件有可用的全局变量，即函数注册表（函数对象）和较少的对象。 这些都是为了方便起见。</p>\n<h3 id=\"插件作用域范围\"><a href=\"#插件作用域范围\" class=\"headerlink\" title=\"插件作用域范围\"></a>插件作用域范围</h3><p>在使用@plugin添加函数的时候，是遵循Less作用域规则的。 这对于想要在不引入命名冲突的情况下添加函数的Less库作者来说非常有用。<br>例如，假设您有两个来自两个第三方库的插件，这两个插件都有一个名为“foo”的函数。</p>\n<pre><code>// lib1.js\n// ...\n    functions.add(&apos;foo&apos;, function() {\n        return &quot;foo&quot;;\n    });\n// ...\n\n// lib2.js\n// ...\n    functions.add(&apos;foo&apos;, function() {\n        return &quot;bar&quot;;\n    });\n// ...\n</code></pre><p>没关系！ 您可以选择哪个库的功能创建哪个输出。</p>\n<pre><code>.el-1 {\n    @plugin &quot;lib1&quot;;\n    value: foo();\n}\n.el-2 {\n    @plugin &quot;lib2&quot;;\n    value: foo();\n}\n</code></pre><p>输出：</p>\n<pre><code>.el-1 {\n    value: foo;\n}\n.el-2 {\n    value: bar;\n}\n</code></pre><p>对于共享插件的插件作者，这意味着您还可以通过将私有函数放在特定范围内来有效地创建私有函数。 所以，如下的使用方式是错误的：</p>\n<pre><code>.el {\n    @plugin &quot;lib1&quot;;\n}\n@value: foo();\n</code></pre><p>从Less 3.0开始，函数可以返回任何类型的Node类型，并且可以在任何级别调用。<br>但是，这会在2.x中引发错误，因为在2.x中函数必须是属性或变量赋值的一部分：</p>\n<pre><code>.block {\n    color: blue;\n    my-function-rules();\n}\n</code></pre><p>在3.x中，不再是这种情况，函数可以返回At-Rules，Rulesets，任何其他Less节点，字符串和数字（后两个转换为匿名节点）。</p>\n<h3 id=\"空函数\"><a href=\"#空函数\" class=\"headerlink\" title=\"空函数\"></a>空函数</h3><p>有时您可能想要调用一个函数，但是您不需要任何输出（例如存储值以供以后使用）。 在这种情况下，您只需要从函数返回false。</p>\n<pre><code>var collection = [];\nfunctions.add(&apos;store&apos;, function(val) {\n    collection.push(val);  // imma store this for later\n    return false;\n});\n//输出\n@plugin &quot;collections&quot;;\n@var: 32;\nstore(@var);\n</code></pre><p>或者可以这么写</p>\n<pre><code>functions.add(&apos;retrieve&apos;, function(val) {\n    return less.value(collection);\n});\n//输出\n.get-my-values {\n    @plugin &quot;collections&quot;;\n    values: retrieve();\n}\n</code></pre><h3 id=\"Less-js插件对象\"><a href=\"#Less-js插件对象\" class=\"headerlink\" title=\"Less.js插件对象\"></a>Less.js插件对象</h3><p>Less.js插件应该导出具有一个或多个属性的对象。</p>\n<pre><code>{\n    /* Called immediately after the plugin is\n     * first imported, only once. */\n    install: function(less, pluginManager, functions) { },\n\n    /* Called for each instance of your @plugin. */\n    use: function(context) { },\n\n    /* Called for each instance of your @plugin,\n     * when rules are being evaluated.\n     * It&apos;s just later in the evaluation lifecycle */\n    eval: function(context) { },\n\n    /* Passes an arbitrary string to your plugin\n     * e.g. @plugin (args) &quot;file&quot;;\n     * This string is not parsed for you,\n     * so it can contain (almost) anything */\n    setOptions: function(argumentString) { },\n\n    /* Set a minimum Less compatibility string\n     * You can also use an array, as in [3, 0] */\n    minVersion: [&apos;3.0&apos;],\n\n    /* Used for lessc only, to explain\n     * options in a Terminal */\n    printUsage: function() { },\n\n}\n</code></pre><p>PluginManager为 install() function作实例化，并且提供了添加访问者，文件管理器和后处理器的方法。<br>以下是一些显示不同插件类型的示例，可分别链接查看。</p>\n<ul>\n<li><a href=\"https://github.com/less/less-plugin-clean-css\" target=\"_blank\" rel=\"external\">后处理器</a></li>\n<li><a href=\"https://github.com/less/less-plugin-inline-urls\" target=\"_blank\" rel=\"external\">访问者</a></li>\n<li><a href=\"https://github.com/less/less-plugin-npm-import\" target=\"_blank\" rel=\"external\">文件管理器</a></li>\n</ul>\n<h3 id=\"预加载插件\"><a href=\"#预加载插件\" class=\"headerlink\" title=\"预加载插件\"></a>预加载插件</h3><p>虽然@plugin调用适用于大多数情况，但有时您可能希望在解析开始之前加载插件。<br>请参阅：“使用Less.js”部分中的预加载插件，了解如何执行此操作。</p>\n<h1 id=\"Maps-新\"><a href=\"#Maps-新\" class=\"headerlink\" title=\"Maps(新)\"></a>Maps(新)</h1><blockquote>\n<p>Released v3.5.0-beta.4</p>\n</blockquote>\n<p>使用规则集和mixins作为值的映射<br>通过将命名空间与[]语法相结合，您可以将规则集/ mixin转换为映射，比如：</p>\n<pre><code>@sizes: {\n  mobile: 320px;\n  tablet: 768px;\n  desktop: 1024px;\n}\n\n.navbar {\n  display: block;\n\n  @media (min-width: @sizes[tablet]) {\n    display: inline-block;\n  }\n}\n</code></pre><p>输出：</p>\n<pre><code>.navbar {\n  display: block;\n}\n@media (min-width: 768px) {\n  .navbar {\n    display: inline-block;\n  }\n}\n</code></pre><p>由于命名空间和重载混合的能力，Mixins比Map更具通用性。</p>\n<pre><code>#library() {\n  .colors() {\n    primary: green;\n    secondary: blue;\n  }\n}\n\n#library() {\n  .colors() { primary: grey; }\n}\n\n.button {\n  color: #library.colors[primary];\n  border-color: #library.colors[secondary];\n}\n</code></pre><p>输出：</p>\n<pre><code>.button {\n  color: grey;\n  border-color: blue;\n}\n</code></pre><p>此外，你还可以通过别名访问mixins，那是个更容易的方式。</p>\n<pre><code>.button {\n  @colors: #library.colors();\n  color: @colors[primary];\n  border-color: @colors[secondary];\n}\n</code></pre><p>请注意，当存在多个嵌套的规则集的时候，可以使用多个[]来进行查找访问，如下所示：</p>\n<pre><code>@config: {\n  @options: {\n    library-on: true\n  }\n}\n\n&amp; when (@config[@options][library-on] = true) {\n  .produce-ruleset {\n    prop: val;\n  }\n}\n</code></pre><p>通过这种方式，规则集和变量调用可以模拟一种类型的“命名空间”，类似于mixins</p>\n<p>至于是否将分配给变量的mixins或规则集用作映射，这取决于您。 您可能希望通过重新声明分配给rulset的变量来替换整个Map来使用； 或者您可能想要“合并”单个键/值对，在这种情况下，把mixins作为Map可能更合适。</p>\n<h2 id=\"在-中使用变量的变量\"><a href=\"#在-中使用变量的变量\" class=\"headerlink\" title=\"在[]中使用变量的变量\"></a>在[]中使用变量的变量</h2><p>有一件重要的事情需要注意，查找表达式[@lookup]中的@lookup是查找的主键，一般只接受常量，不能使用变量来访问，但是可以使用变量的变量来作为索引键值<br>例子：</p>\n<pre><code>.foods() {\n  @dessert: ice cream;\n}\n\n@key-to-lookup: dessert;\n\n.lunch {\n  treat: .foods[@@key-to-lookup];\n}\n</code></pre><p>编译输出:</p>\n<pre><code>.lunch {\n  treat: ice cream;\n}\n</code></pre>"},{"title":"JQuery-自写插件集","date":"2018-09-12T15:04:55.000Z","comments":1,"toc":true,"_content":"\n在熟悉了jquery和插件写法之后，作者将之前使用原生js和jquery写的一些组件，封装成插件\n<!--more-->\n\n# switch开关\n\n[插件代码](https://runjs.cn/code/0eao8cw2)\n\n使用方式：\n\n    <div id=\"switch1\"></div>\n    <div id=\"switch2\"></div>\n\n    $(function() {\n        $(\"#switch1\").bootSwitch({titles: [],\n                                defalutCheck: true});\n        $(\"#switch2\").bootSwitch({titles:['开','关'],\n                                defalutCheck: true});\n\n        $(\".tips button\").click(function() {\n        $(\".tips span\").text($(\"#switch1\").bootSwitch('getChecked'));\n        });\n\n        //获取开关状态\n        $(\"#switch1\").bootSwitch('getChecked');\n        //添加自定义事件\n        $(\"#switch1\").on(\"change.bc.switch\",function() {\n            console.log('switch1 change');\n        });\n    });\n\n效果：[switch开关](https://sandbox.runjs.cn/show/0eao8cw2)\n\n# select下拉选择\n\n[插件代码](https://runjs.cn/code/3gpjwzds)\n\n使用方式：\n\n    <div id=\"select-normal\"></div>   //正常下拉选择\n    <div id=\"select-small\"></div>    //正常下拉选择--小尺寸\n    <div id=\"select-disable\"></div>  //禁止下拉选择\n\n    $(function() {\n        var options1 = [\n            {value: 'paletxUI',name: 'paletxUI'},\n            {value: 'Iaas',name: 'Iaas'},\n            {value: 'Paas',name: 'Paas'},\n            {value: 'Saas',name: 'Saas'},\n            {value: 'CMS',name: 'CMS'}\n        ];\n        $(\"#select-normal\").bootSelect({id: 'select-normal',\n                                    options: options1,\n                                    defalutChecked: '',\n                                    placeholder: '请选择'});\n        $(\"#select-small\").bootSelect({id: 'select-normal',\n                                    options: options1,\n                                    defalutChecked: '',\n                                    placeholder: '请选择',\n                                    width: 220});\n        $(\"#select-disable\").bootSelect({id: 'select-disable',\n                                    options: options1,\n                                    defalutChecked: '',\n                                    placeholder: '请选择',\n                                    disable: true});\n    });\n\n效果：[下拉选择](https://sandbox.runjs.cn/show/3gpjwzds)\n\n# multilSelect多选下拉选择\n\n[插件代码](https://runjs.cn/code/byn8l5d7)\n\n使用方式：\n\n    <div id=\"mutil-select01\"></div>    //多选下拉选择框\n    <div id=\"mutil-select02\"></div>    //禁止多选下拉选择\n    <div id=\"mutil-select03\"></div>    //带复选框的下拉选择\n    <div id=\"mutil-select04\"></div>    //带全选的下拉选择\n    <div id=\"mutil-select05\"></div>    //显示选择个数的-带复选框\n    <div id=\"mutil-select06\"></div>    //显示选择个数的-普通\n    <div id=\"mutil-small\"></div>    //多选下拉选择框-小尺寸\n    <div id=\"mutil-big\"></div>    //多选下拉选择框-大尺寸\n\n    $(function() {\n\tvar optionsss = [\n            {value: 'paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI',\n             name: 'paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI'},\n            {value: 'Paas-Paas',name: 'Paas-Paas'},\n            {value: 'Iaas-Iaas',name: 'Iaas-Iaas'},\n            {value: 'Saas-Saas',name: 'Saas-Saas'},\n            {value: 'CMS-CMS',name: 'CMS-CMS'}\n\t];\n        var defaultSelects = [\n            {value: 'Iaas-Iaas',name: 'Iaas-Iaas'},\n            {value: 'CMS-CMS',name: 'CMS-CMS'}\n\t];\n\tvar disableOptions = [\n            {value: 'CMS-CMS',name: 'CMS-CMS'}\n\t];\n\t$(\"#mutil-select01\").bootMultilSelect({options: optionsss,\t\t\t\t\t\t\t\t\t\t\t\tdefalutSelected: defaultSelects,\n                                        disable: disableOptions});\n\t$(\"#mutil-select02\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: disableOptions,\n\t\t\t\t\tdisabled:true});\n\t$(\"#mutil-select03\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: disableOptions,\n\t\t\t\t\tcheckbox:true});\n\t$(\"#mutil-select04\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: disableOptions,\n\t\t\t\t\tcheckbox:true,\n\t\t\t\t\tallcheck:true});\n\t$(\"#mutil-select05\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: [],\n\t\t\t\t\tcheckbox:true,\n\t\t\t\t\tallcheck:true,\n\t\t\t\t\tshowNum:true});\n\t$(\"#mutil-select06\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: [],\n\t\t\t\t\tshowNum:true});\n\t$(\"#mutil-small\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: [],\n\t\t\t\t\twidth: 220});\n\t$(\"#mutil-big\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: [],\n\t\t\t\t\tcheckbox:true,\n\t\t\t\t\twidth: 620});\n\n        //添加选择变更事件\n        $(\"#mutil-select01\").on(\"change.bc.multilselect\",function() {\n            console.log('multilselect change');\n        });\n        //获取已选记录\n        var selection = $(\"#mutil-select01\").bootMultilSelect('getSelection');\n    });\n\n效果：[multil多选下拉框](https://sandbox.runjs.cn/show/byn8l5d7)\n\n# transfer穿梭框\n\n[插件代码](https://runjs.cn/code/szon4uz2)\n\n使用方式：\n\n    <div id=\"myTranfer\"></div>\n\n    $(function() {\n        var sourceItems = [{value:'content01',name:'content01'},\n                            {value:'content02',name:'content02'},\n                            {value:'content03',name:'content03'},\n                            {value:'content04',name:'content04'},\n                            {value:'content05',name:'content05'},\n                            {value:'content06',name:'content06'},\n                            {value:'content07',name:'content07'},\n                            {value:'content08',name:'content08'}];\n        var targetItems = [{value:'content09',name:'content09'},\n                            {value:'content10',name:'content10'}];\n\n        $(\"#myTranfer\").bootTransfer({sourOptions: sourceItems,\n                                    targOptions: targetItems,\n                                    disableItems: [],\n                                    itemText:'项目',\n                                    sourceText:'源',\n                                    targetText:'目标'});\n\n        //获取源记录\n        $(\"#myTranfer\").bootTransfer('getSource');\n        //获取目标记录\n        $(\"#myTranfer\").bootTransfer('getTarget');\n    });\n\n效果：[transfer穿梭框](https://sandbox.runjs.cn/show/szon4uz2)\n\n# Info通知\n\n[插件代码](https://runjs.cn/code/hckrhfgi)\n\n使用方式：\n\n    <div id=\"success\"></div>\n    <div id=\"error\"></div>\n    <div id=\"warn\"></div>\n\n    $(function() {\n        var $successInfo = $(\"#success\").bootInfo({type: 'success',\n                                             title: '操作成功,2s后自动消失',\n                                             timelen: 2000});\n        var $warnInfo = $(\"#warn\").bootInfo({type: 'warn',\n                                            title: '我是警告消息!'});\n        var $errorInfo = $(\"#error\").bootInfo({type: 'error',\n                                            title: '我是错误消息!'});\n\n        //展现通知\n        $successInfo.bootInfo('show');\n        $warnInfo.bootInfo('show');\n        $errorInfo.bootInfo('show');\n        //隐藏通知\n        $warnInfo.bootInfo('hide');\n        $errorInfo.bootInfo('hide');\n    });\n\n效果：[Info通知](https://sandbox.runjs.cn/show/hckrhfgi)\n\n# Collapse折叠面板\n\n[插件代码](https://runjs.cn/code/lmfma6gm)\n\n使用方式：\n\n    <div class=\"collapseset\" id=\"collapset1\">\n        <div class=\"collapse\">\n            <header><span></span>\n            杨过</header>\n            <article>杨过，名过，字改之，是金庸武侠小说《神雕侠侣》[1]  中的主人公，前作《射雕英雄传》中杨康与穆念慈之子，西毒欧阳锋的义子。名字为郭靖、黄蓉所取，取“有过则改之”之意。</article>\n        </div>\n        <div class=\"collapse\">\n            <header><span></span>\n            小龙女</header>\n            <article>小龙女，是金庸小说《神雕侠侣》的女主角，金庸笔下广受读者喜爱的女角之一。容貌秀美若仙、清丽绝俗。性格宽容恬淡、天真可爱。武功轻灵飘逸，于婀娜妩媚中击敌制胜。</article>\n        </div>\n        <div class=\"collapse\">\n            <header><span></span>\n            黄药师</header>\n            <article>黄药师，外号“东邪”，天下“五绝”之一，是金庸武侠小说《射雕英雄传》和《神雕侠侣》中的角色。是黄蓉之父，对其妻冯氏（小字阿衡）一往情深。。  </article>\n        </div>\n    </div>\n\n    $(function() {\n\t    $(\"#collapset1\").bootCollapse({type: 'normal'});\n\t    $(\"#collapset2\").bootCollapse({type: 'eachOne'});\n    });\n\n效果：[折叠面板](https://sandbox.runjs.cn/show/lmfma6gm)\n\n# 轮播图\n\n[插件代码](https://runjs.cn/code/tbziv3gx)\n\n使用方式：\n\n    <div id=\"carousel-fade\"></div>      //渐变\n    <div id=\"carousel-slide\"></div>     //滑动\n\t<div id=\"carousel-slide-data-api\"></div>   //使用data-api\n\n    $(function() {\n\tvar optionss = [\n            {name: 'fuzhi',\n             url: 'http://dimg04.c-ctrip.com/images/t1/vacations/203000/202469/ef1ae815bbef4a0698d4fa2ac15614e0.jpg'},\n            {name: 'qingshuisi',\n             url: 'http://upload.shunwang.com/2014/0625/1403670070972.JPG'},\n            {name: 'xiaodao',\n             url: 'http://digitalphoto.cocolog-nifty.com/photos/uncategorized/2008/08/02/dsc_d300_0006950_2.jpg'},\n            {name: 'xiaodao2',\n             url: 'http://f4.topitme.com/4/b3/e5/1118294546054e5b34o.jpg'},\n            {name: 'xiaodao3',\n             url: 'http://img17.3lian.com/d/file/201701/19/fd92ea2409b6b157c247b78ce4eda95a.jpg'}\n\t];\n\n\t$(\"#carousel-fade\").bootCarousel({options: optionss,type: 'fade'});\n\t$(\"#carousel-slide\").bootCarousel({options: optionss,type: 'slide'，\n\t                                    interval:5000,pause:true});\n    $(\"#carousel-slide-data-api\").bootCarousel({options: optionss,\n                                                type: 'fade',\n                                                dataApi:true});\n\n    //手动切换项目\n    $(\"#carousel-fade\").bootCarousel('prev');\n    $(\"#carousel-fade\").bootCarousel('next');\n    $(\"#carousel-fade\").bootCarousel(Num);\n\n    //手动启停自动循环播放\n    $(\"#carousel-slide\").bootCarousel('cycle'); //启动\n    $(\"#carousel-slide\").bootCarousel('pause'); //停止\n\n    //自定义事件\n    $(\"#carousel-slide\").on(\"change.bc.carousel\",function() {\n        count++;\n    });\n    $(\"#carousel-slide\").on(\"changed.bc.carousel\",function() {\n        count++;\n    });\n\n效果：[轮播图](https://sandbox.runjs.cn/show/tbziv3gx)\n\n# dropdown下拉菜单\n\n[插件代码](https://runjs.cn/code/j5y0shd5)\n\n使用方式：\n\n    <div class=\"dropdown\" id=\"dropdown1\">\n        <button class=\"dropbtn dropdown-toggle\">下拉菜单\n            <span class=\"caret\"></span>\n        </button>\n        <ul class=\"dropdown-content menu-width\">\n            <li class=\"dropdown-item\">\n            <a tabindex=\"-1\" href=\"javascript:void(0);\">新浪</a>\n            </li>\n            <li class=\"dropdown-item\">\n            <a tabindex=\"-1\" href=\"javascript:void(0);\">搜狐</a>\n            </li>\n            <li  class=\"divider\"></li>\n            <li class=\"dropdown-item\">\n            <a tabindex=\"-1\" href=\"javascript:void(0);\">小米</a>\n            </li>\n        </ul>\n    </div>\n\n    $(function() {\n\t$(\"#dropdown1\").bootDropdown();\n\t$(\"#dropdown2\").bootDropdown({place:'right'});\n\t$(\"#dropdown3\").bootDropdown({place:'up'});\n\t$(\"#dropdown4\").bootDropdown({type: 'click',place:'left'});\n\t$(\"#dropdown5\").bootDropdown({type: 'hover',place:'down'});\n\t$(\"#dropdown6\").bootDropdown({type: 'hover',place:'right'});\n\t$(\"#dropdown7\").bootDropdown({type: 'hover',place:'up'});\n\t$(\"#dropdown8\").bootDropdown({type: 'hover',place:'left'});\n\n       //手动切换菜单\n\t$(\"#dropdown1\").bootDropdown('toggle');\n    });\n\n效果：[dropdown下拉菜单](https://sandbox.runjs.cn/show/j5y0shd5)\n\n# TAB选项卡\n\n[插件代码](https://runjs.cn/code/0gamemrt)\n\n使用方式：\n\n    <div class=\"nav-tabs\" id=\"tab1\">\n        <ul class=\"tab-bars\">\n            <li  class=\"disabled\" name=\"html\">html</li>\n            <li name=\"css\">css</li>\n            <li name=\"dom\">dom</li>\n            <li name=\"javascript\">javascript</li>\n        </ul>\n        <div class=\"tab-content\" >\n            <div name=\"html\">Html</div>\n            <div name=\"css\">Css</div>\n            <div name=\"dom\">Dom</div>\n            <div name=\"javascript\">Javascript</div>\n        </div>\n    </div>\n\n    $(function() {\n        $(\"#tab1\").bootTab();\n        $(\"#tab2\").bootTab({defaultActive: 0});\n        $(\"#tab3\").bootTab({defaultActive: ‘css’});\n\n        //手动激活选项卡\n        $(\"#tab3\").bootTab(0);\n        $(\"#tab3\").bootTab('javascript');\n    });\n\n效果：[TAB选项卡](https://sandbox.runjs.cn/show/0gamemrt)\n\n\n\n\n","source":"_posts/2018-08-02-jq-plugins-dev.md","raw":"---\ntitle: JQuery-自写插件集\ndate: 2018-09-12 23:04:55\ntags: Jquery\ncategories: 前端\ncomments: true\ntoc: true\n---\n\n在熟悉了jquery和插件写法之后，作者将之前使用原生js和jquery写的一些组件，封装成插件\n<!--more-->\n\n# switch开关\n\n[插件代码](https://runjs.cn/code/0eao8cw2)\n\n使用方式：\n\n    <div id=\"switch1\"></div>\n    <div id=\"switch2\"></div>\n\n    $(function() {\n        $(\"#switch1\").bootSwitch({titles: [],\n                                defalutCheck: true});\n        $(\"#switch2\").bootSwitch({titles:['开','关'],\n                                defalutCheck: true});\n\n        $(\".tips button\").click(function() {\n        $(\".tips span\").text($(\"#switch1\").bootSwitch('getChecked'));\n        });\n\n        //获取开关状态\n        $(\"#switch1\").bootSwitch('getChecked');\n        //添加自定义事件\n        $(\"#switch1\").on(\"change.bc.switch\",function() {\n            console.log('switch1 change');\n        });\n    });\n\n效果：[switch开关](https://sandbox.runjs.cn/show/0eao8cw2)\n\n# select下拉选择\n\n[插件代码](https://runjs.cn/code/3gpjwzds)\n\n使用方式：\n\n    <div id=\"select-normal\"></div>   //正常下拉选择\n    <div id=\"select-small\"></div>    //正常下拉选择--小尺寸\n    <div id=\"select-disable\"></div>  //禁止下拉选择\n\n    $(function() {\n        var options1 = [\n            {value: 'paletxUI',name: 'paletxUI'},\n            {value: 'Iaas',name: 'Iaas'},\n            {value: 'Paas',name: 'Paas'},\n            {value: 'Saas',name: 'Saas'},\n            {value: 'CMS',name: 'CMS'}\n        ];\n        $(\"#select-normal\").bootSelect({id: 'select-normal',\n                                    options: options1,\n                                    defalutChecked: '',\n                                    placeholder: '请选择'});\n        $(\"#select-small\").bootSelect({id: 'select-normal',\n                                    options: options1,\n                                    defalutChecked: '',\n                                    placeholder: '请选择',\n                                    width: 220});\n        $(\"#select-disable\").bootSelect({id: 'select-disable',\n                                    options: options1,\n                                    defalutChecked: '',\n                                    placeholder: '请选择',\n                                    disable: true});\n    });\n\n效果：[下拉选择](https://sandbox.runjs.cn/show/3gpjwzds)\n\n# multilSelect多选下拉选择\n\n[插件代码](https://runjs.cn/code/byn8l5d7)\n\n使用方式：\n\n    <div id=\"mutil-select01\"></div>    //多选下拉选择框\n    <div id=\"mutil-select02\"></div>    //禁止多选下拉选择\n    <div id=\"mutil-select03\"></div>    //带复选框的下拉选择\n    <div id=\"mutil-select04\"></div>    //带全选的下拉选择\n    <div id=\"mutil-select05\"></div>    //显示选择个数的-带复选框\n    <div id=\"mutil-select06\"></div>    //显示选择个数的-普通\n    <div id=\"mutil-small\"></div>    //多选下拉选择框-小尺寸\n    <div id=\"mutil-big\"></div>    //多选下拉选择框-大尺寸\n\n    $(function() {\n\tvar optionsss = [\n            {value: 'paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI',\n             name: 'paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI'},\n            {value: 'Paas-Paas',name: 'Paas-Paas'},\n            {value: 'Iaas-Iaas',name: 'Iaas-Iaas'},\n            {value: 'Saas-Saas',name: 'Saas-Saas'},\n            {value: 'CMS-CMS',name: 'CMS-CMS'}\n\t];\n        var defaultSelects = [\n            {value: 'Iaas-Iaas',name: 'Iaas-Iaas'},\n            {value: 'CMS-CMS',name: 'CMS-CMS'}\n\t];\n\tvar disableOptions = [\n            {value: 'CMS-CMS',name: 'CMS-CMS'}\n\t];\n\t$(\"#mutil-select01\").bootMultilSelect({options: optionsss,\t\t\t\t\t\t\t\t\t\t\t\tdefalutSelected: defaultSelects,\n                                        disable: disableOptions});\n\t$(\"#mutil-select02\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: disableOptions,\n\t\t\t\t\tdisabled:true});\n\t$(\"#mutil-select03\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: disableOptions,\n\t\t\t\t\tcheckbox:true});\n\t$(\"#mutil-select04\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: disableOptions,\n\t\t\t\t\tcheckbox:true,\n\t\t\t\t\tallcheck:true});\n\t$(\"#mutil-select05\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: [],\n\t\t\t\t\tcheckbox:true,\n\t\t\t\t\tallcheck:true,\n\t\t\t\t\tshowNum:true});\n\t$(\"#mutil-select06\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: [],\n\t\t\t\t\tshowNum:true});\n\t$(\"#mutil-small\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: [],\n\t\t\t\t\twidth: 220});\n\t$(\"#mutil-big\").bootMultilSelect({options: optionsss,\n\t\t\t\t\tdefalutSelected: defaultSelects,\n\t\t\t\t\tdisable: [],\n\t\t\t\t\tcheckbox:true,\n\t\t\t\t\twidth: 620});\n\n        //添加选择变更事件\n        $(\"#mutil-select01\").on(\"change.bc.multilselect\",function() {\n            console.log('multilselect change');\n        });\n        //获取已选记录\n        var selection = $(\"#mutil-select01\").bootMultilSelect('getSelection');\n    });\n\n效果：[multil多选下拉框](https://sandbox.runjs.cn/show/byn8l5d7)\n\n# transfer穿梭框\n\n[插件代码](https://runjs.cn/code/szon4uz2)\n\n使用方式：\n\n    <div id=\"myTranfer\"></div>\n\n    $(function() {\n        var sourceItems = [{value:'content01',name:'content01'},\n                            {value:'content02',name:'content02'},\n                            {value:'content03',name:'content03'},\n                            {value:'content04',name:'content04'},\n                            {value:'content05',name:'content05'},\n                            {value:'content06',name:'content06'},\n                            {value:'content07',name:'content07'},\n                            {value:'content08',name:'content08'}];\n        var targetItems = [{value:'content09',name:'content09'},\n                            {value:'content10',name:'content10'}];\n\n        $(\"#myTranfer\").bootTransfer({sourOptions: sourceItems,\n                                    targOptions: targetItems,\n                                    disableItems: [],\n                                    itemText:'项目',\n                                    sourceText:'源',\n                                    targetText:'目标'});\n\n        //获取源记录\n        $(\"#myTranfer\").bootTransfer('getSource');\n        //获取目标记录\n        $(\"#myTranfer\").bootTransfer('getTarget');\n    });\n\n效果：[transfer穿梭框](https://sandbox.runjs.cn/show/szon4uz2)\n\n# Info通知\n\n[插件代码](https://runjs.cn/code/hckrhfgi)\n\n使用方式：\n\n    <div id=\"success\"></div>\n    <div id=\"error\"></div>\n    <div id=\"warn\"></div>\n\n    $(function() {\n        var $successInfo = $(\"#success\").bootInfo({type: 'success',\n                                             title: '操作成功,2s后自动消失',\n                                             timelen: 2000});\n        var $warnInfo = $(\"#warn\").bootInfo({type: 'warn',\n                                            title: '我是警告消息!'});\n        var $errorInfo = $(\"#error\").bootInfo({type: 'error',\n                                            title: '我是错误消息!'});\n\n        //展现通知\n        $successInfo.bootInfo('show');\n        $warnInfo.bootInfo('show');\n        $errorInfo.bootInfo('show');\n        //隐藏通知\n        $warnInfo.bootInfo('hide');\n        $errorInfo.bootInfo('hide');\n    });\n\n效果：[Info通知](https://sandbox.runjs.cn/show/hckrhfgi)\n\n# Collapse折叠面板\n\n[插件代码](https://runjs.cn/code/lmfma6gm)\n\n使用方式：\n\n    <div class=\"collapseset\" id=\"collapset1\">\n        <div class=\"collapse\">\n            <header><span></span>\n            杨过</header>\n            <article>杨过，名过，字改之，是金庸武侠小说《神雕侠侣》[1]  中的主人公，前作《射雕英雄传》中杨康与穆念慈之子，西毒欧阳锋的义子。名字为郭靖、黄蓉所取，取“有过则改之”之意。</article>\n        </div>\n        <div class=\"collapse\">\n            <header><span></span>\n            小龙女</header>\n            <article>小龙女，是金庸小说《神雕侠侣》的女主角，金庸笔下广受读者喜爱的女角之一。容貌秀美若仙、清丽绝俗。性格宽容恬淡、天真可爱。武功轻灵飘逸，于婀娜妩媚中击敌制胜。</article>\n        </div>\n        <div class=\"collapse\">\n            <header><span></span>\n            黄药师</header>\n            <article>黄药师，外号“东邪”，天下“五绝”之一，是金庸武侠小说《射雕英雄传》和《神雕侠侣》中的角色。是黄蓉之父，对其妻冯氏（小字阿衡）一往情深。。  </article>\n        </div>\n    </div>\n\n    $(function() {\n\t    $(\"#collapset1\").bootCollapse({type: 'normal'});\n\t    $(\"#collapset2\").bootCollapse({type: 'eachOne'});\n    });\n\n效果：[折叠面板](https://sandbox.runjs.cn/show/lmfma6gm)\n\n# 轮播图\n\n[插件代码](https://runjs.cn/code/tbziv3gx)\n\n使用方式：\n\n    <div id=\"carousel-fade\"></div>      //渐变\n    <div id=\"carousel-slide\"></div>     //滑动\n\t<div id=\"carousel-slide-data-api\"></div>   //使用data-api\n\n    $(function() {\n\tvar optionss = [\n            {name: 'fuzhi',\n             url: 'http://dimg04.c-ctrip.com/images/t1/vacations/203000/202469/ef1ae815bbef4a0698d4fa2ac15614e0.jpg'},\n            {name: 'qingshuisi',\n             url: 'http://upload.shunwang.com/2014/0625/1403670070972.JPG'},\n            {name: 'xiaodao',\n             url: 'http://digitalphoto.cocolog-nifty.com/photos/uncategorized/2008/08/02/dsc_d300_0006950_2.jpg'},\n            {name: 'xiaodao2',\n             url: 'http://f4.topitme.com/4/b3/e5/1118294546054e5b34o.jpg'},\n            {name: 'xiaodao3',\n             url: 'http://img17.3lian.com/d/file/201701/19/fd92ea2409b6b157c247b78ce4eda95a.jpg'}\n\t];\n\n\t$(\"#carousel-fade\").bootCarousel({options: optionss,type: 'fade'});\n\t$(\"#carousel-slide\").bootCarousel({options: optionss,type: 'slide'，\n\t                                    interval:5000,pause:true});\n    $(\"#carousel-slide-data-api\").bootCarousel({options: optionss,\n                                                type: 'fade',\n                                                dataApi:true});\n\n    //手动切换项目\n    $(\"#carousel-fade\").bootCarousel('prev');\n    $(\"#carousel-fade\").bootCarousel('next');\n    $(\"#carousel-fade\").bootCarousel(Num);\n\n    //手动启停自动循环播放\n    $(\"#carousel-slide\").bootCarousel('cycle'); //启动\n    $(\"#carousel-slide\").bootCarousel('pause'); //停止\n\n    //自定义事件\n    $(\"#carousel-slide\").on(\"change.bc.carousel\",function() {\n        count++;\n    });\n    $(\"#carousel-slide\").on(\"changed.bc.carousel\",function() {\n        count++;\n    });\n\n效果：[轮播图](https://sandbox.runjs.cn/show/tbziv3gx)\n\n# dropdown下拉菜单\n\n[插件代码](https://runjs.cn/code/j5y0shd5)\n\n使用方式：\n\n    <div class=\"dropdown\" id=\"dropdown1\">\n        <button class=\"dropbtn dropdown-toggle\">下拉菜单\n            <span class=\"caret\"></span>\n        </button>\n        <ul class=\"dropdown-content menu-width\">\n            <li class=\"dropdown-item\">\n            <a tabindex=\"-1\" href=\"javascript:void(0);\">新浪</a>\n            </li>\n            <li class=\"dropdown-item\">\n            <a tabindex=\"-1\" href=\"javascript:void(0);\">搜狐</a>\n            </li>\n            <li  class=\"divider\"></li>\n            <li class=\"dropdown-item\">\n            <a tabindex=\"-1\" href=\"javascript:void(0);\">小米</a>\n            </li>\n        </ul>\n    </div>\n\n    $(function() {\n\t$(\"#dropdown1\").bootDropdown();\n\t$(\"#dropdown2\").bootDropdown({place:'right'});\n\t$(\"#dropdown3\").bootDropdown({place:'up'});\n\t$(\"#dropdown4\").bootDropdown({type: 'click',place:'left'});\n\t$(\"#dropdown5\").bootDropdown({type: 'hover',place:'down'});\n\t$(\"#dropdown6\").bootDropdown({type: 'hover',place:'right'});\n\t$(\"#dropdown7\").bootDropdown({type: 'hover',place:'up'});\n\t$(\"#dropdown8\").bootDropdown({type: 'hover',place:'left'});\n\n       //手动切换菜单\n\t$(\"#dropdown1\").bootDropdown('toggle');\n    });\n\n效果：[dropdown下拉菜单](https://sandbox.runjs.cn/show/j5y0shd5)\n\n# TAB选项卡\n\n[插件代码](https://runjs.cn/code/0gamemrt)\n\n使用方式：\n\n    <div class=\"nav-tabs\" id=\"tab1\">\n        <ul class=\"tab-bars\">\n            <li  class=\"disabled\" name=\"html\">html</li>\n            <li name=\"css\">css</li>\n            <li name=\"dom\">dom</li>\n            <li name=\"javascript\">javascript</li>\n        </ul>\n        <div class=\"tab-content\" >\n            <div name=\"html\">Html</div>\n            <div name=\"css\">Css</div>\n            <div name=\"dom\">Dom</div>\n            <div name=\"javascript\">Javascript</div>\n        </div>\n    </div>\n\n    $(function() {\n        $(\"#tab1\").bootTab();\n        $(\"#tab2\").bootTab({defaultActive: 0});\n        $(\"#tab3\").bootTab({defaultActive: ‘css’});\n\n        //手动激活选项卡\n        $(\"#tab3\").bootTab(0);\n        $(\"#tab3\").bootTab('javascript');\n    });\n\n效果：[TAB选项卡](https://sandbox.runjs.cn/show/0gamemrt)\n\n\n\n\n","slug":"jq-plugins-dev","published":1,"updated":"2018-10-26T14:28:57.311Z","layout":"post","photos":[],"link":"","_id":"cjqwe42ck005nor0bge35ch4u","content":"<p>在熟悉了jquery和插件写法之后，作者将之前使用原生js和jquery写的一些组件，封装成插件<br><a id=\"more\"></a></p>\n<h1 id=\"switch开关\"><a href=\"#switch开关\" class=\"headerlink\" title=\"switch开关\"></a>switch开关</h1><p><a href=\"https://runjs.cn/code/0eao8cw2\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;switch1&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;switch2&quot;&gt;&lt;/div&gt;\n\n$(function() {\n    $(&quot;#switch1&quot;).bootSwitch({titles: [],\n                            defalutCheck: true});\n    $(&quot;#switch2&quot;).bootSwitch({titles:[&apos;开&apos;,&apos;关&apos;],\n                            defalutCheck: true});\n\n    $(&quot;.tips button&quot;).click(function() {\n    $(&quot;.tips span&quot;).text($(&quot;#switch1&quot;).bootSwitch(&apos;getChecked&apos;));\n    });\n\n    //获取开关状态\n    $(&quot;#switch1&quot;).bootSwitch(&apos;getChecked&apos;);\n    //添加自定义事件\n    $(&quot;#switch1&quot;).on(&quot;change.bc.switch&quot;,function() {\n        console.log(&apos;switch1 change&apos;);\n    });\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/0eao8cw2\" target=\"_blank\" rel=\"external\">switch开关</a></p>\n<h1 id=\"select下拉选择\"><a href=\"#select下拉选择\" class=\"headerlink\" title=\"select下拉选择\"></a>select下拉选择</h1><p><a href=\"https://runjs.cn/code/3gpjwzds\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;select-normal&quot;&gt;&lt;/div&gt;   //正常下拉选择\n&lt;div id=&quot;select-small&quot;&gt;&lt;/div&gt;    //正常下拉选择--小尺寸\n&lt;div id=&quot;select-disable&quot;&gt;&lt;/div&gt;  //禁止下拉选择\n\n$(function() {\n    var options1 = [\n        {value: &apos;paletxUI&apos;,name: &apos;paletxUI&apos;},\n        {value: &apos;Iaas&apos;,name: &apos;Iaas&apos;},\n        {value: &apos;Paas&apos;,name: &apos;Paas&apos;},\n        {value: &apos;Saas&apos;,name: &apos;Saas&apos;},\n        {value: &apos;CMS&apos;,name: &apos;CMS&apos;}\n    ];\n    $(&quot;#select-normal&quot;).bootSelect({id: &apos;select-normal&apos;,\n                                options: options1,\n                                defalutChecked: &apos;&apos;,\n                                placeholder: &apos;请选择&apos;});\n    $(&quot;#select-small&quot;).bootSelect({id: &apos;select-normal&apos;,\n                                options: options1,\n                                defalutChecked: &apos;&apos;,\n                                placeholder: &apos;请选择&apos;,\n                                width: 220});\n    $(&quot;#select-disable&quot;).bootSelect({id: &apos;select-disable&apos;,\n                                options: options1,\n                                defalutChecked: &apos;&apos;,\n                                placeholder: &apos;请选择&apos;,\n                                disable: true});\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/3gpjwzds\" target=\"_blank\" rel=\"external\">下拉选择</a></p>\n<h1 id=\"multilSelect多选下拉选择\"><a href=\"#multilSelect多选下拉选择\" class=\"headerlink\" title=\"multilSelect多选下拉选择\"></a>multilSelect多选下拉选择</h1><p><a href=\"https://runjs.cn/code/byn8l5d7\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;mutil-select01&quot;&gt;&lt;/div&gt;    //多选下拉选择框\n&lt;div id=&quot;mutil-select02&quot;&gt;&lt;/div&gt;    //禁止多选下拉选择\n&lt;div id=&quot;mutil-select03&quot;&gt;&lt;/div&gt;    //带复选框的下拉选择\n&lt;div id=&quot;mutil-select04&quot;&gt;&lt;/div&gt;    //带全选的下拉选择\n&lt;div id=&quot;mutil-select05&quot;&gt;&lt;/div&gt;    //显示选择个数的-带复选框\n&lt;div id=&quot;mutil-select06&quot;&gt;&lt;/div&gt;    //显示选择个数的-普通\n&lt;div id=&quot;mutil-small&quot;&gt;&lt;/div&gt;    //多选下拉选择框-小尺寸\n&lt;div id=&quot;mutil-big&quot;&gt;&lt;/div&gt;    //多选下拉选择框-大尺寸\n\n$(function() {\nvar optionsss = [\n        {value: &apos;paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI&apos;,\n         name: &apos;paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI&apos;},\n        {value: &apos;Paas-Paas&apos;,name: &apos;Paas-Paas&apos;},\n        {value: &apos;Iaas-Iaas&apos;,name: &apos;Iaas-Iaas&apos;},\n        {value: &apos;Saas-Saas&apos;,name: &apos;Saas-Saas&apos;},\n        {value: &apos;CMS-CMS&apos;,name: &apos;CMS-CMS&apos;}\n];\n    var defaultSelects = [\n        {value: &apos;Iaas-Iaas&apos;,name: &apos;Iaas-Iaas&apos;},\n        {value: &apos;CMS-CMS&apos;,name: &apos;CMS-CMS&apos;}\n];\nvar disableOptions = [\n        {value: &apos;CMS-CMS&apos;,name: &apos;CMS-CMS&apos;}\n];\n$(&quot;#mutil-select01&quot;).bootMultilSelect({options: optionsss,                                                defalutSelected: defaultSelects,\n                                    disable: disableOptions});\n$(&quot;#mutil-select02&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: disableOptions,\n                disabled:true});\n$(&quot;#mutil-select03&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: disableOptions,\n                checkbox:true});\n$(&quot;#mutil-select04&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: disableOptions,\n                checkbox:true,\n                allcheck:true});\n$(&quot;#mutil-select05&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: [],\n                checkbox:true,\n                allcheck:true,\n                showNum:true});\n$(&quot;#mutil-select06&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: [],\n                showNum:true});\n$(&quot;#mutil-small&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: [],\n                width: 220});\n$(&quot;#mutil-big&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: [],\n                checkbox:true,\n                width: 620});\n\n    //添加选择变更事件\n    $(&quot;#mutil-select01&quot;).on(&quot;change.bc.multilselect&quot;,function() {\n        console.log(&apos;multilselect change&apos;);\n    });\n    //获取已选记录\n    var selection = $(&quot;#mutil-select01&quot;).bootMultilSelect(&apos;getSelection&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/byn8l5d7\" target=\"_blank\" rel=\"external\">multil多选下拉框</a></p>\n<h1 id=\"transfer穿梭框\"><a href=\"#transfer穿梭框\" class=\"headerlink\" title=\"transfer穿梭框\"></a>transfer穿梭框</h1><p><a href=\"https://runjs.cn/code/szon4uz2\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;myTranfer&quot;&gt;&lt;/div&gt;\n\n$(function() {\n    var sourceItems = [{value:&apos;content01&apos;,name:&apos;content01&apos;},\n                        {value:&apos;content02&apos;,name:&apos;content02&apos;},\n                        {value:&apos;content03&apos;,name:&apos;content03&apos;},\n                        {value:&apos;content04&apos;,name:&apos;content04&apos;},\n                        {value:&apos;content05&apos;,name:&apos;content05&apos;},\n                        {value:&apos;content06&apos;,name:&apos;content06&apos;},\n                        {value:&apos;content07&apos;,name:&apos;content07&apos;},\n                        {value:&apos;content08&apos;,name:&apos;content08&apos;}];\n    var targetItems = [{value:&apos;content09&apos;,name:&apos;content09&apos;},\n                        {value:&apos;content10&apos;,name:&apos;content10&apos;}];\n\n    $(&quot;#myTranfer&quot;).bootTransfer({sourOptions: sourceItems,\n                                targOptions: targetItems,\n                                disableItems: [],\n                                itemText:&apos;项目&apos;,\n                                sourceText:&apos;源&apos;,\n                                targetText:&apos;目标&apos;});\n\n    //获取源记录\n    $(&quot;#myTranfer&quot;).bootTransfer(&apos;getSource&apos;);\n    //获取目标记录\n    $(&quot;#myTranfer&quot;).bootTransfer(&apos;getTarget&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/szon4uz2\" target=\"_blank\" rel=\"external\">transfer穿梭框</a></p>\n<h1 id=\"Info通知\"><a href=\"#Info通知\" class=\"headerlink\" title=\"Info通知\"></a>Info通知</h1><p><a href=\"https://runjs.cn/code/hckrhfgi\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;success&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;error&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;warn&quot;&gt;&lt;/div&gt;\n\n$(function() {\n    var $successInfo = $(&quot;#success&quot;).bootInfo({type: &apos;success&apos;,\n                                         title: &apos;操作成功,2s后自动消失&apos;,\n                                         timelen: 2000});\n    var $warnInfo = $(&quot;#warn&quot;).bootInfo({type: &apos;warn&apos;,\n                                        title: &apos;我是警告消息!&apos;});\n    var $errorInfo = $(&quot;#error&quot;).bootInfo({type: &apos;error&apos;,\n                                        title: &apos;我是错误消息!&apos;});\n\n    //展现通知\n    $successInfo.bootInfo(&apos;show&apos;);\n    $warnInfo.bootInfo(&apos;show&apos;);\n    $errorInfo.bootInfo(&apos;show&apos;);\n    //隐藏通知\n    $warnInfo.bootInfo(&apos;hide&apos;);\n    $errorInfo.bootInfo(&apos;hide&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/hckrhfgi\" target=\"_blank\" rel=\"external\">Info通知</a></p>\n<h1 id=\"Collapse折叠面板\"><a href=\"#Collapse折叠面板\" class=\"headerlink\" title=\"Collapse折叠面板\"></a>Collapse折叠面板</h1><p><a href=\"https://runjs.cn/code/lmfma6gm\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div class=&quot;collapseset&quot; id=&quot;collapset1&quot;&gt;\n    &lt;div class=&quot;collapse&quot;&gt;\n        &lt;header&gt;&lt;span&gt;&lt;/span&gt;\n        杨过&lt;/header&gt;\n        &lt;article&gt;杨过，名过，字改之，是金庸武侠小说《神雕侠侣》[1]  中的主人公，前作《射雕英雄传》中杨康与穆念慈之子，西毒欧阳锋的义子。名字为郭靖、黄蓉所取，取“有过则改之”之意。&lt;/article&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;collapse&quot;&gt;\n        &lt;header&gt;&lt;span&gt;&lt;/span&gt;\n        小龙女&lt;/header&gt;\n        &lt;article&gt;小龙女，是金庸小说《神雕侠侣》的女主角，金庸笔下广受读者喜爱的女角之一。容貌秀美若仙、清丽绝俗。性格宽容恬淡、天真可爱。武功轻灵飘逸，于婀娜妩媚中击敌制胜。&lt;/article&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;collapse&quot;&gt;\n        &lt;header&gt;&lt;span&gt;&lt;/span&gt;\n        黄药师&lt;/header&gt;\n        &lt;article&gt;黄药师，外号“东邪”，天下“五绝”之一，是金庸武侠小说《射雕英雄传》和《神雕侠侣》中的角色。是黄蓉之父，对其妻冯氏（小字阿衡）一往情深。。  &lt;/article&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n$(function() {\n    $(&quot;#collapset1&quot;).bootCollapse({type: &apos;normal&apos;});\n    $(&quot;#collapset2&quot;).bootCollapse({type: &apos;eachOne&apos;});\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/lmfma6gm\" target=\"_blank\" rel=\"external\">折叠面板</a></p>\n<h1 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h1><p><a href=\"https://runjs.cn/code/tbziv3gx\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;carousel-fade&quot;&gt;&lt;/div&gt;      //渐变\n&lt;div id=&quot;carousel-slide&quot;&gt;&lt;/div&gt;     //滑动\n&lt;div id=&quot;carousel-slide-data-api&quot;&gt;&lt;/div&gt;   //使用data-api\n\n$(function() {\nvar optionss = [\n        {name: &apos;fuzhi&apos;,\n         url: &apos;http://dimg04.c-ctrip.com/images/t1/vacations/203000/202469/ef1ae815bbef4a0698d4fa2ac15614e0.jpg&apos;},\n        {name: &apos;qingshuisi&apos;,\n         url: &apos;http://upload.shunwang.com/2014/0625/1403670070972.JPG&apos;},\n        {name: &apos;xiaodao&apos;,\n         url: &apos;http://digitalphoto.cocolog-nifty.com/photos/uncategorized/2008/08/02/dsc_d300_0006950_2.jpg&apos;},\n        {name: &apos;xiaodao2&apos;,\n         url: &apos;http://f4.topitme.com/4/b3/e5/1118294546054e5b34o.jpg&apos;},\n        {name: &apos;xiaodao3&apos;,\n         url: &apos;http://img17.3lian.com/d/file/201701/19/fd92ea2409b6b157c247b78ce4eda95a.jpg&apos;}\n];\n\n$(&quot;#carousel-fade&quot;).bootCarousel({options: optionss,type: &apos;fade&apos;});\n$(&quot;#carousel-slide&quot;).bootCarousel({options: optionss,type: &apos;slide&apos;，\n                                    interval:5000,pause:true});\n$(&quot;#carousel-slide-data-api&quot;).bootCarousel({options: optionss,\n                                            type: &apos;fade&apos;,\n                                            dataApi:true});\n\n//手动切换项目\n$(&quot;#carousel-fade&quot;).bootCarousel(&apos;prev&apos;);\n$(&quot;#carousel-fade&quot;).bootCarousel(&apos;next&apos;);\n$(&quot;#carousel-fade&quot;).bootCarousel(Num);\n\n//手动启停自动循环播放\n$(&quot;#carousel-slide&quot;).bootCarousel(&apos;cycle&apos;); //启动\n$(&quot;#carousel-slide&quot;).bootCarousel(&apos;pause&apos;); //停止\n\n//自定义事件\n$(&quot;#carousel-slide&quot;).on(&quot;change.bc.carousel&quot;,function() {\n    count++;\n});\n$(&quot;#carousel-slide&quot;).on(&quot;changed.bc.carousel&quot;,function() {\n    count++;\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/tbziv3gx\" target=\"_blank\" rel=\"external\">轮播图</a></p>\n<h1 id=\"dropdown下拉菜单\"><a href=\"#dropdown下拉菜单\" class=\"headerlink\" title=\"dropdown下拉菜单\"></a>dropdown下拉菜单</h1><p><a href=\"https://runjs.cn/code/j5y0shd5\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div class=&quot;dropdown&quot; id=&quot;dropdown1&quot;&gt;\n    &lt;button class=&quot;dropbtn dropdown-toggle&quot;&gt;下拉菜单\n        &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;ul class=&quot;dropdown-content menu-width&quot;&gt;\n        &lt;li class=&quot;dropdown-item&quot;&gt;\n        &lt;a tabindex=&quot;-1&quot; href=&quot;javascript:void(0);&quot;&gt;新浪&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=&quot;dropdown-item&quot;&gt;\n        &lt;a tabindex=&quot;-1&quot; href=&quot;javascript:void(0);&quot;&gt;搜狐&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li  class=&quot;divider&quot;&gt;&lt;/li&gt;\n        &lt;li class=&quot;dropdown-item&quot;&gt;\n        &lt;a tabindex=&quot;-1&quot; href=&quot;javascript:void(0);&quot;&gt;小米&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n\n$(function() {\n$(&quot;#dropdown1&quot;).bootDropdown();\n$(&quot;#dropdown2&quot;).bootDropdown({place:&apos;right&apos;});\n$(&quot;#dropdown3&quot;).bootDropdown({place:&apos;up&apos;});\n$(&quot;#dropdown4&quot;).bootDropdown({type: &apos;click&apos;,place:&apos;left&apos;});\n$(&quot;#dropdown5&quot;).bootDropdown({type: &apos;hover&apos;,place:&apos;down&apos;});\n$(&quot;#dropdown6&quot;).bootDropdown({type: &apos;hover&apos;,place:&apos;right&apos;});\n$(&quot;#dropdown7&quot;).bootDropdown({type: &apos;hover&apos;,place:&apos;up&apos;});\n$(&quot;#dropdown8&quot;).bootDropdown({type: &apos;hover&apos;,place:&apos;left&apos;});\n\n   //手动切换菜单\n$(&quot;#dropdown1&quot;).bootDropdown(&apos;toggle&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/j5y0shd5\" target=\"_blank\" rel=\"external\">dropdown下拉菜单</a></p>\n<h1 id=\"TAB选项卡\"><a href=\"#TAB选项卡\" class=\"headerlink\" title=\"TAB选项卡\"></a>TAB选项卡</h1><p><a href=\"https://runjs.cn/code/0gamemrt\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div class=&quot;nav-tabs&quot; id=&quot;tab1&quot;&gt;\n    &lt;ul class=&quot;tab-bars&quot;&gt;\n        &lt;li  class=&quot;disabled&quot; name=&quot;html&quot;&gt;html&lt;/li&gt;\n        &lt;li name=&quot;css&quot;&gt;css&lt;/li&gt;\n        &lt;li name=&quot;dom&quot;&gt;dom&lt;/li&gt;\n        &lt;li name=&quot;javascript&quot;&gt;javascript&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=&quot;tab-content&quot; &gt;\n        &lt;div name=&quot;html&quot;&gt;Html&lt;/div&gt;\n        &lt;div name=&quot;css&quot;&gt;Css&lt;/div&gt;\n        &lt;div name=&quot;dom&quot;&gt;Dom&lt;/div&gt;\n        &lt;div name=&quot;javascript&quot;&gt;Javascript&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n$(function() {\n    $(&quot;#tab1&quot;).bootTab();\n    $(&quot;#tab2&quot;).bootTab({defaultActive: 0});\n    $(&quot;#tab3&quot;).bootTab({defaultActive: ‘css’});\n\n    //手动激活选项卡\n    $(&quot;#tab3&quot;).bootTab(0);\n    $(&quot;#tab3&quot;).bootTab(&apos;javascript&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/0gamemrt\" target=\"_blank\" rel=\"external\">TAB选项卡</a></p>\n","site":{"data":{}},"excerpt":"<p>在熟悉了jquery和插件写法之后，作者将之前使用原生js和jquery写的一些组件，封装成插件<br>","more":"</p>\n<h1 id=\"switch开关\"><a href=\"#switch开关\" class=\"headerlink\" title=\"switch开关\"></a>switch开关</h1><p><a href=\"https://runjs.cn/code/0eao8cw2\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;switch1&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;switch2&quot;&gt;&lt;/div&gt;\n\n$(function() {\n    $(&quot;#switch1&quot;).bootSwitch({titles: [],\n                            defalutCheck: true});\n    $(&quot;#switch2&quot;).bootSwitch({titles:[&apos;开&apos;,&apos;关&apos;],\n                            defalutCheck: true});\n\n    $(&quot;.tips button&quot;).click(function() {\n    $(&quot;.tips span&quot;).text($(&quot;#switch1&quot;).bootSwitch(&apos;getChecked&apos;));\n    });\n\n    //获取开关状态\n    $(&quot;#switch1&quot;).bootSwitch(&apos;getChecked&apos;);\n    //添加自定义事件\n    $(&quot;#switch1&quot;).on(&quot;change.bc.switch&quot;,function() {\n        console.log(&apos;switch1 change&apos;);\n    });\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/0eao8cw2\" target=\"_blank\" rel=\"external\">switch开关</a></p>\n<h1 id=\"select下拉选择\"><a href=\"#select下拉选择\" class=\"headerlink\" title=\"select下拉选择\"></a>select下拉选择</h1><p><a href=\"https://runjs.cn/code/3gpjwzds\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;select-normal&quot;&gt;&lt;/div&gt;   //正常下拉选择\n&lt;div id=&quot;select-small&quot;&gt;&lt;/div&gt;    //正常下拉选择--小尺寸\n&lt;div id=&quot;select-disable&quot;&gt;&lt;/div&gt;  //禁止下拉选择\n\n$(function() {\n    var options1 = [\n        {value: &apos;paletxUI&apos;,name: &apos;paletxUI&apos;},\n        {value: &apos;Iaas&apos;,name: &apos;Iaas&apos;},\n        {value: &apos;Paas&apos;,name: &apos;Paas&apos;},\n        {value: &apos;Saas&apos;,name: &apos;Saas&apos;},\n        {value: &apos;CMS&apos;,name: &apos;CMS&apos;}\n    ];\n    $(&quot;#select-normal&quot;).bootSelect({id: &apos;select-normal&apos;,\n                                options: options1,\n                                defalutChecked: &apos;&apos;,\n                                placeholder: &apos;请选择&apos;});\n    $(&quot;#select-small&quot;).bootSelect({id: &apos;select-normal&apos;,\n                                options: options1,\n                                defalutChecked: &apos;&apos;,\n                                placeholder: &apos;请选择&apos;,\n                                width: 220});\n    $(&quot;#select-disable&quot;).bootSelect({id: &apos;select-disable&apos;,\n                                options: options1,\n                                defalutChecked: &apos;&apos;,\n                                placeholder: &apos;请选择&apos;,\n                                disable: true});\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/3gpjwzds\" target=\"_blank\" rel=\"external\">下拉选择</a></p>\n<h1 id=\"multilSelect多选下拉选择\"><a href=\"#multilSelect多选下拉选择\" class=\"headerlink\" title=\"multilSelect多选下拉选择\"></a>multilSelect多选下拉选择</h1><p><a href=\"https://runjs.cn/code/byn8l5d7\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;mutil-select01&quot;&gt;&lt;/div&gt;    //多选下拉选择框\n&lt;div id=&quot;mutil-select02&quot;&gt;&lt;/div&gt;    //禁止多选下拉选择\n&lt;div id=&quot;mutil-select03&quot;&gt;&lt;/div&gt;    //带复选框的下拉选择\n&lt;div id=&quot;mutil-select04&quot;&gt;&lt;/div&gt;    //带全选的下拉选择\n&lt;div id=&quot;mutil-select05&quot;&gt;&lt;/div&gt;    //显示选择个数的-带复选框\n&lt;div id=&quot;mutil-select06&quot;&gt;&lt;/div&gt;    //显示选择个数的-普通\n&lt;div id=&quot;mutil-small&quot;&gt;&lt;/div&gt;    //多选下拉选择框-小尺寸\n&lt;div id=&quot;mutil-big&quot;&gt;&lt;/div&gt;    //多选下拉选择框-大尺寸\n\n$(function() {\nvar optionsss = [\n        {value: &apos;paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI&apos;,\n         name: &apos;paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI-paletxUI&apos;},\n        {value: &apos;Paas-Paas&apos;,name: &apos;Paas-Paas&apos;},\n        {value: &apos;Iaas-Iaas&apos;,name: &apos;Iaas-Iaas&apos;},\n        {value: &apos;Saas-Saas&apos;,name: &apos;Saas-Saas&apos;},\n        {value: &apos;CMS-CMS&apos;,name: &apos;CMS-CMS&apos;}\n];\n    var defaultSelects = [\n        {value: &apos;Iaas-Iaas&apos;,name: &apos;Iaas-Iaas&apos;},\n        {value: &apos;CMS-CMS&apos;,name: &apos;CMS-CMS&apos;}\n];\nvar disableOptions = [\n        {value: &apos;CMS-CMS&apos;,name: &apos;CMS-CMS&apos;}\n];\n$(&quot;#mutil-select01&quot;).bootMultilSelect({options: optionsss,                                                defalutSelected: defaultSelects,\n                                    disable: disableOptions});\n$(&quot;#mutil-select02&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: disableOptions,\n                disabled:true});\n$(&quot;#mutil-select03&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: disableOptions,\n                checkbox:true});\n$(&quot;#mutil-select04&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: disableOptions,\n                checkbox:true,\n                allcheck:true});\n$(&quot;#mutil-select05&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: [],\n                checkbox:true,\n                allcheck:true,\n                showNum:true});\n$(&quot;#mutil-select06&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: [],\n                showNum:true});\n$(&quot;#mutil-small&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: [],\n                width: 220});\n$(&quot;#mutil-big&quot;).bootMultilSelect({options: optionsss,\n                defalutSelected: defaultSelects,\n                disable: [],\n                checkbox:true,\n                width: 620});\n\n    //添加选择变更事件\n    $(&quot;#mutil-select01&quot;).on(&quot;change.bc.multilselect&quot;,function() {\n        console.log(&apos;multilselect change&apos;);\n    });\n    //获取已选记录\n    var selection = $(&quot;#mutil-select01&quot;).bootMultilSelect(&apos;getSelection&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/byn8l5d7\" target=\"_blank\" rel=\"external\">multil多选下拉框</a></p>\n<h1 id=\"transfer穿梭框\"><a href=\"#transfer穿梭框\" class=\"headerlink\" title=\"transfer穿梭框\"></a>transfer穿梭框</h1><p><a href=\"https://runjs.cn/code/szon4uz2\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;myTranfer&quot;&gt;&lt;/div&gt;\n\n$(function() {\n    var sourceItems = [{value:&apos;content01&apos;,name:&apos;content01&apos;},\n                        {value:&apos;content02&apos;,name:&apos;content02&apos;},\n                        {value:&apos;content03&apos;,name:&apos;content03&apos;},\n                        {value:&apos;content04&apos;,name:&apos;content04&apos;},\n                        {value:&apos;content05&apos;,name:&apos;content05&apos;},\n                        {value:&apos;content06&apos;,name:&apos;content06&apos;},\n                        {value:&apos;content07&apos;,name:&apos;content07&apos;},\n                        {value:&apos;content08&apos;,name:&apos;content08&apos;}];\n    var targetItems = [{value:&apos;content09&apos;,name:&apos;content09&apos;},\n                        {value:&apos;content10&apos;,name:&apos;content10&apos;}];\n\n    $(&quot;#myTranfer&quot;).bootTransfer({sourOptions: sourceItems,\n                                targOptions: targetItems,\n                                disableItems: [],\n                                itemText:&apos;项目&apos;,\n                                sourceText:&apos;源&apos;,\n                                targetText:&apos;目标&apos;});\n\n    //获取源记录\n    $(&quot;#myTranfer&quot;).bootTransfer(&apos;getSource&apos;);\n    //获取目标记录\n    $(&quot;#myTranfer&quot;).bootTransfer(&apos;getTarget&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/szon4uz2\" target=\"_blank\" rel=\"external\">transfer穿梭框</a></p>\n<h1 id=\"Info通知\"><a href=\"#Info通知\" class=\"headerlink\" title=\"Info通知\"></a>Info通知</h1><p><a href=\"https://runjs.cn/code/hckrhfgi\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;success&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;error&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;warn&quot;&gt;&lt;/div&gt;\n\n$(function() {\n    var $successInfo = $(&quot;#success&quot;).bootInfo({type: &apos;success&apos;,\n                                         title: &apos;操作成功,2s后自动消失&apos;,\n                                         timelen: 2000});\n    var $warnInfo = $(&quot;#warn&quot;).bootInfo({type: &apos;warn&apos;,\n                                        title: &apos;我是警告消息!&apos;});\n    var $errorInfo = $(&quot;#error&quot;).bootInfo({type: &apos;error&apos;,\n                                        title: &apos;我是错误消息!&apos;});\n\n    //展现通知\n    $successInfo.bootInfo(&apos;show&apos;);\n    $warnInfo.bootInfo(&apos;show&apos;);\n    $errorInfo.bootInfo(&apos;show&apos;);\n    //隐藏通知\n    $warnInfo.bootInfo(&apos;hide&apos;);\n    $errorInfo.bootInfo(&apos;hide&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/hckrhfgi\" target=\"_blank\" rel=\"external\">Info通知</a></p>\n<h1 id=\"Collapse折叠面板\"><a href=\"#Collapse折叠面板\" class=\"headerlink\" title=\"Collapse折叠面板\"></a>Collapse折叠面板</h1><p><a href=\"https://runjs.cn/code/lmfma6gm\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div class=&quot;collapseset&quot; id=&quot;collapset1&quot;&gt;\n    &lt;div class=&quot;collapse&quot;&gt;\n        &lt;header&gt;&lt;span&gt;&lt;/span&gt;\n        杨过&lt;/header&gt;\n        &lt;article&gt;杨过，名过，字改之，是金庸武侠小说《神雕侠侣》[1]  中的主人公，前作《射雕英雄传》中杨康与穆念慈之子，西毒欧阳锋的义子。名字为郭靖、黄蓉所取，取“有过则改之”之意。&lt;/article&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;collapse&quot;&gt;\n        &lt;header&gt;&lt;span&gt;&lt;/span&gt;\n        小龙女&lt;/header&gt;\n        &lt;article&gt;小龙女，是金庸小说《神雕侠侣》的女主角，金庸笔下广受读者喜爱的女角之一。容貌秀美若仙、清丽绝俗。性格宽容恬淡、天真可爱。武功轻灵飘逸，于婀娜妩媚中击敌制胜。&lt;/article&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;collapse&quot;&gt;\n        &lt;header&gt;&lt;span&gt;&lt;/span&gt;\n        黄药师&lt;/header&gt;\n        &lt;article&gt;黄药师，外号“东邪”，天下“五绝”之一，是金庸武侠小说《射雕英雄传》和《神雕侠侣》中的角色。是黄蓉之父，对其妻冯氏（小字阿衡）一往情深。。  &lt;/article&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n$(function() {\n    $(&quot;#collapset1&quot;).bootCollapse({type: &apos;normal&apos;});\n    $(&quot;#collapset2&quot;).bootCollapse({type: &apos;eachOne&apos;});\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/lmfma6gm\" target=\"_blank\" rel=\"external\">折叠面板</a></p>\n<h1 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h1><p><a href=\"https://runjs.cn/code/tbziv3gx\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div id=&quot;carousel-fade&quot;&gt;&lt;/div&gt;      //渐变\n&lt;div id=&quot;carousel-slide&quot;&gt;&lt;/div&gt;     //滑动\n&lt;div id=&quot;carousel-slide-data-api&quot;&gt;&lt;/div&gt;   //使用data-api\n\n$(function() {\nvar optionss = [\n        {name: &apos;fuzhi&apos;,\n         url: &apos;http://dimg04.c-ctrip.com/images/t1/vacations/203000/202469/ef1ae815bbef4a0698d4fa2ac15614e0.jpg&apos;},\n        {name: &apos;qingshuisi&apos;,\n         url: &apos;http://upload.shunwang.com/2014/0625/1403670070972.JPG&apos;},\n        {name: &apos;xiaodao&apos;,\n         url: &apos;http://digitalphoto.cocolog-nifty.com/photos/uncategorized/2008/08/02/dsc_d300_0006950_2.jpg&apos;},\n        {name: &apos;xiaodao2&apos;,\n         url: &apos;http://f4.topitme.com/4/b3/e5/1118294546054e5b34o.jpg&apos;},\n        {name: &apos;xiaodao3&apos;,\n         url: &apos;http://img17.3lian.com/d/file/201701/19/fd92ea2409b6b157c247b78ce4eda95a.jpg&apos;}\n];\n\n$(&quot;#carousel-fade&quot;).bootCarousel({options: optionss,type: &apos;fade&apos;});\n$(&quot;#carousel-slide&quot;).bootCarousel({options: optionss,type: &apos;slide&apos;，\n                                    interval:5000,pause:true});\n$(&quot;#carousel-slide-data-api&quot;).bootCarousel({options: optionss,\n                                            type: &apos;fade&apos;,\n                                            dataApi:true});\n\n//手动切换项目\n$(&quot;#carousel-fade&quot;).bootCarousel(&apos;prev&apos;);\n$(&quot;#carousel-fade&quot;).bootCarousel(&apos;next&apos;);\n$(&quot;#carousel-fade&quot;).bootCarousel(Num);\n\n//手动启停自动循环播放\n$(&quot;#carousel-slide&quot;).bootCarousel(&apos;cycle&apos;); //启动\n$(&quot;#carousel-slide&quot;).bootCarousel(&apos;pause&apos;); //停止\n\n//自定义事件\n$(&quot;#carousel-slide&quot;).on(&quot;change.bc.carousel&quot;,function() {\n    count++;\n});\n$(&quot;#carousel-slide&quot;).on(&quot;changed.bc.carousel&quot;,function() {\n    count++;\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/tbziv3gx\" target=\"_blank\" rel=\"external\">轮播图</a></p>\n<h1 id=\"dropdown下拉菜单\"><a href=\"#dropdown下拉菜单\" class=\"headerlink\" title=\"dropdown下拉菜单\"></a>dropdown下拉菜单</h1><p><a href=\"https://runjs.cn/code/j5y0shd5\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div class=&quot;dropdown&quot; id=&quot;dropdown1&quot;&gt;\n    &lt;button class=&quot;dropbtn dropdown-toggle&quot;&gt;下拉菜单\n        &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;ul class=&quot;dropdown-content menu-width&quot;&gt;\n        &lt;li class=&quot;dropdown-item&quot;&gt;\n        &lt;a tabindex=&quot;-1&quot; href=&quot;javascript:void(0);&quot;&gt;新浪&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=&quot;dropdown-item&quot;&gt;\n        &lt;a tabindex=&quot;-1&quot; href=&quot;javascript:void(0);&quot;&gt;搜狐&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li  class=&quot;divider&quot;&gt;&lt;/li&gt;\n        &lt;li class=&quot;dropdown-item&quot;&gt;\n        &lt;a tabindex=&quot;-1&quot; href=&quot;javascript:void(0);&quot;&gt;小米&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n\n$(function() {\n$(&quot;#dropdown1&quot;).bootDropdown();\n$(&quot;#dropdown2&quot;).bootDropdown({place:&apos;right&apos;});\n$(&quot;#dropdown3&quot;).bootDropdown({place:&apos;up&apos;});\n$(&quot;#dropdown4&quot;).bootDropdown({type: &apos;click&apos;,place:&apos;left&apos;});\n$(&quot;#dropdown5&quot;).bootDropdown({type: &apos;hover&apos;,place:&apos;down&apos;});\n$(&quot;#dropdown6&quot;).bootDropdown({type: &apos;hover&apos;,place:&apos;right&apos;});\n$(&quot;#dropdown7&quot;).bootDropdown({type: &apos;hover&apos;,place:&apos;up&apos;});\n$(&quot;#dropdown8&quot;).bootDropdown({type: &apos;hover&apos;,place:&apos;left&apos;});\n\n   //手动切换菜单\n$(&quot;#dropdown1&quot;).bootDropdown(&apos;toggle&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/j5y0shd5\" target=\"_blank\" rel=\"external\">dropdown下拉菜单</a></p>\n<h1 id=\"TAB选项卡\"><a href=\"#TAB选项卡\" class=\"headerlink\" title=\"TAB选项卡\"></a>TAB选项卡</h1><p><a href=\"https://runjs.cn/code/0gamemrt\" target=\"_blank\" rel=\"external\">插件代码</a></p>\n<p>使用方式：</p>\n<pre><code>&lt;div class=&quot;nav-tabs&quot; id=&quot;tab1&quot;&gt;\n    &lt;ul class=&quot;tab-bars&quot;&gt;\n        &lt;li  class=&quot;disabled&quot; name=&quot;html&quot;&gt;html&lt;/li&gt;\n        &lt;li name=&quot;css&quot;&gt;css&lt;/li&gt;\n        &lt;li name=&quot;dom&quot;&gt;dom&lt;/li&gt;\n        &lt;li name=&quot;javascript&quot;&gt;javascript&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=&quot;tab-content&quot; &gt;\n        &lt;div name=&quot;html&quot;&gt;Html&lt;/div&gt;\n        &lt;div name=&quot;css&quot;&gt;Css&lt;/div&gt;\n        &lt;div name=&quot;dom&quot;&gt;Dom&lt;/div&gt;\n        &lt;div name=&quot;javascript&quot;&gt;Javascript&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n$(function() {\n    $(&quot;#tab1&quot;).bootTab();\n    $(&quot;#tab2&quot;).bootTab({defaultActive: 0});\n    $(&quot;#tab3&quot;).bootTab({defaultActive: ‘css’});\n\n    //手动激活选项卡\n    $(&quot;#tab3&quot;).bootTab(0);\n    $(&quot;#tab3&quot;).bootTab(&apos;javascript&apos;);\n});\n</code></pre><p>效果：<a href=\"https://sandbox.runjs.cn/show/0gamemrt\" target=\"_blank\" rel=\"external\">TAB选项卡</a></p>"},{"title":"Angular-路由器","date":"2017-07-16T16:56:10.000Z","comments":1,"_content":"\n路由与导航是组织多页面应用的基本需求，也是angular最重要的几个特性之一。Angular提供了强大的路由机制来保证页面之间的跳转，根据配置的地址导航对应视图页面，并将地址值更新到浏览器地址栏中，将应用的所以页面有机的组织在了一起\n<!--more-->\n\n## 路由树\n路由树是angular三大基本树结构之一，有着自己的配置方式，一般以单独的路由模块提供，伴随着模块的导入和导出，形成树状路由，如下图时一个典型的伴随着模块的组织而形成的路由树状结构：\n![route-tree](/images/route-tree.jpg)\n\n## 路由路径导航\n模块直接导入之后，相应的路由模块的配置与准入模块的路由进行了合并，成为树的同级枝丫，下面是根据上一节路由树所描绘处理的导航示意图，以及形成的URL与组件的对应关系：\n![route-url-tree](/images/route-url-tree.jpg)\n如图所示，每一个url路径对应一个组件，路由器会根据在浏览器地址栏输入的地址或者代码里命令形式导航的地址去匹配相应的url，渲染对应组件的视图\n\n## 路由配置\n关于angular路由请点击[这里](https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html \"angular-多级注入器\")查看官方指导文档\n基本的路由配置就几个步骤：\n#### 1. 基准地址配置\nangular使用pushState方式构造url，必须设置基准地址，pushState才能正常工作\n**设置方式：**\n\n1 ). 如果app目录是应用的根目录，可以在index.html设置：`<base href=\"/\">`\n2 ). 在根模块中使用适当的APP_BASE_HREF值配置provide路由器，不过这种配置方式，应用中图片、CSS文件等的引用要使用绝对路径，比如:\n\n        providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n\n> 当两种方式同时都有设置的时候，provide注入的优先级更高\n\n**配置作用：**\n- 告诉路由器该如何合成导航用的url\n- 方便引用CSS文件、脚本和图片，浏览器会用基准地址的值作为相对URL的前缀\n\n\n#### 2. 路由列表配置\n路由列表以路由模块的方式来提供，下面是一个典型的简单路由列表：\n\n    import { NgModule }              from '@angular/core';\n    import { RouterModule, Routes }  from '@angular/router';\n    import { CrisisListComponent }   from './crisis-list.component';\n    import { HeroListComponent }     from './hero-list.component';\n    import { PageNotFoundComponent } from './not-found.component';\n\n    const appRoutes: Routes = [\n      { path: 'crisis-center', component: CrisisListComponent },\n      { path: 'heroe/:id',        component: HeroComponent },\n      { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n      { path: '**', component: PageNotFoundComponent }\n    ];\n\n    @NgModule({\n      imports: [\n        RouterModule.forRoot(appRoutes)\n      ],\n      exports: [\n        RouterModule\n      ]\n    })\n    export class AppRoutingModule {}\n\n（1）路由项以{path:,component:}为基本定义格式，保存路由的注册映射表，当浏览器的URL变化或代码中直接导航到某一url路径时，路由器就会翻出映射表,激活或生成对应组件的实例，用来显示视图，更新url到地址栏\n（2）path不需要以斜杠（/）开头，路由器会为解析和构建最终的URL\n（3）路由匹配是第一次最先匹配即停止原则，所以声明顺序很重要，建议顺序：具体路由->空路由->通配路由，通配path(`**`)可放置在最后作为错误url的默认页面提示\n（4）注册路由方式：RouterModule.forRoot只能用于根模块；RouterModule.forChild用于特性模块\n\n#### 3. 路由导航\n导航的声明方式有链接式和命令式导航两种：\n- 链接式，`routerLink=\"{{'/hero/' + crisis.id}}\"`\n- 命令式，`this.router.navigate(['/hero', hero.id])`\n\n假如要导航到一个英雄的详情页面，下面3中方式是等效的\n\n    <button type=\"button\" routerLink=\"{{'/hero/' + crisis.id}}\" routerLinkActive=\"Active\">\n    </button>\n\n    <button type=\"button\" [routerLink]=\"['/hero', hero.id]\"\n    [routerLinkActive]=\"['Active','classA']\"></button>\n\n    <button type=\"button\" (click)=\"gotoDetail()\" routerLinkActive=\"Active\"></button>\n    gotoDetail() {this.router.navigate(['/hero', hero.id]);}\n\n（1） routerLinkActive:RouterLinkActive指令属性绑定，用于在路由激活时把CSS类添加到该元素上,反之则移除\n（2）RouterLinkActive可以绑定到一个CSS类组成的数组，绑定方式有[routerLinkActive]=\"['A','B']\" 或 routerLinkActive=“A B”\n\n> 注意：当使用button标签进行路由时，务必制定type=\"button\",如果不指定默认是“submit”类型，会默认出发表单提交\n\n（3）RouterLinkActive还可以绑定到多个链接组里，当其中一个匹配到就添加样式类，适合用于菜单项的激活显示\n\n    <div outerLinkActiver=\"Active\">\n       <button type=\"button\" routerLink=\"{{'/hero/'}}\" >\n        </button>\n       <button type=\"button\" routerLink=\"{{'/power/'}}\">\n        </button>\n    </div>\n\n#### 4. 路由参数提取\n\n##### (1) 参数提取对象\nActivatedRoute，可以通过注入此路由服务来获取路由的路径和参数，它有很多有用的信息：\n\n    url //路由路径的Observable对象，它的值是一个由路径中各个部件组成的字符串数组\n    data //该路由提供的data对象的一个Observable对象，还包含从resolve守卫中解析出来的值\n    params //包含该路由的必选参数和可选参数的Observable对象\n    queryParams //一个包含对所有路由都有效的查询参数的Observable对象。\n    fragment //一个包含对所有路由都有效的片段值的Observable对象。\n    outlet //RouterOutlet的名字，用于指示渲染该路由的位置,对于未命名的RouterOutlet，这个名字是primary\n    routeConfig //与该路由的原始路径对应的配置信息。\n    parent //当使用子路由时，它是一个包含父路由信息的ActivatedRoute对象\n    firstChild //包含子路由列表中的第一个ActivatedRoute对象。\n    children //包含当前路由下激活的全部子路由。\n\n> 注意：当在组件中订阅一个可观察对象时，我们通常总是要在组件销毁时取消这个订阅,但是也有少数例外情况不需要取消订阅，而ActivateRoute中的各种可观察对象就是属于这种情况。ActivateRoute及其可观察对象都是由Router本身负责管理的。 Router会在不再需要时销毁这个路由组件，而注入进去的ActivateRoute也随之销毁了\n\n**注意：**\n\n> 新版本使用paramsMap替代params，queryParamsMap替代queryParams，它们拥有如下方法:\n> - has(key)-> 判断是否有此参数，true/false\n> - get(key)-> 获取参数值，value/null\n> - getAll(key) -> 获取所以参数值数组，[value,...] / []\n> - key --> 获取所以键值数组，[key,...] / []\n> 比如：router.snapshot.params.get('id');\n\n##### （2）提取参数的方式\n使用可观察对象订阅的方式，下面两种方式效果相同\n**switchMap**\nswitchMap允许你在Observable的当前值上执行一个动作，并将它映射一个新的Observable,然后再使用subscribe方法解析Observable对象获取值\n    import { ActivateRoute }  from '@angular/router';\n\n    constructor(private route: ActivateRoute) {\n        this.route.params\n            .switchMap((params: Params) => this.service.getHero(+params['id']))\n            .subscribe((hero: Hero) => this.hero = hero);\n    }\n\n**subscribe**\n使用subscribe方法直接解析params参数信息，获取数据值\n    import { ActivateRoute }  from '@angular/router';\n\n    constructor(private route: ActivateRoute) {\n      this.route.params\n        .subscribe((params: Params) => {\n            this.hero = this.service.getHero(+params['id']);\n        });\n    }\n\n**快照**\n如果组件的实例不会被复用，可以使用一次性的快照route.snapshot来简化实现，它提供了路由参数的初始值，可以通过它来直接访问参数，而不用订阅或者添加\n    import { ActivateRoute }  from '@angular/router';\n\n    constructor(private route: ActivateRoute) {\n        this.hero = this.service.getHero(+this.route.snapshot.params['id']);\n    }\n\n> 注意事项：\n1）像许多其它rxjs操作符一样，switchMap既可以处理Observable也可以处理Promise发射的值。并且，如果用户重新导航到该路由，并且它正在获取一个英雄时，switchMap操作符还会取消任何正在执行的请求\n2）默认情况，如果没有访问过其它组件就导航到了同一个组件实例，路由器倾向于复用组件实例,比如：搜索功能，这就需要Observable对象的方法来动态处理\n\n**可选参数的定义和提取**\n可选参数是导航期间传送任意复杂信息的理想载体，可选参数不涉及到模式匹配，在表达上提供了巨大的灵活性\n1）定义方式\n只要在必要参数之后，通过一个独立的对象来定义可选参数，比如：\n\n    this.router.navigate(['/heroes', heroId, { foo: '123' }]);\n\n合成的URL为：/heroes/123456;foo=foo1 ，可选的路由参数在url中没有使用“？”和“&”符号分隔，而是以;和主url相隔\n2）提取方式\n\n    this.heroes = this.route.params\n      .switchMap((params: Params) => {\n        this.foo = +params['foo'];\n        return this.service.getHeroes();\n      });\n\n## 路由视图目标出口的选择\n理由器在为组件选择显示出口的时候，是以距离最近为原则，就是选择距离组件最近的上层outlet目标进行呈现，比如：\n\n    {\n        path: 'crisis-center',\n        component: CrisisCenterComponent,\n        children: [\n            {\n                path: 'compose',\n                component: ComposeMessageComponent\n            },\n            {\n                path: '',\n                component: CrisisListComponent,\n                children: [\n                    {\n                        path: ':id',\n                        component: CrisisDetailComponent\n                    },\n                    {\n                        path: '',\n                        component: CrisisCenterHomeComponent\n                    }\n                ]\n            }\n        ]\n    }\n\n本例中，组件CrisisCenterComponent和CrisisListComponent的模板中都有outlet出口定义，所以\n- ComposeMessageComponent将在CrisisCenterComponent的outlet渲染呈现\n- CrisisCenterHomeComponent和CrisisDetailComponent在CrisisListComponent的outlet呈现；\n\n若距离最近的父组件没有outlet，则往上匹配，在更上一级父组件的outlet；举个例子，如果把path: 'compose'放在于crisis-center同级，将直接匹配appcomponent的outlet位置；同理，如果放在于CrisisDetail同级作为list的子路由，则将优先匹配\nCrisisListComponent的outlet位置，不行再往上匹配\n\n## 相对路由\n特性模块内部应该优先考试使用相对路由，以减少对上层路由的依赖\n**“目录式”语法**\n- ./或无前导斜线形式是相对于当前级别的。\n- ../会回到当前路由路径的上一级。\n- ../<sibling>导航到一个兄弟路由，先回到上一级，然后进入兄弟路由路径\n\n使用例子：\n\n    this.router.navigate([crisis.id], { relativeTo: this.route })；\n    this.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n\n使用RouterLink来进行导航，使用相同的链接参数数组，不过不需要提供relativeTo属性，因为ActivatedRoute已经隐含在了RouterLink指令中，下面定义与上面等效：\n\n    <a [routerLink]=\"[crisis.id]\">\n\n\n##### 最后，一些好东西：\n1 ) RouterLinkActive指令会基于当前的RouterState对象来为激活的RouterLink切换CSS类,这会一直沿着路由树往下进行级联处理，所以父路由链接和子路由链接可能会同时激活。使用routerLinkActiveOptions属性可以改变这种行为，比如：\n\n    <a routerLink=\"/contact\" routerLinkActive=\"Active\"\n          [routerLinkActiveOptions]=\"{exact: true}\">\n    </a>\n如上设置可以限制只有在其URL与当前URL精确匹配时才会激活指定的RouterLink\n\n2 ) 路由器中的一些关键词\n- Router，路由器，为激活的URL显示应用组件，并管理从组件之间的导航\n- RouterModule，路由器模块，一个独立的Angular模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令\n- Routes，路由数组，数组里每个成员都会把一个URL路径映射到一个组件。\n- Route，路由成员，定义路由器该如何根据URL模式（pattern）来导航到组件，大多数路由都由路径和组件类构成\n- RouterOutlet，路由出口<router-outlet>，用来标记出路由器该在哪里显示视图\n- RouterLink，路由链接routerLink，该指令用来把一个可点击的HTML元素绑定到路由，点击带有绑定到字符串或链接参数数组的routerLink指令的元素就会触发一次导航\n- RouterLinkActiv，活动路由链接routerLinkActive，当HTML元素上或元素内的routerLink变为激活或非激活状态时，该指令为这个HTML元素添加或移除CSS类\n- ActivatedRoute，激活的路由，为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）\n- RouterState，路由器状态，路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法\n- 链接参数数组，这个数组会被路由器解释成一个路由操作指南。我们可以把一个RouterLink绑定到该数组，或者把它作为参数传给Router.navigate方法\n- 路由组件，一个带有RouterOutlet的Angular组件，它根据路由器的导航来显示相应的视图\n\n3 ) 特性领域的路由特征：\n- 每个特性都有自己的路由模块。\n- 每个特性区都有自己的根组件。\n- 每个特性区的根组件中都有自己的路由出口及其子路由。\n- 特性区的路由很少（或完全不）与其它特性区的路由交叉\n\n4 ) 多路由出口\n在模板中，路由器只能支持一个无名主路由出口,但可以有多个命名的路由出口\n每个命名出口都自己有一组带组件的路由。多重出口可以在同一时间根据不同的路由来显示不同的内容\n\n**出口定义: **\n\n    <router-outlet></router-outlet>\n    <router-outlet name=\"popup1\"></router-outlet>\n    <router-outlet name=\"popup2\"></router-outlet>\n**配置路由对象：**\n\n    {\n      path: 'compose',\n      component: ComposeMessageComponent,\n      outlet: 'popup'\n    }\n\n**使用方式：**\n\n    <a [routerLink]=\"[{ outlets: { popup: ['compose'] } }]\">Contact</a>\n\n链接参数数组包含一个只有一个outlets属性的对象，它的值是另一个对象，这个对象以一个或多个路由的出口名作为属性名。 在这里，它只有一个出口名“popup”，它的值则是另一个链接参数数组，用于指定compose路由\n>注意：\n当有且只有一个无名出口时，外部对象中的这个outlets对象不是必须的，路由器假设这个路由指向了无名的主出口，并为我们创建这些对象。\n当路由到一个命名出口时，我们就会发现这个隐藏的真相\n\n**关闭命名出口：**\n\n    this.router.navigate([{ outlets: { popup: null }}]);\n\n**各个outlet出口独立导航：**\n路由器在导航树中可以对多个独立的分支保持追踪，并在URL中对这棵树进行表达。\n我们可以添加更多出口和更多路由（无论是在顶层还是在嵌套的子层）来创建一个带有多个分支的导航树， 路由器将会生成相应的URL。\n通过像前面那样填充outlets对象，我们可以告诉路由器立即导航到一棵完整的树。 然后把这个对象通过一个链接参数数组传给router.navigate方法\n\n5 ) 各类路由参数的定义提取的区别\n\n- path参数：url/:id\n  使用方式：router.navigate([url,123]); [routerLink]=\"[url, 123]\"\n  表现形式：url/123\n  提取方式：\n  this.activateRoute.params.subscribe((params: Params)) => { let id = params['id']; });\n\n- 可选参数\n  使用方式：router.navigate([url,{id: 123}]); [routerLink]=\"[url, {id: 123}]\"\n  表现形式：url;id=123\n  提取方式：\n  this.activateRoute.params.subscribe((params: Params)) => { let id = params['id']; });\n\n- 查询参数\n  使用方式：router.navigate([url], {queryParams: {id: 123}}); [routerLink]=\"[url]\"  [queryParams]=\"{id: 123}\"\n  表现形式：url?id=123\n  提取方式：\n  this.activateRoute.queryParams.subscribe((params: queryParams)) => { let id = params['id']; });\n\n6 ) navigate和navigateByUrl\n相同点：底层都是调用的相同的方法router.scheduleNavigation()进行处理和导航\n不同点：\na. 使用方式不同：navigate([]) ; navigateByUrl(url)\n  比如下面两个效果是一样:\n  navigate([url, 123]);navigateByUrl('url/123');\nb. navigate可以实现相对路由，而navigateByUrl不行\n\n\n","source":"_posts/2017-07-17-angular-router.md","raw":"---\ntitle: Angular-路由器\ndate: 2017-07-17 00:56:10\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n路由与导航是组织多页面应用的基本需求，也是angular最重要的几个特性之一。Angular提供了强大的路由机制来保证页面之间的跳转，根据配置的地址导航对应视图页面，并将地址值更新到浏览器地址栏中，将应用的所以页面有机的组织在了一起\n<!--more-->\n\n## 路由树\n路由树是angular三大基本树结构之一，有着自己的配置方式，一般以单独的路由模块提供，伴随着模块的导入和导出，形成树状路由，如下图时一个典型的伴随着模块的组织而形成的路由树状结构：\n![route-tree](/images/route-tree.jpg)\n\n## 路由路径导航\n模块直接导入之后，相应的路由模块的配置与准入模块的路由进行了合并，成为树的同级枝丫，下面是根据上一节路由树所描绘处理的导航示意图，以及形成的URL与组件的对应关系：\n![route-url-tree](/images/route-url-tree.jpg)\n如图所示，每一个url路径对应一个组件，路由器会根据在浏览器地址栏输入的地址或者代码里命令形式导航的地址去匹配相应的url，渲染对应组件的视图\n\n## 路由配置\n关于angular路由请点击[这里](https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html \"angular-多级注入器\")查看官方指导文档\n基本的路由配置就几个步骤：\n#### 1. 基准地址配置\nangular使用pushState方式构造url，必须设置基准地址，pushState才能正常工作\n**设置方式：**\n\n1 ). 如果app目录是应用的根目录，可以在index.html设置：`<base href=\"/\">`\n2 ). 在根模块中使用适当的APP_BASE_HREF值配置provide路由器，不过这种配置方式，应用中图片、CSS文件等的引用要使用绝对路径，比如:\n\n        providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n\n> 当两种方式同时都有设置的时候，provide注入的优先级更高\n\n**配置作用：**\n- 告诉路由器该如何合成导航用的url\n- 方便引用CSS文件、脚本和图片，浏览器会用基准地址的值作为相对URL的前缀\n\n\n#### 2. 路由列表配置\n路由列表以路由模块的方式来提供，下面是一个典型的简单路由列表：\n\n    import { NgModule }              from '@angular/core';\n    import { RouterModule, Routes }  from '@angular/router';\n    import { CrisisListComponent }   from './crisis-list.component';\n    import { HeroListComponent }     from './hero-list.component';\n    import { PageNotFoundComponent } from './not-found.component';\n\n    const appRoutes: Routes = [\n      { path: 'crisis-center', component: CrisisListComponent },\n      { path: 'heroe/:id',        component: HeroComponent },\n      { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n      { path: '**', component: PageNotFoundComponent }\n    ];\n\n    @NgModule({\n      imports: [\n        RouterModule.forRoot(appRoutes)\n      ],\n      exports: [\n        RouterModule\n      ]\n    })\n    export class AppRoutingModule {}\n\n（1）路由项以{path:,component:}为基本定义格式，保存路由的注册映射表，当浏览器的URL变化或代码中直接导航到某一url路径时，路由器就会翻出映射表,激活或生成对应组件的实例，用来显示视图，更新url到地址栏\n（2）path不需要以斜杠（/）开头，路由器会为解析和构建最终的URL\n（3）路由匹配是第一次最先匹配即停止原则，所以声明顺序很重要，建议顺序：具体路由->空路由->通配路由，通配path(`**`)可放置在最后作为错误url的默认页面提示\n（4）注册路由方式：RouterModule.forRoot只能用于根模块；RouterModule.forChild用于特性模块\n\n#### 3. 路由导航\n导航的声明方式有链接式和命令式导航两种：\n- 链接式，`routerLink=\"{{'/hero/' + crisis.id}}\"`\n- 命令式，`this.router.navigate(['/hero', hero.id])`\n\n假如要导航到一个英雄的详情页面，下面3中方式是等效的\n\n    <button type=\"button\" routerLink=\"{{'/hero/' + crisis.id}}\" routerLinkActive=\"Active\">\n    </button>\n\n    <button type=\"button\" [routerLink]=\"['/hero', hero.id]\"\n    [routerLinkActive]=\"['Active','classA']\"></button>\n\n    <button type=\"button\" (click)=\"gotoDetail()\" routerLinkActive=\"Active\"></button>\n    gotoDetail() {this.router.navigate(['/hero', hero.id]);}\n\n（1） routerLinkActive:RouterLinkActive指令属性绑定，用于在路由激活时把CSS类添加到该元素上,反之则移除\n（2）RouterLinkActive可以绑定到一个CSS类组成的数组，绑定方式有[routerLinkActive]=\"['A','B']\" 或 routerLinkActive=“A B”\n\n> 注意：当使用button标签进行路由时，务必制定type=\"button\",如果不指定默认是“submit”类型，会默认出发表单提交\n\n（3）RouterLinkActive还可以绑定到多个链接组里，当其中一个匹配到就添加样式类，适合用于菜单项的激活显示\n\n    <div outerLinkActiver=\"Active\">\n       <button type=\"button\" routerLink=\"{{'/hero/'}}\" >\n        </button>\n       <button type=\"button\" routerLink=\"{{'/power/'}}\">\n        </button>\n    </div>\n\n#### 4. 路由参数提取\n\n##### (1) 参数提取对象\nActivatedRoute，可以通过注入此路由服务来获取路由的路径和参数，它有很多有用的信息：\n\n    url //路由路径的Observable对象，它的值是一个由路径中各个部件组成的字符串数组\n    data //该路由提供的data对象的一个Observable对象，还包含从resolve守卫中解析出来的值\n    params //包含该路由的必选参数和可选参数的Observable对象\n    queryParams //一个包含对所有路由都有效的查询参数的Observable对象。\n    fragment //一个包含对所有路由都有效的片段值的Observable对象。\n    outlet //RouterOutlet的名字，用于指示渲染该路由的位置,对于未命名的RouterOutlet，这个名字是primary\n    routeConfig //与该路由的原始路径对应的配置信息。\n    parent //当使用子路由时，它是一个包含父路由信息的ActivatedRoute对象\n    firstChild //包含子路由列表中的第一个ActivatedRoute对象。\n    children //包含当前路由下激活的全部子路由。\n\n> 注意：当在组件中订阅一个可观察对象时，我们通常总是要在组件销毁时取消这个订阅,但是也有少数例外情况不需要取消订阅，而ActivateRoute中的各种可观察对象就是属于这种情况。ActivateRoute及其可观察对象都是由Router本身负责管理的。 Router会在不再需要时销毁这个路由组件，而注入进去的ActivateRoute也随之销毁了\n\n**注意：**\n\n> 新版本使用paramsMap替代params，queryParamsMap替代queryParams，它们拥有如下方法:\n> - has(key)-> 判断是否有此参数，true/false\n> - get(key)-> 获取参数值，value/null\n> - getAll(key) -> 获取所以参数值数组，[value,...] / []\n> - key --> 获取所以键值数组，[key,...] / []\n> 比如：router.snapshot.params.get('id');\n\n##### （2）提取参数的方式\n使用可观察对象订阅的方式，下面两种方式效果相同\n**switchMap**\nswitchMap允许你在Observable的当前值上执行一个动作，并将它映射一个新的Observable,然后再使用subscribe方法解析Observable对象获取值\n    import { ActivateRoute }  from '@angular/router';\n\n    constructor(private route: ActivateRoute) {\n        this.route.params\n            .switchMap((params: Params) => this.service.getHero(+params['id']))\n            .subscribe((hero: Hero) => this.hero = hero);\n    }\n\n**subscribe**\n使用subscribe方法直接解析params参数信息，获取数据值\n    import { ActivateRoute }  from '@angular/router';\n\n    constructor(private route: ActivateRoute) {\n      this.route.params\n        .subscribe((params: Params) => {\n            this.hero = this.service.getHero(+params['id']);\n        });\n    }\n\n**快照**\n如果组件的实例不会被复用，可以使用一次性的快照route.snapshot来简化实现，它提供了路由参数的初始值，可以通过它来直接访问参数，而不用订阅或者添加\n    import { ActivateRoute }  from '@angular/router';\n\n    constructor(private route: ActivateRoute) {\n        this.hero = this.service.getHero(+this.route.snapshot.params['id']);\n    }\n\n> 注意事项：\n1）像许多其它rxjs操作符一样，switchMap既可以处理Observable也可以处理Promise发射的值。并且，如果用户重新导航到该路由，并且它正在获取一个英雄时，switchMap操作符还会取消任何正在执行的请求\n2）默认情况，如果没有访问过其它组件就导航到了同一个组件实例，路由器倾向于复用组件实例,比如：搜索功能，这就需要Observable对象的方法来动态处理\n\n**可选参数的定义和提取**\n可选参数是导航期间传送任意复杂信息的理想载体，可选参数不涉及到模式匹配，在表达上提供了巨大的灵活性\n1）定义方式\n只要在必要参数之后，通过一个独立的对象来定义可选参数，比如：\n\n    this.router.navigate(['/heroes', heroId, { foo: '123' }]);\n\n合成的URL为：/heroes/123456;foo=foo1 ，可选的路由参数在url中没有使用“？”和“&”符号分隔，而是以;和主url相隔\n2）提取方式\n\n    this.heroes = this.route.params\n      .switchMap((params: Params) => {\n        this.foo = +params['foo'];\n        return this.service.getHeroes();\n      });\n\n## 路由视图目标出口的选择\n理由器在为组件选择显示出口的时候，是以距离最近为原则，就是选择距离组件最近的上层outlet目标进行呈现，比如：\n\n    {\n        path: 'crisis-center',\n        component: CrisisCenterComponent,\n        children: [\n            {\n                path: 'compose',\n                component: ComposeMessageComponent\n            },\n            {\n                path: '',\n                component: CrisisListComponent,\n                children: [\n                    {\n                        path: ':id',\n                        component: CrisisDetailComponent\n                    },\n                    {\n                        path: '',\n                        component: CrisisCenterHomeComponent\n                    }\n                ]\n            }\n        ]\n    }\n\n本例中，组件CrisisCenterComponent和CrisisListComponent的模板中都有outlet出口定义，所以\n- ComposeMessageComponent将在CrisisCenterComponent的outlet渲染呈现\n- CrisisCenterHomeComponent和CrisisDetailComponent在CrisisListComponent的outlet呈现；\n\n若距离最近的父组件没有outlet，则往上匹配，在更上一级父组件的outlet；举个例子，如果把path: 'compose'放在于crisis-center同级，将直接匹配appcomponent的outlet位置；同理，如果放在于CrisisDetail同级作为list的子路由，则将优先匹配\nCrisisListComponent的outlet位置，不行再往上匹配\n\n## 相对路由\n特性模块内部应该优先考试使用相对路由，以减少对上层路由的依赖\n**“目录式”语法**\n- ./或无前导斜线形式是相对于当前级别的。\n- ../会回到当前路由路径的上一级。\n- ../<sibling>导航到一个兄弟路由，先回到上一级，然后进入兄弟路由路径\n\n使用例子：\n\n    this.router.navigate([crisis.id], { relativeTo: this.route })；\n    this.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n\n使用RouterLink来进行导航，使用相同的链接参数数组，不过不需要提供relativeTo属性，因为ActivatedRoute已经隐含在了RouterLink指令中，下面定义与上面等效：\n\n    <a [routerLink]=\"[crisis.id]\">\n\n\n##### 最后，一些好东西：\n1 ) RouterLinkActive指令会基于当前的RouterState对象来为激活的RouterLink切换CSS类,这会一直沿着路由树往下进行级联处理，所以父路由链接和子路由链接可能会同时激活。使用routerLinkActiveOptions属性可以改变这种行为，比如：\n\n    <a routerLink=\"/contact\" routerLinkActive=\"Active\"\n          [routerLinkActiveOptions]=\"{exact: true}\">\n    </a>\n如上设置可以限制只有在其URL与当前URL精确匹配时才会激活指定的RouterLink\n\n2 ) 路由器中的一些关键词\n- Router，路由器，为激活的URL显示应用组件，并管理从组件之间的导航\n- RouterModule，路由器模块，一个独立的Angular模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令\n- Routes，路由数组，数组里每个成员都会把一个URL路径映射到一个组件。\n- Route，路由成员，定义路由器该如何根据URL模式（pattern）来导航到组件，大多数路由都由路径和组件类构成\n- RouterOutlet，路由出口<router-outlet>，用来标记出路由器该在哪里显示视图\n- RouterLink，路由链接routerLink，该指令用来把一个可点击的HTML元素绑定到路由，点击带有绑定到字符串或链接参数数组的routerLink指令的元素就会触发一次导航\n- RouterLinkActiv，活动路由链接routerLinkActive，当HTML元素上或元素内的routerLink变为激活或非激活状态时，该指令为这个HTML元素添加或移除CSS类\n- ActivatedRoute，激活的路由，为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）\n- RouterState，路由器状态，路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法\n- 链接参数数组，这个数组会被路由器解释成一个路由操作指南。我们可以把一个RouterLink绑定到该数组，或者把它作为参数传给Router.navigate方法\n- 路由组件，一个带有RouterOutlet的Angular组件，它根据路由器的导航来显示相应的视图\n\n3 ) 特性领域的路由特征：\n- 每个特性都有自己的路由模块。\n- 每个特性区都有自己的根组件。\n- 每个特性区的根组件中都有自己的路由出口及其子路由。\n- 特性区的路由很少（或完全不）与其它特性区的路由交叉\n\n4 ) 多路由出口\n在模板中，路由器只能支持一个无名主路由出口,但可以有多个命名的路由出口\n每个命名出口都自己有一组带组件的路由。多重出口可以在同一时间根据不同的路由来显示不同的内容\n\n**出口定义: **\n\n    <router-outlet></router-outlet>\n    <router-outlet name=\"popup1\"></router-outlet>\n    <router-outlet name=\"popup2\"></router-outlet>\n**配置路由对象：**\n\n    {\n      path: 'compose',\n      component: ComposeMessageComponent,\n      outlet: 'popup'\n    }\n\n**使用方式：**\n\n    <a [routerLink]=\"[{ outlets: { popup: ['compose'] } }]\">Contact</a>\n\n链接参数数组包含一个只有一个outlets属性的对象，它的值是另一个对象，这个对象以一个或多个路由的出口名作为属性名。 在这里，它只有一个出口名“popup”，它的值则是另一个链接参数数组，用于指定compose路由\n>注意：\n当有且只有一个无名出口时，外部对象中的这个outlets对象不是必须的，路由器假设这个路由指向了无名的主出口，并为我们创建这些对象。\n当路由到一个命名出口时，我们就会发现这个隐藏的真相\n\n**关闭命名出口：**\n\n    this.router.navigate([{ outlets: { popup: null }}]);\n\n**各个outlet出口独立导航：**\n路由器在导航树中可以对多个独立的分支保持追踪，并在URL中对这棵树进行表达。\n我们可以添加更多出口和更多路由（无论是在顶层还是在嵌套的子层）来创建一个带有多个分支的导航树， 路由器将会生成相应的URL。\n通过像前面那样填充outlets对象，我们可以告诉路由器立即导航到一棵完整的树。 然后把这个对象通过一个链接参数数组传给router.navigate方法\n\n5 ) 各类路由参数的定义提取的区别\n\n- path参数：url/:id\n  使用方式：router.navigate([url,123]); [routerLink]=\"[url, 123]\"\n  表现形式：url/123\n  提取方式：\n  this.activateRoute.params.subscribe((params: Params)) => { let id = params['id']; });\n\n- 可选参数\n  使用方式：router.navigate([url,{id: 123}]); [routerLink]=\"[url, {id: 123}]\"\n  表现形式：url;id=123\n  提取方式：\n  this.activateRoute.params.subscribe((params: Params)) => { let id = params['id']; });\n\n- 查询参数\n  使用方式：router.navigate([url], {queryParams: {id: 123}}); [routerLink]=\"[url]\"  [queryParams]=\"{id: 123}\"\n  表现形式：url?id=123\n  提取方式：\n  this.activateRoute.queryParams.subscribe((params: queryParams)) => { let id = params['id']; });\n\n6 ) navigate和navigateByUrl\n相同点：底层都是调用的相同的方法router.scheduleNavigation()进行处理和导航\n不同点：\na. 使用方式不同：navigate([]) ; navigateByUrl(url)\n  比如下面两个效果是一样:\n  navigate([url, 123]);navigateByUrl('url/123');\nb. navigate可以实现相对路由，而navigateByUrl不行\n\n\n","slug":"angular-router","published":1,"updated":"2017-12-01T15:42:53.767Z","layout":"post","photos":[],"link":"","_id":"cjqwe42eb005uor0bke1trj5d","content":"<p>路由与导航是组织多页面应用的基本需求，也是angular最重要的几个特性之一。Angular提供了强大的路由机制来保证页面之间的跳转，根据配置的地址导航对应视图页面，并将地址值更新到浏览器地址栏中，将应用的所以页面有机的组织在了一起<br><a id=\"more\"></a></p>\n<h2 id=\"路由树\"><a href=\"#路由树\" class=\"headerlink\" title=\"路由树\"></a>路由树</h2><p>路由树是angular三大基本树结构之一，有着自己的配置方式，一般以单独的路由模块提供，伴随着模块的导入和导出，形成树状路由，如下图时一个典型的伴随着模块的组织而形成的路由树状结构：<br><img src=\"/images/route-tree.jpg\" alt=\"route-tree\"></p>\n<h2 id=\"路由路径导航\"><a href=\"#路由路径导航\" class=\"headerlink\" title=\"路由路径导航\"></a>路由路径导航</h2><p>模块直接导入之后，相应的路由模块的配置与准入模块的路由进行了合并，成为树的同级枝丫，下面是根据上一节路由树所描绘处理的导航示意图，以及形成的URL与组件的对应关系：<br><img src=\"/images/route-url-tree.jpg\" alt=\"route-url-tree\"><br>如图所示，每一个url路径对应一个组件，路由器会根据在浏览器地址栏输入的地址或者代码里命令形式导航的地址去匹配相应的url，渲染对应组件的视图</p>\n<h2 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h2><p>关于angular路由请点击<a href=\"https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html\" title=\"angular-多级注入器\" target=\"_blank\" rel=\"external\">这里</a>查看官方指导文档<br>基本的路由配置就几个步骤：</p>\n<h4 id=\"1-基准地址配置\"><a href=\"#1-基准地址配置\" class=\"headerlink\" title=\"1. 基准地址配置\"></a>1. 基准地址配置</h4><p>angular使用pushState方式构造url，必须设置基准地址，pushState才能正常工作<br><strong>设置方式：</strong></p>\n<p>1 ). 如果app目录是应用的根目录，可以在index.html设置：<code>&lt;base href=&quot;/&quot;&gt;</code><br>2 ). 在根模块中使用适当的APP_BASE_HREF值配置provide路由器，不过这种配置方式，应用中图片、CSS文件等的引用要使用绝对路径，比如:</p>\n<pre><code>providers: [{provide: APP_BASE_HREF, useValue: &apos;/my/app&apos;}]\n</code></pre><blockquote>\n<p>当两种方式同时都有设置的时候，provide注入的优先级更高</p>\n</blockquote>\n<p><strong>配置作用：</strong></p>\n<ul>\n<li>告诉路由器该如何合成导航用的url</li>\n<li>方便引用CSS文件、脚本和图片，浏览器会用基准地址的值作为相对URL的前缀</li>\n</ul>\n<h4 id=\"2-路由列表配置\"><a href=\"#2-路由列表配置\" class=\"headerlink\" title=\"2. 路由列表配置\"></a>2. 路由列表配置</h4><p>路由列表以路由模块的方式来提供，下面是一个典型的简单路由列表：</p>\n<pre><code>import { NgModule }              from &apos;@angular/core&apos;;\nimport { RouterModule, Routes }  from &apos;@angular/router&apos;;\nimport { CrisisListComponent }   from &apos;./crisis-list.component&apos;;\nimport { HeroListComponent }     from &apos;./hero-list.component&apos;;\nimport { PageNotFoundComponent } from &apos;./not-found.component&apos;;\n\nconst appRoutes: Routes = [\n  { path: &apos;crisis-center&apos;, component: CrisisListComponent },\n  { path: &apos;heroe/:id&apos;,        component: HeroComponent },\n  { path: &apos;&apos;,   redirectTo: &apos;/heroes&apos;, pathMatch: &apos;full&apos; },\n  { path: &apos;**&apos;, component: PageNotFoundComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class AppRoutingModule {}\n</code></pre><p>（1）路由项以{path:,component:}为基本定义格式，保存路由的注册映射表，当浏览器的URL变化或代码中直接导航到某一url路径时，路由器就会翻出映射表,激活或生成对应组件的实例，用来显示视图，更新url到地址栏<br>（2）path不需要以斜杠（/）开头，路由器会为解析和构建最终的URL<br>（3）路由匹配是第一次最先匹配即停止原则，所以声明顺序很重要，建议顺序：具体路由-&gt;空路由-&gt;通配路由，通配path(<code>**</code>)可放置在最后作为错误url的默认页面提示<br>（4）注册路由方式：RouterModule.forRoot只能用于根模块；RouterModule.forChild用于特性模块</p>\n<h4 id=\"3-路由导航\"><a href=\"#3-路由导航\" class=\"headerlink\" title=\"3. 路由导航\"></a>3. 路由导航</h4><p>导航的声明方式有链接式和命令式导航两种：</p>\n<ul>\n<li>链接式，<code>routerLink=&quot;/hero/undefined&quot;</code></li>\n<li>命令式，<code>this.router.navigate([&#39;/hero&#39;, hero.id])</code></li>\n</ul>\n<p>假如要导航到一个英雄的详情页面，下面3中方式是等效的</p>\n<pre><code>&lt;button type=&quot;button&quot; routerLink=&quot;{{'/hero/' + crisis.id}}&quot; routerLinkActive=&quot;Active&quot;&gt;\n&lt;/button&gt;\n\n&lt;button type=&quot;button&quot; [routerLink]=&quot;[&apos;/hero&apos;, hero.id]&quot;\n[routerLinkActive]=&quot;[&apos;Active&apos;,&apos;classA&apos;]&quot;&gt;&lt;/button&gt;\n\n&lt;button type=&quot;button&quot; (click)=&quot;gotoDetail()&quot; routerLinkActive=&quot;Active&quot;&gt;&lt;/button&gt;\ngotoDetail() {this.router.navigate([&apos;/hero&apos;, hero.id]);}\n</code></pre><p>（1） routerLinkActive:RouterLinkActive指令属性绑定，用于在路由激活时把CSS类添加到该元素上,反之则移除<br>（2）RouterLinkActive可以绑定到一个CSS类组成的数组，绑定方式有[routerLinkActive]=”[‘A’,’B’]” 或 routerLinkActive=“A B”</p>\n<blockquote>\n<p>注意：当使用button标签进行路由时，务必制定type=”button”,如果不指定默认是“submit”类型，会默认出发表单提交</p>\n</blockquote>\n<p>（3）RouterLinkActive还可以绑定到多个链接组里，当其中一个匹配到就添加样式类，适合用于菜单项的激活显示</p>\n<pre><code>&lt;div outerLinkActiver=&quot;Active&quot;&gt;\n   &lt;button type=&quot;button&quot; routerLink=&quot;{{'/hero/'}}&quot; &gt;\n    &lt;/button&gt;\n   &lt;button type=&quot;button&quot; routerLink=&quot;{{'/power/'}}&quot;&gt;\n    &lt;/button&gt;\n&lt;/div&gt;\n</code></pre><h4 id=\"4-路由参数提取\"><a href=\"#4-路由参数提取\" class=\"headerlink\" title=\"4. 路由参数提取\"></a>4. 路由参数提取</h4><h5 id=\"1-参数提取对象\"><a href=\"#1-参数提取对象\" class=\"headerlink\" title=\"(1) 参数提取对象\"></a>(1) 参数提取对象</h5><p>ActivatedRoute，可以通过注入此路由服务来获取路由的路径和参数，它有很多有用的信息：</p>\n<pre><code>url //路由路径的Observable对象，它的值是一个由路径中各个部件组成的字符串数组\ndata //该路由提供的data对象的一个Observable对象，还包含从resolve守卫中解析出来的值\nparams //包含该路由的必选参数和可选参数的Observable对象\nqueryParams //一个包含对所有路由都有效的查询参数的Observable对象。\nfragment //一个包含对所有路由都有效的片段值的Observable对象。\noutlet //RouterOutlet的名字，用于指示渲染该路由的位置,对于未命名的RouterOutlet，这个名字是primary\nrouteConfig //与该路由的原始路径对应的配置信息。\nparent //当使用子路由时，它是一个包含父路由信息的ActivatedRoute对象\nfirstChild //包含子路由列表中的第一个ActivatedRoute对象。\nchildren //包含当前路由下激活的全部子路由。\n</code></pre><blockquote>\n<p>注意：当在组件中订阅一个可观察对象时，我们通常总是要在组件销毁时取消这个订阅,但是也有少数例外情况不需要取消订阅，而ActivateRoute中的各种可观察对象就是属于这种情况。ActivateRoute及其可观察对象都是由Router本身负责管理的。 Router会在不再需要时销毁这个路由组件，而注入进去的ActivateRoute也随之销毁了</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>新版本使用paramsMap替代params，queryParamsMap替代queryParams，它们拥有如下方法:</p>\n<ul>\n<li>has(key)-&gt; 判断是否有此参数，true/false</li>\n<li>get(key)-&gt; 获取参数值，value/null</li>\n<li>getAll(key) -&gt; 获取所以参数值数组，[value,…] / []</li>\n<li>key –&gt; 获取所以键值数组，[key,…] / []<br>比如：router.snapshot.params.get(‘id’);</li>\n</ul>\n</blockquote>\n<h5 id=\"（2）提取参数的方式\"><a href=\"#（2）提取参数的方式\" class=\"headerlink\" title=\"（2）提取参数的方式\"></a>（2）提取参数的方式</h5><p>使用可观察对象订阅的方式，下面两种方式效果相同<br><strong>switchMap</strong><br>switchMap允许你在Observable的当前值上执行一个动作，并将它映射一个新的Observable,然后再使用subscribe方法解析Observable对象获取值<br>    import { ActivateRoute }  from ‘@angular/router’;</p>\n<pre><code>constructor(private route: ActivateRoute) {\n    this.route.params\n        .switchMap((params: Params) =&gt; this.service.getHero(+params[&apos;id&apos;]))\n        .subscribe((hero: Hero) =&gt; this.hero = hero);\n}\n</code></pre><p><strong>subscribe</strong><br>使用subscribe方法直接解析params参数信息，获取数据值<br>    import { ActivateRoute }  from ‘@angular/router’;</p>\n<pre><code>constructor(private route: ActivateRoute) {\n  this.route.params\n    .subscribe((params: Params) =&gt; {\n        this.hero = this.service.getHero(+params[&apos;id&apos;]);\n    });\n}\n</code></pre><p><strong>快照</strong><br>如果组件的实例不会被复用，可以使用一次性的快照route.snapshot来简化实现，它提供了路由参数的初始值，可以通过它来直接访问参数，而不用订阅或者添加<br>    import { ActivateRoute }  from ‘@angular/router’;</p>\n<pre><code>constructor(private route: ActivateRoute) {\n    this.hero = this.service.getHero(+this.route.snapshot.params[&apos;id&apos;]);\n}\n</code></pre><blockquote>\n<p>注意事项：<br>1）像许多其它rxjs操作符一样，switchMap既可以处理Observable也可以处理Promise发射的值。并且，如果用户重新导航到该路由，并且它正在获取一个英雄时，switchMap操作符还会取消任何正在执行的请求<br>2）默认情况，如果没有访问过其它组件就导航到了同一个组件实例，路由器倾向于复用组件实例,比如：搜索功能，这就需要Observable对象的方法来动态处理</p>\n</blockquote>\n<p><strong>可选参数的定义和提取</strong><br>可选参数是导航期间传送任意复杂信息的理想载体，可选参数不涉及到模式匹配，在表达上提供了巨大的灵活性<br>1）定义方式<br>只要在必要参数之后，通过一个独立的对象来定义可选参数，比如：</p>\n<pre><code>this.router.navigate([&apos;/heroes&apos;, heroId, { foo: &apos;123&apos; }]);\n</code></pre><p>合成的URL为：/heroes/123456;foo=foo1 ，可选的路由参数在url中没有使用“？”和“&amp;”符号分隔，而是以;和主url相隔<br>2）提取方式</p>\n<pre><code>this.heroes = this.route.params\n  .switchMap((params: Params) =&gt; {\n    this.foo = +params[&apos;foo&apos;];\n    return this.service.getHeroes();\n  });\n</code></pre><h2 id=\"路由视图目标出口的选择\"><a href=\"#路由视图目标出口的选择\" class=\"headerlink\" title=\"路由视图目标出口的选择\"></a>路由视图目标出口的选择</h2><p>理由器在为组件选择显示出口的时候，是以距离最近为原则，就是选择距离组件最近的上层outlet目标进行呈现，比如：</p>\n<pre><code>{\n    path: &apos;crisis-center&apos;,\n    component: CrisisCenterComponent,\n    children: [\n        {\n            path: &apos;compose&apos;,\n            component: ComposeMessageComponent\n        },\n        {\n            path: &apos;&apos;,\n            component: CrisisListComponent,\n            children: [\n                {\n                    path: &apos;:id&apos;,\n                    component: CrisisDetailComponent\n                },\n                {\n                    path: &apos;&apos;,\n                    component: CrisisCenterHomeComponent\n                }\n            ]\n        }\n    ]\n}\n</code></pre><p>本例中，组件CrisisCenterComponent和CrisisListComponent的模板中都有outlet出口定义，所以</p>\n<ul>\n<li>ComposeMessageComponent将在CrisisCenterComponent的outlet渲染呈现</li>\n<li>CrisisCenterHomeComponent和CrisisDetailComponent在CrisisListComponent的outlet呈现；</li>\n</ul>\n<p>若距离最近的父组件没有outlet，则往上匹配，在更上一级父组件的outlet；举个例子，如果把path: ‘compose’放在于crisis-center同级，将直接匹配appcomponent的outlet位置；同理，如果放在于CrisisDetail同级作为list的子路由，则将优先匹配<br>CrisisListComponent的outlet位置，不行再往上匹配</p>\n<h2 id=\"相对路由\"><a href=\"#相对路由\" class=\"headerlink\" title=\"相对路由\"></a>相对路由</h2><p>特性模块内部应该优先考试使用相对路由，以减少对上层路由的依赖<br><strong>“目录式”语法</strong></p>\n<ul>\n<li>./或无前导斜线形式是相对于当前级别的。</li>\n<li>../会回到当前路由路径的上一级。</li>\n<li>../<sibling>导航到一个兄弟路由，先回到上一级，然后进入兄弟路由路径</sibling></li>\n</ul>\n<p>使用例子：</p>\n<pre><code>this.router.navigate([crisis.id], { relativeTo: this.route })；\nthis.router.navigate([&apos;../&apos;, { id: crisisId, foo: &apos;foo&apos; }], { relativeTo: this.route });\n</code></pre><p>使用RouterLink来进行导航，使用相同的链接参数数组，不过不需要提供relativeTo属性，因为ActivatedRoute已经隐含在了RouterLink指令中，下面定义与上面等效：</p>\n<pre><code>&lt;a [routerLink]=&quot;[crisis.id]&quot;&gt;\n</code></pre><h5 id=\"最后，一些好东西：\"><a href=\"#最后，一些好东西：\" class=\"headerlink\" title=\"最后，一些好东西：\"></a>最后，一些好东西：</h5><p>1 ) RouterLinkActive指令会基于当前的RouterState对象来为激活的RouterLink切换CSS类,这会一直沿着路由树往下进行级联处理，所以父路由链接和子路由链接可能会同时激活。使用routerLinkActiveOptions属性可以改变这种行为，比如：</p>\n<pre><code>&lt;a routerLink=&quot;/contact&quot; routerLinkActive=&quot;Active&quot;\n      [routerLinkActiveOptions]=&quot;{exact: true}&quot;&gt;\n&lt;/a&gt;\n</code></pre><p>如上设置可以限制只有在其URL与当前URL精确匹配时才会激活指定的RouterLink</p>\n<p>2 ) 路由器中的一些关键词</p>\n<ul>\n<li>Router，路由器，为激活的URL显示应用组件，并管理从组件之间的导航</li>\n<li>RouterModule，路由器模块，一个独立的Angular模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令</li>\n<li>Routes，路由数组，数组里每个成员都会把一个URL路径映射到一个组件。</li>\n<li>Route，路由成员，定义路由器该如何根据URL模式（pattern）来导航到组件，大多数路由都由路径和组件类构成</li>\n<li>RouterOutlet，路由出口<router-outlet>，用来标记出路由器该在哪里显示视图</router-outlet></li>\n<li>RouterLink，路由链接routerLink，该指令用来把一个可点击的HTML元素绑定到路由，点击带有绑定到字符串或链接参数数组的routerLink指令的元素就会触发一次导航</li>\n<li>RouterLinkActiv，活动路由链接routerLinkActive，当HTML元素上或元素内的routerLink变为激活或非激活状态时，该指令为这个HTML元素添加或移除CSS类</li>\n<li>ActivatedRoute，激活的路由，为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）</li>\n<li>RouterState，路由器状态，路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法</li>\n<li>链接参数数组，这个数组会被路由器解释成一个路由操作指南。我们可以把一个RouterLink绑定到该数组，或者把它作为参数传给Router.navigate方法</li>\n<li>路由组件，一个带有RouterOutlet的Angular组件，它根据路由器的导航来显示相应的视图</li>\n</ul>\n<p>3 ) 特性领域的路由特征：</p>\n<ul>\n<li>每个特性都有自己的路由模块。</li>\n<li>每个特性区都有自己的根组件。</li>\n<li>每个特性区的根组件中都有自己的路由出口及其子路由。</li>\n<li>特性区的路由很少（或完全不）与其它特性区的路由交叉</li>\n</ul>\n<p>4 ) 多路由出口<br>在模板中，路由器只能支持一个无名主路由出口,但可以有多个命名的路由出口<br>每个命名出口都自己有一组带组件的路由。多重出口可以在同一时间根据不同的路由来显示不同的内容</p>\n<p><strong>出口定义: </strong></p>\n<pre><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;router-outlet name=&quot;popup1&quot;&gt;&lt;/router-outlet&gt;\n&lt;router-outlet name=&quot;popup2&quot;&gt;&lt;/router-outlet&gt;\n</code></pre><p><strong>配置路由对象：</strong></p>\n<pre><code>{\n  path: &apos;compose&apos;,\n  component: ComposeMessageComponent,\n  outlet: &apos;popup&apos;\n}\n</code></pre><p><strong>使用方式：</strong></p>\n<pre><code>&lt;a [routerLink]=&quot;[{ outlets: { popup: [&apos;compose&apos;] } }]&quot;&gt;Contact&lt;/a&gt;\n</code></pre><p>链接参数数组包含一个只有一个outlets属性的对象，它的值是另一个对象，这个对象以一个或多个路由的出口名作为属性名。 在这里，它只有一个出口名“popup”，它的值则是另一个链接参数数组，用于指定compose路由</p>\n<blockquote>\n<p>注意：<br>当有且只有一个无名出口时，外部对象中的这个outlets对象不是必须的，路由器假设这个路由指向了无名的主出口，并为我们创建这些对象。<br>当路由到一个命名出口时，我们就会发现这个隐藏的真相</p>\n</blockquote>\n<p><strong>关闭命名出口：</strong></p>\n<pre><code>this.router.navigate([{ outlets: { popup: null }}]);\n</code></pre><p><strong>各个outlet出口独立导航：</strong><br>路由器在导航树中可以对多个独立的分支保持追踪，并在URL中对这棵树进行表达。<br>我们可以添加更多出口和更多路由（无论是在顶层还是在嵌套的子层）来创建一个带有多个分支的导航树， 路由器将会生成相应的URL。<br>通过像前面那样填充outlets对象，我们可以告诉路由器立即导航到一棵完整的树。 然后把这个对象通过一个链接参数数组传给router.navigate方法</p>\n<p>5 ) 各类路由参数的定义提取的区别</p>\n<ul>\n<li><p>path参数：url/:id<br>使用方式：router.navigate([url,123]); [routerLink]=”[url, 123]”<br>表现形式：url/123<br>提取方式：<br>this.activateRoute.params.subscribe((params: Params)) =&gt; { let id = params[‘id’]; });</p>\n</li>\n<li><p>可选参数<br>使用方式：router.navigate([url,{id: 123}]); [routerLink]=”[url, {id: 123}]”<br>表现形式：url;id=123<br>提取方式：<br>this.activateRoute.params.subscribe((params: Params)) =&gt; { let id = params[‘id’]; });</p>\n</li>\n<li><p>查询参数<br>使用方式：router.navigate([url], {queryParams: {id: 123}}); [routerLink]=”[url]”  [queryParams]=”{id: 123}”<br>表现形式：url?id=123<br>提取方式：<br>this.activateRoute.queryParams.subscribe((params: queryParams)) =&gt; { let id = params[‘id’]; });</p>\n</li>\n</ul>\n<p>6 ) navigate和navigateByUrl<br>相同点：底层都是调用的相同的方法router.scheduleNavigation()进行处理和导航<br>不同点：<br>a. 使用方式不同：navigate([]) ; navigateByUrl(url)<br>  比如下面两个效果是一样:<br>  navigate([url, 123]);navigateByUrl(‘url/123’);<br>b. navigate可以实现相对路由，而navigateByUrl不行</p>\n","site":{"data":{}},"excerpt":"<p>路由与导航是组织多页面应用的基本需求，也是angular最重要的几个特性之一。Angular提供了强大的路由机制来保证页面之间的跳转，根据配置的地址导航对应视图页面，并将地址值更新到浏览器地址栏中，将应用的所以页面有机的组织在了一起<br>","more":"</p>\n<h2 id=\"路由树\"><a href=\"#路由树\" class=\"headerlink\" title=\"路由树\"></a>路由树</h2><p>路由树是angular三大基本树结构之一，有着自己的配置方式，一般以单独的路由模块提供，伴随着模块的导入和导出，形成树状路由，如下图时一个典型的伴随着模块的组织而形成的路由树状结构：<br><img src=\"/images/route-tree.jpg\" alt=\"route-tree\"></p>\n<h2 id=\"路由路径导航\"><a href=\"#路由路径导航\" class=\"headerlink\" title=\"路由路径导航\"></a>路由路径导航</h2><p>模块直接导入之后，相应的路由模块的配置与准入模块的路由进行了合并，成为树的同级枝丫，下面是根据上一节路由树所描绘处理的导航示意图，以及形成的URL与组件的对应关系：<br><img src=\"/images/route-url-tree.jpg\" alt=\"route-url-tree\"><br>如图所示，每一个url路径对应一个组件，路由器会根据在浏览器地址栏输入的地址或者代码里命令形式导航的地址去匹配相应的url，渲染对应组件的视图</p>\n<h2 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h2><p>关于angular路由请点击<a href=\"https://www.angular.cn/docs/ts/latest/guide/hierarchical-dependency-injection.html\" title=\"angular-多级注入器\" target=\"_blank\" rel=\"external\">这里</a>查看官方指导文档<br>基本的路由配置就几个步骤：</p>\n<h4 id=\"1-基准地址配置\"><a href=\"#1-基准地址配置\" class=\"headerlink\" title=\"1. 基准地址配置\"></a>1. 基准地址配置</h4><p>angular使用pushState方式构造url，必须设置基准地址，pushState才能正常工作<br><strong>设置方式：</strong></p>\n<p>1 ). 如果app目录是应用的根目录，可以在index.html设置：<code>&lt;base href=&quot;/&quot;&gt;</code><br>2 ). 在根模块中使用适当的APP_BASE_HREF值配置provide路由器，不过这种配置方式，应用中图片、CSS文件等的引用要使用绝对路径，比如:</p>\n<pre><code>providers: [{provide: APP_BASE_HREF, useValue: &apos;/my/app&apos;}]\n</code></pre><blockquote>\n<p>当两种方式同时都有设置的时候，provide注入的优先级更高</p>\n</blockquote>\n<p><strong>配置作用：</strong></p>\n<ul>\n<li>告诉路由器该如何合成导航用的url</li>\n<li>方便引用CSS文件、脚本和图片，浏览器会用基准地址的值作为相对URL的前缀</li>\n</ul>\n<h4 id=\"2-路由列表配置\"><a href=\"#2-路由列表配置\" class=\"headerlink\" title=\"2. 路由列表配置\"></a>2. 路由列表配置</h4><p>路由列表以路由模块的方式来提供，下面是一个典型的简单路由列表：</p>\n<pre><code>import { NgModule }              from &apos;@angular/core&apos;;\nimport { RouterModule, Routes }  from &apos;@angular/router&apos;;\nimport { CrisisListComponent }   from &apos;./crisis-list.component&apos;;\nimport { HeroListComponent }     from &apos;./hero-list.component&apos;;\nimport { PageNotFoundComponent } from &apos;./not-found.component&apos;;\n\nconst appRoutes: Routes = [\n  { path: &apos;crisis-center&apos;, component: CrisisListComponent },\n  { path: &apos;heroe/:id&apos;,        component: HeroComponent },\n  { path: &apos;&apos;,   redirectTo: &apos;/heroes&apos;, pathMatch: &apos;full&apos; },\n  { path: &apos;**&apos;, component: PageNotFoundComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class AppRoutingModule {}\n</code></pre><p>（1）路由项以{path:,component:}为基本定义格式，保存路由的注册映射表，当浏览器的URL变化或代码中直接导航到某一url路径时，路由器就会翻出映射表,激活或生成对应组件的实例，用来显示视图，更新url到地址栏<br>（2）path不需要以斜杠（/）开头，路由器会为解析和构建最终的URL<br>（3）路由匹配是第一次最先匹配即停止原则，所以声明顺序很重要，建议顺序：具体路由-&gt;空路由-&gt;通配路由，通配path(<code>**</code>)可放置在最后作为错误url的默认页面提示<br>（4）注册路由方式：RouterModule.forRoot只能用于根模块；RouterModule.forChild用于特性模块</p>\n<h4 id=\"3-路由导航\"><a href=\"#3-路由导航\" class=\"headerlink\" title=\"3. 路由导航\"></a>3. 路由导航</h4><p>导航的声明方式有链接式和命令式导航两种：</p>\n<ul>\n<li>链接式，<code>routerLink=&quot;/hero/undefined&quot;</code></li>\n<li>命令式，<code>this.router.navigate([&#39;/hero&#39;, hero.id])</code></li>\n</ul>\n<p>假如要导航到一个英雄的详情页面，下面3中方式是等效的</p>\n<pre><code>&lt;button type=&quot;button&quot; routerLink=&quot;{{'/hero/' + crisis.id}}&quot; routerLinkActive=&quot;Active&quot;&gt;\n&lt;/button&gt;\n\n&lt;button type=&quot;button&quot; [routerLink]=&quot;[&apos;/hero&apos;, hero.id]&quot;\n[routerLinkActive]=&quot;[&apos;Active&apos;,&apos;classA&apos;]&quot;&gt;&lt;/button&gt;\n\n&lt;button type=&quot;button&quot; (click)=&quot;gotoDetail()&quot; routerLinkActive=&quot;Active&quot;&gt;&lt;/button&gt;\ngotoDetail() {this.router.navigate([&apos;/hero&apos;, hero.id]);}\n</code></pre><p>（1） routerLinkActive:RouterLinkActive指令属性绑定，用于在路由激活时把CSS类添加到该元素上,反之则移除<br>（2）RouterLinkActive可以绑定到一个CSS类组成的数组，绑定方式有[routerLinkActive]=”[‘A’,’B’]” 或 routerLinkActive=“A B”</p>\n<blockquote>\n<p>注意：当使用button标签进行路由时，务必制定type=”button”,如果不指定默认是“submit”类型，会默认出发表单提交</p>\n</blockquote>\n<p>（3）RouterLinkActive还可以绑定到多个链接组里，当其中一个匹配到就添加样式类，适合用于菜单项的激活显示</p>\n<pre><code>&lt;div outerLinkActiver=&quot;Active&quot;&gt;\n   &lt;button type=&quot;button&quot; routerLink=&quot;{{'/hero/'}}&quot; &gt;\n    &lt;/button&gt;\n   &lt;button type=&quot;button&quot; routerLink=&quot;{{'/power/'}}&quot;&gt;\n    &lt;/button&gt;\n&lt;/div&gt;\n</code></pre><h4 id=\"4-路由参数提取\"><a href=\"#4-路由参数提取\" class=\"headerlink\" title=\"4. 路由参数提取\"></a>4. 路由参数提取</h4><h5 id=\"1-参数提取对象\"><a href=\"#1-参数提取对象\" class=\"headerlink\" title=\"(1) 参数提取对象\"></a>(1) 参数提取对象</h5><p>ActivatedRoute，可以通过注入此路由服务来获取路由的路径和参数，它有很多有用的信息：</p>\n<pre><code>url //路由路径的Observable对象，它的值是一个由路径中各个部件组成的字符串数组\ndata //该路由提供的data对象的一个Observable对象，还包含从resolve守卫中解析出来的值\nparams //包含该路由的必选参数和可选参数的Observable对象\nqueryParams //一个包含对所有路由都有效的查询参数的Observable对象。\nfragment //一个包含对所有路由都有效的片段值的Observable对象。\noutlet //RouterOutlet的名字，用于指示渲染该路由的位置,对于未命名的RouterOutlet，这个名字是primary\nrouteConfig //与该路由的原始路径对应的配置信息。\nparent //当使用子路由时，它是一个包含父路由信息的ActivatedRoute对象\nfirstChild //包含子路由列表中的第一个ActivatedRoute对象。\nchildren //包含当前路由下激活的全部子路由。\n</code></pre><blockquote>\n<p>注意：当在组件中订阅一个可观察对象时，我们通常总是要在组件销毁时取消这个订阅,但是也有少数例外情况不需要取消订阅，而ActivateRoute中的各种可观察对象就是属于这种情况。ActivateRoute及其可观察对象都是由Router本身负责管理的。 Router会在不再需要时销毁这个路由组件，而注入进去的ActivateRoute也随之销毁了</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>新版本使用paramsMap替代params，queryParamsMap替代queryParams，它们拥有如下方法:</p>\n<ul>\n<li>has(key)-&gt; 判断是否有此参数，true/false</li>\n<li>get(key)-&gt; 获取参数值，value/null</li>\n<li>getAll(key) -&gt; 获取所以参数值数组，[value,…] / []</li>\n<li>key –&gt; 获取所以键值数组，[key,…] / []<br>比如：router.snapshot.params.get(‘id’);</li>\n</ul>\n</blockquote>\n<h5 id=\"（2）提取参数的方式\"><a href=\"#（2）提取参数的方式\" class=\"headerlink\" title=\"（2）提取参数的方式\"></a>（2）提取参数的方式</h5><p>使用可观察对象订阅的方式，下面两种方式效果相同<br><strong>switchMap</strong><br>switchMap允许你在Observable的当前值上执行一个动作，并将它映射一个新的Observable,然后再使用subscribe方法解析Observable对象获取值<br>    import { ActivateRoute }  from ‘@angular/router’;</p>\n<pre><code>constructor(private route: ActivateRoute) {\n    this.route.params\n        .switchMap((params: Params) =&gt; this.service.getHero(+params[&apos;id&apos;]))\n        .subscribe((hero: Hero) =&gt; this.hero = hero);\n}\n</code></pre><p><strong>subscribe</strong><br>使用subscribe方法直接解析params参数信息，获取数据值<br>    import { ActivateRoute }  from ‘@angular/router’;</p>\n<pre><code>constructor(private route: ActivateRoute) {\n  this.route.params\n    .subscribe((params: Params) =&gt; {\n        this.hero = this.service.getHero(+params[&apos;id&apos;]);\n    });\n}\n</code></pre><p><strong>快照</strong><br>如果组件的实例不会被复用，可以使用一次性的快照route.snapshot来简化实现，它提供了路由参数的初始值，可以通过它来直接访问参数，而不用订阅或者添加<br>    import { ActivateRoute }  from ‘@angular/router’;</p>\n<pre><code>constructor(private route: ActivateRoute) {\n    this.hero = this.service.getHero(+this.route.snapshot.params[&apos;id&apos;]);\n}\n</code></pre><blockquote>\n<p>注意事项：<br>1）像许多其它rxjs操作符一样，switchMap既可以处理Observable也可以处理Promise发射的值。并且，如果用户重新导航到该路由，并且它正在获取一个英雄时，switchMap操作符还会取消任何正在执行的请求<br>2）默认情况，如果没有访问过其它组件就导航到了同一个组件实例，路由器倾向于复用组件实例,比如：搜索功能，这就需要Observable对象的方法来动态处理</p>\n</blockquote>\n<p><strong>可选参数的定义和提取</strong><br>可选参数是导航期间传送任意复杂信息的理想载体，可选参数不涉及到模式匹配，在表达上提供了巨大的灵活性<br>1）定义方式<br>只要在必要参数之后，通过一个独立的对象来定义可选参数，比如：</p>\n<pre><code>this.router.navigate([&apos;/heroes&apos;, heroId, { foo: &apos;123&apos; }]);\n</code></pre><p>合成的URL为：/heroes/123456;foo=foo1 ，可选的路由参数在url中没有使用“？”和“&amp;”符号分隔，而是以;和主url相隔<br>2）提取方式</p>\n<pre><code>this.heroes = this.route.params\n  .switchMap((params: Params) =&gt; {\n    this.foo = +params[&apos;foo&apos;];\n    return this.service.getHeroes();\n  });\n</code></pre><h2 id=\"路由视图目标出口的选择\"><a href=\"#路由视图目标出口的选择\" class=\"headerlink\" title=\"路由视图目标出口的选择\"></a>路由视图目标出口的选择</h2><p>理由器在为组件选择显示出口的时候，是以距离最近为原则，就是选择距离组件最近的上层outlet目标进行呈现，比如：</p>\n<pre><code>{\n    path: &apos;crisis-center&apos;,\n    component: CrisisCenterComponent,\n    children: [\n        {\n            path: &apos;compose&apos;,\n            component: ComposeMessageComponent\n        },\n        {\n            path: &apos;&apos;,\n            component: CrisisListComponent,\n            children: [\n                {\n                    path: &apos;:id&apos;,\n                    component: CrisisDetailComponent\n                },\n                {\n                    path: &apos;&apos;,\n                    component: CrisisCenterHomeComponent\n                }\n            ]\n        }\n    ]\n}\n</code></pre><p>本例中，组件CrisisCenterComponent和CrisisListComponent的模板中都有outlet出口定义，所以</p>\n<ul>\n<li>ComposeMessageComponent将在CrisisCenterComponent的outlet渲染呈现</li>\n<li>CrisisCenterHomeComponent和CrisisDetailComponent在CrisisListComponent的outlet呈现；</li>\n</ul>\n<p>若距离最近的父组件没有outlet，则往上匹配，在更上一级父组件的outlet；举个例子，如果把path: ‘compose’放在于crisis-center同级，将直接匹配appcomponent的outlet位置；同理，如果放在于CrisisDetail同级作为list的子路由，则将优先匹配<br>CrisisListComponent的outlet位置，不行再往上匹配</p>\n<h2 id=\"相对路由\"><a href=\"#相对路由\" class=\"headerlink\" title=\"相对路由\"></a>相对路由</h2><p>特性模块内部应该优先考试使用相对路由，以减少对上层路由的依赖<br><strong>“目录式”语法</strong></p>\n<ul>\n<li>./或无前导斜线形式是相对于当前级别的。</li>\n<li>../会回到当前路由路径的上一级。</li>\n<li>../<sibling>导航到一个兄弟路由，先回到上一级，然后进入兄弟路由路径</sibling></li>\n</ul>\n<p>使用例子：</p>\n<pre><code>this.router.navigate([crisis.id], { relativeTo: this.route })；\nthis.router.navigate([&apos;../&apos;, { id: crisisId, foo: &apos;foo&apos; }], { relativeTo: this.route });\n</code></pre><p>使用RouterLink来进行导航，使用相同的链接参数数组，不过不需要提供relativeTo属性，因为ActivatedRoute已经隐含在了RouterLink指令中，下面定义与上面等效：</p>\n<pre><code>&lt;a [routerLink]=&quot;[crisis.id]&quot;&gt;\n</code></pre><h5 id=\"最后，一些好东西：\"><a href=\"#最后，一些好东西：\" class=\"headerlink\" title=\"最后，一些好东西：\"></a>最后，一些好东西：</h5><p>1 ) RouterLinkActive指令会基于当前的RouterState对象来为激活的RouterLink切换CSS类,这会一直沿着路由树往下进行级联处理，所以父路由链接和子路由链接可能会同时激活。使用routerLinkActiveOptions属性可以改变这种行为，比如：</p>\n<pre><code>&lt;a routerLink=&quot;/contact&quot; routerLinkActive=&quot;Active&quot;\n      [routerLinkActiveOptions]=&quot;{exact: true}&quot;&gt;\n&lt;/a&gt;\n</code></pre><p>如上设置可以限制只有在其URL与当前URL精确匹配时才会激活指定的RouterLink</p>\n<p>2 ) 路由器中的一些关键词</p>\n<ul>\n<li>Router，路由器，为激活的URL显示应用组件，并管理从组件之间的导航</li>\n<li>RouterModule，路由器模块，一个独立的Angular模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令</li>\n<li>Routes，路由数组，数组里每个成员都会把一个URL路径映射到一个组件。</li>\n<li>Route，路由成员，定义路由器该如何根据URL模式（pattern）来导航到组件，大多数路由都由路径和组件类构成</li>\n<li>RouterOutlet，路由出口<router-outlet>，用来标记出路由器该在哪里显示视图</router-outlet></li>\n<li>RouterLink，路由链接routerLink，该指令用来把一个可点击的HTML元素绑定到路由，点击带有绑定到字符串或链接参数数组的routerLink指令的元素就会触发一次导航</li>\n<li>RouterLinkActiv，活动路由链接routerLinkActive，当HTML元素上或元素内的routerLink变为激活或非激活状态时，该指令为这个HTML元素添加或移除CSS类</li>\n<li>ActivatedRoute，激活的路由，为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）</li>\n<li>RouterState，路由器状态，路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法</li>\n<li>链接参数数组，这个数组会被路由器解释成一个路由操作指南。我们可以把一个RouterLink绑定到该数组，或者把它作为参数传给Router.navigate方法</li>\n<li>路由组件，一个带有RouterOutlet的Angular组件，它根据路由器的导航来显示相应的视图</li>\n</ul>\n<p>3 ) 特性领域的路由特征：</p>\n<ul>\n<li>每个特性都有自己的路由模块。</li>\n<li>每个特性区都有自己的根组件。</li>\n<li>每个特性区的根组件中都有自己的路由出口及其子路由。</li>\n<li>特性区的路由很少（或完全不）与其它特性区的路由交叉</li>\n</ul>\n<p>4 ) 多路由出口<br>在模板中，路由器只能支持一个无名主路由出口,但可以有多个命名的路由出口<br>每个命名出口都自己有一组带组件的路由。多重出口可以在同一时间根据不同的路由来显示不同的内容</p>\n<p><strong>出口定义: </strong></p>\n<pre><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;router-outlet name=&quot;popup1&quot;&gt;&lt;/router-outlet&gt;\n&lt;router-outlet name=&quot;popup2&quot;&gt;&lt;/router-outlet&gt;\n</code></pre><p><strong>配置路由对象：</strong></p>\n<pre><code>{\n  path: &apos;compose&apos;,\n  component: ComposeMessageComponent,\n  outlet: &apos;popup&apos;\n}\n</code></pre><p><strong>使用方式：</strong></p>\n<pre><code>&lt;a [routerLink]=&quot;[{ outlets: { popup: [&apos;compose&apos;] } }]&quot;&gt;Contact&lt;/a&gt;\n</code></pre><p>链接参数数组包含一个只有一个outlets属性的对象，它的值是另一个对象，这个对象以一个或多个路由的出口名作为属性名。 在这里，它只有一个出口名“popup”，它的值则是另一个链接参数数组，用于指定compose路由</p>\n<blockquote>\n<p>注意：<br>当有且只有一个无名出口时，外部对象中的这个outlets对象不是必须的，路由器假设这个路由指向了无名的主出口，并为我们创建这些对象。<br>当路由到一个命名出口时，我们就会发现这个隐藏的真相</p>\n</blockquote>\n<p><strong>关闭命名出口：</strong></p>\n<pre><code>this.router.navigate([{ outlets: { popup: null }}]);\n</code></pre><p><strong>各个outlet出口独立导航：</strong><br>路由器在导航树中可以对多个独立的分支保持追踪，并在URL中对这棵树进行表达。<br>我们可以添加更多出口和更多路由（无论是在顶层还是在嵌套的子层）来创建一个带有多个分支的导航树， 路由器将会生成相应的URL。<br>通过像前面那样填充outlets对象，我们可以告诉路由器立即导航到一棵完整的树。 然后把这个对象通过一个链接参数数组传给router.navigate方法</p>\n<p>5 ) 各类路由参数的定义提取的区别</p>\n<ul>\n<li><p>path参数：url/:id<br>使用方式：router.navigate([url,123]); [routerLink]=”[url, 123]”<br>表现形式：url/123<br>提取方式：<br>this.activateRoute.params.subscribe((params: Params)) =&gt; { let id = params[‘id’]; });</p>\n</li>\n<li><p>可选参数<br>使用方式：router.navigate([url,{id: 123}]); [routerLink]=”[url, {id: 123}]”<br>表现形式：url;id=123<br>提取方式：<br>this.activateRoute.params.subscribe((params: Params)) =&gt; { let id = params[‘id’]; });</p>\n</li>\n<li><p>查询参数<br>使用方式：router.navigate([url], {queryParams: {id: 123}}); [routerLink]=”[url]”  [queryParams]=”{id: 123}”<br>表现形式：url?id=123<br>提取方式：<br>this.activateRoute.queryParams.subscribe((params: queryParams)) =&gt; { let id = params[‘id’]; });</p>\n</li>\n</ul>\n<p>6 ) navigate和navigateByUrl<br>相同点：底层都是调用的相同的方法router.scheduleNavigation()进行处理和导航<br>不同点：<br>a. 使用方式不同：navigate([]) ; navigateByUrl(url)<br>  比如下面两个效果是一样:<br>  navigate([url, 123]);navigateByUrl(‘url/123’);<br>b. navigate可以实现相对路由，而navigateByUrl不行</p>"},{"title":"表单-响应式构建表单","date":"2017-11-26T10:09:52.000Z","comments":1,"_content":"\n## 什么是响应式表单\n\n响应式表单主要是数据管理的方式不同，它是在类中显式的管理我们的数据流和数据模型，直接操作数据模型进行状态控制。同时，它还以可以直接在组件类中创建表单控件树，并绑定到相应的标签上来构建表单，简单方便。\n<!--more-->\n响应式表单有以下特点：\n\n- 显式的管理数据方式，方便了校验和测试\n- 表单的控件值和有效性状态的更新是同步的，不会有更新时序问题，更易单元测试;而之前的模板驱动表单是更新异步的，存在更新的时序和效率问题，在有些场景下会存在使用瓶颈\n- 由于表单数据模型是自定义的，所以可以根据数据对象的结构来定义结构类似的模型树满足，这样数据更新更方便\n\n## 基本组成\n\n**AbstractControl**： 三个具体表单类的抽象基类。 并为它们提供了一些共同的行为和属性，其中有些是可观察对象（Observable）。\n\n**FormControlDirective/FormControlName** : 用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。请FormControlDirective可单独使用，FormControlName和Group结合使用\n\n**FormGroupDirective/FormGroupName** : 用于 跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。 组件中的顶级表单就是一个FormGroup。而FormGroupName在多级group结构使用\n\n**FormArray/FormArrayName** : 用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。\n\n这些指令都包含在ReactiveFormModule，使用只要包含即可：\n\n    import { ReactiveFormsModule } from '@angular/forms';\n    import { FormControl } from '@angular/forms';\n    @NgModule({\n      imports: [\n        ReactiveFormsModule\n      ],\n      declarations: [\n        AppComponent,\n        FormControl\n      ]\n    }\n\n## 控件指令的使用\n\n上面的指令一般可以单独使用，也可以组合使用，下面描述几种常用的使用场景,为简单标识，我们约定各指令简写：\n\n- FormGroup -- FG\n- FormControl -- FC\n- FormArray -- FA\n\n**（1）FormControl单独使用**\n这是最常见的方式，可以使用单独创建formControl并绑定到表单输入框上，而在模板驱动表单里这个是自动创建的\n.ts\n\n    import { Component } from '@angular/core';\n    import { FormControl, Validators } from '@angular/forms';\n    import { forbiddenNameValidator } from '../forbinden-name.directive';\n\n    @Component({\n      selector: 'reactive-form',\n      templateUrl: './reactive-form.component.html',\n      styleUrls: ['../template-form/template-form.component.css']\n    })\n\n    export class ReactiveFormComponent {\n      name : any;\n\n      constructor() {\n        this.name = new FormControl('Jack',\n                                    [Validators.required,\n                                      Validators.minLength(4),\n                                      forbiddenNameValidator(/[@\\$&0-9]/)]);\n      }\n    }\n\n.html\n\n    <form>\n      <div class=\"form-group\">\n        <label for=\"name\">姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" id=\"name\" [formControl]=\"name\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n    </form>\n    <div class=\"error\" *ngIf=\"(!name.pristine || name.dirty) && name.touched\">\n      <p *ngIf=\"name.errors?.required\">Name is requred!!</p>\n      <p *ngIf=\"name.errors?.minlength\">Name length is under 3!!</p>\n      <p *ngIf=\"name.errors?.forbiddenName\">Name can not has @ $ & and number!!</p>\n    </div>\n    <p>{{name.value}}</p>\n    <p>errors:{{name.errors | json}}</p>\n\n可以看到，我们是在组件类里定义的控件实例，并绑定到控件标签使用：\n***FormControl(初始值，同步校验函数，异步校验函数)***\n表单校验直接使用的是函数形式,多个校验函数组成数据作为实例化入参，我们在模板同样可以像模板驱动表单一样直接额只用name去获取控件的状态和错误信息，用来显示提示\n其中errors信息值这样的，当输入ja3：\n\n    {\n      \"minlength\": { \"requiredLength\": 4, \"actualLength\": 3 },\n      \"forbiddenName\": { \"value\": \"ja3\" }\n    }\n\n**（2）FormControl/FormGroup组合使用**\n主要是多属性组合使用，FG：[FC, FC, ... ]\n\n    import { Component } from '@angular/core';\n    import { FormControl, Validators, FormGroup } from '@angular/forms';\n    import { forbiddenNameValidator } from '../forbinden-name.directive';\n\n    @Component({\n      selector: 'reactive-form',\n      templateUrl: './reactive-form.component.html',\n      styleUrls: ['../template-form/template-form.component.css']\n    })\n    export class ReactiveFormComponent {\n      myForm : any;\n\n      constructor() {\n        this.myForm = new FormGroup({\n          name: new FormControl('Jack',\n                                [Validators.required,\n                                  Validators.minLength(4),\n                                  forbiddenNameValidator(/[@\\$&0-9]/)]),\n          password: new FormControl('',Validators.required)\n        });\n      }\n\n      get name() { return this.myForm.get('name');}\n\n      get password() { return this.myForm.get('password');}\n    }\n\n    <form [formGroup]=\"myForm\">\n      <div class=\"form-group\">\n        <label for=\"name\">姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" id=\"name\" formControlName=\"name\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n      <div class=\"error\" *ngIf=\"(!name.pristine || name.dirty) && name.touched\">\n        <p *ngIf=\"name.errors?.required\">Name is requred!!</p>\n        <p *ngIf=\"name.errors?.minlength\">Name length is under 3!!</p>\n        <p *ngIf=\"name.errors?.forbiddenName\">Name can not has @ $ & and number!!</p>\n      </div>\n      <p>{{name.errors | json}}</p>\n\n      <div class=\"form-group\">\n        <label for=\"password\">密码</label>\n        <div class=\"form-right\">\n          <input type=\"password\" id=\"password\" formControlName=\"password\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n    </form>\n    <p>{{myForm.value | json}}</p>\n\n其中form值为：\n\n    {\n      \"name\": \"Jack\",\n      \"password\": \"\"\n    }\n\n还有一些不一样的特点：\n\n- 跟单独使用不一样，FormControl在标签中的使用为formControlName,用来绑定formGroup里的一个属性\n- 不能再直接使用formControl,而要通过formGroup来获取其他的formControl实例来访问，这里可以声明一个同名getter得到属性实例,然后就可以像单独使用一样访问了\n\n当然，new实例可以使用FormBuilder类替代，上面代码可以改写为：\n\n    import { Component } from '@angular/core';\n    import { FormControl, Validators, FormGroup, FormBuilder } from '@angular/forms';\n    import { forbiddenNameValidator } from '../forbinden-name.directive';\n\n    @Component({\n      selector: 'reactive-form',\n      templateUrl: './reactive-form.component.html',\n      styleUrls: ['../template-form/template-form.component.css']\n    })\n    export class ReactiveFormComponent {\n      myForm : FormGroup;\n\n      constructor(private fb : FormBuilder) {\n        this.myForm = this.fb.group({\n          name: ['Jack',\n                 [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&0-9]/)]],\n          password: ['',Validators.required]\n        });\n      }\n\n      get name() { return this.myForm.get('name');}\n\n      get password() { return this.myForm.get('password');}\n    }\n\n\n**(3) 多级FormGroup**\n主要是多Group和Control嵌套使用，FG：[FC, FG, ... ]\n\n    <form #tForm=\"ngForm\" (ngSubmit)=\"save()\">\n      <div class=\"form-group\">\n        <label>姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" name=\"name\" [(ngModel)]=\"name\" minlength=\"3\" required [forbiddenName]=\"name\" #name1=\"ngModel\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <fieldset ngModelGroup=\"address\" #address=\"ngModelGroup\">\n        <div class=\"form-group\">\n          <label>国家</label>\n          <div class=\"form-right\">\n            <input type=\"text\" name=\"coun\" [(ngModel)]=\"address.country\" />\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label>城市</label>\n          <div class=\"form-right\">\n            <input type=\"text\" name=\"city\" [(ngModel)]=\"address.city\" />\n          </div>\n        </div>\n      </fieldset>\n    </form>\n\n    this.myForm = this.fb.group({\n      name: ['Jack',\n             [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&0-9]/)]],\n      address: this.fb.group({\n        country: '',\n        city: ''\n      }),\n    });\n\n**(4) FormControl数组**\nFA：[FC, FC, ... ]\n\n    <form [formGroup]=\"myForm\" novalidate>\n      <div formArrayName=\"skills\">\n        <div class=\"form-group\" *ngFor=\"let skill of skills.controls;let i=index\">\n          <label *ngIf=\"i === 0\" class=\"yes\">技能</label>\n          <label *ngIf=\"i !== 0\" class=\"no\"></label>\n          <div class=\"form-right\">\n            <input type=\"text\" [formControlName]=\"i\" />\n          </div>\n          <a (click)=\"delSkill(i)\" class=\"del\"> - </a>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"no\"></label>\n        <div class=\"add\">\n          <a (click)=\"addSkill()\"> + </a>\n        </div>\n      </div>\n    </form>\n\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, Validators, FormGroup, FormBuilder,FormArray } from '@angular/forms';\n\n    export class ReactiveFormComponent implements OnInit {\n      myForm : FormGroup;\n      skillList : any[] = [{'value':'Java'},{'value':'Scala'}];\n\n      constructor(private fb : FormBuilder) {\n        this.myForm = this.fb.group({\n          skills: this.fb.array([])\n        });\n      }\n\n      ngOnInit() {\n        this.initSkillList();\n      }\n\n      initSkillList() {\n        const tempArray = this.skillList.map((skill) => new FormControl(skill.value));\n        const skillFormArray = this.fb.array(tempArray);\n        this.myForm.setControl('skills', skillFormArray)\n      }\n\n      addSkill() {\n        let temp = new FormControl();\n        this.skills.push(temp);\n      }\n\n      delSkill(index : any) {\n        this.skills.removeAt(index);\n      }\n\n      get skills(): FormArray {\n        return this.myForm.get('skills') as FormArray;\n      };\n    }\n\n可以看到，必须使用getter来访问控件数组，并使用.controls来访问控件\n\n**(5) FormGroup数组**\nFA：[FG, FG, ... ]\n\n    <form [formGroup]=\"myForm\" novalidate>\n      <fieldset formArrayName=\"address\">\n        <div *ngFor=\"let oneAddress of address.controls; let i=index\" [formGroupName]=\"i\">\n          <h4>Address #{{i + 1}}</h4>\n          <div class=\"form-group\">\n            <label>国家</label>\n            <div class=\"form-right\">\n              <input type=\"text\" formControlName=\"country\" />\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label>城市</label>\n            <div class=\"form-right\">\n              <input type=\"text\" formControlName=\"city\" />\n            </div>\n            <a (click)=\"delAdress(i)\" class=\"del\"> - </a>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"no\"></label>\n          <div class=\"add\">\n            <a (click)=\"addAdress()\"> + </a>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n\n      myForm : FormGroup;\n\n      constructor(private fb : FormBuilder) {\n        this.myForm = this.fb.group({\n          address: this.fb.array([]),)\n        });\n      }\n\n      ngOnInit() {\n        this.initAdressList();\n      }\n\n      initAdressList() {\n        const tempArray = [this.fb.group({country: 'China', city: 'shanghai'})];\n        const adressFormArray = this.fb.array(tempArray);\n        this.myForm.setControl('address', adressFormArray)\n      }\n\n      addAdress() {\n        let temp = this.fb.group({country: '', city: ''});\n        this.address.push(temp);\n      }\n\n      delAdress(index : any) {\n        this.address.removeAt(index);\n      }\n\n      get address(): FormArray {\n        return this.myForm.get('address') as FormArray;\n      };\n\n## 完整表单例子\n\n本节使用响应式构建与模板驱动表单一节中效果相同的表单\n\ncomponent.ts\n\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, Validators, FormGroup, FormBuilder,FormArray } from '@angular/forms';\n    import { forbiddenNameValidator } from '../forbinden-name.directive';\n\n    @Component({\n      selector: 'reactive-form',\n      templateUrl: './reactive-form.component.html',\n      styleUrls: ['../template-form/template-form.component.css']\n    })\n    export class ReactiveFormComponent implements OnInit {\n      myForm : FormGroup;\n      sexs : any[] = [{'name':'女','value':'famale'},{'name':'男','value':'male'}];\n      likes : any[] = [{'name':'看电视','value':'Watch Tv','isChecked':false},\n                        {'name':'读书','value':'Book','isChecked':false}];\n      selectedLikes : any[] = [];\n      baocuns : any[] = [{'name':'是','value':'Yes','isChecked':false},{'name':'否','value':'No','isChecked':false}];\n      skillList : any[] = [{'value':'Java'},{'value':'Scala'}];\n\n      constructor(private fb : FormBuilder) {\n        this.myForm = this.fb.group({\n          name: ['Jack',\n                 [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&0-9]/)]],\n          sex: ['male',Validators.required],\n          shengri: ['1990-01-01',Validators.required],\n          password: ['',Validators.required],\n          address: this.fb.array([]),\n          like: [],\n          baocun:'',\n          skills: this.fb.array([])\n        });\n      }\n\n      ngOnInit() {\n        this.initAdressList();\n        this.initSkillList();\n\n      }\n\n      get name() { return this.myForm.get('name');}\n\n      get password() { return this.myForm.get('password');}\n\n      selectLikes(flag: any,value : any) {\n        if(flag.target.checked) {\n          this.selectedLikes.push(value);\n        } else {\n          this.selectedLikes = this.selectedLikes.filter((like) => {\n            return like !== value;\n          });\n        }\n        this.myForm.patchValue({\n          like: this.selectedLikes\n        });\n      }\n\n      initAdressList() {\n        const tempArray = [this.fb.group({country: 'China', city: 'shanghai'})];\n        const adressFormArray = this.fb.array(tempArray);\n        this.myForm.setControl('address', adressFormArray)\n      }\n\n      addAdress() {\n        let temp = this.fb.group({country: '', city: ''});\n        this.address.push(temp);\n      }\n\n      delAdress(index : any) {\n        this.address.removeAt(index);\n      }\n\n      get address(): FormArray {\n        return this.myForm.get('address') as FormArray;\n      };\n\n      initSkillList() {\n        const tempArray = this.skillList.map((skill) => new FormControl(skill.value));\n        const skillFormArray = this.fb.array(tempArray);\n        this.myForm.setControl('skills', skillFormArray)\n      }\n\n      addSkill() {\n        let temp = new FormControl();\n        this.skills.push(temp);\n      }\n\n      delSkill(index : any) {\n        this.skills.removeAt(index);\n      }\n\n      get skills(): FormArray {\n        return this.myForm.get('skills') as FormArray;\n      };\n    }\n\ncomponent.html\n\n    <form [formGroup]=\"myForm\" novalidate>\n      <div class=\"form-group\">\n        <label for=\"name\">姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" id=\"name\" formControlName=\"name\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label>性别</label>\n        <div  class=\"form-right\">\n          <select name=\"Sex\" formControlName=\"sex\">\n            <option *ngFor=\"let sex of sexs\" [value]=\"sex.value\">{{sex.name}}</option>\n          </select>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label>出生年月</label>\n        <div class=\"form-right\">\n          <input type=\"date\" formControlName=\"shengri\" required/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"password\">密码</label>\n        <div class=\"form-right\">\n          <input type=\"password\" id=\"password\" formControlName=\"password\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <fieldset formArrayName=\"address\">\n        <div *ngFor=\"let oneAddress of address.controls; let i=index\" [formGroupName]=\"i\">\n          <h4>Address #{{i + 1}}</h4>\n          <div class=\"form-group\">\n            <label>国家</label>\n            <div class=\"form-right\">\n              <input type=\"text\" formControlName=\"country\" />\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label>城市</label>\n            <div class=\"form-right\">\n              <input type=\"text\" formControlName=\"city\" />\n            </div>\n            <a (click)=\"delAdress(i)\" class=\"del\"> - </a>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"no\"></label>\n          <div class=\"add\">\n            <a (click)=\"addAdress()\"> + </a>\n          </div>\n        </div>\n      </fieldset>\n\n      <div  class=\"form-group\"  *ngFor=\"let like2 of likes;let i=index\">\n        <label *ngIf=\"i ===0\" class=\"yes\">兴趣爱好</label>\n        <label *ngIf=\"i !==0\" class=\"no\"></label>\n        <div>\n          <input type=\"checkbox\" #lock formControlName=\"like\" [value]=\"like2.value\"\n                 (change)=\"selectLikes($event,lock.value)\"/>{{like2.name}}\n        </div>\n      </div>\n\n      <div formArrayName=\"skills\">\n        <div class=\"form-group\" *ngFor=\"let skill of skills.controls;let i=index\">\n          <label *ngIf=\"i === 0\" class=\"yes\">技能</label>\n          <label *ngIf=\"i !== 0\" class=\"no\"></label>\n          <div class=\"form-right\">\n            <input type=\"text\" [formControlName]=\"i\" />\n          </div>\n          <a (click)=\"delSkill(i)\" class=\"del\"> - </a>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"no\"></label>\n        <div class=\"add\">\n          <a (click)=\"addSkill()\"> + </a>\n        </div>\n      </div>\n\n      <div *ngFor=\"let bao of baocuns;let i=index\" class=\"form-group\">\n        <label *ngIf=\"i === 0\" class=\"yes\">是否保存</label>\n        <label *ngIf=\"i !== 0\" class=\"no\"></label>\n        <div>\n          <input  type=\"radio\" formControlName=\"baocun\" [value]=\"bao.value\"/>{{bao.name}}\n        </div>\n      </div>\n\n      <div class=\"button-group\">\n        <button class=\"confirm\" [disabled]=\"!myForm.valid\">提交</button>\n        <button class=\"concel\" (click)=\"myForm.reset()\">取消</button>\n      </div>\n    </form>\n    <p>{{myForm.value | json}}</p>\n\n样子如下：\n![reactiveForm1](/images/reactiveForm1.png)\n![reactiveForm2](/images/reactiveForm2.png)\n\n\n##### 其他有用的东西：\n\n**1 . 同步和异步更新**\n\n响应式表单是同步的。\n使用响应式表单，我们会在代码中创建整个表单控件树。 我们可以立即更新一个值或者深入到表单中的任意节点，因为所有的控件都始终是可用的。\n\n模板驱动表单是异步的。\n模板驱动表单会委托指令来创建它们的表单控件。 为了消除“检查完后又变化了”的错误，这些指令需要消耗一个以上的变更检测周期来构建整个控件树。 这意味着在从组件类中操纵任何控件之前，我们都必须先等待一个节拍。\n比如，如果我们用@ViewChild(NgForm)查询来注入表单控件，并在生命周期钩子ngAfterViewInit中检查它，就会发现它没有子控件。 我们必须使用setTimeout等待一个节拍才能从控件中提取值、测试有效性，或把它设置为新值。\n\n**2 . 模板驱动表单和响应式表单的区别**\n\n**模板驱动表单**\n\n- 数据更新是异步的，更新流程多，依赖于变更周期\n- 表单控件在模板中通过指令创建和更新操作，如：ngModel\n- 表单校验使用指令验证，指令包装校验函数\n- 每次数据更新只是更新部分值，在变更周期后触法\n- 难测试\n\n**响应式表单**\n\n- 数据更新是同步的，更新流程少\n- 表单控件在ts中直接创建和更新操作,如：FormControl\n- 表单校验使用校验函数进行验证\n- 每次数据更新都是返回一个新实例\n- 易测试\n\n[数据更新流程](https://www.angular.cn/guide/forms-overview#data-flow-in-forms)\n","source":"_posts/2017-11-26-reactive-form.md","raw":"---\ntitle: 表单-响应式构建表单\ndate: 2017-11-26 18:09:52\ntags: Augular\ncategories: 前端\ncomments: true\n---\n\n## 什么是响应式表单\n\n响应式表单主要是数据管理的方式不同，它是在类中显式的管理我们的数据流和数据模型，直接操作数据模型进行状态控制。同时，它还以可以直接在组件类中创建表单控件树，并绑定到相应的标签上来构建表单，简单方便。\n<!--more-->\n响应式表单有以下特点：\n\n- 显式的管理数据方式，方便了校验和测试\n- 表单的控件值和有效性状态的更新是同步的，不会有更新时序问题，更易单元测试;而之前的模板驱动表单是更新异步的，存在更新的时序和效率问题，在有些场景下会存在使用瓶颈\n- 由于表单数据模型是自定义的，所以可以根据数据对象的结构来定义结构类似的模型树满足，这样数据更新更方便\n\n## 基本组成\n\n**AbstractControl**： 三个具体表单类的抽象基类。 并为它们提供了一些共同的行为和属性，其中有些是可观察对象（Observable）。\n\n**FormControlDirective/FormControlName** : 用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。请FormControlDirective可单独使用，FormControlName和Group结合使用\n\n**FormGroupDirective/FormGroupName** : 用于 跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。 组件中的顶级表单就是一个FormGroup。而FormGroupName在多级group结构使用\n\n**FormArray/FormArrayName** : 用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。\n\n这些指令都包含在ReactiveFormModule，使用只要包含即可：\n\n    import { ReactiveFormsModule } from '@angular/forms';\n    import { FormControl } from '@angular/forms';\n    @NgModule({\n      imports: [\n        ReactiveFormsModule\n      ],\n      declarations: [\n        AppComponent,\n        FormControl\n      ]\n    }\n\n## 控件指令的使用\n\n上面的指令一般可以单独使用，也可以组合使用，下面描述几种常用的使用场景,为简单标识，我们约定各指令简写：\n\n- FormGroup -- FG\n- FormControl -- FC\n- FormArray -- FA\n\n**（1）FormControl单独使用**\n这是最常见的方式，可以使用单独创建formControl并绑定到表单输入框上，而在模板驱动表单里这个是自动创建的\n.ts\n\n    import { Component } from '@angular/core';\n    import { FormControl, Validators } from '@angular/forms';\n    import { forbiddenNameValidator } from '../forbinden-name.directive';\n\n    @Component({\n      selector: 'reactive-form',\n      templateUrl: './reactive-form.component.html',\n      styleUrls: ['../template-form/template-form.component.css']\n    })\n\n    export class ReactiveFormComponent {\n      name : any;\n\n      constructor() {\n        this.name = new FormControl('Jack',\n                                    [Validators.required,\n                                      Validators.minLength(4),\n                                      forbiddenNameValidator(/[@\\$&0-9]/)]);\n      }\n    }\n\n.html\n\n    <form>\n      <div class=\"form-group\">\n        <label for=\"name\">姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" id=\"name\" [formControl]=\"name\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n    </form>\n    <div class=\"error\" *ngIf=\"(!name.pristine || name.dirty) && name.touched\">\n      <p *ngIf=\"name.errors?.required\">Name is requred!!</p>\n      <p *ngIf=\"name.errors?.minlength\">Name length is under 3!!</p>\n      <p *ngIf=\"name.errors?.forbiddenName\">Name can not has @ $ & and number!!</p>\n    </div>\n    <p>{{name.value}}</p>\n    <p>errors:{{name.errors | json}}</p>\n\n可以看到，我们是在组件类里定义的控件实例，并绑定到控件标签使用：\n***FormControl(初始值，同步校验函数，异步校验函数)***\n表单校验直接使用的是函数形式,多个校验函数组成数据作为实例化入参，我们在模板同样可以像模板驱动表单一样直接额只用name去获取控件的状态和错误信息，用来显示提示\n其中errors信息值这样的，当输入ja3：\n\n    {\n      \"minlength\": { \"requiredLength\": 4, \"actualLength\": 3 },\n      \"forbiddenName\": { \"value\": \"ja3\" }\n    }\n\n**（2）FormControl/FormGroup组合使用**\n主要是多属性组合使用，FG：[FC, FC, ... ]\n\n    import { Component } from '@angular/core';\n    import { FormControl, Validators, FormGroup } from '@angular/forms';\n    import { forbiddenNameValidator } from '../forbinden-name.directive';\n\n    @Component({\n      selector: 'reactive-form',\n      templateUrl: './reactive-form.component.html',\n      styleUrls: ['../template-form/template-form.component.css']\n    })\n    export class ReactiveFormComponent {\n      myForm : any;\n\n      constructor() {\n        this.myForm = new FormGroup({\n          name: new FormControl('Jack',\n                                [Validators.required,\n                                  Validators.minLength(4),\n                                  forbiddenNameValidator(/[@\\$&0-9]/)]),\n          password: new FormControl('',Validators.required)\n        });\n      }\n\n      get name() { return this.myForm.get('name');}\n\n      get password() { return this.myForm.get('password');}\n    }\n\n    <form [formGroup]=\"myForm\">\n      <div class=\"form-group\">\n        <label for=\"name\">姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" id=\"name\" formControlName=\"name\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n      <div class=\"error\" *ngIf=\"(!name.pristine || name.dirty) && name.touched\">\n        <p *ngIf=\"name.errors?.required\">Name is requred!!</p>\n        <p *ngIf=\"name.errors?.minlength\">Name length is under 3!!</p>\n        <p *ngIf=\"name.errors?.forbiddenName\">Name can not has @ $ & and number!!</p>\n      </div>\n      <p>{{name.errors | json}}</p>\n\n      <div class=\"form-group\">\n        <label for=\"password\">密码</label>\n        <div class=\"form-right\">\n          <input type=\"password\" id=\"password\" formControlName=\"password\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n    </form>\n    <p>{{myForm.value | json}}</p>\n\n其中form值为：\n\n    {\n      \"name\": \"Jack\",\n      \"password\": \"\"\n    }\n\n还有一些不一样的特点：\n\n- 跟单独使用不一样，FormControl在标签中的使用为formControlName,用来绑定formGroup里的一个属性\n- 不能再直接使用formControl,而要通过formGroup来获取其他的formControl实例来访问，这里可以声明一个同名getter得到属性实例,然后就可以像单独使用一样访问了\n\n当然，new实例可以使用FormBuilder类替代，上面代码可以改写为：\n\n    import { Component } from '@angular/core';\n    import { FormControl, Validators, FormGroup, FormBuilder } from '@angular/forms';\n    import { forbiddenNameValidator } from '../forbinden-name.directive';\n\n    @Component({\n      selector: 'reactive-form',\n      templateUrl: './reactive-form.component.html',\n      styleUrls: ['../template-form/template-form.component.css']\n    })\n    export class ReactiveFormComponent {\n      myForm : FormGroup;\n\n      constructor(private fb : FormBuilder) {\n        this.myForm = this.fb.group({\n          name: ['Jack',\n                 [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&0-9]/)]],\n          password: ['',Validators.required]\n        });\n      }\n\n      get name() { return this.myForm.get('name');}\n\n      get password() { return this.myForm.get('password');}\n    }\n\n\n**(3) 多级FormGroup**\n主要是多Group和Control嵌套使用，FG：[FC, FG, ... ]\n\n    <form #tForm=\"ngForm\" (ngSubmit)=\"save()\">\n      <div class=\"form-group\">\n        <label>姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" name=\"name\" [(ngModel)]=\"name\" minlength=\"3\" required [forbiddenName]=\"name\" #name1=\"ngModel\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <fieldset ngModelGroup=\"address\" #address=\"ngModelGroup\">\n        <div class=\"form-group\">\n          <label>国家</label>\n          <div class=\"form-right\">\n            <input type=\"text\" name=\"coun\" [(ngModel)]=\"address.country\" />\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label>城市</label>\n          <div class=\"form-right\">\n            <input type=\"text\" name=\"city\" [(ngModel)]=\"address.city\" />\n          </div>\n        </div>\n      </fieldset>\n    </form>\n\n    this.myForm = this.fb.group({\n      name: ['Jack',\n             [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&0-9]/)]],\n      address: this.fb.group({\n        country: '',\n        city: ''\n      }),\n    });\n\n**(4) FormControl数组**\nFA：[FC, FC, ... ]\n\n    <form [formGroup]=\"myForm\" novalidate>\n      <div formArrayName=\"skills\">\n        <div class=\"form-group\" *ngFor=\"let skill of skills.controls;let i=index\">\n          <label *ngIf=\"i === 0\" class=\"yes\">技能</label>\n          <label *ngIf=\"i !== 0\" class=\"no\"></label>\n          <div class=\"form-right\">\n            <input type=\"text\" [formControlName]=\"i\" />\n          </div>\n          <a (click)=\"delSkill(i)\" class=\"del\"> - </a>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"no\"></label>\n        <div class=\"add\">\n          <a (click)=\"addSkill()\"> + </a>\n        </div>\n      </div>\n    </form>\n\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, Validators, FormGroup, FormBuilder,FormArray } from '@angular/forms';\n\n    export class ReactiveFormComponent implements OnInit {\n      myForm : FormGroup;\n      skillList : any[] = [{'value':'Java'},{'value':'Scala'}];\n\n      constructor(private fb : FormBuilder) {\n        this.myForm = this.fb.group({\n          skills: this.fb.array([])\n        });\n      }\n\n      ngOnInit() {\n        this.initSkillList();\n      }\n\n      initSkillList() {\n        const tempArray = this.skillList.map((skill) => new FormControl(skill.value));\n        const skillFormArray = this.fb.array(tempArray);\n        this.myForm.setControl('skills', skillFormArray)\n      }\n\n      addSkill() {\n        let temp = new FormControl();\n        this.skills.push(temp);\n      }\n\n      delSkill(index : any) {\n        this.skills.removeAt(index);\n      }\n\n      get skills(): FormArray {\n        return this.myForm.get('skills') as FormArray;\n      };\n    }\n\n可以看到，必须使用getter来访问控件数组，并使用.controls来访问控件\n\n**(5) FormGroup数组**\nFA：[FG, FG, ... ]\n\n    <form [formGroup]=\"myForm\" novalidate>\n      <fieldset formArrayName=\"address\">\n        <div *ngFor=\"let oneAddress of address.controls; let i=index\" [formGroupName]=\"i\">\n          <h4>Address #{{i + 1}}</h4>\n          <div class=\"form-group\">\n            <label>国家</label>\n            <div class=\"form-right\">\n              <input type=\"text\" formControlName=\"country\" />\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label>城市</label>\n            <div class=\"form-right\">\n              <input type=\"text\" formControlName=\"city\" />\n            </div>\n            <a (click)=\"delAdress(i)\" class=\"del\"> - </a>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"no\"></label>\n          <div class=\"add\">\n            <a (click)=\"addAdress()\"> + </a>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n\n      myForm : FormGroup;\n\n      constructor(private fb : FormBuilder) {\n        this.myForm = this.fb.group({\n          address: this.fb.array([]),)\n        });\n      }\n\n      ngOnInit() {\n        this.initAdressList();\n      }\n\n      initAdressList() {\n        const tempArray = [this.fb.group({country: 'China', city: 'shanghai'})];\n        const adressFormArray = this.fb.array(tempArray);\n        this.myForm.setControl('address', adressFormArray)\n      }\n\n      addAdress() {\n        let temp = this.fb.group({country: '', city: ''});\n        this.address.push(temp);\n      }\n\n      delAdress(index : any) {\n        this.address.removeAt(index);\n      }\n\n      get address(): FormArray {\n        return this.myForm.get('address') as FormArray;\n      };\n\n## 完整表单例子\n\n本节使用响应式构建与模板驱动表单一节中效果相同的表单\n\ncomponent.ts\n\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, Validators, FormGroup, FormBuilder,FormArray } from '@angular/forms';\n    import { forbiddenNameValidator } from '../forbinden-name.directive';\n\n    @Component({\n      selector: 'reactive-form',\n      templateUrl: './reactive-form.component.html',\n      styleUrls: ['../template-form/template-form.component.css']\n    })\n    export class ReactiveFormComponent implements OnInit {\n      myForm : FormGroup;\n      sexs : any[] = [{'name':'女','value':'famale'},{'name':'男','value':'male'}];\n      likes : any[] = [{'name':'看电视','value':'Watch Tv','isChecked':false},\n                        {'name':'读书','value':'Book','isChecked':false}];\n      selectedLikes : any[] = [];\n      baocuns : any[] = [{'name':'是','value':'Yes','isChecked':false},{'name':'否','value':'No','isChecked':false}];\n      skillList : any[] = [{'value':'Java'},{'value':'Scala'}];\n\n      constructor(private fb : FormBuilder) {\n        this.myForm = this.fb.group({\n          name: ['Jack',\n                 [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&0-9]/)]],\n          sex: ['male',Validators.required],\n          shengri: ['1990-01-01',Validators.required],\n          password: ['',Validators.required],\n          address: this.fb.array([]),\n          like: [],\n          baocun:'',\n          skills: this.fb.array([])\n        });\n      }\n\n      ngOnInit() {\n        this.initAdressList();\n        this.initSkillList();\n\n      }\n\n      get name() { return this.myForm.get('name');}\n\n      get password() { return this.myForm.get('password');}\n\n      selectLikes(flag: any,value : any) {\n        if(flag.target.checked) {\n          this.selectedLikes.push(value);\n        } else {\n          this.selectedLikes = this.selectedLikes.filter((like) => {\n            return like !== value;\n          });\n        }\n        this.myForm.patchValue({\n          like: this.selectedLikes\n        });\n      }\n\n      initAdressList() {\n        const tempArray = [this.fb.group({country: 'China', city: 'shanghai'})];\n        const adressFormArray = this.fb.array(tempArray);\n        this.myForm.setControl('address', adressFormArray)\n      }\n\n      addAdress() {\n        let temp = this.fb.group({country: '', city: ''});\n        this.address.push(temp);\n      }\n\n      delAdress(index : any) {\n        this.address.removeAt(index);\n      }\n\n      get address(): FormArray {\n        return this.myForm.get('address') as FormArray;\n      };\n\n      initSkillList() {\n        const tempArray = this.skillList.map((skill) => new FormControl(skill.value));\n        const skillFormArray = this.fb.array(tempArray);\n        this.myForm.setControl('skills', skillFormArray)\n      }\n\n      addSkill() {\n        let temp = new FormControl();\n        this.skills.push(temp);\n      }\n\n      delSkill(index : any) {\n        this.skills.removeAt(index);\n      }\n\n      get skills(): FormArray {\n        return this.myForm.get('skills') as FormArray;\n      };\n    }\n\ncomponent.html\n\n    <form [formGroup]=\"myForm\" novalidate>\n      <div class=\"form-group\">\n        <label for=\"name\">姓名</label>\n        <div class=\"form-right\">\n          <input type=\"text\" id=\"name\" formControlName=\"name\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label>性别</label>\n        <div  class=\"form-right\">\n          <select name=\"Sex\" formControlName=\"sex\">\n            <option *ngFor=\"let sex of sexs\" [value]=\"sex.value\">{{sex.name}}</option>\n          </select>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label>出生年月</label>\n        <div class=\"form-right\">\n          <input type=\"date\" formControlName=\"shengri\" required/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"password\">密码</label>\n        <div class=\"form-right\">\n          <input type=\"password\" id=\"password\" formControlName=\"password\"/>\n        </div>\n        <span class=\"reqiured\"> * </span>\n      </div>\n\n      <fieldset formArrayName=\"address\">\n        <div *ngFor=\"let oneAddress of address.controls; let i=index\" [formGroupName]=\"i\">\n          <h4>Address #{{i + 1}}</h4>\n          <div class=\"form-group\">\n            <label>国家</label>\n            <div class=\"form-right\">\n              <input type=\"text\" formControlName=\"country\" />\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label>城市</label>\n            <div class=\"form-right\">\n              <input type=\"text\" formControlName=\"city\" />\n            </div>\n            <a (click)=\"delAdress(i)\" class=\"del\"> - </a>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"no\"></label>\n          <div class=\"add\">\n            <a (click)=\"addAdress()\"> + </a>\n          </div>\n        </div>\n      </fieldset>\n\n      <div  class=\"form-group\"  *ngFor=\"let like2 of likes;let i=index\">\n        <label *ngIf=\"i ===0\" class=\"yes\">兴趣爱好</label>\n        <label *ngIf=\"i !==0\" class=\"no\"></label>\n        <div>\n          <input type=\"checkbox\" #lock formControlName=\"like\" [value]=\"like2.value\"\n                 (change)=\"selectLikes($event,lock.value)\"/>{{like2.name}}\n        </div>\n      </div>\n\n      <div formArrayName=\"skills\">\n        <div class=\"form-group\" *ngFor=\"let skill of skills.controls;let i=index\">\n          <label *ngIf=\"i === 0\" class=\"yes\">技能</label>\n          <label *ngIf=\"i !== 0\" class=\"no\"></label>\n          <div class=\"form-right\">\n            <input type=\"text\" [formControlName]=\"i\" />\n          </div>\n          <a (click)=\"delSkill(i)\" class=\"del\"> - </a>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"no\"></label>\n        <div class=\"add\">\n          <a (click)=\"addSkill()\"> + </a>\n        </div>\n      </div>\n\n      <div *ngFor=\"let bao of baocuns;let i=index\" class=\"form-group\">\n        <label *ngIf=\"i === 0\" class=\"yes\">是否保存</label>\n        <label *ngIf=\"i !== 0\" class=\"no\"></label>\n        <div>\n          <input  type=\"radio\" formControlName=\"baocun\" [value]=\"bao.value\"/>{{bao.name}}\n        </div>\n      </div>\n\n      <div class=\"button-group\">\n        <button class=\"confirm\" [disabled]=\"!myForm.valid\">提交</button>\n        <button class=\"concel\" (click)=\"myForm.reset()\">取消</button>\n      </div>\n    </form>\n    <p>{{myForm.value | json}}</p>\n\n样子如下：\n![reactiveForm1](/images/reactiveForm1.png)\n![reactiveForm2](/images/reactiveForm2.png)\n\n\n##### 其他有用的东西：\n\n**1 . 同步和异步更新**\n\n响应式表单是同步的。\n使用响应式表单，我们会在代码中创建整个表单控件树。 我们可以立即更新一个值或者深入到表单中的任意节点，因为所有的控件都始终是可用的。\n\n模板驱动表单是异步的。\n模板驱动表单会委托指令来创建它们的表单控件。 为了消除“检查完后又变化了”的错误，这些指令需要消耗一个以上的变更检测周期来构建整个控件树。 这意味着在从组件类中操纵任何控件之前，我们都必须先等待一个节拍。\n比如，如果我们用@ViewChild(NgForm)查询来注入表单控件，并在生命周期钩子ngAfterViewInit中检查它，就会发现它没有子控件。 我们必须使用setTimeout等待一个节拍才能从控件中提取值、测试有效性，或把它设置为新值。\n\n**2 . 模板驱动表单和响应式表单的区别**\n\n**模板驱动表单**\n\n- 数据更新是异步的，更新流程多，依赖于变更周期\n- 表单控件在模板中通过指令创建和更新操作，如：ngModel\n- 表单校验使用指令验证，指令包装校验函数\n- 每次数据更新只是更新部分值，在变更周期后触法\n- 难测试\n\n**响应式表单**\n\n- 数据更新是同步的，更新流程少\n- 表单控件在ts中直接创建和更新操作,如：FormControl\n- 表单校验使用校验函数进行验证\n- 每次数据更新都是返回一个新实例\n- 易测试\n\n[数据更新流程](https://www.angular.cn/guide/forms-overview#data-flow-in-forms)\n","slug":"reactive-form","published":1,"updated":"2018-12-20T14:29:52.641Z","layout":"post","photos":[],"link":"","_id":"cjqwe42ed005vor0bhmsb6pzc","content":"<h2 id=\"什么是响应式表单\"><a href=\"#什么是响应式表单\" class=\"headerlink\" title=\"什么是响应式表单\"></a>什么是响应式表单</h2><p>响应式表单主要是数据管理的方式不同，它是在类中显式的管理我们的数据流和数据模型，直接操作数据模型进行状态控制。同时，它还以可以直接在组件类中创建表单控件树，并绑定到相应的标签上来构建表单，简单方便。<br><a id=\"more\"></a><br>响应式表单有以下特点：</p>\n<ul>\n<li>显式的管理数据方式，方便了校验和测试</li>\n<li>表单的控件值和有效性状态的更新是同步的，不会有更新时序问题，更易单元测试;而之前的模板驱动表单是更新异步的，存在更新的时序和效率问题，在有些场景下会存在使用瓶颈</li>\n<li>由于表单数据模型是自定义的，所以可以根据数据对象的结构来定义结构类似的模型树满足，这样数据更新更方便</li>\n</ul>\n<h2 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h2><p><strong>AbstractControl</strong>： 三个具体表单类的抽象基类。 并为它们提供了一些共同的行为和属性，其中有些是可观察对象（Observable）。</p>\n<p><strong>FormControlDirective/FormControlName</strong> : 用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。请FormControlDirective可单独使用，FormControlName和Group结合使用</p>\n<p><strong>FormGroupDirective/FormGroupName</strong> : 用于 跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。 组件中的顶级表单就是一个FormGroup。而FormGroupName在多级group结构使用</p>\n<p><strong>FormArray/FormArrayName</strong> : 用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。</p>\n<p>这些指令都包含在ReactiveFormModule，使用只要包含即可：</p>\n<pre><code>import { ReactiveFormsModule } from &apos;@angular/forms&apos;;\nimport { FormControl } from &apos;@angular/forms&apos;;\n@NgModule({\n  imports: [\n    ReactiveFormsModule\n  ],\n  declarations: [\n    AppComponent,\n    FormControl\n  ]\n}\n</code></pre><h2 id=\"控件指令的使用\"><a href=\"#控件指令的使用\" class=\"headerlink\" title=\"控件指令的使用\"></a>控件指令的使用</h2><p>上面的指令一般可以单独使用，也可以组合使用，下面描述几种常用的使用场景,为简单标识，我们约定各指令简写：</p>\n<ul>\n<li>FormGroup – FG</li>\n<li>FormControl – FC</li>\n<li>FormArray – FA</li>\n</ul>\n<p><strong>（1）FormControl单独使用</strong><br>这是最常见的方式，可以使用单独创建formControl并绑定到表单输入框上，而在模板驱动表单里这个是自动创建的<br>.ts</p>\n<pre><code>import { Component } from &apos;@angular/core&apos;;\nimport { FormControl, Validators } from &apos;@angular/forms&apos;;\nimport { forbiddenNameValidator } from &apos;../forbinden-name.directive&apos;;\n\n@Component({\n  selector: &apos;reactive-form&apos;,\n  templateUrl: &apos;./reactive-form.component.html&apos;,\n  styleUrls: [&apos;../template-form/template-form.component.css&apos;]\n})\n\nexport class ReactiveFormComponent {\n  name : any;\n\n  constructor() {\n    this.name = new FormControl(&apos;Jack&apos;,\n                                [Validators.required,\n                                  Validators.minLength(4),\n                                  forbiddenNameValidator(/[@\\$&amp;0-9]/)]);\n  }\n}\n</code></pre><p>.html</p>\n<pre><code>&lt;form&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;name&quot;&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; id=&quot;name&quot; [formControl]=&quot;name&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;div class=&quot;error&quot; *ngIf=&quot;(!name.pristine || name.dirty) &amp;&amp; name.touched&quot;&gt;\n  &lt;p *ngIf=&quot;name.errors?.required&quot;&gt;Name is requred!!&lt;/p&gt;\n  &lt;p *ngIf=&quot;name.errors?.minlength&quot;&gt;Name length is under 3!!&lt;/p&gt;\n  &lt;p *ngIf=&quot;name.errors?.forbiddenName&quot;&gt;Name can not has @ $ &amp; and number!!&lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;{{name.value}}&lt;/p&gt;\n&lt;p&gt;errors:{{name.errors | json}}&lt;/p&gt;\n</code></pre><p>可以看到，我们是在组件类里定义的控件实例，并绑定到控件标签使用：<br><strong><em>FormControl(初始值，同步校验函数，异步校验函数)</em></strong><br>表单校验直接使用的是函数形式,多个校验函数组成数据作为实例化入参，我们在模板同样可以像模板驱动表单一样直接额只用name去获取控件的状态和错误信息，用来显示提示<br>其中errors信息值这样的，当输入ja3：</p>\n<pre><code>{\n  &quot;minlength&quot;: { &quot;requiredLength&quot;: 4, &quot;actualLength&quot;: 3 },\n  &quot;forbiddenName&quot;: { &quot;value&quot;: &quot;ja3&quot; }\n}\n</code></pre><p><strong>（2）FormControl/FormGroup组合使用</strong><br>主要是多属性组合使用，FG：[FC, FC, … ]</p>\n<pre><code>import { Component } from &apos;@angular/core&apos;;\nimport { FormControl, Validators, FormGroup } from &apos;@angular/forms&apos;;\nimport { forbiddenNameValidator } from &apos;../forbinden-name.directive&apos;;\n\n@Component({\n  selector: &apos;reactive-form&apos;,\n  templateUrl: &apos;./reactive-form.component.html&apos;,\n  styleUrls: [&apos;../template-form/template-form.component.css&apos;]\n})\nexport class ReactiveFormComponent {\n  myForm : any;\n\n  constructor() {\n    this.myForm = new FormGroup({\n      name: new FormControl(&apos;Jack&apos;,\n                            [Validators.required,\n                              Validators.minLength(4),\n                              forbiddenNameValidator(/[@\\$&amp;0-9]/)]),\n      password: new FormControl(&apos;&apos;,Validators.required)\n    });\n  }\n\n  get name() { return this.myForm.get(&apos;name&apos;);}\n\n  get password() { return this.myForm.get(&apos;password&apos;);}\n}\n\n&lt;form [formGroup]=&quot;myForm&quot;&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;name&quot;&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; id=&quot;name&quot; formControlName=&quot;name&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;error&quot; *ngIf=&quot;(!name.pristine || name.dirty) &amp;&amp; name.touched&quot;&gt;\n    &lt;p *ngIf=&quot;name.errors?.required&quot;&gt;Name is requred!!&lt;/p&gt;\n    &lt;p *ngIf=&quot;name.errors?.minlength&quot;&gt;Name length is under 3!!&lt;/p&gt;\n    &lt;p *ngIf=&quot;name.errors?.forbiddenName&quot;&gt;Name can not has @ $ &amp; and number!!&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;p&gt;{{name.errors | json}}&lt;/p&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;password&quot; id=&quot;password&quot; formControlName=&quot;password&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;p&gt;{{myForm.value | json}}&lt;/p&gt;\n</code></pre><p>其中form值为：</p>\n<pre><code>{\n  &quot;name&quot;: &quot;Jack&quot;,\n  &quot;password&quot;: &quot;&quot;\n}\n</code></pre><p>还有一些不一样的特点：</p>\n<ul>\n<li>跟单独使用不一样，FormControl在标签中的使用为formControlName,用来绑定formGroup里的一个属性</li>\n<li>不能再直接使用formControl,而要通过formGroup来获取其他的formControl实例来访问，这里可以声明一个同名getter得到属性实例,然后就可以像单独使用一样访问了</li>\n</ul>\n<p>当然，new实例可以使用FormBuilder类替代，上面代码可以改写为：</p>\n<pre><code>import { Component } from &apos;@angular/core&apos;;\nimport { FormControl, Validators, FormGroup, FormBuilder } from &apos;@angular/forms&apos;;\nimport { forbiddenNameValidator } from &apos;../forbinden-name.directive&apos;;\n\n@Component({\n  selector: &apos;reactive-form&apos;,\n  templateUrl: &apos;./reactive-form.component.html&apos;,\n  styleUrls: [&apos;../template-form/template-form.component.css&apos;]\n})\nexport class ReactiveFormComponent {\n  myForm : FormGroup;\n\n  constructor(private fb : FormBuilder) {\n    this.myForm = this.fb.group({\n      name: [&apos;Jack&apos;,\n             [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&amp;0-9]/)]],\n      password: [&apos;&apos;,Validators.required]\n    });\n  }\n\n  get name() { return this.myForm.get(&apos;name&apos;);}\n\n  get password() { return this.myForm.get(&apos;password&apos;);}\n}\n</code></pre><p><strong>(3) 多级FormGroup</strong><br>主要是多Group和Control嵌套使用，FG：[FC, FG, … ]</p>\n<pre><code>&lt;form #tForm=&quot;ngForm&quot; (ngSubmit)=&quot;save()&quot;&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;name&quot; minlength=&quot;3&quot; required [forbiddenName]=&quot;name&quot; #name1=&quot;ngModel&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;fieldset ngModelGroup=&quot;address&quot; #address=&quot;ngModelGroup&quot;&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n      &lt;label&gt;国家&lt;/label&gt;\n      &lt;div class=&quot;form-right&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;coun&quot; [(ngModel)]=&quot;address.country&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n      &lt;label&gt;城市&lt;/label&gt;\n      &lt;div class=&quot;form-right&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;city&quot; [(ngModel)]=&quot;address.city&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n\nthis.myForm = this.fb.group({\n  name: [&apos;Jack&apos;,\n         [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&amp;0-9]/)]],\n  address: this.fb.group({\n    country: &apos;&apos;,\n    city: &apos;&apos;\n  }),\n});\n</code></pre><p><strong>(4) FormControl数组</strong><br>FA：[FC, FC, … ]</p>\n<pre><code>&lt;form [formGroup]=&quot;myForm&quot; novalidate&gt;\n  &lt;div formArrayName=&quot;skills&quot;&gt;\n    &lt;div class=&quot;form-group&quot; *ngFor=&quot;let skill of skills.controls;let i=index&quot;&gt;\n      &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;技能&lt;/label&gt;\n      &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n      &lt;div class=&quot;form-right&quot;&gt;\n        &lt;input type=&quot;text&quot; [formControlName]=&quot;i&quot; /&gt;\n      &lt;/div&gt;\n      &lt;a (click)=&quot;delSkill(i)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div class=&quot;add&quot;&gt;\n      &lt;a (click)=&quot;addSkill()&quot;&gt; + &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\nimport { Component, OnInit } from &apos;@angular/core&apos;;\nimport { FormControl, Validators, FormGroup, FormBuilder,FormArray } from &apos;@angular/forms&apos;;\n\nexport class ReactiveFormComponent implements OnInit {\n  myForm : FormGroup;\n  skillList : any[] = [{&apos;value&apos;:&apos;Java&apos;},{&apos;value&apos;:&apos;Scala&apos;}];\n\n  constructor(private fb : FormBuilder) {\n    this.myForm = this.fb.group({\n      skills: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.initSkillList();\n  }\n\n  initSkillList() {\n    const tempArray = this.skillList.map((skill) =&gt; new FormControl(skill.value));\n    const skillFormArray = this.fb.array(tempArray);\n    this.myForm.setControl(&apos;skills&apos;, skillFormArray)\n  }\n\n  addSkill() {\n    let temp = new FormControl();\n    this.skills.push(temp);\n  }\n\n  delSkill(index : any) {\n    this.skills.removeAt(index);\n  }\n\n  get skills(): FormArray {\n    return this.myForm.get(&apos;skills&apos;) as FormArray;\n  };\n}\n</code></pre><p>可以看到，必须使用getter来访问控件数组，并使用.controls来访问控件</p>\n<p><strong>(5) FormGroup数组</strong><br>FA：[FG, FG, … ]</p>\n<pre><code>&lt;form [formGroup]=&quot;myForm&quot; novalidate&gt;\n  &lt;fieldset formArrayName=&quot;address&quot;&gt;\n    &lt;div *ngFor=&quot;let oneAddress of address.controls; let i=index&quot; [formGroupName]=&quot;i&quot;&gt;\n      &lt;h4&gt;Address #{{i + 1}}&lt;/h4&gt;\n      &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;国家&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; formControlName=&quot;country&quot; /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;城市&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; formControlName=&quot;city&quot; /&gt;\n        &lt;/div&gt;\n        &lt;a (click)=&quot;delAdress(i)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n      &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n      &lt;div class=&quot;add&quot;&gt;\n        &lt;a (click)=&quot;addAdress()&quot;&gt; + &lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n\n  myForm : FormGroup;\n\n  constructor(private fb : FormBuilder) {\n    this.myForm = this.fb.group({\n      address: this.fb.array([]),)\n    });\n  }\n\n  ngOnInit() {\n    this.initAdressList();\n  }\n\n  initAdressList() {\n    const tempArray = [this.fb.group({country: &apos;China&apos;, city: &apos;shanghai&apos;})];\n    const adressFormArray = this.fb.array(tempArray);\n    this.myForm.setControl(&apos;address&apos;, adressFormArray)\n  }\n\n  addAdress() {\n    let temp = this.fb.group({country: &apos;&apos;, city: &apos;&apos;});\n    this.address.push(temp);\n  }\n\n  delAdress(index : any) {\n    this.address.removeAt(index);\n  }\n\n  get address(): FormArray {\n    return this.myForm.get(&apos;address&apos;) as FormArray;\n  };\n</code></pre><h2 id=\"完整表单例子\"><a href=\"#完整表单例子\" class=\"headerlink\" title=\"完整表单例子\"></a>完整表单例子</h2><p>本节使用响应式构建与模板驱动表单一节中效果相同的表单</p>\n<p>component.ts</p>\n<pre><code>import { Component, OnInit } from &apos;@angular/core&apos;;\nimport { FormControl, Validators, FormGroup, FormBuilder,FormArray } from &apos;@angular/forms&apos;;\nimport { forbiddenNameValidator } from &apos;../forbinden-name.directive&apos;;\n\n@Component({\n  selector: &apos;reactive-form&apos;,\n  templateUrl: &apos;./reactive-form.component.html&apos;,\n  styleUrls: [&apos;../template-form/template-form.component.css&apos;]\n})\nexport class ReactiveFormComponent implements OnInit {\n  myForm : FormGroup;\n  sexs : any[] = [{&apos;name&apos;:&apos;女&apos;,&apos;value&apos;:&apos;famale&apos;},{&apos;name&apos;:&apos;男&apos;,&apos;value&apos;:&apos;male&apos;}];\n  likes : any[] = [{&apos;name&apos;:&apos;看电视&apos;,&apos;value&apos;:&apos;Watch Tv&apos;,&apos;isChecked&apos;:false},\n                    {&apos;name&apos;:&apos;读书&apos;,&apos;value&apos;:&apos;Book&apos;,&apos;isChecked&apos;:false}];\n  selectedLikes : any[] = [];\n  baocuns : any[] = [{&apos;name&apos;:&apos;是&apos;,&apos;value&apos;:&apos;Yes&apos;,&apos;isChecked&apos;:false},{&apos;name&apos;:&apos;否&apos;,&apos;value&apos;:&apos;No&apos;,&apos;isChecked&apos;:false}];\n  skillList : any[] = [{&apos;value&apos;:&apos;Java&apos;},{&apos;value&apos;:&apos;Scala&apos;}];\n\n  constructor(private fb : FormBuilder) {\n    this.myForm = this.fb.group({\n      name: [&apos;Jack&apos;,\n             [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&amp;0-9]/)]],\n      sex: [&apos;male&apos;,Validators.required],\n      shengri: [&apos;1990-01-01&apos;,Validators.required],\n      password: [&apos;&apos;,Validators.required],\n      address: this.fb.array([]),\n      like: [],\n      baocun:&apos;&apos;,\n      skills: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.initAdressList();\n    this.initSkillList();\n\n  }\n\n  get name() { return this.myForm.get(&apos;name&apos;);}\n\n  get password() { return this.myForm.get(&apos;password&apos;);}\n\n  selectLikes(flag: any,value : any) {\n    if(flag.target.checked) {\n      this.selectedLikes.push(value);\n    } else {\n      this.selectedLikes = this.selectedLikes.filter((like) =&gt; {\n        return like !== value;\n      });\n    }\n    this.myForm.patchValue({\n      like: this.selectedLikes\n    });\n  }\n\n  initAdressList() {\n    const tempArray = [this.fb.group({country: &apos;China&apos;, city: &apos;shanghai&apos;})];\n    const adressFormArray = this.fb.array(tempArray);\n    this.myForm.setControl(&apos;address&apos;, adressFormArray)\n  }\n\n  addAdress() {\n    let temp = this.fb.group({country: &apos;&apos;, city: &apos;&apos;});\n    this.address.push(temp);\n  }\n\n  delAdress(index : any) {\n    this.address.removeAt(index);\n  }\n\n  get address(): FormArray {\n    return this.myForm.get(&apos;address&apos;) as FormArray;\n  };\n\n  initSkillList() {\n    const tempArray = this.skillList.map((skill) =&gt; new FormControl(skill.value));\n    const skillFormArray = this.fb.array(tempArray);\n    this.myForm.setControl(&apos;skills&apos;, skillFormArray)\n  }\n\n  addSkill() {\n    let temp = new FormControl();\n    this.skills.push(temp);\n  }\n\n  delSkill(index : any) {\n    this.skills.removeAt(index);\n  }\n\n  get skills(): FormArray {\n    return this.myForm.get(&apos;skills&apos;) as FormArray;\n  };\n}\n</code></pre><p>component.html</p>\n<pre><code>&lt;form [formGroup]=&quot;myForm&quot; novalidate&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;name&quot;&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; id=&quot;name&quot; formControlName=&quot;name&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;性别&lt;/label&gt;\n    &lt;div  class=&quot;form-right&quot;&gt;\n      &lt;select name=&quot;Sex&quot; formControlName=&quot;sex&quot;&gt;\n        &lt;option *ngFor=&quot;let sex of sexs&quot; [value]=&quot;sex.value&quot;&gt;{{sex.name}}&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;出生年月&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;date&quot; formControlName=&quot;shengri&quot; required/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;password&quot; id=&quot;password&quot; formControlName=&quot;password&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;fieldset formArrayName=&quot;address&quot;&gt;\n    &lt;div *ngFor=&quot;let oneAddress of address.controls; let i=index&quot; [formGroupName]=&quot;i&quot;&gt;\n      &lt;h4&gt;Address #{{i + 1}}&lt;/h4&gt;\n      &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;国家&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; formControlName=&quot;country&quot; /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;城市&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; formControlName=&quot;city&quot; /&gt;\n        &lt;/div&gt;\n        &lt;a (click)=&quot;delAdress(i)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n      &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n      &lt;div class=&quot;add&quot;&gt;\n        &lt;a (click)=&quot;addAdress()&quot;&gt; + &lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n\n  &lt;div  class=&quot;form-group&quot;  *ngFor=&quot;let like2 of likes;let i=index&quot;&gt;\n    &lt;label *ngIf=&quot;i ===0&quot; class=&quot;yes&quot;&gt;兴趣爱好&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !==0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div&gt;\n      &lt;input type=&quot;checkbox&quot; #lock formControlName=&quot;like&quot; [value]=&quot;like2.value&quot;\n             (change)=&quot;selectLikes($event,lock.value)&quot;/&gt;{{like2.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div formArrayName=&quot;skills&quot;&gt;\n    &lt;div class=&quot;form-group&quot; *ngFor=&quot;let skill of skills.controls;let i=index&quot;&gt;\n      &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;技能&lt;/label&gt;\n      &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n      &lt;div class=&quot;form-right&quot;&gt;\n        &lt;input type=&quot;text&quot; [formControlName]=&quot;i&quot; /&gt;\n      &lt;/div&gt;\n      &lt;a (click)=&quot;delSkill(i)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div class=&quot;add&quot;&gt;\n      &lt;a (click)=&quot;addSkill()&quot;&gt; + &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div *ngFor=&quot;let bao of baocuns;let i=index&quot; class=&quot;form-group&quot;&gt;\n    &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;是否保存&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div&gt;\n      &lt;input  type=&quot;radio&quot; formControlName=&quot;baocun&quot; [value]=&quot;bao.value&quot;/&gt;{{bao.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;button-group&quot;&gt;\n    &lt;button class=&quot;confirm&quot; [disabled]=&quot;!myForm.valid&quot;&gt;提交&lt;/button&gt;\n    &lt;button class=&quot;concel&quot; (click)=&quot;myForm.reset()&quot;&gt;取消&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;p&gt;{{myForm.value | json}}&lt;/p&gt;\n</code></pre><p>样子如下：<br><img src=\"/images/reactiveForm1.png\" alt=\"reactiveForm1\"><br><img src=\"/images/reactiveForm2.png\" alt=\"reactiveForm2\"></p>\n<h5 id=\"其他有用的东西：\"><a href=\"#其他有用的东西：\" class=\"headerlink\" title=\"其他有用的东西：\"></a>其他有用的东西：</h5><p><strong>1 . 同步和异步更新</strong></p>\n<p>响应式表单是同步的。<br>使用响应式表单，我们会在代码中创建整个表单控件树。 我们可以立即更新一个值或者深入到表单中的任意节点，因为所有的控件都始终是可用的。</p>\n<p>模板驱动表单是异步的。<br>模板驱动表单会委托指令来创建它们的表单控件。 为了消除“检查完后又变化了”的错误，这些指令需要消耗一个以上的变更检测周期来构建整个控件树。 这意味着在从组件类中操纵任何控件之前，我们都必须先等待一个节拍。<br>比如，如果我们用@ViewChild(NgForm)查询来注入表单控件，并在生命周期钩子ngAfterViewInit中检查它，就会发现它没有子控件。 我们必须使用setTimeout等待一个节拍才能从控件中提取值、测试有效性，或把它设置为新值。</p>\n<p><strong>2 . 模板驱动表单和响应式表单的区别</strong></p>\n<p><strong>模板驱动表单</strong></p>\n<ul>\n<li>数据更新是异步的，更新流程多，依赖于变更周期</li>\n<li>表单控件在模板中通过指令创建和更新操作，如：ngModel</li>\n<li>表单校验使用指令验证，指令包装校验函数</li>\n<li>每次数据更新只是更新部分值，在变更周期后触法</li>\n<li>难测试</li>\n</ul>\n<p><strong>响应式表单</strong></p>\n<ul>\n<li>数据更新是同步的，更新流程少</li>\n<li>表单控件在ts中直接创建和更新操作,如：FormControl</li>\n<li>表单校验使用校验函数进行验证</li>\n<li>每次数据更新都是返回一个新实例</li>\n<li>易测试</li>\n</ul>\n<p><a href=\"https://www.angular.cn/guide/forms-overview#data-flow-in-forms\" target=\"_blank\" rel=\"external\">数据更新流程</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是响应式表单\"><a href=\"#什么是响应式表单\" class=\"headerlink\" title=\"什么是响应式表单\"></a>什么是响应式表单</h2><p>响应式表单主要是数据管理的方式不同，它是在类中显式的管理我们的数据流和数据模型，直接操作数据模型进行状态控制。同时，它还以可以直接在组件类中创建表单控件树，并绑定到相应的标签上来构建表单，简单方便。<br>","more":"<br>响应式表单有以下特点：</p>\n<ul>\n<li>显式的管理数据方式，方便了校验和测试</li>\n<li>表单的控件值和有效性状态的更新是同步的，不会有更新时序问题，更易单元测试;而之前的模板驱动表单是更新异步的，存在更新的时序和效率问题，在有些场景下会存在使用瓶颈</li>\n<li>由于表单数据模型是自定义的，所以可以根据数据对象的结构来定义结构类似的模型树满足，这样数据更新更方便</li>\n</ul>\n<h2 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h2><p><strong>AbstractControl</strong>： 三个具体表单类的抽象基类。 并为它们提供了一些共同的行为和属性，其中有些是可观察对象（Observable）。</p>\n<p><strong>FormControlDirective/FormControlName</strong> : 用于跟踪一个单独的表单控件的值和有效性状态。它对应于一个HTML表单控件，比如输入框和下拉框。请FormControlDirective可单独使用，FormControlName和Group结合使用</p>\n<p><strong>FormGroupDirective/FormGroupName</strong> : 用于 跟踪一组AbstractControl的实例的值和有效性状态。 该组的属性中包含了它的子控件。 组件中的顶级表单就是一个FormGroup。而FormGroupName在多级group结构使用</p>\n<p><strong>FormArray/FormArrayName</strong> : 用于跟踪AbstractControl实例组成的有序数组的值和有效性状态。</p>\n<p>这些指令都包含在ReactiveFormModule，使用只要包含即可：</p>\n<pre><code>import { ReactiveFormsModule } from &apos;@angular/forms&apos;;\nimport { FormControl } from &apos;@angular/forms&apos;;\n@NgModule({\n  imports: [\n    ReactiveFormsModule\n  ],\n  declarations: [\n    AppComponent,\n    FormControl\n  ]\n}\n</code></pre><h2 id=\"控件指令的使用\"><a href=\"#控件指令的使用\" class=\"headerlink\" title=\"控件指令的使用\"></a>控件指令的使用</h2><p>上面的指令一般可以单独使用，也可以组合使用，下面描述几种常用的使用场景,为简单标识，我们约定各指令简写：</p>\n<ul>\n<li>FormGroup – FG</li>\n<li>FormControl – FC</li>\n<li>FormArray – FA</li>\n</ul>\n<p><strong>（1）FormControl单独使用</strong><br>这是最常见的方式，可以使用单独创建formControl并绑定到表单输入框上，而在模板驱动表单里这个是自动创建的<br>.ts</p>\n<pre><code>import { Component } from &apos;@angular/core&apos;;\nimport { FormControl, Validators } from &apos;@angular/forms&apos;;\nimport { forbiddenNameValidator } from &apos;../forbinden-name.directive&apos;;\n\n@Component({\n  selector: &apos;reactive-form&apos;,\n  templateUrl: &apos;./reactive-form.component.html&apos;,\n  styleUrls: [&apos;../template-form/template-form.component.css&apos;]\n})\n\nexport class ReactiveFormComponent {\n  name : any;\n\n  constructor() {\n    this.name = new FormControl(&apos;Jack&apos;,\n                                [Validators.required,\n                                  Validators.minLength(4),\n                                  forbiddenNameValidator(/[@\\$&amp;0-9]/)]);\n  }\n}\n</code></pre><p>.html</p>\n<pre><code>&lt;form&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;name&quot;&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; id=&quot;name&quot; [formControl]=&quot;name&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;div class=&quot;error&quot; *ngIf=&quot;(!name.pristine || name.dirty) &amp;&amp; name.touched&quot;&gt;\n  &lt;p *ngIf=&quot;name.errors?.required&quot;&gt;Name is requred!!&lt;/p&gt;\n  &lt;p *ngIf=&quot;name.errors?.minlength&quot;&gt;Name length is under 3!!&lt;/p&gt;\n  &lt;p *ngIf=&quot;name.errors?.forbiddenName&quot;&gt;Name can not has @ $ &amp; and number!!&lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;{{name.value}}&lt;/p&gt;\n&lt;p&gt;errors:{{name.errors | json}}&lt;/p&gt;\n</code></pre><p>可以看到，我们是在组件类里定义的控件实例，并绑定到控件标签使用：<br><strong><em>FormControl(初始值，同步校验函数，异步校验函数)</em></strong><br>表单校验直接使用的是函数形式,多个校验函数组成数据作为实例化入参，我们在模板同样可以像模板驱动表单一样直接额只用name去获取控件的状态和错误信息，用来显示提示<br>其中errors信息值这样的，当输入ja3：</p>\n<pre><code>{\n  &quot;minlength&quot;: { &quot;requiredLength&quot;: 4, &quot;actualLength&quot;: 3 },\n  &quot;forbiddenName&quot;: { &quot;value&quot;: &quot;ja3&quot; }\n}\n</code></pre><p><strong>（2）FormControl/FormGroup组合使用</strong><br>主要是多属性组合使用，FG：[FC, FC, … ]</p>\n<pre><code>import { Component } from &apos;@angular/core&apos;;\nimport { FormControl, Validators, FormGroup } from &apos;@angular/forms&apos;;\nimport { forbiddenNameValidator } from &apos;../forbinden-name.directive&apos;;\n\n@Component({\n  selector: &apos;reactive-form&apos;,\n  templateUrl: &apos;./reactive-form.component.html&apos;,\n  styleUrls: [&apos;../template-form/template-form.component.css&apos;]\n})\nexport class ReactiveFormComponent {\n  myForm : any;\n\n  constructor() {\n    this.myForm = new FormGroup({\n      name: new FormControl(&apos;Jack&apos;,\n                            [Validators.required,\n                              Validators.minLength(4),\n                              forbiddenNameValidator(/[@\\$&amp;0-9]/)]),\n      password: new FormControl(&apos;&apos;,Validators.required)\n    });\n  }\n\n  get name() { return this.myForm.get(&apos;name&apos;);}\n\n  get password() { return this.myForm.get(&apos;password&apos;);}\n}\n\n&lt;form [formGroup]=&quot;myForm&quot;&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;name&quot;&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; id=&quot;name&quot; formControlName=&quot;name&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;error&quot; *ngIf=&quot;(!name.pristine || name.dirty) &amp;&amp; name.touched&quot;&gt;\n    &lt;p *ngIf=&quot;name.errors?.required&quot;&gt;Name is requred!!&lt;/p&gt;\n    &lt;p *ngIf=&quot;name.errors?.minlength&quot;&gt;Name length is under 3!!&lt;/p&gt;\n    &lt;p *ngIf=&quot;name.errors?.forbiddenName&quot;&gt;Name can not has @ $ &amp; and number!!&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;p&gt;{{name.errors | json}}&lt;/p&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;password&quot; id=&quot;password&quot; formControlName=&quot;password&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;p&gt;{{myForm.value | json}}&lt;/p&gt;\n</code></pre><p>其中form值为：</p>\n<pre><code>{\n  &quot;name&quot;: &quot;Jack&quot;,\n  &quot;password&quot;: &quot;&quot;\n}\n</code></pre><p>还有一些不一样的特点：</p>\n<ul>\n<li>跟单独使用不一样，FormControl在标签中的使用为formControlName,用来绑定formGroup里的一个属性</li>\n<li>不能再直接使用formControl,而要通过formGroup来获取其他的formControl实例来访问，这里可以声明一个同名getter得到属性实例,然后就可以像单独使用一样访问了</li>\n</ul>\n<p>当然，new实例可以使用FormBuilder类替代，上面代码可以改写为：</p>\n<pre><code>import { Component } from &apos;@angular/core&apos;;\nimport { FormControl, Validators, FormGroup, FormBuilder } from &apos;@angular/forms&apos;;\nimport { forbiddenNameValidator } from &apos;../forbinden-name.directive&apos;;\n\n@Component({\n  selector: &apos;reactive-form&apos;,\n  templateUrl: &apos;./reactive-form.component.html&apos;,\n  styleUrls: [&apos;../template-form/template-form.component.css&apos;]\n})\nexport class ReactiveFormComponent {\n  myForm : FormGroup;\n\n  constructor(private fb : FormBuilder) {\n    this.myForm = this.fb.group({\n      name: [&apos;Jack&apos;,\n             [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&amp;0-9]/)]],\n      password: [&apos;&apos;,Validators.required]\n    });\n  }\n\n  get name() { return this.myForm.get(&apos;name&apos;);}\n\n  get password() { return this.myForm.get(&apos;password&apos;);}\n}\n</code></pre><p><strong>(3) 多级FormGroup</strong><br>主要是多Group和Control嵌套使用，FG：[FC, FG, … ]</p>\n<pre><code>&lt;form #tForm=&quot;ngForm&quot; (ngSubmit)=&quot;save()&quot;&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;name&quot; minlength=&quot;3&quot; required [forbiddenName]=&quot;name&quot; #name1=&quot;ngModel&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;fieldset ngModelGroup=&quot;address&quot; #address=&quot;ngModelGroup&quot;&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n      &lt;label&gt;国家&lt;/label&gt;\n      &lt;div class=&quot;form-right&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;coun&quot; [(ngModel)]=&quot;address.country&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n      &lt;label&gt;城市&lt;/label&gt;\n      &lt;div class=&quot;form-right&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;city&quot; [(ngModel)]=&quot;address.city&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n\nthis.myForm = this.fb.group({\n  name: [&apos;Jack&apos;,\n         [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&amp;0-9]/)]],\n  address: this.fb.group({\n    country: &apos;&apos;,\n    city: &apos;&apos;\n  }),\n});\n</code></pre><p><strong>(4) FormControl数组</strong><br>FA：[FC, FC, … ]</p>\n<pre><code>&lt;form [formGroup]=&quot;myForm&quot; novalidate&gt;\n  &lt;div formArrayName=&quot;skills&quot;&gt;\n    &lt;div class=&quot;form-group&quot; *ngFor=&quot;let skill of skills.controls;let i=index&quot;&gt;\n      &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;技能&lt;/label&gt;\n      &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n      &lt;div class=&quot;form-right&quot;&gt;\n        &lt;input type=&quot;text&quot; [formControlName]=&quot;i&quot; /&gt;\n      &lt;/div&gt;\n      &lt;a (click)=&quot;delSkill(i)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div class=&quot;add&quot;&gt;\n      &lt;a (click)=&quot;addSkill()&quot;&gt; + &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\nimport { Component, OnInit } from &apos;@angular/core&apos;;\nimport { FormControl, Validators, FormGroup, FormBuilder,FormArray } from &apos;@angular/forms&apos;;\n\nexport class ReactiveFormComponent implements OnInit {\n  myForm : FormGroup;\n  skillList : any[] = [{&apos;value&apos;:&apos;Java&apos;},{&apos;value&apos;:&apos;Scala&apos;}];\n\n  constructor(private fb : FormBuilder) {\n    this.myForm = this.fb.group({\n      skills: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.initSkillList();\n  }\n\n  initSkillList() {\n    const tempArray = this.skillList.map((skill) =&gt; new FormControl(skill.value));\n    const skillFormArray = this.fb.array(tempArray);\n    this.myForm.setControl(&apos;skills&apos;, skillFormArray)\n  }\n\n  addSkill() {\n    let temp = new FormControl();\n    this.skills.push(temp);\n  }\n\n  delSkill(index : any) {\n    this.skills.removeAt(index);\n  }\n\n  get skills(): FormArray {\n    return this.myForm.get(&apos;skills&apos;) as FormArray;\n  };\n}\n</code></pre><p>可以看到，必须使用getter来访问控件数组，并使用.controls来访问控件</p>\n<p><strong>(5) FormGroup数组</strong><br>FA：[FG, FG, … ]</p>\n<pre><code>&lt;form [formGroup]=&quot;myForm&quot; novalidate&gt;\n  &lt;fieldset formArrayName=&quot;address&quot;&gt;\n    &lt;div *ngFor=&quot;let oneAddress of address.controls; let i=index&quot; [formGroupName]=&quot;i&quot;&gt;\n      &lt;h4&gt;Address #{{i + 1}}&lt;/h4&gt;\n      &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;国家&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; formControlName=&quot;country&quot; /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;城市&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; formControlName=&quot;city&quot; /&gt;\n        &lt;/div&gt;\n        &lt;a (click)=&quot;delAdress(i)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n      &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n      &lt;div class=&quot;add&quot;&gt;\n        &lt;a (click)=&quot;addAdress()&quot;&gt; + &lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n\n  myForm : FormGroup;\n\n  constructor(private fb : FormBuilder) {\n    this.myForm = this.fb.group({\n      address: this.fb.array([]),)\n    });\n  }\n\n  ngOnInit() {\n    this.initAdressList();\n  }\n\n  initAdressList() {\n    const tempArray = [this.fb.group({country: &apos;China&apos;, city: &apos;shanghai&apos;})];\n    const adressFormArray = this.fb.array(tempArray);\n    this.myForm.setControl(&apos;address&apos;, adressFormArray)\n  }\n\n  addAdress() {\n    let temp = this.fb.group({country: &apos;&apos;, city: &apos;&apos;});\n    this.address.push(temp);\n  }\n\n  delAdress(index : any) {\n    this.address.removeAt(index);\n  }\n\n  get address(): FormArray {\n    return this.myForm.get(&apos;address&apos;) as FormArray;\n  };\n</code></pre><h2 id=\"完整表单例子\"><a href=\"#完整表单例子\" class=\"headerlink\" title=\"完整表单例子\"></a>完整表单例子</h2><p>本节使用响应式构建与模板驱动表单一节中效果相同的表单</p>\n<p>component.ts</p>\n<pre><code>import { Component, OnInit } from &apos;@angular/core&apos;;\nimport { FormControl, Validators, FormGroup, FormBuilder,FormArray } from &apos;@angular/forms&apos;;\nimport { forbiddenNameValidator } from &apos;../forbinden-name.directive&apos;;\n\n@Component({\n  selector: &apos;reactive-form&apos;,\n  templateUrl: &apos;./reactive-form.component.html&apos;,\n  styleUrls: [&apos;../template-form/template-form.component.css&apos;]\n})\nexport class ReactiveFormComponent implements OnInit {\n  myForm : FormGroup;\n  sexs : any[] = [{&apos;name&apos;:&apos;女&apos;,&apos;value&apos;:&apos;famale&apos;},{&apos;name&apos;:&apos;男&apos;,&apos;value&apos;:&apos;male&apos;}];\n  likes : any[] = [{&apos;name&apos;:&apos;看电视&apos;,&apos;value&apos;:&apos;Watch Tv&apos;,&apos;isChecked&apos;:false},\n                    {&apos;name&apos;:&apos;读书&apos;,&apos;value&apos;:&apos;Book&apos;,&apos;isChecked&apos;:false}];\n  selectedLikes : any[] = [];\n  baocuns : any[] = [{&apos;name&apos;:&apos;是&apos;,&apos;value&apos;:&apos;Yes&apos;,&apos;isChecked&apos;:false},{&apos;name&apos;:&apos;否&apos;,&apos;value&apos;:&apos;No&apos;,&apos;isChecked&apos;:false}];\n  skillList : any[] = [{&apos;value&apos;:&apos;Java&apos;},{&apos;value&apos;:&apos;Scala&apos;}];\n\n  constructor(private fb : FormBuilder) {\n    this.myForm = this.fb.group({\n      name: [&apos;Jack&apos;,\n             [Validators.required,Validators.minLength(4),forbiddenNameValidator(/[@\\$&amp;0-9]/)]],\n      sex: [&apos;male&apos;,Validators.required],\n      shengri: [&apos;1990-01-01&apos;,Validators.required],\n      password: [&apos;&apos;,Validators.required],\n      address: this.fb.array([]),\n      like: [],\n      baocun:&apos;&apos;,\n      skills: this.fb.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.initAdressList();\n    this.initSkillList();\n\n  }\n\n  get name() { return this.myForm.get(&apos;name&apos;);}\n\n  get password() { return this.myForm.get(&apos;password&apos;);}\n\n  selectLikes(flag: any,value : any) {\n    if(flag.target.checked) {\n      this.selectedLikes.push(value);\n    } else {\n      this.selectedLikes = this.selectedLikes.filter((like) =&gt; {\n        return like !== value;\n      });\n    }\n    this.myForm.patchValue({\n      like: this.selectedLikes\n    });\n  }\n\n  initAdressList() {\n    const tempArray = [this.fb.group({country: &apos;China&apos;, city: &apos;shanghai&apos;})];\n    const adressFormArray = this.fb.array(tempArray);\n    this.myForm.setControl(&apos;address&apos;, adressFormArray)\n  }\n\n  addAdress() {\n    let temp = this.fb.group({country: &apos;&apos;, city: &apos;&apos;});\n    this.address.push(temp);\n  }\n\n  delAdress(index : any) {\n    this.address.removeAt(index);\n  }\n\n  get address(): FormArray {\n    return this.myForm.get(&apos;address&apos;) as FormArray;\n  };\n\n  initSkillList() {\n    const tempArray = this.skillList.map((skill) =&gt; new FormControl(skill.value));\n    const skillFormArray = this.fb.array(tempArray);\n    this.myForm.setControl(&apos;skills&apos;, skillFormArray)\n  }\n\n  addSkill() {\n    let temp = new FormControl();\n    this.skills.push(temp);\n  }\n\n  delSkill(index : any) {\n    this.skills.removeAt(index);\n  }\n\n  get skills(): FormArray {\n    return this.myForm.get(&apos;skills&apos;) as FormArray;\n  };\n}\n</code></pre><p>component.html</p>\n<pre><code>&lt;form [formGroup]=&quot;myForm&quot; novalidate&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;name&quot;&gt;姓名&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;text&quot; id=&quot;name&quot; formControlName=&quot;name&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;性别&lt;/label&gt;\n    &lt;div  class=&quot;form-right&quot;&gt;\n      &lt;select name=&quot;Sex&quot; formControlName=&quot;sex&quot;&gt;\n        &lt;option *ngFor=&quot;let sex of sexs&quot; [value]=&quot;sex.value&quot;&gt;{{sex.name}}&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;出生年月&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;date&quot; formControlName=&quot;shengri&quot; required/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;\n    &lt;div class=&quot;form-right&quot;&gt;\n      &lt;input type=&quot;password&quot; id=&quot;password&quot; formControlName=&quot;password&quot;/&gt;\n    &lt;/div&gt;\n    &lt;span class=&quot;reqiured&quot;&gt; * &lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;fieldset formArrayName=&quot;address&quot;&gt;\n    &lt;div *ngFor=&quot;let oneAddress of address.controls; let i=index&quot; [formGroupName]=&quot;i&quot;&gt;\n      &lt;h4&gt;Address #{{i + 1}}&lt;/h4&gt;\n      &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;国家&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; formControlName=&quot;country&quot; /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label&gt;城市&lt;/label&gt;\n        &lt;div class=&quot;form-right&quot;&gt;\n          &lt;input type=&quot;text&quot; formControlName=&quot;city&quot; /&gt;\n        &lt;/div&gt;\n        &lt;a (click)=&quot;delAdress(i)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n      &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n      &lt;div class=&quot;add&quot;&gt;\n        &lt;a (click)=&quot;addAdress()&quot;&gt; + &lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n\n  &lt;div  class=&quot;form-group&quot;  *ngFor=&quot;let like2 of likes;let i=index&quot;&gt;\n    &lt;label *ngIf=&quot;i ===0&quot; class=&quot;yes&quot;&gt;兴趣爱好&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !==0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div&gt;\n      &lt;input type=&quot;checkbox&quot; #lock formControlName=&quot;like&quot; [value]=&quot;like2.value&quot;\n             (change)=&quot;selectLikes($event,lock.value)&quot;/&gt;{{like2.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div formArrayName=&quot;skills&quot;&gt;\n    &lt;div class=&quot;form-group&quot; *ngFor=&quot;let skill of skills.controls;let i=index&quot;&gt;\n      &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;技能&lt;/label&gt;\n      &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n      &lt;div class=&quot;form-right&quot;&gt;\n        &lt;input type=&quot;text&quot; [formControlName]=&quot;i&quot; /&gt;\n      &lt;/div&gt;\n      &lt;a (click)=&quot;delSkill(i)&quot; class=&quot;del&quot;&gt; - &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n    &lt;label class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div class=&quot;add&quot;&gt;\n      &lt;a (click)=&quot;addSkill()&quot;&gt; + &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div *ngFor=&quot;let bao of baocuns;let i=index&quot; class=&quot;form-group&quot;&gt;\n    &lt;label *ngIf=&quot;i === 0&quot; class=&quot;yes&quot;&gt;是否保存&lt;/label&gt;\n    &lt;label *ngIf=&quot;i !== 0&quot; class=&quot;no&quot;&gt;&lt;/label&gt;\n    &lt;div&gt;\n      &lt;input  type=&quot;radio&quot; formControlName=&quot;baocun&quot; [value]=&quot;bao.value&quot;/&gt;{{bao.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;button-group&quot;&gt;\n    &lt;button class=&quot;confirm&quot; [disabled]=&quot;!myForm.valid&quot;&gt;提交&lt;/button&gt;\n    &lt;button class=&quot;concel&quot; (click)=&quot;myForm.reset()&quot;&gt;取消&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;p&gt;{{myForm.value | json}}&lt;/p&gt;\n</code></pre><p>样子如下：<br><img src=\"/images/reactiveForm1.png\" alt=\"reactiveForm1\"><br><img src=\"/images/reactiveForm2.png\" alt=\"reactiveForm2\"></p>\n<h5 id=\"其他有用的东西：\"><a href=\"#其他有用的东西：\" class=\"headerlink\" title=\"其他有用的东西：\"></a>其他有用的东西：</h5><p><strong>1 . 同步和异步更新</strong></p>\n<p>响应式表单是同步的。<br>使用响应式表单，我们会在代码中创建整个表单控件树。 我们可以立即更新一个值或者深入到表单中的任意节点，因为所有的控件都始终是可用的。</p>\n<p>模板驱动表单是异步的。<br>模板驱动表单会委托指令来创建它们的表单控件。 为了消除“检查完后又变化了”的错误，这些指令需要消耗一个以上的变更检测周期来构建整个控件树。 这意味着在从组件类中操纵任何控件之前，我们都必须先等待一个节拍。<br>比如，如果我们用@ViewChild(NgForm)查询来注入表单控件，并在生命周期钩子ngAfterViewInit中检查它，就会发现它没有子控件。 我们必须使用setTimeout等待一个节拍才能从控件中提取值、测试有效性，或把它设置为新值。</p>\n<p><strong>2 . 模板驱动表单和响应式表单的区别</strong></p>\n<p><strong>模板驱动表单</strong></p>\n<ul>\n<li>数据更新是异步的，更新流程多，依赖于变更周期</li>\n<li>表单控件在模板中通过指令创建和更新操作，如：ngModel</li>\n<li>表单校验使用指令验证，指令包装校验函数</li>\n<li>每次数据更新只是更新部分值，在变更周期后触法</li>\n<li>难测试</li>\n</ul>\n<p><strong>响应式表单</strong></p>\n<ul>\n<li>数据更新是同步的，更新流程少</li>\n<li>表单控件在ts中直接创建和更新操作,如：FormControl</li>\n<li>表单校验使用校验函数进行验证</li>\n<li>每次数据更新都是返回一个新实例</li>\n<li>易测试</li>\n</ul>\n<p><a href=\"https://www.angular.cn/guide/forms-overview#data-flow-in-forms\" target=\"_blank\" rel=\"external\">数据更新流程</a></p>"},{"title":"less.js用法（译）","date":"2018-08-09T16:00:15.000Z","comments":1,"toc":true,"_content":"\n# 命令行用法\n使用命令行将.less文件编译为.css\n## 安装\n\n    npm install less -g\n\n-g选项代表安装全局，安装后可用于命令行。 如果需要安装特定版本或标记的less，可以在包名称之后添加@VERSION，例如\n<!--more-->\n\n    npm install less@2.7.1 -g\n\n## 开发本地安装\n如果您不想全局安装，也可以本地安装\n\n    npm i less --save-dev\n\n这将在项目文件夹中安装最新的lessc正式版，并将其添加到项目的package.json的devDependencies中\n\n## lessc的Beta版本\n随着新功能的开发，lessc版本将定期的发布到npm，标记为beta。\n这些版本不会作为@latest官方发行版发布，并且通常会在版本中发布beta版（使用lessc -v获取当前版本）。\n由于补丁版本不会中断，我们将立即发布补丁版本，alpha / beta /候选版本将作为次要或主要版本升级发布（我们努力从1.4.0开始遵循语义版本控制）。\n\n## 服务端命令行用法\n二进制文件bin / lessc可与* nix，OS X和Windows上的Node.js一起使用。\n### 用法\n\n    lessc [option option=parameter ...] <source> [destination]\n\n如果source设置为` - '（破折号或连字符减号），则从stdin读取输入。\n例子：\n\n    lessc bootstrap.less bootstrap.css\n\n## lessc配置参数\n想要获取更多的参数和用法，请参看[Less Options][1]\n\n**Silent**\n\n停止显示任何警告。\n\n    lessc -s lessc --silent\n\n**Version**\n\n查看版本。\n\n    lessc -v  / lessc --version\n\n**help**\n\n打印包含可用选项和退出的帮助消息。\n\n    lessc --help / lessc -h\n\n**Makefile**\n\n将导入到依赖关系列表的生成文件输出到stdout。\n\n    lessc -M\n    lessc --depends\n\n**No Color**\n\n    lessc --no-color\n\n**Clean CSS**\n\n在v2中，Clean CSS不再作为直接依赖项包含在内。 要使用Clean CSS，请使用clean css插件。\n\n# 浏览器端用法\n在浏览器中使用Less.js是最简单的入门方式，便于使用Less进行开发，但在生产中，当性能和可靠性很重要时，我们建议使用Node.js或许多第三方工具之一进行预编译\n首先，将.less样式表与rel属性设置为“stylesheet / less”链接：\n\n    <link rel =“stylesheet / less”type =“text / css”href =“styles.less”/>\n\n然后，将less.js包含在页面head元素的`<script> </ script>`标记中：\n\n    <script src =“less.js”type =“text / javascript”> </ script>\n\n## 配置参数\n可以通过在less脚本加载之前使用对象来设置参数选项，这会影响所有初始链接标记和less使用。\n\n    <script>\n      less = {\n        env: \"development\",\n        async: false,\n        fileAsync: false,\n        poll: 1000,\n        functions: {},\n        dumpLineNumbers: \"comments\",\n        relativeUrls: false,\n        rootpath: \":/a.com/\"\n      };\n    </script>\n    <script src=\"less.js\"></script>\n\n另一张方式也可以再标签上直接设置参数\n\n    <script>\n      less = {\n        env: \"development\"\n      };\n    </script>\n    <script src=\"less.js\" data-env=\"development\"></script>\n\n或者为了简洁起见，可以将它们设置为脚本和链接标记上的属性：\n\n    <script src=\"less.js\" data-poll=\"1000\" data-relative-urls=\"false\"></script>\n    <link data-dump-line-numbers=\"all\" data-global-vars='{ \"myvar\": \"#ddffee\", \"mystr\": \"\\\"quoted\\\"\" }' rel=\"stylesheet/less\" type=\"text/css\" href=\"less/styles.less\">\n\n## 浏览器环境支持\nLess.js支持所有现代浏览器（Chrome，Firefox，Safari，IE11 +和Edge的最新版本）。 虽然在生产中可以在客户端使用Less，但请注意这样做会对性能产生影响（尽管Less的最新版本速度要快得多）。 此外，如果发生JavaScript错误，有时会出现装饰性问题。 这是灵活性与速度的折衷。 为了尽可能提高静态网站的性能，我们建议在服务器端编译Less。\n\n## 注意事项\n\n- 确保在脚本之前包含样式表。\n- 当您链接多个.less样式表时，每个样式表都是独立编译的\n- 因此，您在样式表中定义的任何变量，混合或名称空间都无法访问。\n- 由于浏览器的原始策略相同，因此加载外部资源需要启用CORS\n\n## 监控模式\n要启用监视模式，必须将选项env设置为开发。然后在包含less.js文件之后，调用less.watch（），如下所示：\n\n    <script>less = { env: 'development'};</script>\n    <script src=\"less.js\"></script>\n    <script>less.watch();</script>\n\n或者，您可以通过将＃！watch附加到URL来临时启用“监视”模式。\n\n## 变量修改\n启用Less变量的运行时修改。 使用新值调用时，将重新编译Less文件而不重新加载。 简单的基本用法：\n\n    less.modifyVars({\n      '@buttonFace': '#5B83AD',\n      '@buttonText': '#D9EEF2'\n    });\n\n## 调试\n可以在CSS中输出规则，允许工具找到规则的来源。\n如上所述指定选项dumpLineNumbers或将！dumpLineNumbers：mediaquery添加到url\n您可以将mediaquery选项与FireLESS一起使用（它与SCSS媒体查询调试格式相同）。 另请参阅FireLess和Less v2。 comment选项可用于在内联编译的CSS代码中显示文件信息和行号。\n\n## 选项\n\n    <!-- set options before less.js script -->\n    <script>\n      less = {\n        env: \"development\",\n        logLevel: 2,\n        async: false,\n        fileAsync: false,\n        poll: 1000,\n        functions: {},\n        dumpLineNumbers: \"comments\",\n        relativeUrls: false,\n        globalVars: {\n          var1: '\"quoted value\"',\n          var2: 'regular value'\n        },\n        rootpath: \":/a.com/\"\n      };\n    </script>\n    <script src=\"less.js\"></script>\n\n## lessc配置参数\n想要获取更多的参数和用法，请参看[Less Options][1]\n\n**异步async**\n\n类型：布尔值\n默认值：false\n是否使用async选项请求导入文件。请参阅fileAsync。\n\n**env运行环境**\n\n类型：字符串默认值：取决于页面URL，运行环境可以是开发或生产。\n例如：less = {env：'production'};\n在生产中，您的css缓存在本地存储中，信息消息不会输出到控制台。\n如果文档的URL以file：//开头，或者在本地计算机上或具有非标准端口，则它将自动设置为开发。\n\n**errorReporting**\n\n类型：字符串\n选项：html | console | function\n默认值：html\n编译失败时设置错误报告方法。\n\n**fileAsync**\n\n类型：布尔值\n默认值：false\n是否在具有文件协议的页面中异步请求导入。\n函数（不推荐使用 - 使用@plugin）\n类型：对象\n用户功能，按名称键入。\n\n    less = {\n        功能： {\n            myfunc：function（）{\n                返回less.Dimension（1）;\n            }\n        }\n    };\n\n它可以像原生的Less函数一样使用，例如\n\n    .myclass {\n      border-width：unit（myfunc（），px）;\n    }\n\n**logLevel**\n\n类型：数字\n默认值：2\n2 - 信息和错误\n1 - 错误\n0 - 没什么\njavascript控制台中的日志记录量。注意：如果您在生产环境中，则不会进行任何记录。\n\n**poll**\n\n类型：整数\n默认值：1000\n处于监视模式时轮询之间的时间量（以毫秒为单位）。\n\n**relativeUrls**\n\n类型：布尔值\n默认值：false\n（可选）将URL调整为相对。如果为false，则URL已经相对于entry-less文件\n\n**useFileCache**\n\n类型：布尔值\n默认值：true（之前在v2之前为false）\n是否使用每个会话文件缓存。这会缓存较少的文件，以便您可以调用modifyVars，并且它不会再次检索所有较少的文件。如果使用观察程序或使用reload设置为true调用refresh，则在运行之前将清除缓存。\n\n# Less.js选项\n## 跨平台选项\n\n**包括路径**\n\n    lessc --include-path = PATH1; PATH2 {paths：['PATH1'，'PATH2']}\n\n如果@import规则中的文件不存在于该确切位置，则Less将在传递给此选项的位置查找该文件。 例如，您可以使用它在Less文件中指定要引用库的相对路径。\n\n**Rootpath**\n\n    lessc -rp=resources/\n    lessc --rootpath=resources/\t{ rootpath: 'resources/' }\n\n如果@import规则中的文件不存在于该确切位置，则Less将在传递给此选项的位置查找该文件。 例如，您可以使用它在Less文件中指定要引用库的相对路径。\n\n**相对URL**\n\n    lessc -ru\n    lessc --relative-urls {relativeUrls：true}\n\n默认情况下，URL保持原样，因此如果您在引用图像的子目录中导入文件，则将在css中输出完全相同的URL。此选项允许您在导入的文件中重写URL，以便URL始终相对于基本导入的文件。例如。\n\n    // main.less\n    @import“files / backgrounds.less”;\n    // files / backgrounds.less\n    .icon-1 {\n      background-image：url（'images / lamp-post.png'）;\n    }\n\n正常输出以下内容\n\n    .icon-1 {\n      background-image：url（'images / lamp-post.png'）;\n    }\n\n但是使用relativeUrls：true，它将输出\n\n    .icon-1 {\n      background-image：url（'files / images / lamp-post.png'）;\n    }\n\n您可能还需要考虑使用data-uri函数而不是此选项，它会将图像嵌入到css中。\n\n**Strict Math**\n\n    lessc -sm = on\n    lessc --strict-math = on {strictMath：true}\n\n默认为off / false。\n如果没有此选项，Less将尝试处理您的CSS中的所有数学，例如在：\n\n    .class {\n      grid-column：3/6;\n    }\n    3/6将导致2。\n\n严格的数学运算，只处理不必要的括号内的数学。例如。\n\n    .class {\n      grid-column：3/6;\n      height：40px + 2px;\n      width：（40px + 2px）;\n    }\n    .class {\n      grid-column：3/6;\n      width：40px + 2px;\n      width：42px;\n    }\n\n我们原计划在未来将此默认为true，但它一直是一个有争议的选项，我们正在考虑我们是否以正确的方式解决了问题，或者Less是否应该只对有效或无效的实例有例外。\n\n**Strict Units**\n\n    lessc -su = on\n    lessc --strict-units = on {strictUnits：true}\n\n默认为off / false。\n如果没有此选项，则在数学运算时尝试猜测输出单位。例如\n\n    .class {\n      property：1px * 2px;\n    }\n\n在这种情况下，事情显然是不对的 - 长度乘以长度给出一个区域，但css不支持指定区域。所以我们假设用户意味着其中一个值是一个值，而不是长度单位，我们输出2px。\n如果打开严格的单位，我们假设这是计算中的错误并抛出错误。\n\n**全局变量**\n\n    lessc --global-var =“color1 = red”{globalVars：{color1：'red'}}\n\n此选项定义可由文件引用的变量。变量的声明放在基础Less文件的顶部，这意味着可以使用它，也可以覆盖它。\n\n**修改变量**\n\n    lessc --modify-var =“color1 = red”{modifyVars：{color1：'red'}}\n\n与全局变量选项相反，这会将声明放在基本文件的末尾，这意味着它将覆盖Less文件中定义的任何内容。\n\n**URL参数**\n\n    lessc --url-args =“cache726357”{urlArgs：'cache726357'}\n\n此选项允许您指定要转到每个URL的参数。例如，这可以用于缓存清除。\n\n**预装插件**\n\n请参阅：预加载插件\n\n**lint检查**\n\n    lessc --lint -l {lint：true}\n\n运行较少的解析器，只报告错误而不输出任何内容。\n\n**压缩**\n\n    lessc --compress -x {compress：true}\n\n使用较少的内置压缩进行压缩。这项工作做得不错，但没有利用专用css压缩的所有技巧。请随时通过pull请求改进我们的压缩输出。\n\n**允许从不安全的HTTPS主机导入**\n\n    lessc --insecure {insecure：true}\n\n## 源映射选项\n大多数这些选项不适用于在浏览器中使用，因为您应该使用预编译的Less文件生成源映射。\n\n**生成源映射**\n\n    lessc --source-map {sourceMap：{}}\n\n**源映射输出文件名**\n\n    lessc --source-map=file.map\t{ sourceMap: { outputFilename: 'file.map' } }\n\n**源映射Rootpath**\n\n    lessc --source-map-rootpath=dev-files/\t{ sourceMap: { sourceMapRootpath: 'dev-files/' } }\n\n指定添加前导路径到源映射内的每个less文件路径，以及输出css中指定的映射文件的路径.\n由于basepath默认为输入较少文件的目录，因此根路径默认为从sourcemap输出文件到input less文件的基目录的路径。\n例如，如果您在Web服务器的根目录中生成了css文件，但将源/ less / css / map文件放在不同的文件夹中，请使用此选项\n\n    output.css\n    dev-files/output.map\n    dev-files/main.less\n\n**源映射Basepath**\n\n    lessc --source-map-basepath=less-files/\t{ sourceMap: { sourceMapBasepath: 'less-files/' } }\n\n这与rootpath选项相反，它指定应从输出路径中删除的路径。 例如，如果要编译less-files目录中的文件，但源文件将在根目录或当前目录中的Web服务器上可用，则可以指定此文件以删除路径中的其他less-files部分。\n它默认为输入less文件的路径。\n\n**在源映射中包含less源文件**\n\n    lessc --source-map-include-source {sourceMap：{outputSourceFiles：true}}\n\n此选项指定将所有Less文件包含在sourcemap中。这意味着您只需要映射文件即可获得原始来源。\n这可以与map inline选项一起使用，这样您根本不需要任何其他外部文件。\n\n**源映射内联**\n\n    lessc --source-map-inline {sourceMap：{sourceMapFileInline：true}}\n\n此选项指定映射文件应在输出内联CSS。这不建议用于生产，但是对于开发，它允许编译器在支持它的浏览器中生成单个输出文件，表现为使用的是编译后的css但显示的却是未编译的less源文件。\n\n**源映射URL**\n\n    lessc --source-map-url = .. / my-map.json {sourceMap：{sourceMapURL：'.. / my-map.json'}}\n\n允许覆盖css中指向映文件的URL。这适用于rootpath和basepath选项未完全生成所需内容的情况。\n\n# 预加载插件\n在Less.js开始解析之前加载插件\n虽然使用插件的最简单方法是使用[@plugin-at-rule][2] ，但在Node.js环境中，您可以通过命令行预先加载全局Less.js插件，或者在Less选项中指定它。\n## 预处理\n如果要添加Less.js预处理器，则需要预加载插件。 也就是说，在解析之前会传递原始Less源并调用插件。 一个例子是Sass-To-Less预处理器插件。\n注意：预评估插件不需要预加载（在解析Less源之后，但在评估之前）。\n## Node.js使用\n### 使用命令行\n如果你使用lessc，你需要做的第一件事是安装该插件。 像NPM一样，我们建议使用“less-plugin-”前缀来注册Less.js插件（以便于搜索），尽管这不是必需的。 因此，对于自定义插件，您可以安装：\n\n    npm install less-plugin-myplugin\n\n要使用该插件，只需编写代码即可在命令行上传递：\n\n    lessc --myplugin\n\n每当有一个未知的Less选项（如“myplugin”）时，Less.js将尝试加载“less-plugin-myplugin”和“myplugin”模块作为插件。\n您还可以使用以下命令显式指定插件：\n\n    lessc --plugin = myplugin\n\n要将选项传递给插件，您可以使用以下两种方式之一来编写它。\n\n    lessc --myplugin =“advanced”\n    lessc --plugin = myplugin = advanced\n\n### 通过Less.js加载插件\n\n在Node中，require插件时需要将其作为插件数组来传递less插件。 例如。\n\n    var LessPlugin = require('less-plugin-myplugin');\n    less.render(myCSS, { plugins: [LessPlugin] })\n      .then(\n        function(output) { },\n        function(error) { }\n      );\n\n# 编程使用\n编程中只要使用less的less.render函数来实现，比如\n\n    //返回承诺\n    less.render(lessInput, options)\n        .then(function(output) {\n            // output.css = string of css\n            // output.map = string of sourcemap\n            // output.imports = array of string filenames of the imports referenced\n        },\n        function(error) {\n        });\n\n    // or...\n    //回调方法\n    less.render(css, options, function(error, output) {})\n\n如上所示，options参数是可选的。如果指定了回调方法，则不会返回承诺，如果您没有指定回调方法则会给出承诺。在编译引擎下，使用回调版本，以便可以同步使用less\n如果要渲染文件，首先要将其转化为字符串（传递给less.render），然后将options选项参数上的filename字段设置为主文件的文件名。 less会处理所有的导入。\nsourceMap选项是一个对象，可用于设置子源图选项。 可用的子选项包括：sourceMapURL，sourceMapBasepath，sourceMapRootpath，outputSourceFiles和sourceMapFileInline。 请注意，sourceMap选项现在不适用于浏览器编译器中的less.js.\n\n    less.render(lessInput)\n        .then(function(output) {\n            // output.css = string of css\n            // output.map = undefined\n    }\n    //,\n    less.render(lessInput, {sourceMap: {}})\n        .then(function(output) {\n            // output.css = string of css\n            // output.map = string of sourcemap\n    }\n    //or,\n    less.render(lessInput, {sourceMap: {sourceMapFileInline: true}})\n        .then(function(output) {\n            // output.css = string of css \\n /*# sourceMappingURL=data:application/json;base64,eyJ2ZXJ..= */\n            // output.map = undefined\n    }\n\n## 访问日志\n您可以使用以下代码添加日志侦听器\n\n    less.logger.addListener({\n        debug: function(msg) {\n        },\n        info: function(msg) {\n        },\n        warn: function(msg) {\n        },\n        error: function(msg) {\n        }\n    });\n\n注意：所有功能都是可选的。 less本身不会记录错误，而是将错误传递回less.render中的回调或承诺\n\n# 为Less.js做贡献\n这部分就描述了，有兴趣的同学可以访问下源文[为Less.js做贡献](https://less.bootcss.com/usage/#programmatic-usage)\n\n[2]: https://less.bootcss.com/features/#plugin-atrules-feature\n[1]: https://less.bootcss.com/usage/#less-options\n\n\n","source":"_posts/2018-10-16-less-common.md","raw":"---\ntitle: less.js用法（译）\ndate: 2018-08-10 00:00:15\ntags: Less\ncategories: 前端\ncomments: true\ntoc: true\n---\n\n# 命令行用法\n使用命令行将.less文件编译为.css\n## 安装\n\n    npm install less -g\n\n-g选项代表安装全局，安装后可用于命令行。 如果需要安装特定版本或标记的less，可以在包名称之后添加@VERSION，例如\n<!--more-->\n\n    npm install less@2.7.1 -g\n\n## 开发本地安装\n如果您不想全局安装，也可以本地安装\n\n    npm i less --save-dev\n\n这将在项目文件夹中安装最新的lessc正式版，并将其添加到项目的package.json的devDependencies中\n\n## lessc的Beta版本\n随着新功能的开发，lessc版本将定期的发布到npm，标记为beta。\n这些版本不会作为@latest官方发行版发布，并且通常会在版本中发布beta版（使用lessc -v获取当前版本）。\n由于补丁版本不会中断，我们将立即发布补丁版本，alpha / beta /候选版本将作为次要或主要版本升级发布（我们努力从1.4.0开始遵循语义版本控制）。\n\n## 服务端命令行用法\n二进制文件bin / lessc可与* nix，OS X和Windows上的Node.js一起使用。\n### 用法\n\n    lessc [option option=parameter ...] <source> [destination]\n\n如果source设置为` - '（破折号或连字符减号），则从stdin读取输入。\n例子：\n\n    lessc bootstrap.less bootstrap.css\n\n## lessc配置参数\n想要获取更多的参数和用法，请参看[Less Options][1]\n\n**Silent**\n\n停止显示任何警告。\n\n    lessc -s lessc --silent\n\n**Version**\n\n查看版本。\n\n    lessc -v  / lessc --version\n\n**help**\n\n打印包含可用选项和退出的帮助消息。\n\n    lessc --help / lessc -h\n\n**Makefile**\n\n将导入到依赖关系列表的生成文件输出到stdout。\n\n    lessc -M\n    lessc --depends\n\n**No Color**\n\n    lessc --no-color\n\n**Clean CSS**\n\n在v2中，Clean CSS不再作为直接依赖项包含在内。 要使用Clean CSS，请使用clean css插件。\n\n# 浏览器端用法\n在浏览器中使用Less.js是最简单的入门方式，便于使用Less进行开发，但在生产中，当性能和可靠性很重要时，我们建议使用Node.js或许多第三方工具之一进行预编译\n首先，将.less样式表与rel属性设置为“stylesheet / less”链接：\n\n    <link rel =“stylesheet / less”type =“text / css”href =“styles.less”/>\n\n然后，将less.js包含在页面head元素的`<script> </ script>`标记中：\n\n    <script src =“less.js”type =“text / javascript”> </ script>\n\n## 配置参数\n可以通过在less脚本加载之前使用对象来设置参数选项，这会影响所有初始链接标记和less使用。\n\n    <script>\n      less = {\n        env: \"development\",\n        async: false,\n        fileAsync: false,\n        poll: 1000,\n        functions: {},\n        dumpLineNumbers: \"comments\",\n        relativeUrls: false,\n        rootpath: \":/a.com/\"\n      };\n    </script>\n    <script src=\"less.js\"></script>\n\n另一张方式也可以再标签上直接设置参数\n\n    <script>\n      less = {\n        env: \"development\"\n      };\n    </script>\n    <script src=\"less.js\" data-env=\"development\"></script>\n\n或者为了简洁起见，可以将它们设置为脚本和链接标记上的属性：\n\n    <script src=\"less.js\" data-poll=\"1000\" data-relative-urls=\"false\"></script>\n    <link data-dump-line-numbers=\"all\" data-global-vars='{ \"myvar\": \"#ddffee\", \"mystr\": \"\\\"quoted\\\"\" }' rel=\"stylesheet/less\" type=\"text/css\" href=\"less/styles.less\">\n\n## 浏览器环境支持\nLess.js支持所有现代浏览器（Chrome，Firefox，Safari，IE11 +和Edge的最新版本）。 虽然在生产中可以在客户端使用Less，但请注意这样做会对性能产生影响（尽管Less的最新版本速度要快得多）。 此外，如果发生JavaScript错误，有时会出现装饰性问题。 这是灵活性与速度的折衷。 为了尽可能提高静态网站的性能，我们建议在服务器端编译Less。\n\n## 注意事项\n\n- 确保在脚本之前包含样式表。\n- 当您链接多个.less样式表时，每个样式表都是独立编译的\n- 因此，您在样式表中定义的任何变量，混合或名称空间都无法访问。\n- 由于浏览器的原始策略相同，因此加载外部资源需要启用CORS\n\n## 监控模式\n要启用监视模式，必须将选项env设置为开发。然后在包含less.js文件之后，调用less.watch（），如下所示：\n\n    <script>less = { env: 'development'};</script>\n    <script src=\"less.js\"></script>\n    <script>less.watch();</script>\n\n或者，您可以通过将＃！watch附加到URL来临时启用“监视”模式。\n\n## 变量修改\n启用Less变量的运行时修改。 使用新值调用时，将重新编译Less文件而不重新加载。 简单的基本用法：\n\n    less.modifyVars({\n      '@buttonFace': '#5B83AD',\n      '@buttonText': '#D9EEF2'\n    });\n\n## 调试\n可以在CSS中输出规则，允许工具找到规则的来源。\n如上所述指定选项dumpLineNumbers或将！dumpLineNumbers：mediaquery添加到url\n您可以将mediaquery选项与FireLESS一起使用（它与SCSS媒体查询调试格式相同）。 另请参阅FireLess和Less v2。 comment选项可用于在内联编译的CSS代码中显示文件信息和行号。\n\n## 选项\n\n    <!-- set options before less.js script -->\n    <script>\n      less = {\n        env: \"development\",\n        logLevel: 2,\n        async: false,\n        fileAsync: false,\n        poll: 1000,\n        functions: {},\n        dumpLineNumbers: \"comments\",\n        relativeUrls: false,\n        globalVars: {\n          var1: '\"quoted value\"',\n          var2: 'regular value'\n        },\n        rootpath: \":/a.com/\"\n      };\n    </script>\n    <script src=\"less.js\"></script>\n\n## lessc配置参数\n想要获取更多的参数和用法，请参看[Less Options][1]\n\n**异步async**\n\n类型：布尔值\n默认值：false\n是否使用async选项请求导入文件。请参阅fileAsync。\n\n**env运行环境**\n\n类型：字符串默认值：取决于页面URL，运行环境可以是开发或生产。\n例如：less = {env：'production'};\n在生产中，您的css缓存在本地存储中，信息消息不会输出到控制台。\n如果文档的URL以file：//开头，或者在本地计算机上或具有非标准端口，则它将自动设置为开发。\n\n**errorReporting**\n\n类型：字符串\n选项：html | console | function\n默认值：html\n编译失败时设置错误报告方法。\n\n**fileAsync**\n\n类型：布尔值\n默认值：false\n是否在具有文件协议的页面中异步请求导入。\n函数（不推荐使用 - 使用@plugin）\n类型：对象\n用户功能，按名称键入。\n\n    less = {\n        功能： {\n            myfunc：function（）{\n                返回less.Dimension（1）;\n            }\n        }\n    };\n\n它可以像原生的Less函数一样使用，例如\n\n    .myclass {\n      border-width：unit（myfunc（），px）;\n    }\n\n**logLevel**\n\n类型：数字\n默认值：2\n2 - 信息和错误\n1 - 错误\n0 - 没什么\njavascript控制台中的日志记录量。注意：如果您在生产环境中，则不会进行任何记录。\n\n**poll**\n\n类型：整数\n默认值：1000\n处于监视模式时轮询之间的时间量（以毫秒为单位）。\n\n**relativeUrls**\n\n类型：布尔值\n默认值：false\n（可选）将URL调整为相对。如果为false，则URL已经相对于entry-less文件\n\n**useFileCache**\n\n类型：布尔值\n默认值：true（之前在v2之前为false）\n是否使用每个会话文件缓存。这会缓存较少的文件，以便您可以调用modifyVars，并且它不会再次检索所有较少的文件。如果使用观察程序或使用reload设置为true调用refresh，则在运行之前将清除缓存。\n\n# Less.js选项\n## 跨平台选项\n\n**包括路径**\n\n    lessc --include-path = PATH1; PATH2 {paths：['PATH1'，'PATH2']}\n\n如果@import规则中的文件不存在于该确切位置，则Less将在传递给此选项的位置查找该文件。 例如，您可以使用它在Less文件中指定要引用库的相对路径。\n\n**Rootpath**\n\n    lessc -rp=resources/\n    lessc --rootpath=resources/\t{ rootpath: 'resources/' }\n\n如果@import规则中的文件不存在于该确切位置，则Less将在传递给此选项的位置查找该文件。 例如，您可以使用它在Less文件中指定要引用库的相对路径。\n\n**相对URL**\n\n    lessc -ru\n    lessc --relative-urls {relativeUrls：true}\n\n默认情况下，URL保持原样，因此如果您在引用图像的子目录中导入文件，则将在css中输出完全相同的URL。此选项允许您在导入的文件中重写URL，以便URL始终相对于基本导入的文件。例如。\n\n    // main.less\n    @import“files / backgrounds.less”;\n    // files / backgrounds.less\n    .icon-1 {\n      background-image：url（'images / lamp-post.png'）;\n    }\n\n正常输出以下内容\n\n    .icon-1 {\n      background-image：url（'images / lamp-post.png'）;\n    }\n\n但是使用relativeUrls：true，它将输出\n\n    .icon-1 {\n      background-image：url（'files / images / lamp-post.png'）;\n    }\n\n您可能还需要考虑使用data-uri函数而不是此选项，它会将图像嵌入到css中。\n\n**Strict Math**\n\n    lessc -sm = on\n    lessc --strict-math = on {strictMath：true}\n\n默认为off / false。\n如果没有此选项，Less将尝试处理您的CSS中的所有数学，例如在：\n\n    .class {\n      grid-column：3/6;\n    }\n    3/6将导致2。\n\n严格的数学运算，只处理不必要的括号内的数学。例如。\n\n    .class {\n      grid-column：3/6;\n      height：40px + 2px;\n      width：（40px + 2px）;\n    }\n    .class {\n      grid-column：3/6;\n      width：40px + 2px;\n      width：42px;\n    }\n\n我们原计划在未来将此默认为true，但它一直是一个有争议的选项，我们正在考虑我们是否以正确的方式解决了问题，或者Less是否应该只对有效或无效的实例有例外。\n\n**Strict Units**\n\n    lessc -su = on\n    lessc --strict-units = on {strictUnits：true}\n\n默认为off / false。\n如果没有此选项，则在数学运算时尝试猜测输出单位。例如\n\n    .class {\n      property：1px * 2px;\n    }\n\n在这种情况下，事情显然是不对的 - 长度乘以长度给出一个区域，但css不支持指定区域。所以我们假设用户意味着其中一个值是一个值，而不是长度单位，我们输出2px。\n如果打开严格的单位，我们假设这是计算中的错误并抛出错误。\n\n**全局变量**\n\n    lessc --global-var =“color1 = red”{globalVars：{color1：'red'}}\n\n此选项定义可由文件引用的变量。变量的声明放在基础Less文件的顶部，这意味着可以使用它，也可以覆盖它。\n\n**修改变量**\n\n    lessc --modify-var =“color1 = red”{modifyVars：{color1：'red'}}\n\n与全局变量选项相反，这会将声明放在基本文件的末尾，这意味着它将覆盖Less文件中定义的任何内容。\n\n**URL参数**\n\n    lessc --url-args =“cache726357”{urlArgs：'cache726357'}\n\n此选项允许您指定要转到每个URL的参数。例如，这可以用于缓存清除。\n\n**预装插件**\n\n请参阅：预加载插件\n\n**lint检查**\n\n    lessc --lint -l {lint：true}\n\n运行较少的解析器，只报告错误而不输出任何内容。\n\n**压缩**\n\n    lessc --compress -x {compress：true}\n\n使用较少的内置压缩进行压缩。这项工作做得不错，但没有利用专用css压缩的所有技巧。请随时通过pull请求改进我们的压缩输出。\n\n**允许从不安全的HTTPS主机导入**\n\n    lessc --insecure {insecure：true}\n\n## 源映射选项\n大多数这些选项不适用于在浏览器中使用，因为您应该使用预编译的Less文件生成源映射。\n\n**生成源映射**\n\n    lessc --source-map {sourceMap：{}}\n\n**源映射输出文件名**\n\n    lessc --source-map=file.map\t{ sourceMap: { outputFilename: 'file.map' } }\n\n**源映射Rootpath**\n\n    lessc --source-map-rootpath=dev-files/\t{ sourceMap: { sourceMapRootpath: 'dev-files/' } }\n\n指定添加前导路径到源映射内的每个less文件路径，以及输出css中指定的映射文件的路径.\n由于basepath默认为输入较少文件的目录，因此根路径默认为从sourcemap输出文件到input less文件的基目录的路径。\n例如，如果您在Web服务器的根目录中生成了css文件，但将源/ less / css / map文件放在不同的文件夹中，请使用此选项\n\n    output.css\n    dev-files/output.map\n    dev-files/main.less\n\n**源映射Basepath**\n\n    lessc --source-map-basepath=less-files/\t{ sourceMap: { sourceMapBasepath: 'less-files/' } }\n\n这与rootpath选项相反，它指定应从输出路径中删除的路径。 例如，如果要编译less-files目录中的文件，但源文件将在根目录或当前目录中的Web服务器上可用，则可以指定此文件以删除路径中的其他less-files部分。\n它默认为输入less文件的路径。\n\n**在源映射中包含less源文件**\n\n    lessc --source-map-include-source {sourceMap：{outputSourceFiles：true}}\n\n此选项指定将所有Less文件包含在sourcemap中。这意味着您只需要映射文件即可获得原始来源。\n这可以与map inline选项一起使用，这样您根本不需要任何其他外部文件。\n\n**源映射内联**\n\n    lessc --source-map-inline {sourceMap：{sourceMapFileInline：true}}\n\n此选项指定映射文件应在输出内联CSS。这不建议用于生产，但是对于开发，它允许编译器在支持它的浏览器中生成单个输出文件，表现为使用的是编译后的css但显示的却是未编译的less源文件。\n\n**源映射URL**\n\n    lessc --source-map-url = .. / my-map.json {sourceMap：{sourceMapURL：'.. / my-map.json'}}\n\n允许覆盖css中指向映文件的URL。这适用于rootpath和basepath选项未完全生成所需内容的情况。\n\n# 预加载插件\n在Less.js开始解析之前加载插件\n虽然使用插件的最简单方法是使用[@plugin-at-rule][2] ，但在Node.js环境中，您可以通过命令行预先加载全局Less.js插件，或者在Less选项中指定它。\n## 预处理\n如果要添加Less.js预处理器，则需要预加载插件。 也就是说，在解析之前会传递原始Less源并调用插件。 一个例子是Sass-To-Less预处理器插件。\n注意：预评估插件不需要预加载（在解析Less源之后，但在评估之前）。\n## Node.js使用\n### 使用命令行\n如果你使用lessc，你需要做的第一件事是安装该插件。 像NPM一样，我们建议使用“less-plugin-”前缀来注册Less.js插件（以便于搜索），尽管这不是必需的。 因此，对于自定义插件，您可以安装：\n\n    npm install less-plugin-myplugin\n\n要使用该插件，只需编写代码即可在命令行上传递：\n\n    lessc --myplugin\n\n每当有一个未知的Less选项（如“myplugin”）时，Less.js将尝试加载“less-plugin-myplugin”和“myplugin”模块作为插件。\n您还可以使用以下命令显式指定插件：\n\n    lessc --plugin = myplugin\n\n要将选项传递给插件，您可以使用以下两种方式之一来编写它。\n\n    lessc --myplugin =“advanced”\n    lessc --plugin = myplugin = advanced\n\n### 通过Less.js加载插件\n\n在Node中，require插件时需要将其作为插件数组来传递less插件。 例如。\n\n    var LessPlugin = require('less-plugin-myplugin');\n    less.render(myCSS, { plugins: [LessPlugin] })\n      .then(\n        function(output) { },\n        function(error) { }\n      );\n\n# 编程使用\n编程中只要使用less的less.render函数来实现，比如\n\n    //返回承诺\n    less.render(lessInput, options)\n        .then(function(output) {\n            // output.css = string of css\n            // output.map = string of sourcemap\n            // output.imports = array of string filenames of the imports referenced\n        },\n        function(error) {\n        });\n\n    // or...\n    //回调方法\n    less.render(css, options, function(error, output) {})\n\n如上所示，options参数是可选的。如果指定了回调方法，则不会返回承诺，如果您没有指定回调方法则会给出承诺。在编译引擎下，使用回调版本，以便可以同步使用less\n如果要渲染文件，首先要将其转化为字符串（传递给less.render），然后将options选项参数上的filename字段设置为主文件的文件名。 less会处理所有的导入。\nsourceMap选项是一个对象，可用于设置子源图选项。 可用的子选项包括：sourceMapURL，sourceMapBasepath，sourceMapRootpath，outputSourceFiles和sourceMapFileInline。 请注意，sourceMap选项现在不适用于浏览器编译器中的less.js.\n\n    less.render(lessInput)\n        .then(function(output) {\n            // output.css = string of css\n            // output.map = undefined\n    }\n    //,\n    less.render(lessInput, {sourceMap: {}})\n        .then(function(output) {\n            // output.css = string of css\n            // output.map = string of sourcemap\n    }\n    //or,\n    less.render(lessInput, {sourceMap: {sourceMapFileInline: true}})\n        .then(function(output) {\n            // output.css = string of css \\n /*# sourceMappingURL=data:application/json;base64,eyJ2ZXJ..= */\n            // output.map = undefined\n    }\n\n## 访问日志\n您可以使用以下代码添加日志侦听器\n\n    less.logger.addListener({\n        debug: function(msg) {\n        },\n        info: function(msg) {\n        },\n        warn: function(msg) {\n        },\n        error: function(msg) {\n        }\n    });\n\n注意：所有功能都是可选的。 less本身不会记录错误，而是将错误传递回less.render中的回调或承诺\n\n# 为Less.js做贡献\n这部分就描述了，有兴趣的同学可以访问下源文[为Less.js做贡献](https://less.bootcss.com/usage/#programmatic-usage)\n\n[2]: https://less.bootcss.com/features/#plugin-atrules-feature\n[1]: https://less.bootcss.com/usage/#less-options\n\n\n","slug":"less-common","published":1,"updated":"2018-10-26T14:18:53.847Z","layout":"post","photos":[],"link":"","_id":"cjqwe42ef005xor0b8khrhbec","content":"<h1 id=\"命令行用法\"><a href=\"#命令行用法\" class=\"headerlink\" title=\"命令行用法\"></a>命令行用法</h1><p>使用命令行将.less文件编译为.css</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install less -g\n</code></pre><p>-g选项代表安装全局，安装后可用于命令行。 如果需要安装特定版本或标记的less，可以在包名称之后添加@VERSION，例如<br><a id=\"more\"></a></p>\n<pre><code>npm install less@2.7.1 -g\n</code></pre><h2 id=\"开发本地安装\"><a href=\"#开发本地安装\" class=\"headerlink\" title=\"开发本地安装\"></a>开发本地安装</h2><p>如果您不想全局安装，也可以本地安装</p>\n<pre><code>npm i less --save-dev\n</code></pre><p>这将在项目文件夹中安装最新的lessc正式版，并将其添加到项目的package.json的devDependencies中</p>\n<h2 id=\"lessc的Beta版本\"><a href=\"#lessc的Beta版本\" class=\"headerlink\" title=\"lessc的Beta版本\"></a>lessc的Beta版本</h2><p>随着新功能的开发，lessc版本将定期的发布到npm，标记为beta。<br>这些版本不会作为@latest官方发行版发布，并且通常会在版本中发布beta版（使用lessc -v获取当前版本）。<br>由于补丁版本不会中断，我们将立即发布补丁版本，alpha / beta /候选版本将作为次要或主要版本升级发布（我们努力从1.4.0开始遵循语义版本控制）。</p>\n<h2 id=\"服务端命令行用法\"><a href=\"#服务端命令行用法\" class=\"headerlink\" title=\"服务端命令行用法\"></a>服务端命令行用法</h2><p>二进制文件bin / lessc可与* nix，OS X和Windows上的Node.js一起使用。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><pre><code>lessc [option option=parameter ...] &lt;source&gt; [destination]\n</code></pre><p>如果source设置为` - ‘（破折号或连字符减号），则从stdin读取输入。<br>例子：</p>\n<pre><code>lessc bootstrap.less bootstrap.css\n</code></pre><h2 id=\"lessc配置参数\"><a href=\"#lessc配置参数\" class=\"headerlink\" title=\"lessc配置参数\"></a>lessc配置参数</h2><p>想要获取更多的参数和用法，请参看<a href=\"https://less.bootcss.com/usage/#less-options\" target=\"_blank\" rel=\"external\">Less Options</a></p>\n<p><strong>Silent</strong></p>\n<p>停止显示任何警告。</p>\n<pre><code>lessc -s lessc --silent\n</code></pre><p><strong>Version</strong></p>\n<p>查看版本。</p>\n<pre><code>lessc -v  / lessc --version\n</code></pre><p><strong>help</strong></p>\n<p>打印包含可用选项和退出的帮助消息。</p>\n<pre><code>lessc --help / lessc -h\n</code></pre><p><strong>Makefile</strong></p>\n<p>将导入到依赖关系列表的生成文件输出到stdout。</p>\n<pre><code>lessc -M\nlessc --depends\n</code></pre><p><strong>No Color</strong></p>\n<pre><code>lessc --no-color\n</code></pre><p><strong>Clean CSS</strong></p>\n<p>在v2中，Clean CSS不再作为直接依赖项包含在内。 要使用Clean CSS，请使用clean css插件。</p>\n<h1 id=\"浏览器端用法\"><a href=\"#浏览器端用法\" class=\"headerlink\" title=\"浏览器端用法\"></a>浏览器端用法</h1><p>在浏览器中使用Less.js是最简单的入门方式，便于使用Less进行开发，但在生产中，当性能和可靠性很重要时，我们建议使用Node.js或许多第三方工具之一进行预编译<br>首先，将.less样式表与rel属性设置为“stylesheet / less”链接：</p>\n<pre><code>&lt;link rel =“stylesheet / less”type =“text / css”href =“styles.less”/&gt;\n</code></pre><p>然后，将less.js包含在页面head元素的<code>&lt;script&gt; &lt;/ script&gt;</code>标记中：</p>\n<pre><code>&lt;script src =“less.js”type =“text / javascript”&gt; &lt;/ script&gt;\n</code></pre><h2 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h2><p>可以通过在less脚本加载之前使用对象来设置参数选项，这会影响所有初始链接标记和less使用。</p>\n<pre><code>&lt;script&gt;\n  less = {\n    env: &quot;development&quot;,\n    async: false,\n    fileAsync: false,\n    poll: 1000,\n    functions: {},\n    dumpLineNumbers: &quot;comments&quot;,\n    relativeUrls: false,\n    rootpath: &quot;:/a.com/&quot;\n  };\n&lt;/script&gt;\n&lt;script src=&quot;less.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>另一张方式也可以再标签上直接设置参数</p>\n<pre><code>&lt;script&gt;\n  less = {\n    env: &quot;development&quot;\n  };\n&lt;/script&gt;\n&lt;script src=&quot;less.js&quot; data-env=&quot;development&quot;&gt;&lt;/script&gt;\n</code></pre><p>或者为了简洁起见，可以将它们设置为脚本和链接标记上的属性：</p>\n<pre><code>&lt;script src=&quot;less.js&quot; data-poll=&quot;1000&quot; data-relative-urls=&quot;false&quot;&gt;&lt;/script&gt;\n&lt;link data-dump-line-numbers=&quot;all&quot; data-global-vars=&apos;{ &quot;myvar&quot;: &quot;#ddffee&quot;, &quot;mystr&quot;: &quot;\\&quot;quoted\\&quot;&quot; }&apos; rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;less/styles.less&quot;&gt;\n</code></pre><h2 id=\"浏览器环境支持\"><a href=\"#浏览器环境支持\" class=\"headerlink\" title=\"浏览器环境支持\"></a>浏览器环境支持</h2><p>Less.js支持所有现代浏览器（Chrome，Firefox，Safari，IE11 +和Edge的最新版本）。 虽然在生产中可以在客户端使用Less，但请注意这样做会对性能产生影响（尽管Less的最新版本速度要快得多）。 此外，如果发生JavaScript错误，有时会出现装饰性问题。 这是灵活性与速度的折衷。 为了尽可能提高静态网站的性能，我们建议在服务器端编译Less。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>确保在脚本之前包含样式表。</li>\n<li>当您链接多个.less样式表时，每个样式表都是独立编译的</li>\n<li>因此，您在样式表中定义的任何变量，混合或名称空间都无法访问。</li>\n<li>由于浏览器的原始策略相同，因此加载外部资源需要启用CORS</li>\n</ul>\n<h2 id=\"监控模式\"><a href=\"#监控模式\" class=\"headerlink\" title=\"监控模式\"></a>监控模式</h2><p>要启用监视模式，必须将选项env设置为开发。然后在包含less.js文件之后，调用less.watch（），如下所示：</p>\n<pre><code>&lt;script&gt;less = { env: &apos;development&apos;};&lt;/script&gt;\n&lt;script src=&quot;less.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;less.watch();&lt;/script&gt;\n</code></pre><p>或者，您可以通过将＃！watch附加到URL来临时启用“监视”模式。</p>\n<h2 id=\"变量修改\"><a href=\"#变量修改\" class=\"headerlink\" title=\"变量修改\"></a>变量修改</h2><p>启用Less变量的运行时修改。 使用新值调用时，将重新编译Less文件而不重新加载。 简单的基本用法：</p>\n<pre><code>less.modifyVars({\n  &apos;@buttonFace&apos;: &apos;#5B83AD&apos;,\n  &apos;@buttonText&apos;: &apos;#D9EEF2&apos;\n});\n</code></pre><h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>可以在CSS中输出规则，允许工具找到规则的来源。<br>如上所述指定选项dumpLineNumbers或将！dumpLineNumbers：mediaquery添加到url<br>您可以将mediaquery选项与FireLESS一起使用（它与SCSS媒体查询调试格式相同）。 另请参阅FireLess和Less v2。 comment选项可用于在内联编译的CSS代码中显示文件信息和行号。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><pre><code>&lt;!-- set options before less.js script --&gt;\n&lt;script&gt;\n  less = {\n    env: &quot;development&quot;,\n    logLevel: 2,\n    async: false,\n    fileAsync: false,\n    poll: 1000,\n    functions: {},\n    dumpLineNumbers: &quot;comments&quot;,\n    relativeUrls: false,\n    globalVars: {\n      var1: &apos;&quot;quoted value&quot;&apos;,\n      var2: &apos;regular value&apos;\n    },\n    rootpath: &quot;:/a.com/&quot;\n  };\n&lt;/script&gt;\n&lt;script src=&quot;less.js&quot;&gt;&lt;/script&gt;\n</code></pre><h2 id=\"lessc配置参数-1\"><a href=\"#lessc配置参数-1\" class=\"headerlink\" title=\"lessc配置参数\"></a>lessc配置参数</h2><p>想要获取更多的参数和用法，请参看<a href=\"https://less.bootcss.com/usage/#less-options\" target=\"_blank\" rel=\"external\">Less Options</a></p>\n<p><strong>异步async</strong></p>\n<p>类型：布尔值<br>默认值：false<br>是否使用async选项请求导入文件。请参阅fileAsync。</p>\n<p><strong>env运行环境</strong></p>\n<p>类型：字符串默认值：取决于页面URL，运行环境可以是开发或生产。<br>例如：less = {env：’production’};<br>在生产中，您的css缓存在本地存储中，信息消息不会输出到控制台。<br>如果文档的URL以file：//开头，或者在本地计算机上或具有非标准端口，则它将自动设置为开发。</p>\n<p><strong>errorReporting</strong></p>\n<p>类型：字符串<br>选项：html | console | function<br>默认值：html<br>编译失败时设置错误报告方法。</p>\n<p><strong>fileAsync</strong></p>\n<p>类型：布尔值<br>默认值：false<br>是否在具有文件协议的页面中异步请求导入。<br>函数（不推荐使用 - 使用@plugin）<br>类型：对象<br>用户功能，按名称键入。</p>\n<pre><code>less = {\n    功能： {\n        myfunc：function（）{\n            返回less.Dimension（1）;\n        }\n    }\n};\n</code></pre><p>它可以像原生的Less函数一样使用，例如</p>\n<pre><code>.myclass {\n  border-width：unit（myfunc（），px）;\n}\n</code></pre><p><strong>logLevel</strong></p>\n<p>类型：数字<br>默认值：2<br>2 - 信息和错误<br>1 - 错误<br>0 - 没什么<br>javascript控制台中的日志记录量。注意：如果您在生产环境中，则不会进行任何记录。</p>\n<p><strong>poll</strong></p>\n<p>类型：整数<br>默认值：1000<br>处于监视模式时轮询之间的时间量（以毫秒为单位）。</p>\n<p><strong>relativeUrls</strong></p>\n<p>类型：布尔值<br>默认值：false<br>（可选）将URL调整为相对。如果为false，则URL已经相对于entry-less文件</p>\n<p><strong>useFileCache</strong></p>\n<p>类型：布尔值<br>默认值：true（之前在v2之前为false）<br>是否使用每个会话文件缓存。这会缓存较少的文件，以便您可以调用modifyVars，并且它不会再次检索所有较少的文件。如果使用观察程序或使用reload设置为true调用refresh，则在运行之前将清除缓存。</p>\n<h1 id=\"Less-js选项\"><a href=\"#Less-js选项\" class=\"headerlink\" title=\"Less.js选项\"></a>Less.js选项</h1><h2 id=\"跨平台选项\"><a href=\"#跨平台选项\" class=\"headerlink\" title=\"跨平台选项\"></a>跨平台选项</h2><p><strong>包括路径</strong></p>\n<pre><code>lessc --include-path = PATH1; PATH2 {paths：[&apos;PATH1&apos;，&apos;PATH2&apos;]}\n</code></pre><p>如果@import规则中的文件不存在于该确切位置，则Less将在传递给此选项的位置查找该文件。 例如，您可以使用它在Less文件中指定要引用库的相对路径。</p>\n<p><strong>Rootpath</strong></p>\n<pre><code>lessc -rp=resources/\nlessc --rootpath=resources/    { rootpath: &apos;resources/&apos; }\n</code></pre><p>如果@import规则中的文件不存在于该确切位置，则Less将在传递给此选项的位置查找该文件。 例如，您可以使用它在Less文件中指定要引用库的相对路径。</p>\n<p><strong>相对URL</strong></p>\n<pre><code>lessc -ru\nlessc --relative-urls {relativeUrls：true}\n</code></pre><p>默认情况下，URL保持原样，因此如果您在引用图像的子目录中导入文件，则将在css中输出完全相同的URL。此选项允许您在导入的文件中重写URL，以便URL始终相对于基本导入的文件。例如。</p>\n<pre><code>// main.less\n@import“files / backgrounds.less”;\n// files / backgrounds.less\n.icon-1 {\n  background-image：url（&apos;images / lamp-post.png&apos;）;\n}\n</code></pre><p>正常输出以下内容</p>\n<pre><code>.icon-1 {\n  background-image：url（&apos;images / lamp-post.png&apos;）;\n}\n</code></pre><p>但是使用relativeUrls：true，它将输出</p>\n<pre><code>.icon-1 {\n  background-image：url（&apos;files / images / lamp-post.png&apos;）;\n}\n</code></pre><p>您可能还需要考虑使用data-uri函数而不是此选项，它会将图像嵌入到css中。</p>\n<p><strong>Strict Math</strong></p>\n<pre><code>lessc -sm = on\nlessc --strict-math = on {strictMath：true}\n</code></pre><p>默认为off / false。<br>如果没有此选项，Less将尝试处理您的CSS中的所有数学，例如在：</p>\n<pre><code>.class {\n  grid-column：3/6;\n}\n3/6将导致2。\n</code></pre><p>严格的数学运算，只处理不必要的括号内的数学。例如。</p>\n<pre><code>.class {\n  grid-column：3/6;\n  height：40px + 2px;\n  width：（40px + 2px）;\n}\n.class {\n  grid-column：3/6;\n  width：40px + 2px;\n  width：42px;\n}\n</code></pre><p>我们原计划在未来将此默认为true，但它一直是一个有争议的选项，我们正在考虑我们是否以正确的方式解决了问题，或者Less是否应该只对有效或无效的实例有例外。</p>\n<p><strong>Strict Units</strong></p>\n<pre><code>lessc -su = on\nlessc --strict-units = on {strictUnits：true}\n</code></pre><p>默认为off / false。<br>如果没有此选项，则在数学运算时尝试猜测输出单位。例如</p>\n<pre><code>.class {\n  property：1px * 2px;\n}\n</code></pre><p>在这种情况下，事情显然是不对的 - 长度乘以长度给出一个区域，但css不支持指定区域。所以我们假设用户意味着其中一个值是一个值，而不是长度单位，我们输出2px。<br>如果打开严格的单位，我们假设这是计算中的错误并抛出错误。</p>\n<p><strong>全局变量</strong></p>\n<pre><code>lessc --global-var =“color1 = red”{globalVars：{color1：&apos;red&apos;}}\n</code></pre><p>此选项定义可由文件引用的变量。变量的声明放在基础Less文件的顶部，这意味着可以使用它，也可以覆盖它。</p>\n<p><strong>修改变量</strong></p>\n<pre><code>lessc --modify-var =“color1 = red”{modifyVars：{color1：&apos;red&apos;}}\n</code></pre><p>与全局变量选项相反，这会将声明放在基本文件的末尾，这意味着它将覆盖Less文件中定义的任何内容。</p>\n<p><strong>URL参数</strong></p>\n<pre><code>lessc --url-args =“cache726357”{urlArgs：&apos;cache726357&apos;}\n</code></pre><p>此选项允许您指定要转到每个URL的参数。例如，这可以用于缓存清除。</p>\n<p><strong>预装插件</strong></p>\n<p>请参阅：预加载插件</p>\n<p><strong>lint检查</strong></p>\n<pre><code>lessc --lint -l {lint：true}\n</code></pre><p>运行较少的解析器，只报告错误而不输出任何内容。</p>\n<p><strong>压缩</strong></p>\n<pre><code>lessc --compress -x {compress：true}\n</code></pre><p>使用较少的内置压缩进行压缩。这项工作做得不错，但没有利用专用css压缩的所有技巧。请随时通过pull请求改进我们的压缩输出。</p>\n<p><strong>允许从不安全的HTTPS主机导入</strong></p>\n<pre><code>lessc --insecure {insecure：true}\n</code></pre><h2 id=\"源映射选项\"><a href=\"#源映射选项\" class=\"headerlink\" title=\"源映射选项\"></a>源映射选项</h2><p>大多数这些选项不适用于在浏览器中使用，因为您应该使用预编译的Less文件生成源映射。</p>\n<p><strong>生成源映射</strong></p>\n<pre><code>lessc --source-map {sourceMap：{}}\n</code></pre><p><strong>源映射输出文件名</strong></p>\n<pre><code>lessc --source-map=file.map    { sourceMap: { outputFilename: &apos;file.map&apos; } }\n</code></pre><p><strong>源映射Rootpath</strong></p>\n<pre><code>lessc --source-map-rootpath=dev-files/    { sourceMap: { sourceMapRootpath: &apos;dev-files/&apos; } }\n</code></pre><p>指定添加前导路径到源映射内的每个less文件路径，以及输出css中指定的映射文件的路径.<br>由于basepath默认为输入较少文件的目录，因此根路径默认为从sourcemap输出文件到input less文件的基目录的路径。<br>例如，如果您在Web服务器的根目录中生成了css文件，但将源/ less / css / map文件放在不同的文件夹中，请使用此选项</p>\n<pre><code>output.css\ndev-files/output.map\ndev-files/main.less\n</code></pre><p><strong>源映射Basepath</strong></p>\n<pre><code>lessc --source-map-basepath=less-files/    { sourceMap: { sourceMapBasepath: &apos;less-files/&apos; } }\n</code></pre><p>这与rootpath选项相反，它指定应从输出路径中删除的路径。 例如，如果要编译less-files目录中的文件，但源文件将在根目录或当前目录中的Web服务器上可用，则可以指定此文件以删除路径中的其他less-files部分。<br>它默认为输入less文件的路径。</p>\n<p><strong>在源映射中包含less源文件</strong></p>\n<pre><code>lessc --source-map-include-source {sourceMap：{outputSourceFiles：true}}\n</code></pre><p>此选项指定将所有Less文件包含在sourcemap中。这意味着您只需要映射文件即可获得原始来源。<br>这可以与map inline选项一起使用，这样您根本不需要任何其他外部文件。</p>\n<p><strong>源映射内联</strong></p>\n<pre><code>lessc --source-map-inline {sourceMap：{sourceMapFileInline：true}}\n</code></pre><p>此选项指定映射文件应在输出内联CSS。这不建议用于生产，但是对于开发，它允许编译器在支持它的浏览器中生成单个输出文件，表现为使用的是编译后的css但显示的却是未编译的less源文件。</p>\n<p><strong>源映射URL</strong></p>\n<pre><code>lessc --source-map-url = .. / my-map.json {sourceMap：{sourceMapURL：&apos;.. / my-map.json&apos;}}\n</code></pre><p>允许覆盖css中指向映文件的URL。这适用于rootpath和basepath选项未完全生成所需内容的情况。</p>\n<h1 id=\"预加载插件\"><a href=\"#预加载插件\" class=\"headerlink\" title=\"预加载插件\"></a>预加载插件</h1><p>在Less.js开始解析之前加载插件<br>虽然使用插件的最简单方法是使用<a href=\"https://less.bootcss.com/features/#plugin-atrules-feature\" target=\"_blank\" rel=\"external\">@plugin-at-rule</a> ，但在Node.js环境中，您可以通过命令行预先加载全局Less.js插件，或者在Less选项中指定它。</p>\n<h2 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h2><p>如果要添加Less.js预处理器，则需要预加载插件。 也就是说，在解析之前会传递原始Less源并调用插件。 一个例子是Sass-To-Less预处理器插件。<br>注意：预评估插件不需要预加载（在解析Less源之后，但在评估之前）。</p>\n<h2 id=\"Node-js使用\"><a href=\"#Node-js使用\" class=\"headerlink\" title=\"Node.js使用\"></a>Node.js使用</h2><h3 id=\"使用命令行\"><a href=\"#使用命令行\" class=\"headerlink\" title=\"使用命令行\"></a>使用命令行</h3><p>如果你使用lessc，你需要做的第一件事是安装该插件。 像NPM一样，我们建议使用“less-plugin-”前缀来注册Less.js插件（以便于搜索），尽管这不是必需的。 因此，对于自定义插件，您可以安装：</p>\n<pre><code>npm install less-plugin-myplugin\n</code></pre><p>要使用该插件，只需编写代码即可在命令行上传递：</p>\n<pre><code>lessc --myplugin\n</code></pre><p>每当有一个未知的Less选项（如“myplugin”）时，Less.js将尝试加载“less-plugin-myplugin”和“myplugin”模块作为插件。<br>您还可以使用以下命令显式指定插件：</p>\n<pre><code>lessc --plugin = myplugin\n</code></pre><p>要将选项传递给插件，您可以使用以下两种方式之一来编写它。</p>\n<pre><code>lessc --myplugin =“advanced”\nlessc --plugin = myplugin = advanced\n</code></pre><h3 id=\"通过Less-js加载插件\"><a href=\"#通过Less-js加载插件\" class=\"headerlink\" title=\"通过Less.js加载插件\"></a>通过Less.js加载插件</h3><p>在Node中，require插件时需要将其作为插件数组来传递less插件。 例如。</p>\n<pre><code>var LessPlugin = require(&apos;less-plugin-myplugin&apos;);\nless.render(myCSS, { plugins: [LessPlugin] })\n  .then(\n    function(output) { },\n    function(error) { }\n  );\n</code></pre><h1 id=\"编程使用\"><a href=\"#编程使用\" class=\"headerlink\" title=\"编程使用\"></a>编程使用</h1><p>编程中只要使用less的less.render函数来实现，比如</p>\n<pre><code>//返回承诺\nless.render(lessInput, options)\n    .then(function(output) {\n        // output.css = string of css\n        // output.map = string of sourcemap\n        // output.imports = array of string filenames of the imports referenced\n    },\n    function(error) {\n    });\n\n// or...\n//回调方法\nless.render(css, options, function(error, output) {})\n</code></pre><p>如上所示，options参数是可选的。如果指定了回调方法，则不会返回承诺，如果您没有指定回调方法则会给出承诺。在编译引擎下，使用回调版本，以便可以同步使用less<br>如果要渲染文件，首先要将其转化为字符串（传递给less.render），然后将options选项参数上的filename字段设置为主文件的文件名。 less会处理所有的导入。<br>sourceMap选项是一个对象，可用于设置子源图选项。 可用的子选项包括：sourceMapURL，sourceMapBasepath，sourceMapRootpath，outputSourceFiles和sourceMapFileInline。 请注意，sourceMap选项现在不适用于浏览器编译器中的less.js.</p>\n<pre><code>less.render(lessInput)\n    .then(function(output) {\n        // output.css = string of css\n        // output.map = undefined\n}\n//,\nless.render(lessInput, {sourceMap: {}})\n    .then(function(output) {\n        // output.css = string of css\n        // output.map = string of sourcemap\n}\n//or,\nless.render(lessInput, {sourceMap: {sourceMapFileInline: true}})\n    .then(function(output) {\n        // output.css = string of css \\n /*# sourceMappingURL=data:application/json;base64,eyJ2ZXJ..= */\n        // output.map = undefined\n}\n</code></pre><h2 id=\"访问日志\"><a href=\"#访问日志\" class=\"headerlink\" title=\"访问日志\"></a>访问日志</h2><p>您可以使用以下代码添加日志侦听器</p>\n<pre><code>less.logger.addListener({\n    debug: function(msg) {\n    },\n    info: function(msg) {\n    },\n    warn: function(msg) {\n    },\n    error: function(msg) {\n    }\n});\n</code></pre><p>注意：所有功能都是可选的。 less本身不会记录错误，而是将错误传递回less.render中的回调或承诺</p>\n<h1 id=\"为Less-js做贡献\"><a href=\"#为Less-js做贡献\" class=\"headerlink\" title=\"为Less.js做贡献\"></a>为Less.js做贡献</h1><p>这部分就描述了，有兴趣的同学可以访问下源文<a href=\"https://less.bootcss.com/usage/#programmatic-usage\" target=\"_blank\" rel=\"external\">为Less.js做贡献</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"命令行用法\"><a href=\"#命令行用法\" class=\"headerlink\" title=\"命令行用法\"></a>命令行用法</h1><p>使用命令行将.less文件编译为.css</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install less -g\n</code></pre><p>-g选项代表安装全局，安装后可用于命令行。 如果需要安装特定版本或标记的less，可以在包名称之后添加@VERSION，例如<br>","more":"</p>\n<pre><code>npm install less@2.7.1 -g\n</code></pre><h2 id=\"开发本地安装\"><a href=\"#开发本地安装\" class=\"headerlink\" title=\"开发本地安装\"></a>开发本地安装</h2><p>如果您不想全局安装，也可以本地安装</p>\n<pre><code>npm i less --save-dev\n</code></pre><p>这将在项目文件夹中安装最新的lessc正式版，并将其添加到项目的package.json的devDependencies中</p>\n<h2 id=\"lessc的Beta版本\"><a href=\"#lessc的Beta版本\" class=\"headerlink\" title=\"lessc的Beta版本\"></a>lessc的Beta版本</h2><p>随着新功能的开发，lessc版本将定期的发布到npm，标记为beta。<br>这些版本不会作为@latest官方发行版发布，并且通常会在版本中发布beta版（使用lessc -v获取当前版本）。<br>由于补丁版本不会中断，我们将立即发布补丁版本，alpha / beta /候选版本将作为次要或主要版本升级发布（我们努力从1.4.0开始遵循语义版本控制）。</p>\n<h2 id=\"服务端命令行用法\"><a href=\"#服务端命令行用法\" class=\"headerlink\" title=\"服务端命令行用法\"></a>服务端命令行用法</h2><p>二进制文件bin / lessc可与* nix，OS X和Windows上的Node.js一起使用。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><pre><code>lessc [option option=parameter ...] &lt;source&gt; [destination]\n</code></pre><p>如果source设置为` - ‘（破折号或连字符减号），则从stdin读取输入。<br>例子：</p>\n<pre><code>lessc bootstrap.less bootstrap.css\n</code></pre><h2 id=\"lessc配置参数\"><a href=\"#lessc配置参数\" class=\"headerlink\" title=\"lessc配置参数\"></a>lessc配置参数</h2><p>想要获取更多的参数和用法，请参看<a href=\"https://less.bootcss.com/usage/#less-options\" target=\"_blank\" rel=\"external\">Less Options</a></p>\n<p><strong>Silent</strong></p>\n<p>停止显示任何警告。</p>\n<pre><code>lessc -s lessc --silent\n</code></pre><p><strong>Version</strong></p>\n<p>查看版本。</p>\n<pre><code>lessc -v  / lessc --version\n</code></pre><p><strong>help</strong></p>\n<p>打印包含可用选项和退出的帮助消息。</p>\n<pre><code>lessc --help / lessc -h\n</code></pre><p><strong>Makefile</strong></p>\n<p>将导入到依赖关系列表的生成文件输出到stdout。</p>\n<pre><code>lessc -M\nlessc --depends\n</code></pre><p><strong>No Color</strong></p>\n<pre><code>lessc --no-color\n</code></pre><p><strong>Clean CSS</strong></p>\n<p>在v2中，Clean CSS不再作为直接依赖项包含在内。 要使用Clean CSS，请使用clean css插件。</p>\n<h1 id=\"浏览器端用法\"><a href=\"#浏览器端用法\" class=\"headerlink\" title=\"浏览器端用法\"></a>浏览器端用法</h1><p>在浏览器中使用Less.js是最简单的入门方式，便于使用Less进行开发，但在生产中，当性能和可靠性很重要时，我们建议使用Node.js或许多第三方工具之一进行预编译<br>首先，将.less样式表与rel属性设置为“stylesheet / less”链接：</p>\n<pre><code>&lt;link rel =“stylesheet / less”type =“text / css”href =“styles.less”/&gt;\n</code></pre><p>然后，将less.js包含在页面head元素的<code>&lt;script&gt; &lt;/ script&gt;</code>标记中：</p>\n<pre><code>&lt;script src =“less.js”type =“text / javascript”&gt; &lt;/ script&gt;\n</code></pre><h2 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h2><p>可以通过在less脚本加载之前使用对象来设置参数选项，这会影响所有初始链接标记和less使用。</p>\n<pre><code>&lt;script&gt;\n  less = {\n    env: &quot;development&quot;,\n    async: false,\n    fileAsync: false,\n    poll: 1000,\n    functions: {},\n    dumpLineNumbers: &quot;comments&quot;,\n    relativeUrls: false,\n    rootpath: &quot;:/a.com/&quot;\n  };\n&lt;/script&gt;\n&lt;script src=&quot;less.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>另一张方式也可以再标签上直接设置参数</p>\n<pre><code>&lt;script&gt;\n  less = {\n    env: &quot;development&quot;\n  };\n&lt;/script&gt;\n&lt;script src=&quot;less.js&quot; data-env=&quot;development&quot;&gt;&lt;/script&gt;\n</code></pre><p>或者为了简洁起见，可以将它们设置为脚本和链接标记上的属性：</p>\n<pre><code>&lt;script src=&quot;less.js&quot; data-poll=&quot;1000&quot; data-relative-urls=&quot;false&quot;&gt;&lt;/script&gt;\n&lt;link data-dump-line-numbers=&quot;all&quot; data-global-vars=&apos;{ &quot;myvar&quot;: &quot;#ddffee&quot;, &quot;mystr&quot;: &quot;\\&quot;quoted\\&quot;&quot; }&apos; rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;less/styles.less&quot;&gt;\n</code></pre><h2 id=\"浏览器环境支持\"><a href=\"#浏览器环境支持\" class=\"headerlink\" title=\"浏览器环境支持\"></a>浏览器环境支持</h2><p>Less.js支持所有现代浏览器（Chrome，Firefox，Safari，IE11 +和Edge的最新版本）。 虽然在生产中可以在客户端使用Less，但请注意这样做会对性能产生影响（尽管Less的最新版本速度要快得多）。 此外，如果发生JavaScript错误，有时会出现装饰性问题。 这是灵活性与速度的折衷。 为了尽可能提高静态网站的性能，我们建议在服务器端编译Less。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>确保在脚本之前包含样式表。</li>\n<li>当您链接多个.less样式表时，每个样式表都是独立编译的</li>\n<li>因此，您在样式表中定义的任何变量，混合或名称空间都无法访问。</li>\n<li>由于浏览器的原始策略相同，因此加载外部资源需要启用CORS</li>\n</ul>\n<h2 id=\"监控模式\"><a href=\"#监控模式\" class=\"headerlink\" title=\"监控模式\"></a>监控模式</h2><p>要启用监视模式，必须将选项env设置为开发。然后在包含less.js文件之后，调用less.watch（），如下所示：</p>\n<pre><code>&lt;script&gt;less = { env: &apos;development&apos;};&lt;/script&gt;\n&lt;script src=&quot;less.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;less.watch();&lt;/script&gt;\n</code></pre><p>或者，您可以通过将＃！watch附加到URL来临时启用“监视”模式。</p>\n<h2 id=\"变量修改\"><a href=\"#变量修改\" class=\"headerlink\" title=\"变量修改\"></a>变量修改</h2><p>启用Less变量的运行时修改。 使用新值调用时，将重新编译Less文件而不重新加载。 简单的基本用法：</p>\n<pre><code>less.modifyVars({\n  &apos;@buttonFace&apos;: &apos;#5B83AD&apos;,\n  &apos;@buttonText&apos;: &apos;#D9EEF2&apos;\n});\n</code></pre><h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>可以在CSS中输出规则，允许工具找到规则的来源。<br>如上所述指定选项dumpLineNumbers或将！dumpLineNumbers：mediaquery添加到url<br>您可以将mediaquery选项与FireLESS一起使用（它与SCSS媒体查询调试格式相同）。 另请参阅FireLess和Less v2。 comment选项可用于在内联编译的CSS代码中显示文件信息和行号。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><pre><code>&lt;!-- set options before less.js script --&gt;\n&lt;script&gt;\n  less = {\n    env: &quot;development&quot;,\n    logLevel: 2,\n    async: false,\n    fileAsync: false,\n    poll: 1000,\n    functions: {},\n    dumpLineNumbers: &quot;comments&quot;,\n    relativeUrls: false,\n    globalVars: {\n      var1: &apos;&quot;quoted value&quot;&apos;,\n      var2: &apos;regular value&apos;\n    },\n    rootpath: &quot;:/a.com/&quot;\n  };\n&lt;/script&gt;\n&lt;script src=&quot;less.js&quot;&gt;&lt;/script&gt;\n</code></pre><h2 id=\"lessc配置参数-1\"><a href=\"#lessc配置参数-1\" class=\"headerlink\" title=\"lessc配置参数\"></a>lessc配置参数</h2><p>想要获取更多的参数和用法，请参看<a href=\"https://less.bootcss.com/usage/#less-options\" target=\"_blank\" rel=\"external\">Less Options</a></p>\n<p><strong>异步async</strong></p>\n<p>类型：布尔值<br>默认值：false<br>是否使用async选项请求导入文件。请参阅fileAsync。</p>\n<p><strong>env运行环境</strong></p>\n<p>类型：字符串默认值：取决于页面URL，运行环境可以是开发或生产。<br>例如：less = {env：’production’};<br>在生产中，您的css缓存在本地存储中，信息消息不会输出到控制台。<br>如果文档的URL以file：//开头，或者在本地计算机上或具有非标准端口，则它将自动设置为开发。</p>\n<p><strong>errorReporting</strong></p>\n<p>类型：字符串<br>选项：html | console | function<br>默认值：html<br>编译失败时设置错误报告方法。</p>\n<p><strong>fileAsync</strong></p>\n<p>类型：布尔值<br>默认值：false<br>是否在具有文件协议的页面中异步请求导入。<br>函数（不推荐使用 - 使用@plugin）<br>类型：对象<br>用户功能，按名称键入。</p>\n<pre><code>less = {\n    功能： {\n        myfunc：function（）{\n            返回less.Dimension（1）;\n        }\n    }\n};\n</code></pre><p>它可以像原生的Less函数一样使用，例如</p>\n<pre><code>.myclass {\n  border-width：unit（myfunc（），px）;\n}\n</code></pre><p><strong>logLevel</strong></p>\n<p>类型：数字<br>默认值：2<br>2 - 信息和错误<br>1 - 错误<br>0 - 没什么<br>javascript控制台中的日志记录量。注意：如果您在生产环境中，则不会进行任何记录。</p>\n<p><strong>poll</strong></p>\n<p>类型：整数<br>默认值：1000<br>处于监视模式时轮询之间的时间量（以毫秒为单位）。</p>\n<p><strong>relativeUrls</strong></p>\n<p>类型：布尔值<br>默认值：false<br>（可选）将URL调整为相对。如果为false，则URL已经相对于entry-less文件</p>\n<p><strong>useFileCache</strong></p>\n<p>类型：布尔值<br>默认值：true（之前在v2之前为false）<br>是否使用每个会话文件缓存。这会缓存较少的文件，以便您可以调用modifyVars，并且它不会再次检索所有较少的文件。如果使用观察程序或使用reload设置为true调用refresh，则在运行之前将清除缓存。</p>\n<h1 id=\"Less-js选项\"><a href=\"#Less-js选项\" class=\"headerlink\" title=\"Less.js选项\"></a>Less.js选项</h1><h2 id=\"跨平台选项\"><a href=\"#跨平台选项\" class=\"headerlink\" title=\"跨平台选项\"></a>跨平台选项</h2><p><strong>包括路径</strong></p>\n<pre><code>lessc --include-path = PATH1; PATH2 {paths：[&apos;PATH1&apos;，&apos;PATH2&apos;]}\n</code></pre><p>如果@import规则中的文件不存在于该确切位置，则Less将在传递给此选项的位置查找该文件。 例如，您可以使用它在Less文件中指定要引用库的相对路径。</p>\n<p><strong>Rootpath</strong></p>\n<pre><code>lessc -rp=resources/\nlessc --rootpath=resources/    { rootpath: &apos;resources/&apos; }\n</code></pre><p>如果@import规则中的文件不存在于该确切位置，则Less将在传递给此选项的位置查找该文件。 例如，您可以使用它在Less文件中指定要引用库的相对路径。</p>\n<p><strong>相对URL</strong></p>\n<pre><code>lessc -ru\nlessc --relative-urls {relativeUrls：true}\n</code></pre><p>默认情况下，URL保持原样，因此如果您在引用图像的子目录中导入文件，则将在css中输出完全相同的URL。此选项允许您在导入的文件中重写URL，以便URL始终相对于基本导入的文件。例如。</p>\n<pre><code>// main.less\n@import“files / backgrounds.less”;\n// files / backgrounds.less\n.icon-1 {\n  background-image：url（&apos;images / lamp-post.png&apos;）;\n}\n</code></pre><p>正常输出以下内容</p>\n<pre><code>.icon-1 {\n  background-image：url（&apos;images / lamp-post.png&apos;）;\n}\n</code></pre><p>但是使用relativeUrls：true，它将输出</p>\n<pre><code>.icon-1 {\n  background-image：url（&apos;files / images / lamp-post.png&apos;）;\n}\n</code></pre><p>您可能还需要考虑使用data-uri函数而不是此选项，它会将图像嵌入到css中。</p>\n<p><strong>Strict Math</strong></p>\n<pre><code>lessc -sm = on\nlessc --strict-math = on {strictMath：true}\n</code></pre><p>默认为off / false。<br>如果没有此选项，Less将尝试处理您的CSS中的所有数学，例如在：</p>\n<pre><code>.class {\n  grid-column：3/6;\n}\n3/6将导致2。\n</code></pre><p>严格的数学运算，只处理不必要的括号内的数学。例如。</p>\n<pre><code>.class {\n  grid-column：3/6;\n  height：40px + 2px;\n  width：（40px + 2px）;\n}\n.class {\n  grid-column：3/6;\n  width：40px + 2px;\n  width：42px;\n}\n</code></pre><p>我们原计划在未来将此默认为true，但它一直是一个有争议的选项，我们正在考虑我们是否以正确的方式解决了问题，或者Less是否应该只对有效或无效的实例有例外。</p>\n<p><strong>Strict Units</strong></p>\n<pre><code>lessc -su = on\nlessc --strict-units = on {strictUnits：true}\n</code></pre><p>默认为off / false。<br>如果没有此选项，则在数学运算时尝试猜测输出单位。例如</p>\n<pre><code>.class {\n  property：1px * 2px;\n}\n</code></pre><p>在这种情况下，事情显然是不对的 - 长度乘以长度给出一个区域，但css不支持指定区域。所以我们假设用户意味着其中一个值是一个值，而不是长度单位，我们输出2px。<br>如果打开严格的单位，我们假设这是计算中的错误并抛出错误。</p>\n<p><strong>全局变量</strong></p>\n<pre><code>lessc --global-var =“color1 = red”{globalVars：{color1：&apos;red&apos;}}\n</code></pre><p>此选项定义可由文件引用的变量。变量的声明放在基础Less文件的顶部，这意味着可以使用它，也可以覆盖它。</p>\n<p><strong>修改变量</strong></p>\n<pre><code>lessc --modify-var =“color1 = red”{modifyVars：{color1：&apos;red&apos;}}\n</code></pre><p>与全局变量选项相反，这会将声明放在基本文件的末尾，这意味着它将覆盖Less文件中定义的任何内容。</p>\n<p><strong>URL参数</strong></p>\n<pre><code>lessc --url-args =“cache726357”{urlArgs：&apos;cache726357&apos;}\n</code></pre><p>此选项允许您指定要转到每个URL的参数。例如，这可以用于缓存清除。</p>\n<p><strong>预装插件</strong></p>\n<p>请参阅：预加载插件</p>\n<p><strong>lint检查</strong></p>\n<pre><code>lessc --lint -l {lint：true}\n</code></pre><p>运行较少的解析器，只报告错误而不输出任何内容。</p>\n<p><strong>压缩</strong></p>\n<pre><code>lessc --compress -x {compress：true}\n</code></pre><p>使用较少的内置压缩进行压缩。这项工作做得不错，但没有利用专用css压缩的所有技巧。请随时通过pull请求改进我们的压缩输出。</p>\n<p><strong>允许从不安全的HTTPS主机导入</strong></p>\n<pre><code>lessc --insecure {insecure：true}\n</code></pre><h2 id=\"源映射选项\"><a href=\"#源映射选项\" class=\"headerlink\" title=\"源映射选项\"></a>源映射选项</h2><p>大多数这些选项不适用于在浏览器中使用，因为您应该使用预编译的Less文件生成源映射。</p>\n<p><strong>生成源映射</strong></p>\n<pre><code>lessc --source-map {sourceMap：{}}\n</code></pre><p><strong>源映射输出文件名</strong></p>\n<pre><code>lessc --source-map=file.map    { sourceMap: { outputFilename: &apos;file.map&apos; } }\n</code></pre><p><strong>源映射Rootpath</strong></p>\n<pre><code>lessc --source-map-rootpath=dev-files/    { sourceMap: { sourceMapRootpath: &apos;dev-files/&apos; } }\n</code></pre><p>指定添加前导路径到源映射内的每个less文件路径，以及输出css中指定的映射文件的路径.<br>由于basepath默认为输入较少文件的目录，因此根路径默认为从sourcemap输出文件到input less文件的基目录的路径。<br>例如，如果您在Web服务器的根目录中生成了css文件，但将源/ less / css / map文件放在不同的文件夹中，请使用此选项</p>\n<pre><code>output.css\ndev-files/output.map\ndev-files/main.less\n</code></pre><p><strong>源映射Basepath</strong></p>\n<pre><code>lessc --source-map-basepath=less-files/    { sourceMap: { sourceMapBasepath: &apos;less-files/&apos; } }\n</code></pre><p>这与rootpath选项相反，它指定应从输出路径中删除的路径。 例如，如果要编译less-files目录中的文件，但源文件将在根目录或当前目录中的Web服务器上可用，则可以指定此文件以删除路径中的其他less-files部分。<br>它默认为输入less文件的路径。</p>\n<p><strong>在源映射中包含less源文件</strong></p>\n<pre><code>lessc --source-map-include-source {sourceMap：{outputSourceFiles：true}}\n</code></pre><p>此选项指定将所有Less文件包含在sourcemap中。这意味着您只需要映射文件即可获得原始来源。<br>这可以与map inline选项一起使用，这样您根本不需要任何其他外部文件。</p>\n<p><strong>源映射内联</strong></p>\n<pre><code>lessc --source-map-inline {sourceMap：{sourceMapFileInline：true}}\n</code></pre><p>此选项指定映射文件应在输出内联CSS。这不建议用于生产，但是对于开发，它允许编译器在支持它的浏览器中生成单个输出文件，表现为使用的是编译后的css但显示的却是未编译的less源文件。</p>\n<p><strong>源映射URL</strong></p>\n<pre><code>lessc --source-map-url = .. / my-map.json {sourceMap：{sourceMapURL：&apos;.. / my-map.json&apos;}}\n</code></pre><p>允许覆盖css中指向映文件的URL。这适用于rootpath和basepath选项未完全生成所需内容的情况。</p>\n<h1 id=\"预加载插件\"><a href=\"#预加载插件\" class=\"headerlink\" title=\"预加载插件\"></a>预加载插件</h1><p>在Less.js开始解析之前加载插件<br>虽然使用插件的最简单方法是使用<a href=\"https://less.bootcss.com/features/#plugin-atrules-feature\" target=\"_blank\" rel=\"external\">@plugin-at-rule</a> ，但在Node.js环境中，您可以通过命令行预先加载全局Less.js插件，或者在Less选项中指定它。</p>\n<h2 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h2><p>如果要添加Less.js预处理器，则需要预加载插件。 也就是说，在解析之前会传递原始Less源并调用插件。 一个例子是Sass-To-Less预处理器插件。<br>注意：预评估插件不需要预加载（在解析Less源之后，但在评估之前）。</p>\n<h2 id=\"Node-js使用\"><a href=\"#Node-js使用\" class=\"headerlink\" title=\"Node.js使用\"></a>Node.js使用</h2><h3 id=\"使用命令行\"><a href=\"#使用命令行\" class=\"headerlink\" title=\"使用命令行\"></a>使用命令行</h3><p>如果你使用lessc，你需要做的第一件事是安装该插件。 像NPM一样，我们建议使用“less-plugin-”前缀来注册Less.js插件（以便于搜索），尽管这不是必需的。 因此，对于自定义插件，您可以安装：</p>\n<pre><code>npm install less-plugin-myplugin\n</code></pre><p>要使用该插件，只需编写代码即可在命令行上传递：</p>\n<pre><code>lessc --myplugin\n</code></pre><p>每当有一个未知的Less选项（如“myplugin”）时，Less.js将尝试加载“less-plugin-myplugin”和“myplugin”模块作为插件。<br>您还可以使用以下命令显式指定插件：</p>\n<pre><code>lessc --plugin = myplugin\n</code></pre><p>要将选项传递给插件，您可以使用以下两种方式之一来编写它。</p>\n<pre><code>lessc --myplugin =“advanced”\nlessc --plugin = myplugin = advanced\n</code></pre><h3 id=\"通过Less-js加载插件\"><a href=\"#通过Less-js加载插件\" class=\"headerlink\" title=\"通过Less.js加载插件\"></a>通过Less.js加载插件</h3><p>在Node中，require插件时需要将其作为插件数组来传递less插件。 例如。</p>\n<pre><code>var LessPlugin = require(&apos;less-plugin-myplugin&apos;);\nless.render(myCSS, { plugins: [LessPlugin] })\n  .then(\n    function(output) { },\n    function(error) { }\n  );\n</code></pre><h1 id=\"编程使用\"><a href=\"#编程使用\" class=\"headerlink\" title=\"编程使用\"></a>编程使用</h1><p>编程中只要使用less的less.render函数来实现，比如</p>\n<pre><code>//返回承诺\nless.render(lessInput, options)\n    .then(function(output) {\n        // output.css = string of css\n        // output.map = string of sourcemap\n        // output.imports = array of string filenames of the imports referenced\n    },\n    function(error) {\n    });\n\n// or...\n//回调方法\nless.render(css, options, function(error, output) {})\n</code></pre><p>如上所示，options参数是可选的。如果指定了回调方法，则不会返回承诺，如果您没有指定回调方法则会给出承诺。在编译引擎下，使用回调版本，以便可以同步使用less<br>如果要渲染文件，首先要将其转化为字符串（传递给less.render），然后将options选项参数上的filename字段设置为主文件的文件名。 less会处理所有的导入。<br>sourceMap选项是一个对象，可用于设置子源图选项。 可用的子选项包括：sourceMapURL，sourceMapBasepath，sourceMapRootpath，outputSourceFiles和sourceMapFileInline。 请注意，sourceMap选项现在不适用于浏览器编译器中的less.js.</p>\n<pre><code>less.render(lessInput)\n    .then(function(output) {\n        // output.css = string of css\n        // output.map = undefined\n}\n//,\nless.render(lessInput, {sourceMap: {}})\n    .then(function(output) {\n        // output.css = string of css\n        // output.map = string of sourcemap\n}\n//or,\nless.render(lessInput, {sourceMap: {sourceMapFileInline: true}})\n    .then(function(output) {\n        // output.css = string of css \\n /*# sourceMappingURL=data:application/json;base64,eyJ2ZXJ..= */\n        // output.map = undefined\n}\n</code></pre><h2 id=\"访问日志\"><a href=\"#访问日志\" class=\"headerlink\" title=\"访问日志\"></a>访问日志</h2><p>您可以使用以下代码添加日志侦听器</p>\n<pre><code>less.logger.addListener({\n    debug: function(msg) {\n    },\n    info: function(msg) {\n    },\n    warn: function(msg) {\n    },\n    error: function(msg) {\n    }\n});\n</code></pre><p>注意：所有功能都是可选的。 less本身不会记录错误，而是将错误传递回less.render中的回调或承诺</p>\n<h1 id=\"为Less-js做贡献\"><a href=\"#为Less-js做贡献\" class=\"headerlink\" title=\"为Less.js做贡献\"></a>为Less.js做贡献</h1><p>这部分就描述了，有兴趣的同学可以访问下源文<a href=\"https://less.bootcss.com/usage/#programmatic-usage\" target=\"_blank\" rel=\"external\">为Less.js做贡献</a></p>"},{"title":"less深入指南一（译）","date":"2018-08-13T16:00:30.000Z","comments":1,"toc":true,"_content":"\n这是有关LESS语言功能的深入指南，有关Less的简单概念和语法，请参阅[less概述](https://less.bootcss.com/#)。\n有关安装和设置Less环境的深入指南，以及有关Less开发的文档，可查看上一篇译文[less.js用法](http://blueskyawen.com/2018/08/10/less-common/)\n<!--more-->\n\n# 变量\n使用单个变量控制常用值\n## 概览\n在样式表中看到相同的值重复数十甚至数百次，这种情况并不罕见，比如下面的颜色值：\n\n    a,\n    .link {\n      color: #428bca;\n    }\n    .widget {\n      color: #fff;\n      background: #428bca;\n    }\n\n通过使用变量可以使您的代码更易于维护：\n\n    // Variables\n    @link-color:        #428bca; // sea blue\n    @link-color-hover:  darken(@link-color, 10%);\n\n    // Usage\n    a,\n    .link {\n      color: @link-color;\n    }\n    a:hover {\n      color: @link-color-hover;\n    }\n    .widget {\n      color: #fff;\n      background: @link-color;\n    }\n\n## 变量插值\n上面的示例着重于使用变量来控制CSS规则中的值，但它们也可以在其他地方使用，例如选择器名称，属性名称，URL和@import语句，相当于其他语言里的一个**宏替代**。\n\n**应用于选择器**\n\n\n    // Variables\n    @my-selector: banner;\n\n    // Usage\n    .@{my-selector} {\n      font-weight: bold;\n      line-height: 40px;\n      margin: 0 auto;\n    }\n\n编译后：\n\n    .banner {\n      font-weight: bold;\n      line-height: 40px;\n      margin: 0 auto;\n    }\n\n**应用于属性**\n\n    @property: color;\n\n    .widget {\n      @{property}: #0ee;\n      background-@{property}: #999;\n    }\n\n编译后：\n\n    .widget {\n      color: #0ee;\n      background-color: #999;\n    }\n\n**应用于URL**\n\n    @images: \"../img\";\n\n    // Usage\n    body {\n      color: #444;\n      background: url(\"@{images}/white-sand.png\");\n    }\n\n**应用于@import语句**\n\n> 请注意，在v2.0.0之前，只考虑在根或当前作用域中声明的变量，并且在查找变量时仅考虑当前文件和调用文件。\n\n    @themes: \"../../src/themes\";\n\n    // Usage\n    @import \"@{themes}/tidal-wave.less\";\n\n## 变量的变量\n在Less中，您可以使用变量来定义另一个变量的名称，进行间接替代\n\n    @primary:  green;\n    @secondary: blue;\n\n    .section {\n      @color: primary;\n\n      .element {\n        color: @@color;\n      }\n    }\n\n编译后：\n\n    .section .element {\n      color: green;\n    }\n\n## 懒评估\n在less中变量可以后向声明，即变量可以先使用，后声明\n\n    .lazy-eval {\n      width: @var;\n    }\n\n    @var: @a;\n    @a: 9%;\n\n编译后：\n\n    .lazy-eval {\n      width: 9%;\n    }\n\n当定义相同变量两次时，在一个作用域内使用变量的最后一个定义，这与css本身类似，其中定义中的最后一个属性用于确定最后的替代值，比如：\n\n    @var: 0;\n    .class {\n      @var: 1;\n      .brass {\n        @var: 2;\n        three: @var;\n        @var: 3;\n      }\n      one: @var;\n    }\n\n编译后：\n\n    .class {\n      one: 1;\n    }\n    .class .brass {\n      three: 3;\n    }\n\n实质上，每个作用域范围都有一个“最终”值，类似于浏览器中的属性，就像使用自定义属性的示例：\n\n    .header {\n      --color: white;\n      color: var(--color);  // the color is black\n      --color: black;\n    }\n\n这意味着，与其他CSS预处理语言不同，Less变量的行为与CSS非常相似。\n\n## 属性即变量（新特性）\n在最新的V3.0.0版本中，你可以直接把css属性名当作“变量”来使用，只要利用$符号，这样有时候可以使你的代码更加轻量化，比使用@事先定义变量要方便，例如：\n\n    .widget {\n      color: #efefef;\n      background-color: $color;\n    }\n\n编译后：\n\n    .widget {\n      color: #efefef;\n      background-color: #efefef;\n    }\n\n请注意，与变量一样，Less将选择当前/父范围内的最后一个属性作为“最终”值。\n\n    .block {\n      color: red;\n      .inner {\n        background-color: $color; //使用的blue\n      }\n      color: blue;\n    }\n\n## 默认变量\n我们有时会收到默认变量的请求 - 只有在尚未设置变量时才能设置变量。 此功能不是必需的，因为您可以通过后面的定义轻松覆盖变量。\n\n    // library\n    @base-color: green;\n    @dark-color: darken(@base-color, 10%);\n\n    // use of library\n    @import \"library.less\";\n    @base-color: red;\n\n其中，@base-color被重写了，最后生效的是red\n\n# 父选择器\n使用＆引用父选择器\n＆运算符表示嵌套规则的父选择器，在将链接类或伪类应用于现有选择器时最常用：\n\n    a {\n      color: blue;\n      &:hover {\n        color: green;\n      }\n      &.b {\n        color: black;\n      }\n    }\n\n编译后：\n\n    a {\n      color: blue;\n    }\n\n    a:hover {\n      color: green;\n    }\n    a.b {\n        color: black;\n    }\n\n可以看到，＆就是代表父选择器a,编译后作了替换链接\n“父选择器”运算符具有多种用途，本上，只要您需要嵌套规则的选择器以默认的其他方式组合。 例如，＆的另一个典型用法是产生重复的类名：\n\n    .button {\n      &-ok {\n        background-image: url(\"ok.png\");\n      }\n      &-cancel {\n        background-image: url(\"cancel.png\");\n      }\n\n      &-custom {\n        background-image: url(\"custom.png\");\n      }\n    }\n\n编译后：\n\n    .button-ok {\n      background-image: url(\"ok.png\");\n    }\n    .button-cancel {\n      background-image: url(\"cancel.png\");\n    }\n    .button-custom {\n      background-image: url(\"custom.png\");\n    }\n\n## 多次使用&\n＆可能会在选择器中出现多次。，这使得可以重复引用父选择器而不重复其名称。\n\n    .link {\n      & + & {\n        color: red;\n      }\n      & & {\n        color: green;\n      }\n      && {\n        color: blue;\n      }\n      &, &ish {\n        color: cyan;\n      }\n    }\n\n编译后：\n\n    .link + .link {\n      color: red;\n    }\n    .link .link {\n      color: green;\n    }\n    .link.link {\n      color: blue;\n    }\n    .link, .linkish {\n      color: cyan;\n    }\n\n请注意，＆表示的多层嵌套的父选择器（不仅仅是最近的祖先），因此以下示例：\n\n    .grand {\n      .parent {\n        & > & {\n          color: red;\n        }\n        & & {\n          color: green;\n        }\n        && {\n          color: blue;\n        }\n        &, &ish {\n          color: cyan;\n        }\n      }\n    }\n\n输出：\n\n    .grand .parent > .grand .parent {\n      color: red;\n    }\n    .grand .parent .grand .parent {\n      color: green;\n    }\n    .grand .parent.grand .parent {\n      color: blue;\n    }\n    .grand .parent,\n    .grand .parentish {\n      color: cyan;\n    }\n\n## 更改选择器顺序\n将选择器添加到继承的（父）选择器可能很有用。 这可以通过放置＆after当前选择器来完成。 例如，使用Modernizr时，您可能希望根据支持的功能指定不同的规则：\n\n    .header {\n      .menu {\n        border-radius: 5px;\n        .no-borderradius & {\n          background-image: url('images/button-background.png');\n        }\n      }\n    }\n\n编译输出：\n\n    .header .menu {\n      border-radius: 5px;\n    }\n    .no-borderradius .header .menu {\n      background-image: url('images/button-background.png');\n    }\n\n## 组合选择器\n＆还可用于生成逗号分隔列表中每个可能的选择器排列：\n\n    p, a, ul, li {\n      & + & {\n        border-top: 0;\n      }\n    }\n\n编译输出：\n\n    p + p,\n    p + a,\n    p + ul,\n    p + li,\n    a + p,\n    a + a,\n    a + ul,\n    a + li,\n    ul + p,\n    ul + a,\n    ul + ul,\n    ul + li,\n    li + p,\n    li + a,\n    li + ul,\n    li + li {\n      border-top: 0;\n    }\n\n# Extend伪类\n> 发布v1.4.0\n\nExtend是一个Less伪类，它将放置的选择器与它引用的选择器相匹配。\n\n    nav ul {\n      &:extend(.inline);\n      background: blue;\n    }\n    .inline {\n      color: red;\n    }\n\n在上面的规则集中，:extend选择器将“扩展选择器”（nav ul）应用到.inline类，即将.inline的css属性扩展到父选择器“nav ul”。\n编译输出：\n\n    nav ul {\n      background: blue;\n    }\n    .inline,\n    nav ul {\n      color: red;\n    }\n\n注意，nav ul:extend(.inline）选择器如何作为nav ul输出 - 在输出之前删除extend并且选择器块保持原样。 如果没有属性放入该块，则它将从输出中删除（但扩展仍可能影响其他选择器）\n\n## 扩展语法\nextend可以附加到选择器，也可以放在规则集中。\n\n    .a:extend(.b) {}\n\n    .a {\n      &:extend(.b);\n    }\n    // the above blocks does the same thing\n\n它看起来像一个带有selector参数的伪类，后面可以跟可选的关键字all：\n\n    .c:extend(.d all) {\n      // extends all instances of \".d\" e.g. \".x.d\" or \".d.x\"\n    }\n    .d { color: red; }\n    .d.classX { font-size: 12px; }\n    .classY.d { font-weight: 800; }\n\n    //输出\n    .c,.d { color: red; }\n    .c.classX,.d.classX { font-size: 12px; }\n    .classY.c,.classY.d { font-weight: 800; }\n\n它可以包含一个或多个要扩展的类，用逗号分隔,下面的例子实现的效果相同\n\n    .e:extend(.f) {}\n    .e:extend(.g) {}\n\n    // the above an the below do the same thing\n    .e:extend(.f, .g) {}\n\n## 扩展附加到选择器\n附加到选择器的扩展看起来像普通的伪类，选择器作为参数。 选择器可以包含多个extend子句，但所有extends都必须位于选择器的末尾。\n\n    pre:extend(div pre) { ... }\n    同\n    pre {\n        ...\n        &:extend(div pre)；\n    }\n\n- 在伪类后扩展,比如 pre:hover:extend(div pre)\n- 允许选择器和扩展之间的空间,比如pre:hover :extend(div pre)\n- 允许多个扩展,pre:hover:extend(div pre):extend(.bucket tr) - 注意这与下面表示效果相同: pre:hover:extend（div pre，.bucket tr）\n- 下面这样是不允许的：pre：hover：extend（div pre）.nth-child（odd）,因为extend必须在最后。\n\n如果规则集包含多个选择器，则其中任何一个都可以包含extend关键字,比如：\n\n    .big-division,\n    .big-bag:extend(.bag),\n    .big-bucket:extend(.bucket) {\n      // body\n    }\n\n## 扩展内部规则集\n可以使用＆:extend（selector）语法将Extend放入规则集的正文中。 将extend放置到body中是将其放入该规则集的每个选择器的快捷方式。比如，下面两个例子的效果是一样的\n\n    pre:hover, .some-class {\n      &:extend(div pre);\n    }\n\n    pre:hover:extend(div pre),\n    .some-class:extend(div pre) {}\n\n## 扩展嵌套选择器\nExtend能够匹配嵌套选择器,例如：\n\n    .bucket {\n      tr { // nested ruleset with target selector\n        color: blue;\n      }\n    }\n    .some-class:extend(.bucket tr) {} // nested ruleset is recognized\n\n输出\n\n    .bucket tr, .some-class {\n      color: blue;\n    }\n\n本质上，扩展会查看已编译的css，而不是原始的less\n\n    .bucket {\n      tr & { // nested ruleset with target selector\n        color: blue;\n      }\n    }\n    .some-class:extend(tr .bucket) {} // nested ruleset is recognized\n\n输出\n\n    tr .bucket,\n    .some-class {\n      color: blue;\n    }\n\n## 与Extend完全匹配\n\n默认情况下，扩展会查找选择器之间的完全匹配。选择器是否使用前导星比较重要。 两个第n个表达式具有相同的含义并不重要，它们需要具有相同的形式才能匹配。 唯一的例外是属性选择器中的引号，较少知道它们具有相同的含义并匹配它们。\n\n    .a.class,\n    .class.a,\n    .class > .a {\n      color: blue;\n    }\n    .test:extend(.class) {} // this will NOT match the any selectors above\n\n    *.class {\n      color: blue;\n    }\n    .noStar:extend(.class) {} // this will NOT match the *.class selector\n\n伪类的顺序很重要。 选择器链接：hover：visited和link：visited：hover匹配相同的元素集，但extend将它们视为不同：\n\n    link:hover:visited {\n      color: blue;\n    }\n    .selector:extend(link:visited:hover) {} //NOT match link:hover:visite\n\n## nth表达式\n表示第N个表达形式很重要。 第N个表达式1n + 3和n+3是等价的，但是extend不匹配它们\n\n    :nth-child(1n+3) {\n      color: blue;\n    }\n    .child:extend(:nth-child(n+3)) {} //NOT match\n\n属性选择器中的引用类型无关紧要，以下所有内容都是等效的。\n\n    [title=identifier] {\n      color: blue;\n    }\n    [title='identifier'] {\n      color: blue;\n    }\n    [title=\"identifier\"] {\n      color: blue;\n    }\n\n    .noQuote:extend([title=identifier]) {}\n    .singleQuote:extend([title='identifier']) {}\n    .doubleQuote:extend([title=\"identifier\"]) {}\n\n输出\n\n    [title=identifier],\n    .noQuote,\n    .singleQuote,\n    .doubleQuote {\n      color: blue;\n    }\n\n    [title='identifier'],\n    .noQuote,\n    .singleQuote,\n    .doubleQuote {\n      color: blue;\n    }\n\n    [title=\"identifier\"],\n    .noQuote,\n    .singleQuote,\n    .doubleQuote {\n      color: blue;\n    }\n\n## 扩展所有all\n当你在extend参数中指定all关键字时，它会告诉Less将该选择器与另一个选择器的一部分相匹配。 将复制选择器，然后仅使用extend替换选择器的匹配部分，从而生成新的选择器。\n\n    .a.b.test,\n    .test.c {\n      color: orange;\n    }\n    .test {\n      &:hover {\n        color: green;\n      }\n    }\n\n    .replacement:extend(.test all) {}\n\n输出\n\n    .a.b.test,\n    .test.c,\n    .a.b.replacement,\n    .replacement.c {\n      color: orange;\n    }\n    .test:hover,\n    .replacement:hover {\n      color: green;\n    }\n\n您可以将此操作模式视为基本上进行非破坏性搜索和替换。\n\n## 具有扩展的选择器插值\nExtend无法将选择器不能匹配变量，也不能匹配被变量代表的选择器。 比如下面的情况将不生效：\n\n    @variable: .bucket;\n    @{variable} { // interpolated selector\n      color: blue;\n    }\n    .some-class:extend(.bucket) {} // does nothing, no match is found\n\n    .bucket {\n      color: blue;\n    }\n    .some-class:extend(@{variable}) {} // interpolated selector matches nothing\n    @variable: .bucket;\n\n但是，extend可以附加到插值选择器上，即插值选择器可以作为extend的父，不能作为extend的子,比如：\n\n    .bucket {\n      color: blue;\n    }\n    @{variable}:extend(.bucket) {}\n    @variable: .selector;\n\n    //编译后\n    .bucket, .selector {\n      color: blue;\n    }\n\n## 在@media媒体查询内扩展\n目前，在@media声明中扩展只会匹配同一媒体声明中的选择器：\n\n    @media print {\n      .screenClass:extend(.selector) {} // extend inside media\n      .selector { // this will be matched - it is in the same media\n        color: black;\n      }\n    }\n    .selector { // ruleset on top of style sheet - extend ignores it\n      color: red;\n    }\n    @media screen {\n      .selector {  // ruleset inside another media - extend ignores it\n        color: blue;\n      }\n    }\n\n编译后：\n\n    @media print {\n      .selector,\n      .screenClass { /*  ruleset inside the same media was extended */\n        color: black;\n      }\n    }\n    .selector { /* ruleset on top of style sheet was ignored */\n      color: red;\n    }\n    @media screen {\n      .selector { /* ruleset inside another media was ignored */\n        color: blue;\n      }\n    }\n\n\n> 注意：扩展与嵌套的@media声明中的选择器不匹配：\n\n    @media screen {\n      .screenClass:extend(.selector) {} // extend inside media\n      @media (min-width: 1023px) {\n        .selector {  // ruleset inside nested media - extend ignores it\n          color: blue;\n        }\n      }\n    }\n    //extend不生效\n\n最外层顶级扩展,可以匹配嵌套媒体内的选择器在内的所有内容：\n\n    @media screen {\n      .selector {  /* ruleset inside nested media - top level extend works */\n        color: blue;\n      }\n      @media (min-width: 1023px) {\n        .selector {  /* ruleset inside nested media - top level extend works */\n          color: blue;\n        }\n      }\n    }\n\n    .topLevel:extend(.selector) {} /* top level extend matches everything */\n\n编译后：\n\n    @media screen {\n      .selector,\n      .topLevel { /* ruleset inside media was extended */\n        color: blue;\n      }\n    }\n    @media screen and (min-width: 1023px) {\n      .selector,\n      .topLevel { /* ruleset inside nested media was extended */\n        color: blue;\n      }\n    }\n\n## 复制检测\n目前没有重复检测。\n\n    .alert-info,\n    .widget {\n      /* declarations */\n    }\n\n    .alert:extend(.alert-info, .widget) {}\n\n输出\n\n    .alert-info,\n    .widget,\n    .alert,\n    .alert {\n      /* declarations */\n    }\n\n## 用例扩展\n**经典用例**\n\n经典用例是避免添加基类，比如：\n\n    .animal {\n      background-color: black;\n      color: white;\n    }\n\n并且您希望拥有一个覆盖背景颜色的动物子类型，那么您有两个选项，首先更改您的HTML\n\n    <a class=\"animal bear\">Bear</a>\n\n    .animal {\n      background-color: black;\n      color: white;\n    }\n    .bear {\n      background-color: brown;\n    }\n\n或者简化了html并使用了更少的扩展。 例如\n\n    <a class=\"bear\">Bear</a>\n\n    .animal {\n      background-color: black;\n      color: white;\n    }\n    .bear {\n      &:extend(.animal);\n      background-color: brown;\n    }\n\n**减少CSS大小**\n\nMixins将所有属性复制到选择器中，这可能导致不必要的重复。 因此，您可以使用extends而不是mixins将选择器移动到您希望使用的属性，从而减少生成的CSS。\n\n    .my-inline-block() {\n      display: inline-block;\n      font-size: 0;\n    }\n    .thing1 {\n      .my-inline-block;\n    }\n    .thing2 {\n      .my-inline-block;\n    }\n\n输出\n\n    .thing1 {\n      display: inline-block;\n      font-size: 0;\n    }\n    .thing2 {\n      display: inline-block;\n      font-size: 0;\n    }\n\n又例如\n\n    .my-inline-block {\n      display: inline-block;\n      font-size: 0;\n    }\n    .thing1 {\n      &:extend(.my-inline-block);\n    }\n    .thing2 {\n      &:extend(.my-inline-block);\n    }\n\n输出\n\n    .my-inline-block,\n    .thing1,\n    .thing2 {\n      display: inline-block;\n      font-size: 0;\n    }\n\n**结合样式/更高级的Mixin**\n\n另一个用例是mixin的替代方案 - 因为mixins只能用于简单的选择器，如果你有两个不同的html块，但是需要将相同的样式应用于两者，你可以使用extends来关联两个区域。\n\n    li.list > a {\n      // list styles\n    }\n    button.list-style {\n      &:extend(li.list > a); // use the same list styles\n    }\n\n\n\n\n\n","source":"_posts/2018-10-16-lessjs-use.md","raw":"---\ntitle: less深入指南一（译）\ndate: 2018-08-14 00:00:30\ntags: Less\ncategories: 前端\ncomments: true\ntoc: true\n---\n\n这是有关LESS语言功能的深入指南，有关Less的简单概念和语法，请参阅[less概述](https://less.bootcss.com/#)。\n有关安装和设置Less环境的深入指南，以及有关Less开发的文档，可查看上一篇译文[less.js用法](http://blueskyawen.com/2018/08/10/less-common/)\n<!--more-->\n\n# 变量\n使用单个变量控制常用值\n## 概览\n在样式表中看到相同的值重复数十甚至数百次，这种情况并不罕见，比如下面的颜色值：\n\n    a,\n    .link {\n      color: #428bca;\n    }\n    .widget {\n      color: #fff;\n      background: #428bca;\n    }\n\n通过使用变量可以使您的代码更易于维护：\n\n    // Variables\n    @link-color:        #428bca; // sea blue\n    @link-color-hover:  darken(@link-color, 10%);\n\n    // Usage\n    a,\n    .link {\n      color: @link-color;\n    }\n    a:hover {\n      color: @link-color-hover;\n    }\n    .widget {\n      color: #fff;\n      background: @link-color;\n    }\n\n## 变量插值\n上面的示例着重于使用变量来控制CSS规则中的值，但它们也可以在其他地方使用，例如选择器名称，属性名称，URL和@import语句，相当于其他语言里的一个**宏替代**。\n\n**应用于选择器**\n\n\n    // Variables\n    @my-selector: banner;\n\n    // Usage\n    .@{my-selector} {\n      font-weight: bold;\n      line-height: 40px;\n      margin: 0 auto;\n    }\n\n编译后：\n\n    .banner {\n      font-weight: bold;\n      line-height: 40px;\n      margin: 0 auto;\n    }\n\n**应用于属性**\n\n    @property: color;\n\n    .widget {\n      @{property}: #0ee;\n      background-@{property}: #999;\n    }\n\n编译后：\n\n    .widget {\n      color: #0ee;\n      background-color: #999;\n    }\n\n**应用于URL**\n\n    @images: \"../img\";\n\n    // Usage\n    body {\n      color: #444;\n      background: url(\"@{images}/white-sand.png\");\n    }\n\n**应用于@import语句**\n\n> 请注意，在v2.0.0之前，只考虑在根或当前作用域中声明的变量，并且在查找变量时仅考虑当前文件和调用文件。\n\n    @themes: \"../../src/themes\";\n\n    // Usage\n    @import \"@{themes}/tidal-wave.less\";\n\n## 变量的变量\n在Less中，您可以使用变量来定义另一个变量的名称，进行间接替代\n\n    @primary:  green;\n    @secondary: blue;\n\n    .section {\n      @color: primary;\n\n      .element {\n        color: @@color;\n      }\n    }\n\n编译后：\n\n    .section .element {\n      color: green;\n    }\n\n## 懒评估\n在less中变量可以后向声明，即变量可以先使用，后声明\n\n    .lazy-eval {\n      width: @var;\n    }\n\n    @var: @a;\n    @a: 9%;\n\n编译后：\n\n    .lazy-eval {\n      width: 9%;\n    }\n\n当定义相同变量两次时，在一个作用域内使用变量的最后一个定义，这与css本身类似，其中定义中的最后一个属性用于确定最后的替代值，比如：\n\n    @var: 0;\n    .class {\n      @var: 1;\n      .brass {\n        @var: 2;\n        three: @var;\n        @var: 3;\n      }\n      one: @var;\n    }\n\n编译后：\n\n    .class {\n      one: 1;\n    }\n    .class .brass {\n      three: 3;\n    }\n\n实质上，每个作用域范围都有一个“最终”值，类似于浏览器中的属性，就像使用自定义属性的示例：\n\n    .header {\n      --color: white;\n      color: var(--color);  // the color is black\n      --color: black;\n    }\n\n这意味着，与其他CSS预处理语言不同，Less变量的行为与CSS非常相似。\n\n## 属性即变量（新特性）\n在最新的V3.0.0版本中，你可以直接把css属性名当作“变量”来使用，只要利用$符号，这样有时候可以使你的代码更加轻量化，比使用@事先定义变量要方便，例如：\n\n    .widget {\n      color: #efefef;\n      background-color: $color;\n    }\n\n编译后：\n\n    .widget {\n      color: #efefef;\n      background-color: #efefef;\n    }\n\n请注意，与变量一样，Less将选择当前/父范围内的最后一个属性作为“最终”值。\n\n    .block {\n      color: red;\n      .inner {\n        background-color: $color; //使用的blue\n      }\n      color: blue;\n    }\n\n## 默认变量\n我们有时会收到默认变量的请求 - 只有在尚未设置变量时才能设置变量。 此功能不是必需的，因为您可以通过后面的定义轻松覆盖变量。\n\n    // library\n    @base-color: green;\n    @dark-color: darken(@base-color, 10%);\n\n    // use of library\n    @import \"library.less\";\n    @base-color: red;\n\n其中，@base-color被重写了，最后生效的是red\n\n# 父选择器\n使用＆引用父选择器\n＆运算符表示嵌套规则的父选择器，在将链接类或伪类应用于现有选择器时最常用：\n\n    a {\n      color: blue;\n      &:hover {\n        color: green;\n      }\n      &.b {\n        color: black;\n      }\n    }\n\n编译后：\n\n    a {\n      color: blue;\n    }\n\n    a:hover {\n      color: green;\n    }\n    a.b {\n        color: black;\n    }\n\n可以看到，＆就是代表父选择器a,编译后作了替换链接\n“父选择器”运算符具有多种用途，本上，只要您需要嵌套规则的选择器以默认的其他方式组合。 例如，＆的另一个典型用法是产生重复的类名：\n\n    .button {\n      &-ok {\n        background-image: url(\"ok.png\");\n      }\n      &-cancel {\n        background-image: url(\"cancel.png\");\n      }\n\n      &-custom {\n        background-image: url(\"custom.png\");\n      }\n    }\n\n编译后：\n\n    .button-ok {\n      background-image: url(\"ok.png\");\n    }\n    .button-cancel {\n      background-image: url(\"cancel.png\");\n    }\n    .button-custom {\n      background-image: url(\"custom.png\");\n    }\n\n## 多次使用&\n＆可能会在选择器中出现多次。，这使得可以重复引用父选择器而不重复其名称。\n\n    .link {\n      & + & {\n        color: red;\n      }\n      & & {\n        color: green;\n      }\n      && {\n        color: blue;\n      }\n      &, &ish {\n        color: cyan;\n      }\n    }\n\n编译后：\n\n    .link + .link {\n      color: red;\n    }\n    .link .link {\n      color: green;\n    }\n    .link.link {\n      color: blue;\n    }\n    .link, .linkish {\n      color: cyan;\n    }\n\n请注意，＆表示的多层嵌套的父选择器（不仅仅是最近的祖先），因此以下示例：\n\n    .grand {\n      .parent {\n        & > & {\n          color: red;\n        }\n        & & {\n          color: green;\n        }\n        && {\n          color: blue;\n        }\n        &, &ish {\n          color: cyan;\n        }\n      }\n    }\n\n输出：\n\n    .grand .parent > .grand .parent {\n      color: red;\n    }\n    .grand .parent .grand .parent {\n      color: green;\n    }\n    .grand .parent.grand .parent {\n      color: blue;\n    }\n    .grand .parent,\n    .grand .parentish {\n      color: cyan;\n    }\n\n## 更改选择器顺序\n将选择器添加到继承的（父）选择器可能很有用。 这可以通过放置＆after当前选择器来完成。 例如，使用Modernizr时，您可能希望根据支持的功能指定不同的规则：\n\n    .header {\n      .menu {\n        border-radius: 5px;\n        .no-borderradius & {\n          background-image: url('images/button-background.png');\n        }\n      }\n    }\n\n编译输出：\n\n    .header .menu {\n      border-radius: 5px;\n    }\n    .no-borderradius .header .menu {\n      background-image: url('images/button-background.png');\n    }\n\n## 组合选择器\n＆还可用于生成逗号分隔列表中每个可能的选择器排列：\n\n    p, a, ul, li {\n      & + & {\n        border-top: 0;\n      }\n    }\n\n编译输出：\n\n    p + p,\n    p + a,\n    p + ul,\n    p + li,\n    a + p,\n    a + a,\n    a + ul,\n    a + li,\n    ul + p,\n    ul + a,\n    ul + ul,\n    ul + li,\n    li + p,\n    li + a,\n    li + ul,\n    li + li {\n      border-top: 0;\n    }\n\n# Extend伪类\n> 发布v1.4.0\n\nExtend是一个Less伪类，它将放置的选择器与它引用的选择器相匹配。\n\n    nav ul {\n      &:extend(.inline);\n      background: blue;\n    }\n    .inline {\n      color: red;\n    }\n\n在上面的规则集中，:extend选择器将“扩展选择器”（nav ul）应用到.inline类，即将.inline的css属性扩展到父选择器“nav ul”。\n编译输出：\n\n    nav ul {\n      background: blue;\n    }\n    .inline,\n    nav ul {\n      color: red;\n    }\n\n注意，nav ul:extend(.inline）选择器如何作为nav ul输出 - 在输出之前删除extend并且选择器块保持原样。 如果没有属性放入该块，则它将从输出中删除（但扩展仍可能影响其他选择器）\n\n## 扩展语法\nextend可以附加到选择器，也可以放在规则集中。\n\n    .a:extend(.b) {}\n\n    .a {\n      &:extend(.b);\n    }\n    // the above blocks does the same thing\n\n它看起来像一个带有selector参数的伪类，后面可以跟可选的关键字all：\n\n    .c:extend(.d all) {\n      // extends all instances of \".d\" e.g. \".x.d\" or \".d.x\"\n    }\n    .d { color: red; }\n    .d.classX { font-size: 12px; }\n    .classY.d { font-weight: 800; }\n\n    //输出\n    .c,.d { color: red; }\n    .c.classX,.d.classX { font-size: 12px; }\n    .classY.c,.classY.d { font-weight: 800; }\n\n它可以包含一个或多个要扩展的类，用逗号分隔,下面的例子实现的效果相同\n\n    .e:extend(.f) {}\n    .e:extend(.g) {}\n\n    // the above an the below do the same thing\n    .e:extend(.f, .g) {}\n\n## 扩展附加到选择器\n附加到选择器的扩展看起来像普通的伪类，选择器作为参数。 选择器可以包含多个extend子句，但所有extends都必须位于选择器的末尾。\n\n    pre:extend(div pre) { ... }\n    同\n    pre {\n        ...\n        &:extend(div pre)；\n    }\n\n- 在伪类后扩展,比如 pre:hover:extend(div pre)\n- 允许选择器和扩展之间的空间,比如pre:hover :extend(div pre)\n- 允许多个扩展,pre:hover:extend(div pre):extend(.bucket tr) - 注意这与下面表示效果相同: pre:hover:extend（div pre，.bucket tr）\n- 下面这样是不允许的：pre：hover：extend（div pre）.nth-child（odd）,因为extend必须在最后。\n\n如果规则集包含多个选择器，则其中任何一个都可以包含extend关键字,比如：\n\n    .big-division,\n    .big-bag:extend(.bag),\n    .big-bucket:extend(.bucket) {\n      // body\n    }\n\n## 扩展内部规则集\n可以使用＆:extend（selector）语法将Extend放入规则集的正文中。 将extend放置到body中是将其放入该规则集的每个选择器的快捷方式。比如，下面两个例子的效果是一样的\n\n    pre:hover, .some-class {\n      &:extend(div pre);\n    }\n\n    pre:hover:extend(div pre),\n    .some-class:extend(div pre) {}\n\n## 扩展嵌套选择器\nExtend能够匹配嵌套选择器,例如：\n\n    .bucket {\n      tr { // nested ruleset with target selector\n        color: blue;\n      }\n    }\n    .some-class:extend(.bucket tr) {} // nested ruleset is recognized\n\n输出\n\n    .bucket tr, .some-class {\n      color: blue;\n    }\n\n本质上，扩展会查看已编译的css，而不是原始的less\n\n    .bucket {\n      tr & { // nested ruleset with target selector\n        color: blue;\n      }\n    }\n    .some-class:extend(tr .bucket) {} // nested ruleset is recognized\n\n输出\n\n    tr .bucket,\n    .some-class {\n      color: blue;\n    }\n\n## 与Extend完全匹配\n\n默认情况下，扩展会查找选择器之间的完全匹配。选择器是否使用前导星比较重要。 两个第n个表达式具有相同的含义并不重要，它们需要具有相同的形式才能匹配。 唯一的例外是属性选择器中的引号，较少知道它们具有相同的含义并匹配它们。\n\n    .a.class,\n    .class.a,\n    .class > .a {\n      color: blue;\n    }\n    .test:extend(.class) {} // this will NOT match the any selectors above\n\n    *.class {\n      color: blue;\n    }\n    .noStar:extend(.class) {} // this will NOT match the *.class selector\n\n伪类的顺序很重要。 选择器链接：hover：visited和link：visited：hover匹配相同的元素集，但extend将它们视为不同：\n\n    link:hover:visited {\n      color: blue;\n    }\n    .selector:extend(link:visited:hover) {} //NOT match link:hover:visite\n\n## nth表达式\n表示第N个表达形式很重要。 第N个表达式1n + 3和n+3是等价的，但是extend不匹配它们\n\n    :nth-child(1n+3) {\n      color: blue;\n    }\n    .child:extend(:nth-child(n+3)) {} //NOT match\n\n属性选择器中的引用类型无关紧要，以下所有内容都是等效的。\n\n    [title=identifier] {\n      color: blue;\n    }\n    [title='identifier'] {\n      color: blue;\n    }\n    [title=\"identifier\"] {\n      color: blue;\n    }\n\n    .noQuote:extend([title=identifier]) {}\n    .singleQuote:extend([title='identifier']) {}\n    .doubleQuote:extend([title=\"identifier\"]) {}\n\n输出\n\n    [title=identifier],\n    .noQuote,\n    .singleQuote,\n    .doubleQuote {\n      color: blue;\n    }\n\n    [title='identifier'],\n    .noQuote,\n    .singleQuote,\n    .doubleQuote {\n      color: blue;\n    }\n\n    [title=\"identifier\"],\n    .noQuote,\n    .singleQuote,\n    .doubleQuote {\n      color: blue;\n    }\n\n## 扩展所有all\n当你在extend参数中指定all关键字时，它会告诉Less将该选择器与另一个选择器的一部分相匹配。 将复制选择器，然后仅使用extend替换选择器的匹配部分，从而生成新的选择器。\n\n    .a.b.test,\n    .test.c {\n      color: orange;\n    }\n    .test {\n      &:hover {\n        color: green;\n      }\n    }\n\n    .replacement:extend(.test all) {}\n\n输出\n\n    .a.b.test,\n    .test.c,\n    .a.b.replacement,\n    .replacement.c {\n      color: orange;\n    }\n    .test:hover,\n    .replacement:hover {\n      color: green;\n    }\n\n您可以将此操作模式视为基本上进行非破坏性搜索和替换。\n\n## 具有扩展的选择器插值\nExtend无法将选择器不能匹配变量，也不能匹配被变量代表的选择器。 比如下面的情况将不生效：\n\n    @variable: .bucket;\n    @{variable} { // interpolated selector\n      color: blue;\n    }\n    .some-class:extend(.bucket) {} // does nothing, no match is found\n\n    .bucket {\n      color: blue;\n    }\n    .some-class:extend(@{variable}) {} // interpolated selector matches nothing\n    @variable: .bucket;\n\n但是，extend可以附加到插值选择器上，即插值选择器可以作为extend的父，不能作为extend的子,比如：\n\n    .bucket {\n      color: blue;\n    }\n    @{variable}:extend(.bucket) {}\n    @variable: .selector;\n\n    //编译后\n    .bucket, .selector {\n      color: blue;\n    }\n\n## 在@media媒体查询内扩展\n目前，在@media声明中扩展只会匹配同一媒体声明中的选择器：\n\n    @media print {\n      .screenClass:extend(.selector) {} // extend inside media\n      .selector { // this will be matched - it is in the same media\n        color: black;\n      }\n    }\n    .selector { // ruleset on top of style sheet - extend ignores it\n      color: red;\n    }\n    @media screen {\n      .selector {  // ruleset inside another media - extend ignores it\n        color: blue;\n      }\n    }\n\n编译后：\n\n    @media print {\n      .selector,\n      .screenClass { /*  ruleset inside the same media was extended */\n        color: black;\n      }\n    }\n    .selector { /* ruleset on top of style sheet was ignored */\n      color: red;\n    }\n    @media screen {\n      .selector { /* ruleset inside another media was ignored */\n        color: blue;\n      }\n    }\n\n\n> 注意：扩展与嵌套的@media声明中的选择器不匹配：\n\n    @media screen {\n      .screenClass:extend(.selector) {} // extend inside media\n      @media (min-width: 1023px) {\n        .selector {  // ruleset inside nested media - extend ignores it\n          color: blue;\n        }\n      }\n    }\n    //extend不生效\n\n最外层顶级扩展,可以匹配嵌套媒体内的选择器在内的所有内容：\n\n    @media screen {\n      .selector {  /* ruleset inside nested media - top level extend works */\n        color: blue;\n      }\n      @media (min-width: 1023px) {\n        .selector {  /* ruleset inside nested media - top level extend works */\n          color: blue;\n        }\n      }\n    }\n\n    .topLevel:extend(.selector) {} /* top level extend matches everything */\n\n编译后：\n\n    @media screen {\n      .selector,\n      .topLevel { /* ruleset inside media was extended */\n        color: blue;\n      }\n    }\n    @media screen and (min-width: 1023px) {\n      .selector,\n      .topLevel { /* ruleset inside nested media was extended */\n        color: blue;\n      }\n    }\n\n## 复制检测\n目前没有重复检测。\n\n    .alert-info,\n    .widget {\n      /* declarations */\n    }\n\n    .alert:extend(.alert-info, .widget) {}\n\n输出\n\n    .alert-info,\n    .widget,\n    .alert,\n    .alert {\n      /* declarations */\n    }\n\n## 用例扩展\n**经典用例**\n\n经典用例是避免添加基类，比如：\n\n    .animal {\n      background-color: black;\n      color: white;\n    }\n\n并且您希望拥有一个覆盖背景颜色的动物子类型，那么您有两个选项，首先更改您的HTML\n\n    <a class=\"animal bear\">Bear</a>\n\n    .animal {\n      background-color: black;\n      color: white;\n    }\n    .bear {\n      background-color: brown;\n    }\n\n或者简化了html并使用了更少的扩展。 例如\n\n    <a class=\"bear\">Bear</a>\n\n    .animal {\n      background-color: black;\n      color: white;\n    }\n    .bear {\n      &:extend(.animal);\n      background-color: brown;\n    }\n\n**减少CSS大小**\n\nMixins将所有属性复制到选择器中，这可能导致不必要的重复。 因此，您可以使用extends而不是mixins将选择器移动到您希望使用的属性，从而减少生成的CSS。\n\n    .my-inline-block() {\n      display: inline-block;\n      font-size: 0;\n    }\n    .thing1 {\n      .my-inline-block;\n    }\n    .thing2 {\n      .my-inline-block;\n    }\n\n输出\n\n    .thing1 {\n      display: inline-block;\n      font-size: 0;\n    }\n    .thing2 {\n      display: inline-block;\n      font-size: 0;\n    }\n\n又例如\n\n    .my-inline-block {\n      display: inline-block;\n      font-size: 0;\n    }\n    .thing1 {\n      &:extend(.my-inline-block);\n    }\n    .thing2 {\n      &:extend(.my-inline-block);\n    }\n\n输出\n\n    .my-inline-block,\n    .thing1,\n    .thing2 {\n      display: inline-block;\n      font-size: 0;\n    }\n\n**结合样式/更高级的Mixin**\n\n另一个用例是mixin的替代方案 - 因为mixins只能用于简单的选择器，如果你有两个不同的html块，但是需要将相同的样式应用于两者，你可以使用extends来关联两个区域。\n\n    li.list > a {\n      // list styles\n    }\n    button.list-style {\n      &:extend(li.list > a); // use the same list styles\n    }\n\n\n\n\n\n","slug":"lessjs-use","published":1,"updated":"2018-10-26T14:07:53.279Z","layout":"post","photos":[],"link":"","_id":"cjqwe42eg0060or0bt7kbqwqi","content":"<p>这是有关LESS语言功能的深入指南，有关Less的简单概念和语法，请参阅<a href=\"https://less.bootcss.com/#\" target=\"_blank\" rel=\"external\">less概述</a>。<br>有关安装和设置Less环境的深入指南，以及有关Less开发的文档，可查看上一篇译文<a href=\"http://blueskyawen.com/2018/08/10/less-common/\">less.js用法</a><br><a id=\"more\"></a></p>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p>使用单个变量控制常用值</p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>在样式表中看到相同的值重复数十甚至数百次，这种情况并不罕见，比如下面的颜色值：</p>\n<pre><code>a,\n.link {\n  color: #428bca;\n}\n.widget {\n  color: #fff;\n  background: #428bca;\n}\n</code></pre><p>通过使用变量可以使您的代码更易于维护：</p>\n<pre><code>// Variables\n@link-color:        #428bca; // sea blue\n@link-color-hover:  darken(@link-color, 10%);\n\n// Usage\na,\n.link {\n  color: @link-color;\n}\na:hover {\n  color: @link-color-hover;\n}\n.widget {\n  color: #fff;\n  background: @link-color;\n}\n</code></pre><h2 id=\"变量插值\"><a href=\"#变量插值\" class=\"headerlink\" title=\"变量插值\"></a>变量插值</h2><p>上面的示例着重于使用变量来控制CSS规则中的值，但它们也可以在其他地方使用，例如选择器名称，属性名称，URL和@import语句，相当于其他语言里的一个<strong>宏替代</strong>。</p>\n<p><strong>应用于选择器</strong></p>\n<pre><code>// Variables\n@my-selector: banner;\n\n// Usage\n.@{my-selector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n</code></pre><p>编译后：</p>\n<pre><code>.banner {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n</code></pre><p><strong>应用于属性</strong></p>\n<pre><code>@property: color;\n\n.widget {\n  @{property}: #0ee;\n  background-@{property}: #999;\n}\n</code></pre><p>编译后：</p>\n<pre><code>.widget {\n  color: #0ee;\n  background-color: #999;\n}\n</code></pre><p><strong>应用于URL</strong></p>\n<pre><code>@images: &quot;../img&quot;;\n\n// Usage\nbody {\n  color: #444;\n  background: url(&quot;@{images}/white-sand.png&quot;);\n}\n</code></pre><p><strong>应用于@import语句</strong></p>\n<blockquote>\n<p>请注意，在v2.0.0之前，只考虑在根或当前作用域中声明的变量，并且在查找变量时仅考虑当前文件和调用文件。</p>\n</blockquote>\n<pre><code>@themes: &quot;../../src/themes&quot;;\n\n// Usage\n@import &quot;@{themes}/tidal-wave.less&quot;;\n</code></pre><h2 id=\"变量的变量\"><a href=\"#变量的变量\" class=\"headerlink\" title=\"变量的变量\"></a>变量的变量</h2><p>在Less中，您可以使用变量来定义另一个变量的名称，进行间接替代</p>\n<pre><code>@primary:  green;\n@secondary: blue;\n\n.section {\n  @color: primary;\n\n  .element {\n    color: @@color;\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>.section .element {\n  color: green;\n}\n</code></pre><h2 id=\"懒评估\"><a href=\"#懒评估\" class=\"headerlink\" title=\"懒评估\"></a>懒评估</h2><p>在less中变量可以后向声明，即变量可以先使用，后声明</p>\n<pre><code>.lazy-eval {\n  width: @var;\n}\n\n@var: @a;\n@a: 9%;\n</code></pre><p>编译后：</p>\n<pre><code>.lazy-eval {\n  width: 9%;\n}\n</code></pre><p>当定义相同变量两次时，在一个作用域内使用变量的最后一个定义，这与css本身类似，其中定义中的最后一个属性用于确定最后的替代值，比如：</p>\n<pre><code>@var: 0;\n.class {\n  @var: 1;\n  .brass {\n    @var: 2;\n    three: @var;\n    @var: 3;\n  }\n  one: @var;\n}\n</code></pre><p>编译后：</p>\n<pre><code>.class {\n  one: 1;\n}\n.class .brass {\n  three: 3;\n}\n</code></pre><p>实质上，每个作用域范围都有一个“最终”值，类似于浏览器中的属性，就像使用自定义属性的示例：</p>\n<pre><code>.header {\n  --color: white;\n  color: var(--color);  // the color is black\n  --color: black;\n}\n</code></pre><p>这意味着，与其他CSS预处理语言不同，Less变量的行为与CSS非常相似。</p>\n<h2 id=\"属性即变量（新特性）\"><a href=\"#属性即变量（新特性）\" class=\"headerlink\" title=\"属性即变量（新特性）\"></a>属性即变量（新特性）</h2><p>在最新的V3.0.0版本中，你可以直接把css属性名当作“变量”来使用，只要利用$符号，这样有时候可以使你的代码更加轻量化，比使用@事先定义变量要方便，例如：</p>\n<pre><code>.widget {\n  color: #efefef;\n  background-color: $color;\n}\n</code></pre><p>编译后：</p>\n<pre><code>.widget {\n  color: #efefef;\n  background-color: #efefef;\n}\n</code></pre><p>请注意，与变量一样，Less将选择当前/父范围内的最后一个属性作为“最终”值。</p>\n<pre><code>.block {\n  color: red;\n  .inner {\n    background-color: $color; //使用的blue\n  }\n  color: blue;\n}\n</code></pre><h2 id=\"默认变量\"><a href=\"#默认变量\" class=\"headerlink\" title=\"默认变量\"></a>默认变量</h2><p>我们有时会收到默认变量的请求 - 只有在尚未设置变量时才能设置变量。 此功能不是必需的，因为您可以通过后面的定义轻松覆盖变量。</p>\n<pre><code>// library\n@base-color: green;\n@dark-color: darken(@base-color, 10%);\n\n// use of library\n@import &quot;library.less&quot;;\n@base-color: red;\n</code></pre><p>其中，@base-color被重写了，最后生效的是red</p>\n<h1 id=\"父选择器\"><a href=\"#父选择器\" class=\"headerlink\" title=\"父选择器\"></a>父选择器</h1><p>使用＆引用父选择器<br>＆运算符表示嵌套规则的父选择器，在将链接类或伪类应用于现有选择器时最常用：</p>\n<pre><code>a {\n  color: blue;\n  &amp;:hover {\n    color: green;\n  }\n  &amp;.b {\n    color: black;\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>a {\n  color: blue;\n}\n\na:hover {\n  color: green;\n}\na.b {\n    color: black;\n}\n</code></pre><p>可以看到，＆就是代表父选择器a,编译后作了替换链接<br>“父选择器”运算符具有多种用途，本上，只要您需要嵌套规则的选择器以默认的其他方式组合。 例如，＆的另一个典型用法是产生重复的类名：</p>\n<pre><code>.button {\n  &amp;-ok {\n    background-image: url(&quot;ok.png&quot;);\n  }\n  &amp;-cancel {\n    background-image: url(&quot;cancel.png&quot;);\n  }\n\n  &amp;-custom {\n    background-image: url(&quot;custom.png&quot;);\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>.button-ok {\n  background-image: url(&quot;ok.png&quot;);\n}\n.button-cancel {\n  background-image: url(&quot;cancel.png&quot;);\n}\n.button-custom {\n  background-image: url(&quot;custom.png&quot;);\n}\n</code></pre><h2 id=\"多次使用-amp\"><a href=\"#多次使用-amp\" class=\"headerlink\" title=\"多次使用&amp;\"></a>多次使用&amp;</h2><p>＆可能会在选择器中出现多次。，这使得可以重复引用父选择器而不重复其名称。</p>\n<pre><code>.link {\n  &amp; + &amp; {\n    color: red;\n  }\n  &amp; &amp; {\n    color: green;\n  }\n  &amp;&amp; {\n    color: blue;\n  }\n  &amp;, &amp;ish {\n    color: cyan;\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>.link + .link {\n  color: red;\n}\n.link .link {\n  color: green;\n}\n.link.link {\n  color: blue;\n}\n.link, .linkish {\n  color: cyan;\n}\n</code></pre><p>请注意，＆表示的多层嵌套的父选择器（不仅仅是最近的祖先），因此以下示例：</p>\n<pre><code>.grand {\n  .parent {\n    &amp; &gt; &amp; {\n      color: red;\n    }\n    &amp; &amp; {\n      color: green;\n    }\n    &amp;&amp; {\n      color: blue;\n    }\n    &amp;, &amp;ish {\n      color: cyan;\n    }\n  }\n}\n</code></pre><p>输出：</p>\n<pre><code>.grand .parent &gt; .grand .parent {\n  color: red;\n}\n.grand .parent .grand .parent {\n  color: green;\n}\n.grand .parent.grand .parent {\n  color: blue;\n}\n.grand .parent,\n.grand .parentish {\n  color: cyan;\n}\n</code></pre><h2 id=\"更改选择器顺序\"><a href=\"#更改选择器顺序\" class=\"headerlink\" title=\"更改选择器顺序\"></a>更改选择器顺序</h2><p>将选择器添加到继承的（父）选择器可能很有用。 这可以通过放置＆after当前选择器来完成。 例如，使用Modernizr时，您可能希望根据支持的功能指定不同的规则：</p>\n<pre><code>.header {\n  .menu {\n    border-radius: 5px;\n    .no-borderradius &amp; {\n      background-image: url(&apos;images/button-background.png&apos;);\n    }\n  }\n}\n</code></pre><p>编译输出：</p>\n<pre><code>.header .menu {\n  border-radius: 5px;\n}\n.no-borderradius .header .menu {\n  background-image: url(&apos;images/button-background.png&apos;);\n}\n</code></pre><h2 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h2><p>＆还可用于生成逗号分隔列表中每个可能的选择器排列：</p>\n<pre><code>p, a, ul, li {\n  &amp; + &amp; {\n    border-top: 0;\n  }\n}\n</code></pre><p>编译输出：</p>\n<pre><code>p + p,\np + a,\np + ul,\np + li,\na + p,\na + a,\na + ul,\na + li,\nul + p,\nul + a,\nul + ul,\nul + li,\nli + p,\nli + a,\nli + ul,\nli + li {\n  border-top: 0;\n}\n</code></pre><h1 id=\"Extend伪类\"><a href=\"#Extend伪类\" class=\"headerlink\" title=\"Extend伪类\"></a>Extend伪类</h1><blockquote>\n<p>发布v1.4.0</p>\n</blockquote>\n<p>Extend是一个Less伪类，它将放置的选择器与它引用的选择器相匹配。</p>\n<pre><code>nav ul {\n  &amp;:extend(.inline);\n  background: blue;\n}\n.inline {\n  color: red;\n}\n</code></pre><p>在上面的规则集中，:extend选择器将“扩展选择器”（nav ul）应用到.inline类，即将.inline的css属性扩展到父选择器“nav ul”。<br>编译输出：</p>\n<pre><code>nav ul {\n  background: blue;\n}\n.inline,\nnav ul {\n  color: red;\n}\n</code></pre><p>注意，nav ul:extend(.inline）选择器如何作为nav ul输出 - 在输出之前删除extend并且选择器块保持原样。 如果没有属性放入该块，则它将从输出中删除（但扩展仍可能影响其他选择器）</p>\n<h2 id=\"扩展语法\"><a href=\"#扩展语法\" class=\"headerlink\" title=\"扩展语法\"></a>扩展语法</h2><p>extend可以附加到选择器，也可以放在规则集中。</p>\n<pre><code>.a:extend(.b) {}\n\n.a {\n  &amp;:extend(.b);\n}\n// the above blocks does the same thing\n</code></pre><p>它看起来像一个带有selector参数的伪类，后面可以跟可选的关键字all：</p>\n<pre><code>.c:extend(.d all) {\n  // extends all instances of &quot;.d&quot; e.g. &quot;.x.d&quot; or &quot;.d.x&quot;\n}\n.d { color: red; }\n.d.classX { font-size: 12px; }\n.classY.d { font-weight: 800; }\n\n//输出\n.c,.d { color: red; }\n.c.classX,.d.classX { font-size: 12px; }\n.classY.c,.classY.d { font-weight: 800; }\n</code></pre><p>它可以包含一个或多个要扩展的类，用逗号分隔,下面的例子实现的效果相同</p>\n<pre><code>.e:extend(.f) {}\n.e:extend(.g) {}\n\n// the above an the below do the same thing\n.e:extend(.f, .g) {}\n</code></pre><h2 id=\"扩展附加到选择器\"><a href=\"#扩展附加到选择器\" class=\"headerlink\" title=\"扩展附加到选择器\"></a>扩展附加到选择器</h2><p>附加到选择器的扩展看起来像普通的伪类，选择器作为参数。 选择器可以包含多个extend子句，但所有extends都必须位于选择器的末尾。</p>\n<pre><code>pre:extend(div pre) { ... }\n同\npre {\n    ...\n    &amp;:extend(div pre)；\n}\n</code></pre><ul>\n<li>在伪类后扩展,比如 pre:hover:extend(div pre)</li>\n<li>允许选择器和扩展之间的空间,比如pre:hover :extend(div pre)</li>\n<li>允许多个扩展,pre:hover:extend(div pre):extend(.bucket tr) - 注意这与下面表示效果相同: pre:hover:extend（div pre，.bucket tr）</li>\n<li>下面这样是不允许的：pre：hover：extend（div pre）.nth-child（odd）,因为extend必须在最后。</li>\n</ul>\n<p>如果规则集包含多个选择器，则其中任何一个都可以包含extend关键字,比如：</p>\n<pre><code>.big-division,\n.big-bag:extend(.bag),\n.big-bucket:extend(.bucket) {\n  // body\n}\n</code></pre><h2 id=\"扩展内部规则集\"><a href=\"#扩展内部规则集\" class=\"headerlink\" title=\"扩展内部规则集\"></a>扩展内部规则集</h2><p>可以使用＆:extend（selector）语法将Extend放入规则集的正文中。 将extend放置到body中是将其放入该规则集的每个选择器的快捷方式。比如，下面两个例子的效果是一样的</p>\n<pre><code>pre:hover, .some-class {\n  &amp;:extend(div pre);\n}\n\npre:hover:extend(div pre),\n.some-class:extend(div pre) {}\n</code></pre><h2 id=\"扩展嵌套选择器\"><a href=\"#扩展嵌套选择器\" class=\"headerlink\" title=\"扩展嵌套选择器\"></a>扩展嵌套选择器</h2><p>Extend能够匹配嵌套选择器,例如：</p>\n<pre><code>.bucket {\n  tr { // nested ruleset with target selector\n    color: blue;\n  }\n}\n.some-class:extend(.bucket tr) {} // nested ruleset is recognized\n</code></pre><p>输出</p>\n<pre><code>.bucket tr, .some-class {\n  color: blue;\n}\n</code></pre><p>本质上，扩展会查看已编译的css，而不是原始的less</p>\n<pre><code>.bucket {\n  tr &amp; { // nested ruleset with target selector\n    color: blue;\n  }\n}\n.some-class:extend(tr .bucket) {} // nested ruleset is recognized\n</code></pre><p>输出</p>\n<pre><code>tr .bucket,\n.some-class {\n  color: blue;\n}\n</code></pre><h2 id=\"与Extend完全匹配\"><a href=\"#与Extend完全匹配\" class=\"headerlink\" title=\"与Extend完全匹配\"></a>与Extend完全匹配</h2><p>默认情况下，扩展会查找选择器之间的完全匹配。选择器是否使用前导星比较重要。 两个第n个表达式具有相同的含义并不重要，它们需要具有相同的形式才能匹配。 唯一的例外是属性选择器中的引号，较少知道它们具有相同的含义并匹配它们。</p>\n<pre><code>.a.class,\n.class.a,\n.class &gt; .a {\n  color: blue;\n}\n.test:extend(.class) {} // this will NOT match the any selectors above\n\n*.class {\n  color: blue;\n}\n.noStar:extend(.class) {} // this will NOT match the *.class selector\n</code></pre><p>伪类的顺序很重要。 选择器链接：hover：visited和link：visited：hover匹配相同的元素集，但extend将它们视为不同：</p>\n<pre><code>link:hover:visited {\n  color: blue;\n}\n.selector:extend(link:visited:hover) {} //NOT match link:hover:visite\n</code></pre><h2 id=\"nth表达式\"><a href=\"#nth表达式\" class=\"headerlink\" title=\"nth表达式\"></a>nth表达式</h2><p>表示第N个表达形式很重要。 第N个表达式1n + 3和n+3是等价的，但是extend不匹配它们</p>\n<pre><code>:nth-child(1n+3) {\n  color: blue;\n}\n.child:extend(:nth-child(n+3)) {} //NOT match\n</code></pre><p>属性选择器中的引用类型无关紧要，以下所有内容都是等效的。</p>\n<pre><code>[title=identifier] {\n  color: blue;\n}\n[title=&apos;identifier&apos;] {\n  color: blue;\n}\n[title=&quot;identifier&quot;] {\n  color: blue;\n}\n\n.noQuote:extend([title=identifier]) {}\n.singleQuote:extend([title=&apos;identifier&apos;]) {}\n.doubleQuote:extend([title=&quot;identifier&quot;]) {}\n</code></pre><p>输出</p>\n<pre><code>[title=identifier],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n[title=&apos;identifier&apos;],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n[title=&quot;identifier&quot;],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n</code></pre><h2 id=\"扩展所有all\"><a href=\"#扩展所有all\" class=\"headerlink\" title=\"扩展所有all\"></a>扩展所有all</h2><p>当你在extend参数中指定all关键字时，它会告诉Less将该选择器与另一个选择器的一部分相匹配。 将复制选择器，然后仅使用extend替换选择器的匹配部分，从而生成新的选择器。</p>\n<pre><code>.a.b.test,\n.test.c {\n  color: orange;\n}\n.test {\n  &amp;:hover {\n    color: green;\n  }\n}\n\n.replacement:extend(.test all) {}\n</code></pre><p>输出</p>\n<pre><code>.a.b.test,\n.test.c,\n.a.b.replacement,\n.replacement.c {\n  color: orange;\n}\n.test:hover,\n.replacement:hover {\n  color: green;\n}\n</code></pre><p>您可以将此操作模式视为基本上进行非破坏性搜索和替换。</p>\n<h2 id=\"具有扩展的选择器插值\"><a href=\"#具有扩展的选择器插值\" class=\"headerlink\" title=\"具有扩展的选择器插值\"></a>具有扩展的选择器插值</h2><p>Extend无法将选择器不能匹配变量，也不能匹配被变量代表的选择器。 比如下面的情况将不生效：</p>\n<pre><code>@variable: .bucket;\n@{variable} { // interpolated selector\n  color: blue;\n}\n.some-class:extend(.bucket) {} // does nothing, no match is found\n\n.bucket {\n  color: blue;\n}\n.some-class:extend(@{variable}) {} // interpolated selector matches nothing\n@variable: .bucket;\n</code></pre><p>但是，extend可以附加到插值选择器上，即插值选择器可以作为extend的父，不能作为extend的子,比如：</p>\n<pre><code>.bucket {\n  color: blue;\n}\n@{variable}:extend(.bucket) {}\n@variable: .selector;\n\n//编译后\n.bucket, .selector {\n  color: blue;\n}\n</code></pre><h2 id=\"在-media媒体查询内扩展\"><a href=\"#在-media媒体查询内扩展\" class=\"headerlink\" title=\"在@media媒体查询内扩展\"></a>在@media媒体查询内扩展</h2><p>目前，在@media声明中扩展只会匹配同一媒体声明中的选择器：</p>\n<pre><code>@media print {\n  .screenClass:extend(.selector) {} // extend inside media\n  .selector { // this will be matched - it is in the same media\n    color: black;\n  }\n}\n.selector { // ruleset on top of style sheet - extend ignores it\n  color: red;\n}\n@media screen {\n  .selector {  // ruleset inside another media - extend ignores it\n    color: blue;\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>@media print {\n  .selector,\n  .screenClass { /*  ruleset inside the same media was extended */\n    color: black;\n  }\n}\n.selector { /* ruleset on top of style sheet was ignored */\n  color: red;\n}\n@media screen {\n  .selector { /* ruleset inside another media was ignored */\n    color: blue;\n  }\n}\n</code></pre><blockquote>\n<p>注意：扩展与嵌套的@media声明中的选择器不匹配：</p>\n</blockquote>\n<pre><code>@media screen {\n  .screenClass:extend(.selector) {} // extend inside media\n  @media (min-width: 1023px) {\n    .selector {  // ruleset inside nested media - extend ignores it\n      color: blue;\n    }\n  }\n}\n//extend不生效\n</code></pre><p>最外层顶级扩展,可以匹配嵌套媒体内的选择器在内的所有内容：</p>\n<pre><code>@media screen {\n  .selector {  /* ruleset inside nested media - top level extend works */\n    color: blue;\n  }\n  @media (min-width: 1023px) {\n    .selector {  /* ruleset inside nested media - top level extend works */\n      color: blue;\n    }\n  }\n}\n\n.topLevel:extend(.selector) {} /* top level extend matches everything */\n</code></pre><p>编译后：</p>\n<pre><code>@media screen {\n  .selector,\n  .topLevel { /* ruleset inside media was extended */\n    color: blue;\n  }\n}\n@media screen and (min-width: 1023px) {\n  .selector,\n  .topLevel { /* ruleset inside nested media was extended */\n    color: blue;\n  }\n}\n</code></pre><h2 id=\"复制检测\"><a href=\"#复制检测\" class=\"headerlink\" title=\"复制检测\"></a>复制检测</h2><p>目前没有重复检测。</p>\n<pre><code>.alert-info,\n.widget {\n  /* declarations */\n}\n\n.alert:extend(.alert-info, .widget) {}\n</code></pre><p>输出</p>\n<pre><code>.alert-info,\n.widget,\n.alert,\n.alert {\n  /* declarations */\n}\n</code></pre><h2 id=\"用例扩展\"><a href=\"#用例扩展\" class=\"headerlink\" title=\"用例扩展\"></a>用例扩展</h2><p><strong>经典用例</strong></p>\n<p>经典用例是避免添加基类，比如：</p>\n<pre><code>.animal {\n  background-color: black;\n  color: white;\n}\n</code></pre><p>并且您希望拥有一个覆盖背景颜色的动物子类型，那么您有两个选项，首先更改您的HTML</p>\n<pre><code>&lt;a class=&quot;animal bear&quot;&gt;Bear&lt;/a&gt;\n\n.animal {\n  background-color: black;\n  color: white;\n}\n.bear {\n  background-color: brown;\n}\n</code></pre><p>或者简化了html并使用了更少的扩展。 例如</p>\n<pre><code>&lt;a class=&quot;bear&quot;&gt;Bear&lt;/a&gt;\n\n.animal {\n  background-color: black;\n  color: white;\n}\n.bear {\n  &amp;:extend(.animal);\n  background-color: brown;\n}\n</code></pre><p><strong>减少CSS大小</strong></p>\n<p>Mixins将所有属性复制到选择器中，这可能导致不必要的重复。 因此，您可以使用extends而不是mixins将选择器移动到您希望使用的属性，从而减少生成的CSS。</p>\n<pre><code>.my-inline-block() {\n  display: inline-block;\n  font-size: 0;\n}\n.thing1 {\n  .my-inline-block;\n}\n.thing2 {\n  .my-inline-block;\n}\n</code></pre><p>输出</p>\n<pre><code>.thing1 {\n  display: inline-block;\n  font-size: 0;\n}\n.thing2 {\n  display: inline-block;\n  font-size: 0;\n}\n</code></pre><p>又例如</p>\n<pre><code>.my-inline-block {\n  display: inline-block;\n  font-size: 0;\n}\n.thing1 {\n  &amp;:extend(.my-inline-block);\n}\n.thing2 {\n  &amp;:extend(.my-inline-block);\n}\n</code></pre><p>输出</p>\n<pre><code>.my-inline-block,\n.thing1,\n.thing2 {\n  display: inline-block;\n  font-size: 0;\n}\n</code></pre><p><strong>结合样式/更高级的Mixin</strong></p>\n<p>另一个用例是mixin的替代方案 - 因为mixins只能用于简单的选择器，如果你有两个不同的html块，但是需要将相同的样式应用于两者，你可以使用extends来关联两个区域。</p>\n<pre><code>li.list &gt; a {\n  // list styles\n}\nbutton.list-style {\n  &amp;:extend(li.list &gt; a); // use the same list styles\n}\n</code></pre>","site":{"data":{}},"excerpt":"<p>这是有关LESS语言功能的深入指南，有关Less的简单概念和语法，请参阅<a href=\"https://less.bootcss.com/#\" target=\"_blank\" rel=\"external\">less概述</a>。<br>有关安装和设置Less环境的深入指南，以及有关Less开发的文档，可查看上一篇译文<a href=\"http://blueskyawen.com/2018/08/10/less-common/\">less.js用法</a><br>","more":"</p>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p>使用单个变量控制常用值</p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>在样式表中看到相同的值重复数十甚至数百次，这种情况并不罕见，比如下面的颜色值：</p>\n<pre><code>a,\n.link {\n  color: #428bca;\n}\n.widget {\n  color: #fff;\n  background: #428bca;\n}\n</code></pre><p>通过使用变量可以使您的代码更易于维护：</p>\n<pre><code>// Variables\n@link-color:        #428bca; // sea blue\n@link-color-hover:  darken(@link-color, 10%);\n\n// Usage\na,\n.link {\n  color: @link-color;\n}\na:hover {\n  color: @link-color-hover;\n}\n.widget {\n  color: #fff;\n  background: @link-color;\n}\n</code></pre><h2 id=\"变量插值\"><a href=\"#变量插值\" class=\"headerlink\" title=\"变量插值\"></a>变量插值</h2><p>上面的示例着重于使用变量来控制CSS规则中的值，但它们也可以在其他地方使用，例如选择器名称，属性名称，URL和@import语句，相当于其他语言里的一个<strong>宏替代</strong>。</p>\n<p><strong>应用于选择器</strong></p>\n<pre><code>// Variables\n@my-selector: banner;\n\n// Usage\n.@{my-selector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n</code></pre><p>编译后：</p>\n<pre><code>.banner {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n</code></pre><p><strong>应用于属性</strong></p>\n<pre><code>@property: color;\n\n.widget {\n  @{property}: #0ee;\n  background-@{property}: #999;\n}\n</code></pre><p>编译后：</p>\n<pre><code>.widget {\n  color: #0ee;\n  background-color: #999;\n}\n</code></pre><p><strong>应用于URL</strong></p>\n<pre><code>@images: &quot;../img&quot;;\n\n// Usage\nbody {\n  color: #444;\n  background: url(&quot;@{images}/white-sand.png&quot;);\n}\n</code></pre><p><strong>应用于@import语句</strong></p>\n<blockquote>\n<p>请注意，在v2.0.0之前，只考虑在根或当前作用域中声明的变量，并且在查找变量时仅考虑当前文件和调用文件。</p>\n</blockquote>\n<pre><code>@themes: &quot;../../src/themes&quot;;\n\n// Usage\n@import &quot;@{themes}/tidal-wave.less&quot;;\n</code></pre><h2 id=\"变量的变量\"><a href=\"#变量的变量\" class=\"headerlink\" title=\"变量的变量\"></a>变量的变量</h2><p>在Less中，您可以使用变量来定义另一个变量的名称，进行间接替代</p>\n<pre><code>@primary:  green;\n@secondary: blue;\n\n.section {\n  @color: primary;\n\n  .element {\n    color: @@color;\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>.section .element {\n  color: green;\n}\n</code></pre><h2 id=\"懒评估\"><a href=\"#懒评估\" class=\"headerlink\" title=\"懒评估\"></a>懒评估</h2><p>在less中变量可以后向声明，即变量可以先使用，后声明</p>\n<pre><code>.lazy-eval {\n  width: @var;\n}\n\n@var: @a;\n@a: 9%;\n</code></pre><p>编译后：</p>\n<pre><code>.lazy-eval {\n  width: 9%;\n}\n</code></pre><p>当定义相同变量两次时，在一个作用域内使用变量的最后一个定义，这与css本身类似，其中定义中的最后一个属性用于确定最后的替代值，比如：</p>\n<pre><code>@var: 0;\n.class {\n  @var: 1;\n  .brass {\n    @var: 2;\n    three: @var;\n    @var: 3;\n  }\n  one: @var;\n}\n</code></pre><p>编译后：</p>\n<pre><code>.class {\n  one: 1;\n}\n.class .brass {\n  three: 3;\n}\n</code></pre><p>实质上，每个作用域范围都有一个“最终”值，类似于浏览器中的属性，就像使用自定义属性的示例：</p>\n<pre><code>.header {\n  --color: white;\n  color: var(--color);  // the color is black\n  --color: black;\n}\n</code></pre><p>这意味着，与其他CSS预处理语言不同，Less变量的行为与CSS非常相似。</p>\n<h2 id=\"属性即变量（新特性）\"><a href=\"#属性即变量（新特性）\" class=\"headerlink\" title=\"属性即变量（新特性）\"></a>属性即变量（新特性）</h2><p>在最新的V3.0.0版本中，你可以直接把css属性名当作“变量”来使用，只要利用$符号，这样有时候可以使你的代码更加轻量化，比使用@事先定义变量要方便，例如：</p>\n<pre><code>.widget {\n  color: #efefef;\n  background-color: $color;\n}\n</code></pre><p>编译后：</p>\n<pre><code>.widget {\n  color: #efefef;\n  background-color: #efefef;\n}\n</code></pre><p>请注意，与变量一样，Less将选择当前/父范围内的最后一个属性作为“最终”值。</p>\n<pre><code>.block {\n  color: red;\n  .inner {\n    background-color: $color; //使用的blue\n  }\n  color: blue;\n}\n</code></pre><h2 id=\"默认变量\"><a href=\"#默认变量\" class=\"headerlink\" title=\"默认变量\"></a>默认变量</h2><p>我们有时会收到默认变量的请求 - 只有在尚未设置变量时才能设置变量。 此功能不是必需的，因为您可以通过后面的定义轻松覆盖变量。</p>\n<pre><code>// library\n@base-color: green;\n@dark-color: darken(@base-color, 10%);\n\n// use of library\n@import &quot;library.less&quot;;\n@base-color: red;\n</code></pre><p>其中，@base-color被重写了，最后生效的是red</p>\n<h1 id=\"父选择器\"><a href=\"#父选择器\" class=\"headerlink\" title=\"父选择器\"></a>父选择器</h1><p>使用＆引用父选择器<br>＆运算符表示嵌套规则的父选择器，在将链接类或伪类应用于现有选择器时最常用：</p>\n<pre><code>a {\n  color: blue;\n  &amp;:hover {\n    color: green;\n  }\n  &amp;.b {\n    color: black;\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>a {\n  color: blue;\n}\n\na:hover {\n  color: green;\n}\na.b {\n    color: black;\n}\n</code></pre><p>可以看到，＆就是代表父选择器a,编译后作了替换链接<br>“父选择器”运算符具有多种用途，本上，只要您需要嵌套规则的选择器以默认的其他方式组合。 例如，＆的另一个典型用法是产生重复的类名：</p>\n<pre><code>.button {\n  &amp;-ok {\n    background-image: url(&quot;ok.png&quot;);\n  }\n  &amp;-cancel {\n    background-image: url(&quot;cancel.png&quot;);\n  }\n\n  &amp;-custom {\n    background-image: url(&quot;custom.png&quot;);\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>.button-ok {\n  background-image: url(&quot;ok.png&quot;);\n}\n.button-cancel {\n  background-image: url(&quot;cancel.png&quot;);\n}\n.button-custom {\n  background-image: url(&quot;custom.png&quot;);\n}\n</code></pre><h2 id=\"多次使用-amp\"><a href=\"#多次使用-amp\" class=\"headerlink\" title=\"多次使用&amp;\"></a>多次使用&amp;</h2><p>＆可能会在选择器中出现多次。，这使得可以重复引用父选择器而不重复其名称。</p>\n<pre><code>.link {\n  &amp; + &amp; {\n    color: red;\n  }\n  &amp; &amp; {\n    color: green;\n  }\n  &amp;&amp; {\n    color: blue;\n  }\n  &amp;, &amp;ish {\n    color: cyan;\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>.link + .link {\n  color: red;\n}\n.link .link {\n  color: green;\n}\n.link.link {\n  color: blue;\n}\n.link, .linkish {\n  color: cyan;\n}\n</code></pre><p>请注意，＆表示的多层嵌套的父选择器（不仅仅是最近的祖先），因此以下示例：</p>\n<pre><code>.grand {\n  .parent {\n    &amp; &gt; &amp; {\n      color: red;\n    }\n    &amp; &amp; {\n      color: green;\n    }\n    &amp;&amp; {\n      color: blue;\n    }\n    &amp;, &amp;ish {\n      color: cyan;\n    }\n  }\n}\n</code></pre><p>输出：</p>\n<pre><code>.grand .parent &gt; .grand .parent {\n  color: red;\n}\n.grand .parent .grand .parent {\n  color: green;\n}\n.grand .parent.grand .parent {\n  color: blue;\n}\n.grand .parent,\n.grand .parentish {\n  color: cyan;\n}\n</code></pre><h2 id=\"更改选择器顺序\"><a href=\"#更改选择器顺序\" class=\"headerlink\" title=\"更改选择器顺序\"></a>更改选择器顺序</h2><p>将选择器添加到继承的（父）选择器可能很有用。 这可以通过放置＆after当前选择器来完成。 例如，使用Modernizr时，您可能希望根据支持的功能指定不同的规则：</p>\n<pre><code>.header {\n  .menu {\n    border-radius: 5px;\n    .no-borderradius &amp; {\n      background-image: url(&apos;images/button-background.png&apos;);\n    }\n  }\n}\n</code></pre><p>编译输出：</p>\n<pre><code>.header .menu {\n  border-radius: 5px;\n}\n.no-borderradius .header .menu {\n  background-image: url(&apos;images/button-background.png&apos;);\n}\n</code></pre><h2 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h2><p>＆还可用于生成逗号分隔列表中每个可能的选择器排列：</p>\n<pre><code>p, a, ul, li {\n  &amp; + &amp; {\n    border-top: 0;\n  }\n}\n</code></pre><p>编译输出：</p>\n<pre><code>p + p,\np + a,\np + ul,\np + li,\na + p,\na + a,\na + ul,\na + li,\nul + p,\nul + a,\nul + ul,\nul + li,\nli + p,\nli + a,\nli + ul,\nli + li {\n  border-top: 0;\n}\n</code></pre><h1 id=\"Extend伪类\"><a href=\"#Extend伪类\" class=\"headerlink\" title=\"Extend伪类\"></a>Extend伪类</h1><blockquote>\n<p>发布v1.4.0</p>\n</blockquote>\n<p>Extend是一个Less伪类，它将放置的选择器与它引用的选择器相匹配。</p>\n<pre><code>nav ul {\n  &amp;:extend(.inline);\n  background: blue;\n}\n.inline {\n  color: red;\n}\n</code></pre><p>在上面的规则集中，:extend选择器将“扩展选择器”（nav ul）应用到.inline类，即将.inline的css属性扩展到父选择器“nav ul”。<br>编译输出：</p>\n<pre><code>nav ul {\n  background: blue;\n}\n.inline,\nnav ul {\n  color: red;\n}\n</code></pre><p>注意，nav ul:extend(.inline）选择器如何作为nav ul输出 - 在输出之前删除extend并且选择器块保持原样。 如果没有属性放入该块，则它将从输出中删除（但扩展仍可能影响其他选择器）</p>\n<h2 id=\"扩展语法\"><a href=\"#扩展语法\" class=\"headerlink\" title=\"扩展语法\"></a>扩展语法</h2><p>extend可以附加到选择器，也可以放在规则集中。</p>\n<pre><code>.a:extend(.b) {}\n\n.a {\n  &amp;:extend(.b);\n}\n// the above blocks does the same thing\n</code></pre><p>它看起来像一个带有selector参数的伪类，后面可以跟可选的关键字all：</p>\n<pre><code>.c:extend(.d all) {\n  // extends all instances of &quot;.d&quot; e.g. &quot;.x.d&quot; or &quot;.d.x&quot;\n}\n.d { color: red; }\n.d.classX { font-size: 12px; }\n.classY.d { font-weight: 800; }\n\n//输出\n.c,.d { color: red; }\n.c.classX,.d.classX { font-size: 12px; }\n.classY.c,.classY.d { font-weight: 800; }\n</code></pre><p>它可以包含一个或多个要扩展的类，用逗号分隔,下面的例子实现的效果相同</p>\n<pre><code>.e:extend(.f) {}\n.e:extend(.g) {}\n\n// the above an the below do the same thing\n.e:extend(.f, .g) {}\n</code></pre><h2 id=\"扩展附加到选择器\"><a href=\"#扩展附加到选择器\" class=\"headerlink\" title=\"扩展附加到选择器\"></a>扩展附加到选择器</h2><p>附加到选择器的扩展看起来像普通的伪类，选择器作为参数。 选择器可以包含多个extend子句，但所有extends都必须位于选择器的末尾。</p>\n<pre><code>pre:extend(div pre) { ... }\n同\npre {\n    ...\n    &amp;:extend(div pre)；\n}\n</code></pre><ul>\n<li>在伪类后扩展,比如 pre:hover:extend(div pre)</li>\n<li>允许选择器和扩展之间的空间,比如pre:hover :extend(div pre)</li>\n<li>允许多个扩展,pre:hover:extend(div pre):extend(.bucket tr) - 注意这与下面表示效果相同: pre:hover:extend（div pre，.bucket tr）</li>\n<li>下面这样是不允许的：pre：hover：extend（div pre）.nth-child（odd）,因为extend必须在最后。</li>\n</ul>\n<p>如果规则集包含多个选择器，则其中任何一个都可以包含extend关键字,比如：</p>\n<pre><code>.big-division,\n.big-bag:extend(.bag),\n.big-bucket:extend(.bucket) {\n  // body\n}\n</code></pre><h2 id=\"扩展内部规则集\"><a href=\"#扩展内部规则集\" class=\"headerlink\" title=\"扩展内部规则集\"></a>扩展内部规则集</h2><p>可以使用＆:extend（selector）语法将Extend放入规则集的正文中。 将extend放置到body中是将其放入该规则集的每个选择器的快捷方式。比如，下面两个例子的效果是一样的</p>\n<pre><code>pre:hover, .some-class {\n  &amp;:extend(div pre);\n}\n\npre:hover:extend(div pre),\n.some-class:extend(div pre) {}\n</code></pre><h2 id=\"扩展嵌套选择器\"><a href=\"#扩展嵌套选择器\" class=\"headerlink\" title=\"扩展嵌套选择器\"></a>扩展嵌套选择器</h2><p>Extend能够匹配嵌套选择器,例如：</p>\n<pre><code>.bucket {\n  tr { // nested ruleset with target selector\n    color: blue;\n  }\n}\n.some-class:extend(.bucket tr) {} // nested ruleset is recognized\n</code></pre><p>输出</p>\n<pre><code>.bucket tr, .some-class {\n  color: blue;\n}\n</code></pre><p>本质上，扩展会查看已编译的css，而不是原始的less</p>\n<pre><code>.bucket {\n  tr &amp; { // nested ruleset with target selector\n    color: blue;\n  }\n}\n.some-class:extend(tr .bucket) {} // nested ruleset is recognized\n</code></pre><p>输出</p>\n<pre><code>tr .bucket,\n.some-class {\n  color: blue;\n}\n</code></pre><h2 id=\"与Extend完全匹配\"><a href=\"#与Extend完全匹配\" class=\"headerlink\" title=\"与Extend完全匹配\"></a>与Extend完全匹配</h2><p>默认情况下，扩展会查找选择器之间的完全匹配。选择器是否使用前导星比较重要。 两个第n个表达式具有相同的含义并不重要，它们需要具有相同的形式才能匹配。 唯一的例外是属性选择器中的引号，较少知道它们具有相同的含义并匹配它们。</p>\n<pre><code>.a.class,\n.class.a,\n.class &gt; .a {\n  color: blue;\n}\n.test:extend(.class) {} // this will NOT match the any selectors above\n\n*.class {\n  color: blue;\n}\n.noStar:extend(.class) {} // this will NOT match the *.class selector\n</code></pre><p>伪类的顺序很重要。 选择器链接：hover：visited和link：visited：hover匹配相同的元素集，但extend将它们视为不同：</p>\n<pre><code>link:hover:visited {\n  color: blue;\n}\n.selector:extend(link:visited:hover) {} //NOT match link:hover:visite\n</code></pre><h2 id=\"nth表达式\"><a href=\"#nth表达式\" class=\"headerlink\" title=\"nth表达式\"></a>nth表达式</h2><p>表示第N个表达形式很重要。 第N个表达式1n + 3和n+3是等价的，但是extend不匹配它们</p>\n<pre><code>:nth-child(1n+3) {\n  color: blue;\n}\n.child:extend(:nth-child(n+3)) {} //NOT match\n</code></pre><p>属性选择器中的引用类型无关紧要，以下所有内容都是等效的。</p>\n<pre><code>[title=identifier] {\n  color: blue;\n}\n[title=&apos;identifier&apos;] {\n  color: blue;\n}\n[title=&quot;identifier&quot;] {\n  color: blue;\n}\n\n.noQuote:extend([title=identifier]) {}\n.singleQuote:extend([title=&apos;identifier&apos;]) {}\n.doubleQuote:extend([title=&quot;identifier&quot;]) {}\n</code></pre><p>输出</p>\n<pre><code>[title=identifier],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n[title=&apos;identifier&apos;],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n\n[title=&quot;identifier&quot;],\n.noQuote,\n.singleQuote,\n.doubleQuote {\n  color: blue;\n}\n</code></pre><h2 id=\"扩展所有all\"><a href=\"#扩展所有all\" class=\"headerlink\" title=\"扩展所有all\"></a>扩展所有all</h2><p>当你在extend参数中指定all关键字时，它会告诉Less将该选择器与另一个选择器的一部分相匹配。 将复制选择器，然后仅使用extend替换选择器的匹配部分，从而生成新的选择器。</p>\n<pre><code>.a.b.test,\n.test.c {\n  color: orange;\n}\n.test {\n  &amp;:hover {\n    color: green;\n  }\n}\n\n.replacement:extend(.test all) {}\n</code></pre><p>输出</p>\n<pre><code>.a.b.test,\n.test.c,\n.a.b.replacement,\n.replacement.c {\n  color: orange;\n}\n.test:hover,\n.replacement:hover {\n  color: green;\n}\n</code></pre><p>您可以将此操作模式视为基本上进行非破坏性搜索和替换。</p>\n<h2 id=\"具有扩展的选择器插值\"><a href=\"#具有扩展的选择器插值\" class=\"headerlink\" title=\"具有扩展的选择器插值\"></a>具有扩展的选择器插值</h2><p>Extend无法将选择器不能匹配变量，也不能匹配被变量代表的选择器。 比如下面的情况将不生效：</p>\n<pre><code>@variable: .bucket;\n@{variable} { // interpolated selector\n  color: blue;\n}\n.some-class:extend(.bucket) {} // does nothing, no match is found\n\n.bucket {\n  color: blue;\n}\n.some-class:extend(@{variable}) {} // interpolated selector matches nothing\n@variable: .bucket;\n</code></pre><p>但是，extend可以附加到插值选择器上，即插值选择器可以作为extend的父，不能作为extend的子,比如：</p>\n<pre><code>.bucket {\n  color: blue;\n}\n@{variable}:extend(.bucket) {}\n@variable: .selector;\n\n//编译后\n.bucket, .selector {\n  color: blue;\n}\n</code></pre><h2 id=\"在-media媒体查询内扩展\"><a href=\"#在-media媒体查询内扩展\" class=\"headerlink\" title=\"在@media媒体查询内扩展\"></a>在@media媒体查询内扩展</h2><p>目前，在@media声明中扩展只会匹配同一媒体声明中的选择器：</p>\n<pre><code>@media print {\n  .screenClass:extend(.selector) {} // extend inside media\n  .selector { // this will be matched - it is in the same media\n    color: black;\n  }\n}\n.selector { // ruleset on top of style sheet - extend ignores it\n  color: red;\n}\n@media screen {\n  .selector {  // ruleset inside another media - extend ignores it\n    color: blue;\n  }\n}\n</code></pre><p>编译后：</p>\n<pre><code>@media print {\n  .selector,\n  .screenClass { /*  ruleset inside the same media was extended */\n    color: black;\n  }\n}\n.selector { /* ruleset on top of style sheet was ignored */\n  color: red;\n}\n@media screen {\n  .selector { /* ruleset inside another media was ignored */\n    color: blue;\n  }\n}\n</code></pre><blockquote>\n<p>注意：扩展与嵌套的@media声明中的选择器不匹配：</p>\n</blockquote>\n<pre><code>@media screen {\n  .screenClass:extend(.selector) {} // extend inside media\n  @media (min-width: 1023px) {\n    .selector {  // ruleset inside nested media - extend ignores it\n      color: blue;\n    }\n  }\n}\n//extend不生效\n</code></pre><p>最外层顶级扩展,可以匹配嵌套媒体内的选择器在内的所有内容：</p>\n<pre><code>@media screen {\n  .selector {  /* ruleset inside nested media - top level extend works */\n    color: blue;\n  }\n  @media (min-width: 1023px) {\n    .selector {  /* ruleset inside nested media - top level extend works */\n      color: blue;\n    }\n  }\n}\n\n.topLevel:extend(.selector) {} /* top level extend matches everything */\n</code></pre><p>编译后：</p>\n<pre><code>@media screen {\n  .selector,\n  .topLevel { /* ruleset inside media was extended */\n    color: blue;\n  }\n}\n@media screen and (min-width: 1023px) {\n  .selector,\n  .topLevel { /* ruleset inside nested media was extended */\n    color: blue;\n  }\n}\n</code></pre><h2 id=\"复制检测\"><a href=\"#复制检测\" class=\"headerlink\" title=\"复制检测\"></a>复制检测</h2><p>目前没有重复检测。</p>\n<pre><code>.alert-info,\n.widget {\n  /* declarations */\n}\n\n.alert:extend(.alert-info, .widget) {}\n</code></pre><p>输出</p>\n<pre><code>.alert-info,\n.widget,\n.alert,\n.alert {\n  /* declarations */\n}\n</code></pre><h2 id=\"用例扩展\"><a href=\"#用例扩展\" class=\"headerlink\" title=\"用例扩展\"></a>用例扩展</h2><p><strong>经典用例</strong></p>\n<p>经典用例是避免添加基类，比如：</p>\n<pre><code>.animal {\n  background-color: black;\n  color: white;\n}\n</code></pre><p>并且您希望拥有一个覆盖背景颜色的动物子类型，那么您有两个选项，首先更改您的HTML</p>\n<pre><code>&lt;a class=&quot;animal bear&quot;&gt;Bear&lt;/a&gt;\n\n.animal {\n  background-color: black;\n  color: white;\n}\n.bear {\n  background-color: brown;\n}\n</code></pre><p>或者简化了html并使用了更少的扩展。 例如</p>\n<pre><code>&lt;a class=&quot;bear&quot;&gt;Bear&lt;/a&gt;\n\n.animal {\n  background-color: black;\n  color: white;\n}\n.bear {\n  &amp;:extend(.animal);\n  background-color: brown;\n}\n</code></pre><p><strong>减少CSS大小</strong></p>\n<p>Mixins将所有属性复制到选择器中，这可能导致不必要的重复。 因此，您可以使用extends而不是mixins将选择器移动到您希望使用的属性，从而减少生成的CSS。</p>\n<pre><code>.my-inline-block() {\n  display: inline-block;\n  font-size: 0;\n}\n.thing1 {\n  .my-inline-block;\n}\n.thing2 {\n  .my-inline-block;\n}\n</code></pre><p>输出</p>\n<pre><code>.thing1 {\n  display: inline-block;\n  font-size: 0;\n}\n.thing2 {\n  display: inline-block;\n  font-size: 0;\n}\n</code></pre><p>又例如</p>\n<pre><code>.my-inline-block {\n  display: inline-block;\n  font-size: 0;\n}\n.thing1 {\n  &amp;:extend(.my-inline-block);\n}\n.thing2 {\n  &amp;:extend(.my-inline-block);\n}\n</code></pre><p>输出</p>\n<pre><code>.my-inline-block,\n.thing1,\n.thing2 {\n  display: inline-block;\n  font-size: 0;\n}\n</code></pre><p><strong>结合样式/更高级的Mixin</strong></p>\n<p>另一个用例是mixin的替代方案 - 因为mixins只能用于简单的选择器，如果你有两个不同的html块，但是需要将相同的样式应用于两者，你可以使用extends来关联两个区域。</p>\n<pre><code>li.list &gt; a {\n  // list styles\n}\nbutton.list-style {\n  &amp;:extend(li.list &gt; a); // use the same list styles\n}\n</code></pre>"},{"title":"less深入指南二（译）","date":"2018-08-14T16:00:30.000Z","comments":1,"toc":true,"_content":"\n# 合并\n合并功能允许将多个属性中的值聚合到单个属性下的逗号或空格分隔列表中。 merge对于背景和变换等属性很有用。\n<!--more-->\n\n## 使用逗号附加属性值\n> Released v1.5.0\n\n    .mixin() {\n      box-shadow+: inset 0 0 10px #555;\n    }\n    .myclass {\n      .mixin();\n      box-shadow+: 0 0 20px black;\n    }\n\n输出\n\n    .myclass {\n      box-shadow: inset 0 0 10px #555, 0 0 20px black;\n    }\n\n## 使用空格附加属性值\n> Released v1.7.0\n\n    .mixin() {\n      transform+_: scale(2);\n    }\n    .myclass {\n      .mixin();\n      transform+_: rotate(15deg);\n    }\n\n输出\n\n    .myclass {\n      transform: scale(2) rotate(15deg);\n    }\n\n> 为了避免任何无意的连接，merge需要在每个连接挂起声明上使用显式的+或+ _标志。\n\n# Mixins混合\n您可以混合使用类选择器和id选择器，例如：\n\n    .a, #b {\n      color: red;\n    }\n    .mixin-class {\n      .a();\n    }\n    .mixin-id {\n      #b();\n    }\n\n输出\n\n    .a, #b {\n      color: red;\n    }\n    .mixin-class {\n      color: red;\n    }\n    .mixin-id {\n      color: red;\n    }\n\n目前和历史上，mixin调用中的括号是可选的，但是不推荐使用可选括号，并且在将来的版本中将需要这些括号。\n\n    .a();\n    .a;  // currently works, but deprecated; don't use\n\n## 不输出Mixin\n如果你想创建一个mixin但你不希望mixin以代码形式出现在你的CSS输出中，请在mixin定义之后添加括号。\n\n    .my-mixin {\n      color: black;\n    }\n    .my-other-mixin() {\n      background: white;\n    }\n    .class {\n      .my-mixin();\n      .my-other-mixin();\n    }\n\n输出\n\n    .my-mixin {\n      color: black;\n    }\n    .class {\n      color: black;\n      background: white;\n    }\n\n## Mixins中的选择器\nMixins可以包含的不仅仅是属性，它们也可以包含选择器。\n\n    .my-hover-mixin() {\n      &:hover {\n        border: 1px solid red;\n      }\n    }\n    button {\n      .my-hover-mixin();\n    }\n\n输出\n\n    button:hover {\n      border: 1px solid red;\n    }\n\n可以看到编译将my-hover-mixin()的内容仅仅进行了替换，如下：\n\n    button {\n      &:hover {\n        border: 1px solid red;\n      }\n    }\n\n## 命名空间\n如果要在更复杂的选择器中混合属性，可以堆叠多个id或类选择器\n\n    #outer() {\n      .inner {\n        color: red;\n      }\n    }\n    .c {\n      #outer > .inner();\n    }\n\n>和空格都是可选的,下面几种形式的效果相同\n\n    #outer > .inner();\n    #outer .inner();\n    #outer.inner();\n\n命名空间减少了你的mixins与其他库mixin或用户mixin的冲突，但它也可以是一种“组织”mixins组的方法，比如：\n\n    #my-library {\n      .my-mixin() {\n        color: black;\n      }\n    }\n    // which can be used like this\n    .class {\n      #my-library.my-mixin();\n    }\n\n## 受保护的命名空间\n如果命名空间是受保护的，则仅在保护条件返回true时才使用由其定义的mixins。 命名空间保护的计算方式与mixin的保护完全相同，因此以下两个mixin的工作方式相同：\n\n    #namespace when (@mode = huge) {\n      .mixin() { /* */ }\n    }\n    #namespace {\n      .mixin() when (@mode = huge) { /* */ }\n    }\n\n所有嵌套命名空间和mixin的默认函数具有相同的值。以下mixin从未被评估过，其中一名守卫肯定是假的：\n\n    #sp_1 when (default()) {\n      #sp_2 when (default()) {\n        .mixin() when not(default()) { /* */ }\n      }\n    }\n\n## !important关键字\n在mixin调用之后使用！important关键字将其继承的所有属性标记为！important：\n\n    .foo (@bg: #f5f5f5, @color: #900) {\n      background: @bg;\n      color: @color;\n    }\n    .unimportant {\n      .foo();\n    }\n    .important {\n      .foo() !important;\n    }\n\n输出\n\n    .unimportant {\n      background: #f5f5f5;\n      color: #900;\n    }\n    .important {\n      background: #f5f5f5 !important;\n      color: #900 !important;\n    }\n\n## 参数混合Mixin\n**如何将参数传递给mixins**\nMixins也可以接受参数，这些参数是混合在一起时传递给选择器块的变量\n\n    .border-radius(@radius) {\n      -webkit-border-radius: @radius;\n         -moz-border-radius: @radius;\n              border-radius: @radius;\n    }\n\n以下是我们如何将其混合到各种规则集中：\n\n    #header {\n      .border-radius(4px);\n    }\n    .button {\n      .border-radius(6px);\n    }\n\n参数mixin也可以为其参数设置默认值：\n\n    .border-radius(@radius: 5px) {\n      -webkit-border-radius: @radius;\n         -moz-border-radius: @radius;\n              border-radius: @radius;\n    }\n\n我们现在可以像这样调用它：\n\n    #header {\n      .border-radius();\n    }\n\n它将包括5px边界半径。\n您还可以使用不带参数的参数化mixins。 如果要从CSS输出中隐藏规则集，但希望在其他规则集中包含其属性，这非常有用：\n\n    .wrap() {\n      text-wrap: wrap;\n      white-space: -moz-pre-wrap;\n      white-space: pre-wrap;\n      word-wrap: break-word;\n    }\n\n    pre { .wrap() }\n\n输出\n\n    pre {\n      text-wrap: wrap;\n      white-space: -moz-pre-wrap;\n      white-space: pre-wrap;\n      word-wrap: break-word;\n    }\n\n**具有多个参数的混合**\n\n参数可以是分号或逗号分隔，建议使用分号。逗号具有双重含义：它可以解释为mixin参数分隔符或css列表分隔符。\n使用逗号作为mixin分隔符使得无法将逗号分隔列表创建为参数。另一方面，如果编译器在mixin调用或声明中看到至少一个分号，则它假定参数由分号分隔，并且所有逗号都属于css列表：\n\n- 两个参数，每个参数都包含以逗号分隔的列表：.name（1,2,3; some，else），\n- 三个参数，每个包含一个数字：.name（1,2,3），\n- 使用dummy分号创建mixin调用，其中一个参数包含逗号分隔的css列表：.name（1,2,3;），\n- 逗号分隔的默认值：.name（@ param1：red，blue;）。\n\n定义具有相同名称和参数数量的多个mixin是合法的。 Less将使用所有可应用的属性。如果你使用带有一个参数的mixin，例如.mixin（绿色）;然后将使用具有一个必需参数的所有mixins的属性：\n\n    .mixin(@color) {\n      color-1: @color;\n    }\n    .mixin(@color; @padding: 2) {\n      color-2: @color;\n      padding-2: @padding;\n    }\n    .mixin(@color; @padding; @margin: 2) {\n      color-3: @color;\n      padding-3: @padding;\n      margin: @margin @margin @margin @margin;\n    }\n    .some .selector div {\n      .mixin(#008000);\n    }\n\n输出：\n\n    .some .selector div {\n      color-1: #008000;\n      color-2: #008000;\n      padding-2: 2;\n    }\n\n**命名参数**\n\nmixin参考可以通过其名称而不仅仅是位置来提供参数值。 任何参数都可以通过其名称引用，并且它们不必具有任何特殊顺序：\n\n    .mixin(@color: black; @margin: 10px; @padding: 20px) {\n      color: @color;\n      margin: @margin;\n      padding: @padding;\n    }\n    .class1 {\n      .mixin(@margin: 20px; @color: #33acfe);\n    }\n    .class2 {\n      .mixin(#efca44; @padding: 40px);\n    }\n\n输出\n\n    .class1 {\n      color: #33acfe;\n      margin: 20px;\n      padding: 20px;\n    }\n    .class2 {\n      color: #efca44;\n      margin: 10px;\n      padding: 40px;\n    }\n\n**@arguments变量**\n\n@arguments在mixins中有一个特殊含义，它包含调用mixin时传递的所有参数。 如果您不想处理单个参数，这非常有用：\n\n    .mixin(...) {        // matches 0-N arguments\n    .mixin() {           // matches exactly 0 arguments\n    .mixin(@a: 1) {      // matches 0-1 arguments\n    .mixin(@a: 1; ...) { // matches 0-N arguments\n    .mixin(@a; ...) {    // matches 1-N arguments\n\n    .mixin(@a; @rest...) {\n       // @rest is bound to arguments after @a\n       // @arguments is bound to all arguments\n    }\n\n## 模式匹配\n有时候，您可能希望根据传递给它的参数来更改mixin的行为，比如：\n\n    .mixin(dark; @color) {\n      color: darken(@color, 10%);\n    }\n    .mixin(light; @color) {\n      color: lighten(@color, 10%);\n    }\n    .mixin(@_; @color) {\n      display: block;\n    }\n\n下面我们使用它\n\n    @switch: light;\n\n    .class {\n      .mixin(@switch; #888);\n    }\n\n输出\n\n    .class {\n      color: #a2a2a2;\n      display: block;\n    }\n\n可以看到，传递给.mixin的颜色减轻了，如果@switch的值是dark，结果将是一个较暗的颜色，这里发生了参数匹配：\n\n- 第一个mixin定义不匹配，因为它期望dark作为第一个参数。\n- 第二个mixin定义匹配，因为它预期light。\n- 第三个mixin定义匹配，因为它可以是任何值。\n\n仅使用匹配的mixin定义来进行编译输出，变量匹配并绑定到任何值，除变量之外的任何内容仅与值等于其自身的值匹配。\n我们也可以匹配arity，这是一个例子：\n\n    .mixin(@a) {\n      color: @a;\n    }\n    .mixin(@a; @b) {\n      color: fade(@a; @b);\n    }\n\n现在如果我们用一个参数调用.mixin，我们将得到第一个定义的输出，但如果我们用两个参数调用它，我们将得到第二个定义，即@a淡化为@b。\n\n## 从mixin返回值\n从mixin返回变量或mixins,从Less 3.5开始，您可以使用属性/变量访问器从mixin获取“返回值”，基本上像函数一样使用它。\n\n    .average(@x, @y) {\n      @result: ((@x + @y) / 2);\n    }\n\n    div {\n      padding: .average(16px, 50px)[@result];  // call a mixin and look up its \"@return\" value\n    }\n\n输出\n\n    div {\n      padding: 33px;\n    }\n\n**调用范围内的变量**\n\n> DEPRECATED - 使用属性/值访问器\n\nmixin中定义的变量和mixin是可见的，可以在调用者的范围内使用。 只有一个例外：如果调用者包含一个具有相同名称的变量（包括由另一个mixin调用定义的变量），则不会复制变量。 只有受调用者本地范围中存在的变量才受到保护,从父作用域继承的变量将被重写。\n\n    .mixin() {\n      @width:  100%;\n      @height: 200px;\n    }\n\n    .caller {\n      .mixin();\n      width:  @width;\n      height: @height;\n    }\n\n输出\n\n    .caller {\n      width:  100%;\n      height: 200px;\n    }\n\n直接在调用者范围中定义的变量不能被覆盖。 但是，调用者父作用域中定义的变量不受保护，将被覆盖：\n\n    .mixin() {\n      @size: in-mixin;\n      @definedOnlyInMixin: in-mixin;\n    }\n\n    .class {\n      margin: @size @definedOnlyInMixin;\n      .mixin();\n    }\n\n    @size: globaly-defined-value; // callers parent scope - no protection\n\n输出\n\n\n    .class {\n      margin: in-mixin in-mixin;\n    }\n\n最后，mixin中定义的mixin也可作为返回值使用，例子：\n\n    .unlock(@value) { // outer mixin\n      .doSomething() { // nested mixin\n        declaration: @value;\n      }\n    }\n\n    #namespace {\n      .unlock(5); // unlock doSomething mixin\n      .doSomething(); //nested mixin was copied here and is usable\n    }\n\n    Results in:\n\n    #namespace {\n      declaration: 5;\n    }\n\n## 递归混合\n在Less中，mixin可以自调用。 当与Guard表达式和模式匹配结合使用时，这种递归mixin可用于创建各种迭代/循环结构。\n\n    .loop(@counter) when (@counter > 0) {\n      .loop((@counter - 1));    // next iteration\n      width: (10px * @counter); // code for each iteration\n    }\n\n    div {\n      .loop(5); // launch the loop\n    }\n\n输出\n\n    div {\n      width: 10px;\n      width: 20px;\n      width: 30px;\n      width: 40px;\n      width: 50px;\n    }\n\n使用递归循环生成CSS网格类的一般示例：\n\n    .generate-columns(4);\n\n    .generate-columns(@n, @i: 1) when (@i =< @n) {\n      .column-@{i} {\n        width: (@i * 100% / @n);\n      }\n      .generate-columns(@n, (@i + 1));\n    }\n\n    Output:\n\n    .column-1 {\n      width: 25%;\n    }\n    .column-2 {\n      width: 50%;\n    }\n    .column-3 {\n      width: 75%;\n    }\n    .column-4 {\n      width: 100%;\n    }\n\n## Mixin Guards\n当您想要匹配表达式而不是简单值或arity时，防护很有用。 如果您熟悉函数式编程，则可能已经遇到过它们。\n为了尽可能地保持CSS的声明性，Less选择通过受保护的mixins而不是if / else语句实现条件执行，这是@media查询功能规范的一部分。举个例子：\n\n    .mixin(@a) when (lightness(@a) >= 50%) {\n      background-color: black;\n    }\n    .mixin(@a) when (lightness(@a) < 50%) {\n      background-color: white;\n    }\n    .mixin(@a) {\n      color: @a;\n    }\n\n关键是when关键字，它引入了一个保护序列（这里只有一个保护）。 现在，如果我们运行以下代码：\n\n    .class1 { .mixin(#ddd) }\n    .class2 { .mixin(#555) }\n\n将输出如下：\n\n    .class1 {\n      background-color: black;\n      color: #ddd;\n    }\n    .class2 {\n      background-color: white;\n      color: #555;\n    }\n\n**比较运算符**\n\n守卫中可用的比较运算符的完整列表是：>，> =，=，= <，<。 此外，关键字true是唯一的truthy值，使这两个mixin等效：\n\n    .truth(@a) when (@a) { ... }\n    .truth(@a) when (@a = true) { ... }\n\n除关键字true之外的任何值都认为是false：\n\n    .class {\n      .truth(40); // Will not match any of the above definitions.\n    }\n\n请注意，您还可以相互比较参数，或使用非参数：\n\n    @media: mobile;\n\n    .mixin(@a) when (@media = mobile) { ... }\n    .mixin(@a) when (@media = desktop) { ... }\n\n    .max(@a; @b) when (@a > @b) { width: @a }\n    .max(@a; @b) when (@a < @b) { width: @b }\n\n\n**逻辑运算符**\n\n您可以将逻辑运算符与守卫一起使用，语法基于CSS媒体查询。\n使用and关键字组合守卫：\n\n    .mixin(@a) when (isnumber(@a)) and (@a > 0) { ... }\n\n您可以通过用逗号分隔守卫来模拟或运算符：\n\n    .mixin(@a) when (@a > 10), (@a < -10) { ... }\n\n使用not关键字否定条件：\n\n    .mixin(@b) when not (@b > 0) { ... }\n\n**类型检查方法**\n\n最后，如果要根据值类型匹配mixins，可以使用is函数：\n\n    .mixin(@a; @b: 0) when (isnumber(@b)) { ... }\n    .mixin(@a; @b: black) when (iscolor(@b)) { ... }\n\n常用的方法：\n\n- iscolor\n- isnumber\n- isstring\n- iskeyword\n- isurl\n\n如果您想检查某个值是否在某个特定单位中而不是数字，您可以使用以下方法之一：\n\n- ispixel\n- ispercentage\n- isem\n- isunit\n\n## Mixins别名\n> Released v3.5.0-beta.4\n\n**将mixin调用分配给变量**\n\n可以将Mixins分配给变量以作为变量调用来调用，或者可以将其用于映射查找。\n\n    #theme.dark.navbar {\n      .colors(light) {\n        primary: purple;\n      }\n      .colors(dark) {\n        primary: black;\n        secondary: grey;\n      }\n    }\n\n    .navbar {\n      @colors: #theme.dark.navbar.colors(dark);\n      background: @colors[primary];\n      border: 1px solid @colors[secondary];\n    }\n\n    output:\n\n    .navbar {\n      background: black;\n      border: 1px solid grey;\n    }\n\n**可变调用**\n\n整个mixin调用可以是别名并称为变量调用。 如：\n\n    #library() {\n      .rules() {\n        background: green;\n      }\n    }\n    .box {\n      @alias: #library.rules();\n      @alias();\n    }\n\n输出\n\n    .box {\n      background: green;\n    }\n\n注意，与root中使用的mixin不同，mixin调用分配给变量并且不带参数调用**总是需要括号**。 以下内容无效。\n\n    #library() {\n      .rules() {\n        background: green;\n      }\n    }\n    .box {\n      @alias: #library.colors;\n      @alias;   // ERROR: Could not evaluate variable call @alias\n    }\n\n这是因为如果变量被分配了选择器列表或mixin调用，则它是不明确的。 例如，在Less 3.5+中，此变量可以这种方式使用。\n\n    .box {\n      @alias: #library.colors;\n      @{alias} {\n        a: b;\n      }\n    }\n\n输出结果：\n\n    .box #library.colors {\n      a: b;\n    }\n\n# CSS守卫\n> released v1.5.0\n\n像Mixin Guards一样，守卫也可以应用于css选择器，这是用于声明mixin然后立即调用它的语法糖。\n举个例子，在1.5.0之前你必须这样做：\n\n    .my-optional-style() when (@my-option = true) {\n      button {\n        color: white;\n      }\n    }\n    .my-optional-style();\n\n现在，你可以直接加在选择器上：\n\n    button when (@my-option = true) {\n      color: white;\n    }\n\n您还可以通过将此功能与＆功能相结合来实现if类型语句，从而允许您对多个守卫进行分组。\n\n    & when (@my-option = true) {\n      button {\n        color: white;\n      }\n      a {\n        color: blue;\n      }\n    }\n\n# 分离的规则集\n将整个css规则集当作变量使用\n> 发布v1.7.0\n\n分离的规则集是一组css属性/嵌套规则集/媒体声明或存储在变量中的任何其他内容。 您可以将其包含在规则集或其他结构中，并将其所有属性复制到那里。 您也可以将它用作mixin参数变量进行传递。\n\n    @detached-ruleset: { background: red; }; // semi-colon is optional in 3.5.0+\n\n    // use detached ruleset\n    .top {\n        @detached-ruleset();\n    }\n\n输出\n\n    .top {\n      background: red;\n    }\n\n分离的规则集调用后的括号是必需的，调用@ detached-ruleset; 是不行的。\n\n当您想要定义一个在媒体查询中或者从不支持的浏览器类名中抽象出来的mixin时，它非常有用，例如，\n\n    .desktop-and-old-ie(@rules) {\n      @media screen and (min-width: 1200px) { @rules(); }\n      html.lt-ie9 &                         { @rules(); }\n    }\n\n    header {\n      background-color: blue;\n\n      .desktop-and-old-ie({\n        background-color: red;\n      });\n    }\n\n这里的desktop-and-old-ie定义了媒体查询和根类，以便您可以使用mixin来包装一段代码。 这将输出\n\n    header {\n      background-color: blue;\n    }\n    @media screen and (min-width: 1200px) {\n      header {\n        background-color: red;\n      }\n    }\n    html.lt-ie9 header {\n      background-color: red;\n    }\n\n此外，还可以带代表完整的Less规则集，例如，\n\n    @my-ruleset: {\n        .my-selector {\n          background-color: black;\n        }\n    };\n\n甚至可以利用媒体查询冒泡\n\n    @my-ruleset: {\n        .my-selector {\n          @media tv {\n            background-color: black;\n          }\n        }\n    };\n    @media (orientation:portrait) {\n        @my-ruleset();\n    }\n\n    //output\n    @media (orientation: portrait) and tv {\n      .my-selector {\n        background-color: black;\n      }\n    }\n\n分离规则集的调用以与mixin调用相同的方式解锁（返回）其所有mixin到调用者，但是，它不返回变量。\n\n    // detached ruleset with a mixin\n    @detached-ruleset: {\n        .mixin() {\n            color:blue;\n        }\n    };\n    // call detached ruleset\n    .caller {\n        @detached-ruleset();\n        .mixin();\n    }\n\n输出\n\n    .caller {\n      color: blue;\n    }\n\n私有变量：\n\n    @detached-ruleset: {\n        @color:blue; // this variable is private\n    };\n    .caller {\n        color: @color; // syntax error\n    }\n\n## 作用域\n分离的规则集可访问变量和mixin的范围，包括定义它的位子以及调用它的位置。如果两个范围包含相同的变量或mixin，则声明范围值优先。\n声明范围是定义分离规则集主体的范围。 规则集仅通过引用访问，将分离的规则集从一个变量复制到另一个变量而不能修改其范围。\n最后，分离的规则集可以通过解锁（导入）到范围来获得对范围的访问。\n\n**定义范围可见性**\n\n分离的规则集可以看到调用者的变量和mixins：\n\n    @detached-ruleset: {\n      caller-variable: @caller-variable; // variable is undefined here\n      .caller-mixin(); // mixin is undefined here\n    };\n\n    selector {\n      // use detached ruleset\n      @detached-ruleset();\n\n      // define variable and mixin needed inside the detached ruleset\n      @caller-variable: value;\n      .caller-mixin() {\n        variable: declaration;\n      }\n    }\n\n编译输出：\n\n    selector {\n      caller-variable: value;\n      variable: declaration;\n    }\n\n变量和mixins可访问的同名变量定义胜过调用者中可用的那些：\n\n    @variable: global;\n    @detached-ruleset: {\n      variable: @variable;\n    };\n\n    selector {\n      @detached-ruleset();\n      @variable: value;\n    }\n\n编译输出\n\n    selector {\n      variable: global;\n    }\n\n\n**引用不会修改分离的规则集范围**\n\n规则集仅通过在那里引用而无法访问新范围：\n\n    @detached-1: { scope-detached: @one @two; };\n    .one {\n      @one: visible;\n      .two {\n        @detached-2: @detached-1; // copying/renaming ruleset\n        @two: visible; // ruleset can not see this variable\n      }\n    }\n\n    .use-place {\n      .one > .two();\n      @detached-2();\n    }\n\nthrows an error:\n*ERROR 1:32 The variable \"@one\" was not declared.*\n\n**解锁将修改分离的规则集范围**\n\n分离的规则集通过在作用域内解锁（导入）来获得访问权限：\n\n    #space {\n      .importer-1() {\n        @detached: { scope-detached: @variable; }; // define detached ruleset\n      }\n    }\n\n    .importer-2() {\n      @variable: value; // unlocked detached ruleset CAN see this variable\n      #space > .importer-1(); // unlock/import detached ruleset\n    }\n\n    .use-place {\n      .importer-2(); // unlock/import detached ruleset second time\n       @detached();\n    }\n\n    compiles into:\n\n    .use-place {\n      scope-detached: value;\n    }\n\n","source":"_posts/2018-10-16-lessjs-use-depth.md","raw":"---\ntitle: less深入指南二（译）\ndate: 2018-08-15 00:00:30\ntags: Less\ncategories: 前端\ncomments: true\ntoc: true\n---\n\n# 合并\n合并功能允许将多个属性中的值聚合到单个属性下的逗号或空格分隔列表中。 merge对于背景和变换等属性很有用。\n<!--more-->\n\n## 使用逗号附加属性值\n> Released v1.5.0\n\n    .mixin() {\n      box-shadow+: inset 0 0 10px #555;\n    }\n    .myclass {\n      .mixin();\n      box-shadow+: 0 0 20px black;\n    }\n\n输出\n\n    .myclass {\n      box-shadow: inset 0 0 10px #555, 0 0 20px black;\n    }\n\n## 使用空格附加属性值\n> Released v1.7.0\n\n    .mixin() {\n      transform+_: scale(2);\n    }\n    .myclass {\n      .mixin();\n      transform+_: rotate(15deg);\n    }\n\n输出\n\n    .myclass {\n      transform: scale(2) rotate(15deg);\n    }\n\n> 为了避免任何无意的连接，merge需要在每个连接挂起声明上使用显式的+或+ _标志。\n\n# Mixins混合\n您可以混合使用类选择器和id选择器，例如：\n\n    .a, #b {\n      color: red;\n    }\n    .mixin-class {\n      .a();\n    }\n    .mixin-id {\n      #b();\n    }\n\n输出\n\n    .a, #b {\n      color: red;\n    }\n    .mixin-class {\n      color: red;\n    }\n    .mixin-id {\n      color: red;\n    }\n\n目前和历史上，mixin调用中的括号是可选的，但是不推荐使用可选括号，并且在将来的版本中将需要这些括号。\n\n    .a();\n    .a;  // currently works, but deprecated; don't use\n\n## 不输出Mixin\n如果你想创建一个mixin但你不希望mixin以代码形式出现在你的CSS输出中，请在mixin定义之后添加括号。\n\n    .my-mixin {\n      color: black;\n    }\n    .my-other-mixin() {\n      background: white;\n    }\n    .class {\n      .my-mixin();\n      .my-other-mixin();\n    }\n\n输出\n\n    .my-mixin {\n      color: black;\n    }\n    .class {\n      color: black;\n      background: white;\n    }\n\n## Mixins中的选择器\nMixins可以包含的不仅仅是属性，它们也可以包含选择器。\n\n    .my-hover-mixin() {\n      &:hover {\n        border: 1px solid red;\n      }\n    }\n    button {\n      .my-hover-mixin();\n    }\n\n输出\n\n    button:hover {\n      border: 1px solid red;\n    }\n\n可以看到编译将my-hover-mixin()的内容仅仅进行了替换，如下：\n\n    button {\n      &:hover {\n        border: 1px solid red;\n      }\n    }\n\n## 命名空间\n如果要在更复杂的选择器中混合属性，可以堆叠多个id或类选择器\n\n    #outer() {\n      .inner {\n        color: red;\n      }\n    }\n    .c {\n      #outer > .inner();\n    }\n\n>和空格都是可选的,下面几种形式的效果相同\n\n    #outer > .inner();\n    #outer .inner();\n    #outer.inner();\n\n命名空间减少了你的mixins与其他库mixin或用户mixin的冲突，但它也可以是一种“组织”mixins组的方法，比如：\n\n    #my-library {\n      .my-mixin() {\n        color: black;\n      }\n    }\n    // which can be used like this\n    .class {\n      #my-library.my-mixin();\n    }\n\n## 受保护的命名空间\n如果命名空间是受保护的，则仅在保护条件返回true时才使用由其定义的mixins。 命名空间保护的计算方式与mixin的保护完全相同，因此以下两个mixin的工作方式相同：\n\n    #namespace when (@mode = huge) {\n      .mixin() { /* */ }\n    }\n    #namespace {\n      .mixin() when (@mode = huge) { /* */ }\n    }\n\n所有嵌套命名空间和mixin的默认函数具有相同的值。以下mixin从未被评估过，其中一名守卫肯定是假的：\n\n    #sp_1 when (default()) {\n      #sp_2 when (default()) {\n        .mixin() when not(default()) { /* */ }\n      }\n    }\n\n## !important关键字\n在mixin调用之后使用！important关键字将其继承的所有属性标记为！important：\n\n    .foo (@bg: #f5f5f5, @color: #900) {\n      background: @bg;\n      color: @color;\n    }\n    .unimportant {\n      .foo();\n    }\n    .important {\n      .foo() !important;\n    }\n\n输出\n\n    .unimportant {\n      background: #f5f5f5;\n      color: #900;\n    }\n    .important {\n      background: #f5f5f5 !important;\n      color: #900 !important;\n    }\n\n## 参数混合Mixin\n**如何将参数传递给mixins**\nMixins也可以接受参数，这些参数是混合在一起时传递给选择器块的变量\n\n    .border-radius(@radius) {\n      -webkit-border-radius: @radius;\n         -moz-border-radius: @radius;\n              border-radius: @radius;\n    }\n\n以下是我们如何将其混合到各种规则集中：\n\n    #header {\n      .border-radius(4px);\n    }\n    .button {\n      .border-radius(6px);\n    }\n\n参数mixin也可以为其参数设置默认值：\n\n    .border-radius(@radius: 5px) {\n      -webkit-border-radius: @radius;\n         -moz-border-radius: @radius;\n              border-radius: @radius;\n    }\n\n我们现在可以像这样调用它：\n\n    #header {\n      .border-radius();\n    }\n\n它将包括5px边界半径。\n您还可以使用不带参数的参数化mixins。 如果要从CSS输出中隐藏规则集，但希望在其他规则集中包含其属性，这非常有用：\n\n    .wrap() {\n      text-wrap: wrap;\n      white-space: -moz-pre-wrap;\n      white-space: pre-wrap;\n      word-wrap: break-word;\n    }\n\n    pre { .wrap() }\n\n输出\n\n    pre {\n      text-wrap: wrap;\n      white-space: -moz-pre-wrap;\n      white-space: pre-wrap;\n      word-wrap: break-word;\n    }\n\n**具有多个参数的混合**\n\n参数可以是分号或逗号分隔，建议使用分号。逗号具有双重含义：它可以解释为mixin参数分隔符或css列表分隔符。\n使用逗号作为mixin分隔符使得无法将逗号分隔列表创建为参数。另一方面，如果编译器在mixin调用或声明中看到至少一个分号，则它假定参数由分号分隔，并且所有逗号都属于css列表：\n\n- 两个参数，每个参数都包含以逗号分隔的列表：.name（1,2,3; some，else），\n- 三个参数，每个包含一个数字：.name（1,2,3），\n- 使用dummy分号创建mixin调用，其中一个参数包含逗号分隔的css列表：.name（1,2,3;），\n- 逗号分隔的默认值：.name（@ param1：red，blue;）。\n\n定义具有相同名称和参数数量的多个mixin是合法的。 Less将使用所有可应用的属性。如果你使用带有一个参数的mixin，例如.mixin（绿色）;然后将使用具有一个必需参数的所有mixins的属性：\n\n    .mixin(@color) {\n      color-1: @color;\n    }\n    .mixin(@color; @padding: 2) {\n      color-2: @color;\n      padding-2: @padding;\n    }\n    .mixin(@color; @padding; @margin: 2) {\n      color-3: @color;\n      padding-3: @padding;\n      margin: @margin @margin @margin @margin;\n    }\n    .some .selector div {\n      .mixin(#008000);\n    }\n\n输出：\n\n    .some .selector div {\n      color-1: #008000;\n      color-2: #008000;\n      padding-2: 2;\n    }\n\n**命名参数**\n\nmixin参考可以通过其名称而不仅仅是位置来提供参数值。 任何参数都可以通过其名称引用，并且它们不必具有任何特殊顺序：\n\n    .mixin(@color: black; @margin: 10px; @padding: 20px) {\n      color: @color;\n      margin: @margin;\n      padding: @padding;\n    }\n    .class1 {\n      .mixin(@margin: 20px; @color: #33acfe);\n    }\n    .class2 {\n      .mixin(#efca44; @padding: 40px);\n    }\n\n输出\n\n    .class1 {\n      color: #33acfe;\n      margin: 20px;\n      padding: 20px;\n    }\n    .class2 {\n      color: #efca44;\n      margin: 10px;\n      padding: 40px;\n    }\n\n**@arguments变量**\n\n@arguments在mixins中有一个特殊含义，它包含调用mixin时传递的所有参数。 如果您不想处理单个参数，这非常有用：\n\n    .mixin(...) {        // matches 0-N arguments\n    .mixin() {           // matches exactly 0 arguments\n    .mixin(@a: 1) {      // matches 0-1 arguments\n    .mixin(@a: 1; ...) { // matches 0-N arguments\n    .mixin(@a; ...) {    // matches 1-N arguments\n\n    .mixin(@a; @rest...) {\n       // @rest is bound to arguments after @a\n       // @arguments is bound to all arguments\n    }\n\n## 模式匹配\n有时候，您可能希望根据传递给它的参数来更改mixin的行为，比如：\n\n    .mixin(dark; @color) {\n      color: darken(@color, 10%);\n    }\n    .mixin(light; @color) {\n      color: lighten(@color, 10%);\n    }\n    .mixin(@_; @color) {\n      display: block;\n    }\n\n下面我们使用它\n\n    @switch: light;\n\n    .class {\n      .mixin(@switch; #888);\n    }\n\n输出\n\n    .class {\n      color: #a2a2a2;\n      display: block;\n    }\n\n可以看到，传递给.mixin的颜色减轻了，如果@switch的值是dark，结果将是一个较暗的颜色，这里发生了参数匹配：\n\n- 第一个mixin定义不匹配，因为它期望dark作为第一个参数。\n- 第二个mixin定义匹配，因为它预期light。\n- 第三个mixin定义匹配，因为它可以是任何值。\n\n仅使用匹配的mixin定义来进行编译输出，变量匹配并绑定到任何值，除变量之外的任何内容仅与值等于其自身的值匹配。\n我们也可以匹配arity，这是一个例子：\n\n    .mixin(@a) {\n      color: @a;\n    }\n    .mixin(@a; @b) {\n      color: fade(@a; @b);\n    }\n\n现在如果我们用一个参数调用.mixin，我们将得到第一个定义的输出，但如果我们用两个参数调用它，我们将得到第二个定义，即@a淡化为@b。\n\n## 从mixin返回值\n从mixin返回变量或mixins,从Less 3.5开始，您可以使用属性/变量访问器从mixin获取“返回值”，基本上像函数一样使用它。\n\n    .average(@x, @y) {\n      @result: ((@x + @y) / 2);\n    }\n\n    div {\n      padding: .average(16px, 50px)[@result];  // call a mixin and look up its \"@return\" value\n    }\n\n输出\n\n    div {\n      padding: 33px;\n    }\n\n**调用范围内的变量**\n\n> DEPRECATED - 使用属性/值访问器\n\nmixin中定义的变量和mixin是可见的，可以在调用者的范围内使用。 只有一个例外：如果调用者包含一个具有相同名称的变量（包括由另一个mixin调用定义的变量），则不会复制变量。 只有受调用者本地范围中存在的变量才受到保护,从父作用域继承的变量将被重写。\n\n    .mixin() {\n      @width:  100%;\n      @height: 200px;\n    }\n\n    .caller {\n      .mixin();\n      width:  @width;\n      height: @height;\n    }\n\n输出\n\n    .caller {\n      width:  100%;\n      height: 200px;\n    }\n\n直接在调用者范围中定义的变量不能被覆盖。 但是，调用者父作用域中定义的变量不受保护，将被覆盖：\n\n    .mixin() {\n      @size: in-mixin;\n      @definedOnlyInMixin: in-mixin;\n    }\n\n    .class {\n      margin: @size @definedOnlyInMixin;\n      .mixin();\n    }\n\n    @size: globaly-defined-value; // callers parent scope - no protection\n\n输出\n\n\n    .class {\n      margin: in-mixin in-mixin;\n    }\n\n最后，mixin中定义的mixin也可作为返回值使用，例子：\n\n    .unlock(@value) { // outer mixin\n      .doSomething() { // nested mixin\n        declaration: @value;\n      }\n    }\n\n    #namespace {\n      .unlock(5); // unlock doSomething mixin\n      .doSomething(); //nested mixin was copied here and is usable\n    }\n\n    Results in:\n\n    #namespace {\n      declaration: 5;\n    }\n\n## 递归混合\n在Less中，mixin可以自调用。 当与Guard表达式和模式匹配结合使用时，这种递归mixin可用于创建各种迭代/循环结构。\n\n    .loop(@counter) when (@counter > 0) {\n      .loop((@counter - 1));    // next iteration\n      width: (10px * @counter); // code for each iteration\n    }\n\n    div {\n      .loop(5); // launch the loop\n    }\n\n输出\n\n    div {\n      width: 10px;\n      width: 20px;\n      width: 30px;\n      width: 40px;\n      width: 50px;\n    }\n\n使用递归循环生成CSS网格类的一般示例：\n\n    .generate-columns(4);\n\n    .generate-columns(@n, @i: 1) when (@i =< @n) {\n      .column-@{i} {\n        width: (@i * 100% / @n);\n      }\n      .generate-columns(@n, (@i + 1));\n    }\n\n    Output:\n\n    .column-1 {\n      width: 25%;\n    }\n    .column-2 {\n      width: 50%;\n    }\n    .column-3 {\n      width: 75%;\n    }\n    .column-4 {\n      width: 100%;\n    }\n\n## Mixin Guards\n当您想要匹配表达式而不是简单值或arity时，防护很有用。 如果您熟悉函数式编程，则可能已经遇到过它们。\n为了尽可能地保持CSS的声明性，Less选择通过受保护的mixins而不是if / else语句实现条件执行，这是@media查询功能规范的一部分。举个例子：\n\n    .mixin(@a) when (lightness(@a) >= 50%) {\n      background-color: black;\n    }\n    .mixin(@a) when (lightness(@a) < 50%) {\n      background-color: white;\n    }\n    .mixin(@a) {\n      color: @a;\n    }\n\n关键是when关键字，它引入了一个保护序列（这里只有一个保护）。 现在，如果我们运行以下代码：\n\n    .class1 { .mixin(#ddd) }\n    .class2 { .mixin(#555) }\n\n将输出如下：\n\n    .class1 {\n      background-color: black;\n      color: #ddd;\n    }\n    .class2 {\n      background-color: white;\n      color: #555;\n    }\n\n**比较运算符**\n\n守卫中可用的比较运算符的完整列表是：>，> =，=，= <，<。 此外，关键字true是唯一的truthy值，使这两个mixin等效：\n\n    .truth(@a) when (@a) { ... }\n    .truth(@a) when (@a = true) { ... }\n\n除关键字true之外的任何值都认为是false：\n\n    .class {\n      .truth(40); // Will not match any of the above definitions.\n    }\n\n请注意，您还可以相互比较参数，或使用非参数：\n\n    @media: mobile;\n\n    .mixin(@a) when (@media = mobile) { ... }\n    .mixin(@a) when (@media = desktop) { ... }\n\n    .max(@a; @b) when (@a > @b) { width: @a }\n    .max(@a; @b) when (@a < @b) { width: @b }\n\n\n**逻辑运算符**\n\n您可以将逻辑运算符与守卫一起使用，语法基于CSS媒体查询。\n使用and关键字组合守卫：\n\n    .mixin(@a) when (isnumber(@a)) and (@a > 0) { ... }\n\n您可以通过用逗号分隔守卫来模拟或运算符：\n\n    .mixin(@a) when (@a > 10), (@a < -10) { ... }\n\n使用not关键字否定条件：\n\n    .mixin(@b) when not (@b > 0) { ... }\n\n**类型检查方法**\n\n最后，如果要根据值类型匹配mixins，可以使用is函数：\n\n    .mixin(@a; @b: 0) when (isnumber(@b)) { ... }\n    .mixin(@a; @b: black) when (iscolor(@b)) { ... }\n\n常用的方法：\n\n- iscolor\n- isnumber\n- isstring\n- iskeyword\n- isurl\n\n如果您想检查某个值是否在某个特定单位中而不是数字，您可以使用以下方法之一：\n\n- ispixel\n- ispercentage\n- isem\n- isunit\n\n## Mixins别名\n> Released v3.5.0-beta.4\n\n**将mixin调用分配给变量**\n\n可以将Mixins分配给变量以作为变量调用来调用，或者可以将其用于映射查找。\n\n    #theme.dark.navbar {\n      .colors(light) {\n        primary: purple;\n      }\n      .colors(dark) {\n        primary: black;\n        secondary: grey;\n      }\n    }\n\n    .navbar {\n      @colors: #theme.dark.navbar.colors(dark);\n      background: @colors[primary];\n      border: 1px solid @colors[secondary];\n    }\n\n    output:\n\n    .navbar {\n      background: black;\n      border: 1px solid grey;\n    }\n\n**可变调用**\n\n整个mixin调用可以是别名并称为变量调用。 如：\n\n    #library() {\n      .rules() {\n        background: green;\n      }\n    }\n    .box {\n      @alias: #library.rules();\n      @alias();\n    }\n\n输出\n\n    .box {\n      background: green;\n    }\n\n注意，与root中使用的mixin不同，mixin调用分配给变量并且不带参数调用**总是需要括号**。 以下内容无效。\n\n    #library() {\n      .rules() {\n        background: green;\n      }\n    }\n    .box {\n      @alias: #library.colors;\n      @alias;   // ERROR: Could not evaluate variable call @alias\n    }\n\n这是因为如果变量被分配了选择器列表或mixin调用，则它是不明确的。 例如，在Less 3.5+中，此变量可以这种方式使用。\n\n    .box {\n      @alias: #library.colors;\n      @{alias} {\n        a: b;\n      }\n    }\n\n输出结果：\n\n    .box #library.colors {\n      a: b;\n    }\n\n# CSS守卫\n> released v1.5.0\n\n像Mixin Guards一样，守卫也可以应用于css选择器，这是用于声明mixin然后立即调用它的语法糖。\n举个例子，在1.5.0之前你必须这样做：\n\n    .my-optional-style() when (@my-option = true) {\n      button {\n        color: white;\n      }\n    }\n    .my-optional-style();\n\n现在，你可以直接加在选择器上：\n\n    button when (@my-option = true) {\n      color: white;\n    }\n\n您还可以通过将此功能与＆功能相结合来实现if类型语句，从而允许您对多个守卫进行分组。\n\n    & when (@my-option = true) {\n      button {\n        color: white;\n      }\n      a {\n        color: blue;\n      }\n    }\n\n# 分离的规则集\n将整个css规则集当作变量使用\n> 发布v1.7.0\n\n分离的规则集是一组css属性/嵌套规则集/媒体声明或存储在变量中的任何其他内容。 您可以将其包含在规则集或其他结构中，并将其所有属性复制到那里。 您也可以将它用作mixin参数变量进行传递。\n\n    @detached-ruleset: { background: red; }; // semi-colon is optional in 3.5.0+\n\n    // use detached ruleset\n    .top {\n        @detached-ruleset();\n    }\n\n输出\n\n    .top {\n      background: red;\n    }\n\n分离的规则集调用后的括号是必需的，调用@ detached-ruleset; 是不行的。\n\n当您想要定义一个在媒体查询中或者从不支持的浏览器类名中抽象出来的mixin时，它非常有用，例如，\n\n    .desktop-and-old-ie(@rules) {\n      @media screen and (min-width: 1200px) { @rules(); }\n      html.lt-ie9 &                         { @rules(); }\n    }\n\n    header {\n      background-color: blue;\n\n      .desktop-and-old-ie({\n        background-color: red;\n      });\n    }\n\n这里的desktop-and-old-ie定义了媒体查询和根类，以便您可以使用mixin来包装一段代码。 这将输出\n\n    header {\n      background-color: blue;\n    }\n    @media screen and (min-width: 1200px) {\n      header {\n        background-color: red;\n      }\n    }\n    html.lt-ie9 header {\n      background-color: red;\n    }\n\n此外，还可以带代表完整的Less规则集，例如，\n\n    @my-ruleset: {\n        .my-selector {\n          background-color: black;\n        }\n    };\n\n甚至可以利用媒体查询冒泡\n\n    @my-ruleset: {\n        .my-selector {\n          @media tv {\n            background-color: black;\n          }\n        }\n    };\n    @media (orientation:portrait) {\n        @my-ruleset();\n    }\n\n    //output\n    @media (orientation: portrait) and tv {\n      .my-selector {\n        background-color: black;\n      }\n    }\n\n分离规则集的调用以与mixin调用相同的方式解锁（返回）其所有mixin到调用者，但是，它不返回变量。\n\n    // detached ruleset with a mixin\n    @detached-ruleset: {\n        .mixin() {\n            color:blue;\n        }\n    };\n    // call detached ruleset\n    .caller {\n        @detached-ruleset();\n        .mixin();\n    }\n\n输出\n\n    .caller {\n      color: blue;\n    }\n\n私有变量：\n\n    @detached-ruleset: {\n        @color:blue; // this variable is private\n    };\n    .caller {\n        color: @color; // syntax error\n    }\n\n## 作用域\n分离的规则集可访问变量和mixin的范围，包括定义它的位子以及调用它的位置。如果两个范围包含相同的变量或mixin，则声明范围值优先。\n声明范围是定义分离规则集主体的范围。 规则集仅通过引用访问，将分离的规则集从一个变量复制到另一个变量而不能修改其范围。\n最后，分离的规则集可以通过解锁（导入）到范围来获得对范围的访问。\n\n**定义范围可见性**\n\n分离的规则集可以看到调用者的变量和mixins：\n\n    @detached-ruleset: {\n      caller-variable: @caller-variable; // variable is undefined here\n      .caller-mixin(); // mixin is undefined here\n    };\n\n    selector {\n      // use detached ruleset\n      @detached-ruleset();\n\n      // define variable and mixin needed inside the detached ruleset\n      @caller-variable: value;\n      .caller-mixin() {\n        variable: declaration;\n      }\n    }\n\n编译输出：\n\n    selector {\n      caller-variable: value;\n      variable: declaration;\n    }\n\n变量和mixins可访问的同名变量定义胜过调用者中可用的那些：\n\n    @variable: global;\n    @detached-ruleset: {\n      variable: @variable;\n    };\n\n    selector {\n      @detached-ruleset();\n      @variable: value;\n    }\n\n编译输出\n\n    selector {\n      variable: global;\n    }\n\n\n**引用不会修改分离的规则集范围**\n\n规则集仅通过在那里引用而无法访问新范围：\n\n    @detached-1: { scope-detached: @one @two; };\n    .one {\n      @one: visible;\n      .two {\n        @detached-2: @detached-1; // copying/renaming ruleset\n        @two: visible; // ruleset can not see this variable\n      }\n    }\n\n    .use-place {\n      .one > .two();\n      @detached-2();\n    }\n\nthrows an error:\n*ERROR 1:32 The variable \"@one\" was not declared.*\n\n**解锁将修改分离的规则集范围**\n\n分离的规则集通过在作用域内解锁（导入）来获得访问权限：\n\n    #space {\n      .importer-1() {\n        @detached: { scope-detached: @variable; }; // define detached ruleset\n      }\n    }\n\n    .importer-2() {\n      @variable: value; // unlocked detached ruleset CAN see this variable\n      #space > .importer-1(); // unlock/import detached ruleset\n    }\n\n    .use-place {\n      .importer-2(); // unlock/import detached ruleset second time\n       @detached();\n    }\n\n    compiles into:\n\n    .use-place {\n      scope-detached: value;\n    }\n\n","slug":"lessjs-use-depth","published":1,"updated":"2018-10-26T14:26:39.703Z","layout":"post","photos":[],"link":"","_id":"cjqwe42ei0063or0b25n5rr7r","content":"<h1 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h1><p>合并功能允许将多个属性中的值聚合到单个属性下的逗号或空格分隔列表中。 merge对于背景和变换等属性很有用。<br><a id=\"more\"></a></p>\n<h2 id=\"使用逗号附加属性值\"><a href=\"#使用逗号附加属性值\" class=\"headerlink\" title=\"使用逗号附加属性值\"></a>使用逗号附加属性值</h2><blockquote>\n<p>Released v1.5.0</p>\n</blockquote>\n<pre><code>.mixin() {\n  box-shadow+: inset 0 0 10px #555;\n}\n.myclass {\n  .mixin();\n  box-shadow+: 0 0 20px black;\n}\n</code></pre><p>输出</p>\n<pre><code>.myclass {\n  box-shadow: inset 0 0 10px #555, 0 0 20px black;\n}\n</code></pre><h2 id=\"使用空格附加属性值\"><a href=\"#使用空格附加属性值\" class=\"headerlink\" title=\"使用空格附加属性值\"></a>使用空格附加属性值</h2><blockquote>\n<p>Released v1.7.0</p>\n</blockquote>\n<pre><code>.mixin() {\n  transform+_: scale(2);\n}\n.myclass {\n  .mixin();\n  transform+_: rotate(15deg);\n}\n</code></pre><p>输出</p>\n<pre><code>.myclass {\n  transform: scale(2) rotate(15deg);\n}\n</code></pre><blockquote>\n<p>为了避免任何无意的连接，merge需要在每个连接挂起声明上使用显式的+或+ _标志。</p>\n</blockquote>\n<h1 id=\"Mixins混合\"><a href=\"#Mixins混合\" class=\"headerlink\" title=\"Mixins混合\"></a>Mixins混合</h1><p>您可以混合使用类选择器和id选择器，例如：</p>\n<pre><code>.a, #b {\n  color: red;\n}\n.mixin-class {\n  .a();\n}\n.mixin-id {\n  #b();\n}\n</code></pre><p>输出</p>\n<pre><code>.a, #b {\n  color: red;\n}\n.mixin-class {\n  color: red;\n}\n.mixin-id {\n  color: red;\n}\n</code></pre><p>目前和历史上，mixin调用中的括号是可选的，但是不推荐使用可选括号，并且在将来的版本中将需要这些括号。</p>\n<pre><code>.a();\n.a;  // currently works, but deprecated; don&apos;t use\n</code></pre><h2 id=\"不输出Mixin\"><a href=\"#不输出Mixin\" class=\"headerlink\" title=\"不输出Mixin\"></a>不输出Mixin</h2><p>如果你想创建一个mixin但你不希望mixin以代码形式出现在你的CSS输出中，请在mixin定义之后添加括号。</p>\n<pre><code>.my-mixin {\n  color: black;\n}\n.my-other-mixin() {\n  background: white;\n}\n.class {\n  .my-mixin();\n  .my-other-mixin();\n}\n</code></pre><p>输出</p>\n<pre><code>.my-mixin {\n  color: black;\n}\n.class {\n  color: black;\n  background: white;\n}\n</code></pre><h2 id=\"Mixins中的选择器\"><a href=\"#Mixins中的选择器\" class=\"headerlink\" title=\"Mixins中的选择器\"></a>Mixins中的选择器</h2><p>Mixins可以包含的不仅仅是属性，它们也可以包含选择器。</p>\n<pre><code>.my-hover-mixin() {\n  &amp;:hover {\n    border: 1px solid red;\n  }\n}\nbutton {\n  .my-hover-mixin();\n}\n</code></pre><p>输出</p>\n<pre><code>button:hover {\n  border: 1px solid red;\n}\n</code></pre><p>可以看到编译将my-hover-mixin()的内容仅仅进行了替换，如下：</p>\n<pre><code>button {\n  &amp;:hover {\n    border: 1px solid red;\n  }\n}\n</code></pre><h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>如果要在更复杂的选择器中混合属性，可以堆叠多个id或类选择器</p>\n<pre><code>#outer() {\n  .inner {\n    color: red;\n  }\n}\n.c {\n  #outer &gt; .inner();\n}\n</code></pre><blockquote>\n<p>和空格都是可选的,下面几种形式的效果相同</p>\n</blockquote>\n<pre><code>#outer &gt; .inner();\n#outer .inner();\n#outer.inner();\n</code></pre><p>命名空间减少了你的mixins与其他库mixin或用户mixin的冲突，但它也可以是一种“组织”mixins组的方法，比如：</p>\n<pre><code>#my-library {\n  .my-mixin() {\n    color: black;\n  }\n}\n// which can be used like this\n.class {\n  #my-library.my-mixin();\n}\n</code></pre><h2 id=\"受保护的命名空间\"><a href=\"#受保护的命名空间\" class=\"headerlink\" title=\"受保护的命名空间\"></a>受保护的命名空间</h2><p>如果命名空间是受保护的，则仅在保护条件返回true时才使用由其定义的mixins。 命名空间保护的计算方式与mixin的保护完全相同，因此以下两个mixin的工作方式相同：</p>\n<pre><code>#namespace when (@mode = huge) {\n  .mixin() { /* */ }\n}\n#namespace {\n  .mixin() when (@mode = huge) { /* */ }\n}\n</code></pre><p>所有嵌套命名空间和mixin的默认函数具有相同的值。以下mixin从未被评估过，其中一名守卫肯定是假的：</p>\n<pre><code>#sp_1 when (default()) {\n  #sp_2 when (default()) {\n    .mixin() when not(default()) { /* */ }\n  }\n}\n</code></pre><h2 id=\"important关键字\"><a href=\"#important关键字\" class=\"headerlink\" title=\"!important关键字\"></a>!important关键字</h2><p>在mixin调用之后使用！important关键字将其继承的所有属性标记为！important：</p>\n<pre><code>.foo (@bg: #f5f5f5, @color: #900) {\n  background: @bg;\n  color: @color;\n}\n.unimportant {\n  .foo();\n}\n.important {\n  .foo() !important;\n}\n</code></pre><p>输出</p>\n<pre><code>.unimportant {\n  background: #f5f5f5;\n  color: #900;\n}\n.important {\n  background: #f5f5f5 !important;\n  color: #900 !important;\n}\n</code></pre><h2 id=\"参数混合Mixin\"><a href=\"#参数混合Mixin\" class=\"headerlink\" title=\"参数混合Mixin\"></a>参数混合Mixin</h2><p><strong>如何将参数传递给mixins</strong><br>Mixins也可以接受参数，这些参数是混合在一起时传递给选择器块的变量</p>\n<pre><code>.border-radius(@radius) {\n  -webkit-border-radius: @radius;\n     -moz-border-radius: @radius;\n          border-radius: @radius;\n}\n</code></pre><p>以下是我们如何将其混合到各种规则集中：</p>\n<pre><code>#header {\n  .border-radius(4px);\n}\n.button {\n  .border-radius(6px);\n}\n</code></pre><p>参数mixin也可以为其参数设置默认值：</p>\n<pre><code>.border-radius(@radius: 5px) {\n  -webkit-border-radius: @radius;\n     -moz-border-radius: @radius;\n          border-radius: @radius;\n}\n</code></pre><p>我们现在可以像这样调用它：</p>\n<pre><code>#header {\n  .border-radius();\n}\n</code></pre><p>它将包括5px边界半径。<br>您还可以使用不带参数的参数化mixins。 如果要从CSS输出中隐藏规则集，但希望在其他规则集中包含其属性，这非常有用：</p>\n<pre><code>.wrap() {\n  text-wrap: wrap;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\npre { .wrap() }\n</code></pre><p>输出</p>\n<pre><code>pre {\n  text-wrap: wrap;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n</code></pre><p><strong>具有多个参数的混合</strong></p>\n<p>参数可以是分号或逗号分隔，建议使用分号。逗号具有双重含义：它可以解释为mixin参数分隔符或css列表分隔符。<br>使用逗号作为mixin分隔符使得无法将逗号分隔列表创建为参数。另一方面，如果编译器在mixin调用或声明中看到至少一个分号，则它假定参数由分号分隔，并且所有逗号都属于css列表：</p>\n<ul>\n<li>两个参数，每个参数都包含以逗号分隔的列表：.name（1,2,3; some，else），</li>\n<li>三个参数，每个包含一个数字：.name（1,2,3），</li>\n<li>使用dummy分号创建mixin调用，其中一个参数包含逗号分隔的css列表：.name（1,2,3;），</li>\n<li>逗号分隔的默认值：.name（@ param1：red，blue;）。</li>\n</ul>\n<p>定义具有相同名称和参数数量的多个mixin是合法的。 Less将使用所有可应用的属性。如果你使用带有一个参数的mixin，例如.mixin（绿色）;然后将使用具有一个必需参数的所有mixins的属性：</p>\n<pre><code>.mixin(@color) {\n  color-1: @color;\n}\n.mixin(@color; @padding: 2) {\n  color-2: @color;\n  padding-2: @padding;\n}\n.mixin(@color; @padding; @margin: 2) {\n  color-3: @color;\n  padding-3: @padding;\n  margin: @margin @margin @margin @margin;\n}\n.some .selector div {\n  .mixin(#008000);\n}\n</code></pre><p>输出：</p>\n<pre><code>.some .selector div {\n  color-1: #008000;\n  color-2: #008000;\n  padding-2: 2;\n}\n</code></pre><p><strong>命名参数</strong></p>\n<p>mixin参考可以通过其名称而不仅仅是位置来提供参数值。 任何参数都可以通过其名称引用，并且它们不必具有任何特殊顺序：</p>\n<pre><code>.mixin(@color: black; @margin: 10px; @padding: 20px) {\n  color: @color;\n  margin: @margin;\n  padding: @padding;\n}\n.class1 {\n  .mixin(@margin: 20px; @color: #33acfe);\n}\n.class2 {\n  .mixin(#efca44; @padding: 40px);\n}\n</code></pre><p>输出</p>\n<pre><code>.class1 {\n  color: #33acfe;\n  margin: 20px;\n  padding: 20px;\n}\n.class2 {\n  color: #efca44;\n  margin: 10px;\n  padding: 40px;\n}\n</code></pre><p><strong>@arguments变量</strong></p>\n<p>@arguments在mixins中有一个特殊含义，它包含调用mixin时传递的所有参数。 如果您不想处理单个参数，这非常有用：</p>\n<pre><code>.mixin(...) {        // matches 0-N arguments\n.mixin() {           // matches exactly 0 arguments\n.mixin(@a: 1) {      // matches 0-1 arguments\n.mixin(@a: 1; ...) { // matches 0-N arguments\n.mixin(@a; ...) {    // matches 1-N arguments\n\n.mixin(@a; @rest...) {\n   // @rest is bound to arguments after @a\n   // @arguments is bound to all arguments\n}\n</code></pre><h2 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h2><p>有时候，您可能希望根据传递给它的参数来更改mixin的行为，比如：</p>\n<pre><code>.mixin(dark; @color) {\n  color: darken(@color, 10%);\n}\n.mixin(light; @color) {\n  color: lighten(@color, 10%);\n}\n.mixin(@_; @color) {\n  display: block;\n}\n</code></pre><p>下面我们使用它</p>\n<pre><code>@switch: light;\n\n.class {\n  .mixin(@switch; #888);\n}\n</code></pre><p>输出</p>\n<pre><code>.class {\n  color: #a2a2a2;\n  display: block;\n}\n</code></pre><p>可以看到，传递给.mixin的颜色减轻了，如果@switch的值是dark，结果将是一个较暗的颜色，这里发生了参数匹配：</p>\n<ul>\n<li>第一个mixin定义不匹配，因为它期望dark作为第一个参数。</li>\n<li>第二个mixin定义匹配，因为它预期light。</li>\n<li>第三个mixin定义匹配，因为它可以是任何值。</li>\n</ul>\n<p>仅使用匹配的mixin定义来进行编译输出，变量匹配并绑定到任何值，除变量之外的任何内容仅与值等于其自身的值匹配。<br>我们也可以匹配arity，这是一个例子：</p>\n<pre><code>.mixin(@a) {\n  color: @a;\n}\n.mixin(@a; @b) {\n  color: fade(@a; @b);\n}\n</code></pre><p>现在如果我们用一个参数调用.mixin，我们将得到第一个定义的输出，但如果我们用两个参数调用它，我们将得到第二个定义，即@a淡化为@b。</p>\n<h2 id=\"从mixin返回值\"><a href=\"#从mixin返回值\" class=\"headerlink\" title=\"从mixin返回值\"></a>从mixin返回值</h2><p>从mixin返回变量或mixins,从Less 3.5开始，您可以使用属性/变量访问器从mixin获取“返回值”，基本上像函数一样使用它。</p>\n<pre><code>.average(@x, @y) {\n  @result: ((@x + @y) / 2);\n}\n\ndiv {\n  padding: .average(16px, 50px)[@result];  // call a mixin and look up its &quot;@return&quot; value\n}\n</code></pre><p>输出</p>\n<pre><code>div {\n  padding: 33px;\n}\n</code></pre><p><strong>调用范围内的变量</strong></p>\n<blockquote>\n<p>DEPRECATED - 使用属性/值访问器</p>\n</blockquote>\n<p>mixin中定义的变量和mixin是可见的，可以在调用者的范围内使用。 只有一个例外：如果调用者包含一个具有相同名称的变量（包括由另一个mixin调用定义的变量），则不会复制变量。 只有受调用者本地范围中存在的变量才受到保护,从父作用域继承的变量将被重写。</p>\n<pre><code>.mixin() {\n  @width:  100%;\n  @height: 200px;\n}\n\n.caller {\n  .mixin();\n  width:  @width;\n  height: @height;\n}\n</code></pre><p>输出</p>\n<pre><code>.caller {\n  width:  100%;\n  height: 200px;\n}\n</code></pre><p>直接在调用者范围中定义的变量不能被覆盖。 但是，调用者父作用域中定义的变量不受保护，将被覆盖：</p>\n<pre><code>.mixin() {\n  @size: in-mixin;\n  @definedOnlyInMixin: in-mixin;\n}\n\n.class {\n  margin: @size @definedOnlyInMixin;\n  .mixin();\n}\n\n@size: globaly-defined-value; // callers parent scope - no protection\n</code></pre><p>输出</p>\n<pre><code>.class {\n  margin: in-mixin in-mixin;\n}\n</code></pre><p>最后，mixin中定义的mixin也可作为返回值使用，例子：</p>\n<pre><code>.unlock(@value) { // outer mixin\n  .doSomething() { // nested mixin\n    declaration: @value;\n  }\n}\n\n#namespace {\n  .unlock(5); // unlock doSomething mixin\n  .doSomething(); //nested mixin was copied here and is usable\n}\n\nResults in:\n\n#namespace {\n  declaration: 5;\n}\n</code></pre><h2 id=\"递归混合\"><a href=\"#递归混合\" class=\"headerlink\" title=\"递归混合\"></a>递归混合</h2><p>在Less中，mixin可以自调用。 当与Guard表达式和模式匹配结合使用时，这种递归mixin可用于创建各种迭代/循环结构。</p>\n<pre><code>.loop(@counter) when (@counter &gt; 0) {\n  .loop((@counter - 1));    // next iteration\n  width: (10px * @counter); // code for each iteration\n}\n\ndiv {\n  .loop(5); // launch the loop\n}\n</code></pre><p>输出</p>\n<pre><code>div {\n  width: 10px;\n  width: 20px;\n  width: 30px;\n  width: 40px;\n  width: 50px;\n}\n</code></pre><p>使用递归循环生成CSS网格类的一般示例：</p>\n<pre><code>.generate-columns(4);\n\n.generate-columns(@n, @i: 1) when (@i =&lt; @n) {\n  .column-@{i} {\n    width: (@i * 100% / @n);\n  }\n  .generate-columns(@n, (@i + 1));\n}\n\nOutput:\n\n.column-1 {\n  width: 25%;\n}\n.column-2 {\n  width: 50%;\n}\n.column-3 {\n  width: 75%;\n}\n.column-4 {\n  width: 100%;\n}\n</code></pre><h2 id=\"Mixin-Guards\"><a href=\"#Mixin-Guards\" class=\"headerlink\" title=\"Mixin Guards\"></a>Mixin Guards</h2><p>当您想要匹配表达式而不是简单值或arity时，防护很有用。 如果您熟悉函数式编程，则可能已经遇到过它们。<br>为了尽可能地保持CSS的声明性，Less选择通过受保护的mixins而不是if / else语句实现条件执行，这是@media查询功能规范的一部分。举个例子：</p>\n<pre><code>.mixin(@a) when (lightness(@a) &gt;= 50%) {\n  background-color: black;\n}\n.mixin(@a) when (lightness(@a) &lt; 50%) {\n  background-color: white;\n}\n.mixin(@a) {\n  color: @a;\n}\n</code></pre><p>关键是when关键字，它引入了一个保护序列（这里只有一个保护）。 现在，如果我们运行以下代码：</p>\n<pre><code>.class1 { .mixin(#ddd) }\n.class2 { .mixin(#555) }\n</code></pre><p>将输出如下：</p>\n<pre><code>.class1 {\n  background-color: black;\n  color: #ddd;\n}\n.class2 {\n  background-color: white;\n  color: #555;\n}\n</code></pre><p><strong>比较运算符</strong></p>\n<p>守卫中可用的比较运算符的完整列表是：&gt;，&gt; =，=，= &lt;，&lt;。 此外，关键字true是唯一的truthy值，使这两个mixin等效：</p>\n<pre><code>.truth(@a) when (@a) { ... }\n.truth(@a) when (@a = true) { ... }\n</code></pre><p>除关键字true之外的任何值都认为是false：</p>\n<pre><code>.class {\n  .truth(40); // Will not match any of the above definitions.\n}\n</code></pre><p>请注意，您还可以相互比较参数，或使用非参数：</p>\n<pre><code>@media: mobile;\n\n.mixin(@a) when (@media = mobile) { ... }\n.mixin(@a) when (@media = desktop) { ... }\n\n.max(@a; @b) when (@a &gt; @b) { width: @a }\n.max(@a; @b) when (@a &lt; @b) { width: @b }\n</code></pre><p><strong>逻辑运算符</strong></p>\n<p>您可以将逻辑运算符与守卫一起使用，语法基于CSS媒体查询。<br>使用and关键字组合守卫：</p>\n<pre><code>.mixin(@a) when (isnumber(@a)) and (@a &gt; 0) { ... }\n</code></pre><p>您可以通过用逗号分隔守卫来模拟或运算符：</p>\n<pre><code>.mixin(@a) when (@a &gt; 10), (@a &lt; -10) { ... }\n</code></pre><p>使用not关键字否定条件：</p>\n<pre><code>.mixin(@b) when not (@b &gt; 0) { ... }\n</code></pre><p><strong>类型检查方法</strong></p>\n<p>最后，如果要根据值类型匹配mixins，可以使用is函数：</p>\n<pre><code>.mixin(@a; @b: 0) when (isnumber(@b)) { ... }\n.mixin(@a; @b: black) when (iscolor(@b)) { ... }\n</code></pre><p>常用的方法：</p>\n<ul>\n<li>iscolor</li>\n<li>isnumber</li>\n<li>isstring</li>\n<li>iskeyword</li>\n<li>isurl</li>\n</ul>\n<p>如果您想检查某个值是否在某个特定单位中而不是数字，您可以使用以下方法之一：</p>\n<ul>\n<li>ispixel</li>\n<li>ispercentage</li>\n<li>isem</li>\n<li>isunit</li>\n</ul>\n<h2 id=\"Mixins别名\"><a href=\"#Mixins别名\" class=\"headerlink\" title=\"Mixins别名\"></a>Mixins别名</h2><blockquote>\n<p>Released v3.5.0-beta.4</p>\n</blockquote>\n<p><strong>将mixin调用分配给变量</strong></p>\n<p>可以将Mixins分配给变量以作为变量调用来调用，或者可以将其用于映射查找。</p>\n<pre><code>#theme.dark.navbar {\n  .colors(light) {\n    primary: purple;\n  }\n  .colors(dark) {\n    primary: black;\n    secondary: grey;\n  }\n}\n\n.navbar {\n  @colors: #theme.dark.navbar.colors(dark);\n  background: @colors[primary];\n  border: 1px solid @colors[secondary];\n}\n\noutput:\n\n.navbar {\n  background: black;\n  border: 1px solid grey;\n}\n</code></pre><p><strong>可变调用</strong></p>\n<p>整个mixin调用可以是别名并称为变量调用。 如：</p>\n<pre><code>#library() {\n  .rules() {\n    background: green;\n  }\n}\n.box {\n  @alias: #library.rules();\n  @alias();\n}\n</code></pre><p>输出</p>\n<pre><code>.box {\n  background: green;\n}\n</code></pre><p>注意，与root中使用的mixin不同，mixin调用分配给变量并且不带参数调用<strong>总是需要括号</strong>。 以下内容无效。</p>\n<pre><code>#library() {\n  .rules() {\n    background: green;\n  }\n}\n.box {\n  @alias: #library.colors;\n  @alias;   // ERROR: Could not evaluate variable call @alias\n}\n</code></pre><p>这是因为如果变量被分配了选择器列表或mixin调用，则它是不明确的。 例如，在Less 3.5+中，此变量可以这种方式使用。</p>\n<pre><code>.box {\n  @alias: #library.colors;\n  @{alias} {\n    a: b;\n  }\n}\n</code></pre><p>输出结果：</p>\n<pre><code>.box #library.colors {\n  a: b;\n}\n</code></pre><h1 id=\"CSS守卫\"><a href=\"#CSS守卫\" class=\"headerlink\" title=\"CSS守卫\"></a>CSS守卫</h1><blockquote>\n<p>released v1.5.0</p>\n</blockquote>\n<p>像Mixin Guards一样，守卫也可以应用于css选择器，这是用于声明mixin然后立即调用它的语法糖。<br>举个例子，在1.5.0之前你必须这样做：</p>\n<pre><code>.my-optional-style() when (@my-option = true) {\n  button {\n    color: white;\n  }\n}\n.my-optional-style();\n</code></pre><p>现在，你可以直接加在选择器上：</p>\n<pre><code>button when (@my-option = true) {\n  color: white;\n}\n</code></pre><p>您还可以通过将此功能与＆功能相结合来实现if类型语句，从而允许您对多个守卫进行分组。</p>\n<pre><code>&amp; when (@my-option = true) {\n  button {\n    color: white;\n  }\n  a {\n    color: blue;\n  }\n}\n</code></pre><h1 id=\"分离的规则集\"><a href=\"#分离的规则集\" class=\"headerlink\" title=\"分离的规则集\"></a>分离的规则集</h1><p>将整个css规则集当作变量使用</p>\n<blockquote>\n<p>发布v1.7.0</p>\n</blockquote>\n<p>分离的规则集是一组css属性/嵌套规则集/媒体声明或存储在变量中的任何其他内容。 您可以将其包含在规则集或其他结构中，并将其所有属性复制到那里。 您也可以将它用作mixin参数变量进行传递。</p>\n<pre><code>@detached-ruleset: { background: red; }; // semi-colon is optional in 3.5.0+\n\n// use detached ruleset\n.top {\n    @detached-ruleset();\n}\n</code></pre><p>输出</p>\n<pre><code>.top {\n  background: red;\n}\n</code></pre><p>分离的规则集调用后的括号是必需的，调用@ detached-ruleset; 是不行的。</p>\n<p>当您想要定义一个在媒体查询中或者从不支持的浏览器类名中抽象出来的mixin时，它非常有用，例如，</p>\n<pre><code>.desktop-and-old-ie(@rules) {\n  @media screen and (min-width: 1200px) { @rules(); }\n  html.lt-ie9 &amp;                         { @rules(); }\n}\n\nheader {\n  background-color: blue;\n\n  .desktop-and-old-ie({\n    background-color: red;\n  });\n}\n</code></pre><p>这里的desktop-and-old-ie定义了媒体查询和根类，以便您可以使用mixin来包装一段代码。 这将输出</p>\n<pre><code>header {\n  background-color: blue;\n}\n@media screen and (min-width: 1200px) {\n  header {\n    background-color: red;\n  }\n}\nhtml.lt-ie9 header {\n  background-color: red;\n}\n</code></pre><p>此外，还可以带代表完整的Less规则集，例如，</p>\n<pre><code>@my-ruleset: {\n    .my-selector {\n      background-color: black;\n    }\n};\n</code></pre><p>甚至可以利用媒体查询冒泡</p>\n<pre><code>@my-ruleset: {\n    .my-selector {\n      @media tv {\n        background-color: black;\n      }\n    }\n};\n@media (orientation:portrait) {\n    @my-ruleset();\n}\n\n//output\n@media (orientation: portrait) and tv {\n  .my-selector {\n    background-color: black;\n  }\n}\n</code></pre><p>分离规则集的调用以与mixin调用相同的方式解锁（返回）其所有mixin到调用者，但是，它不返回变量。</p>\n<pre><code>// detached ruleset with a mixin\n@detached-ruleset: {\n    .mixin() {\n        color:blue;\n    }\n};\n// call detached ruleset\n.caller {\n    @detached-ruleset();\n    .mixin();\n}\n</code></pre><p>输出</p>\n<pre><code>.caller {\n  color: blue;\n}\n</code></pre><p>私有变量：</p>\n<pre><code>@detached-ruleset: {\n    @color:blue; // this variable is private\n};\n.caller {\n    color: @color; // syntax error\n}\n</code></pre><h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>分离的规则集可访问变量和mixin的范围，包括定义它的位子以及调用它的位置。如果两个范围包含相同的变量或mixin，则声明范围值优先。<br>声明范围是定义分离规则集主体的范围。 规则集仅通过引用访问，将分离的规则集从一个变量复制到另一个变量而不能修改其范围。<br>最后，分离的规则集可以通过解锁（导入）到范围来获得对范围的访问。</p>\n<p><strong>定义范围可见性</strong></p>\n<p>分离的规则集可以看到调用者的变量和mixins：</p>\n<pre><code>@detached-ruleset: {\n  caller-variable: @caller-variable; // variable is undefined here\n  .caller-mixin(); // mixin is undefined here\n};\n\nselector {\n  // use detached ruleset\n  @detached-ruleset();\n\n  // define variable and mixin needed inside the detached ruleset\n  @caller-variable: value;\n  .caller-mixin() {\n    variable: declaration;\n  }\n}\n</code></pre><p>编译输出：</p>\n<pre><code>selector {\n  caller-variable: value;\n  variable: declaration;\n}\n</code></pre><p>变量和mixins可访问的同名变量定义胜过调用者中可用的那些：</p>\n<pre><code>@variable: global;\n@detached-ruleset: {\n  variable: @variable;\n};\n\nselector {\n  @detached-ruleset();\n  @variable: value;\n}\n</code></pre><p>编译输出</p>\n<pre><code>selector {\n  variable: global;\n}\n</code></pre><p><strong>引用不会修改分离的规则集范围</strong></p>\n<p>规则集仅通过在那里引用而无法访问新范围：</p>\n<pre><code>@detached-1: { scope-detached: @one @two; };\n.one {\n  @one: visible;\n  .two {\n    @detached-2: @detached-1; // copying/renaming ruleset\n    @two: visible; // ruleset can not see this variable\n  }\n}\n\n.use-place {\n  .one &gt; .two();\n  @detached-2();\n}\n</code></pre><p>throws an error:<br><em>ERROR 1:32 The variable “@one” was not declared.</em></p>\n<p><strong>解锁将修改分离的规则集范围</strong></p>\n<p>分离的规则集通过在作用域内解锁（导入）来获得访问权限：</p>\n<pre><code>#space {\n  .importer-1() {\n    @detached: { scope-detached: @variable; }; // define detached ruleset\n  }\n}\n\n.importer-2() {\n  @variable: value; // unlocked detached ruleset CAN see this variable\n  #space &gt; .importer-1(); // unlock/import detached ruleset\n}\n\n.use-place {\n  .importer-2(); // unlock/import detached ruleset second time\n   @detached();\n}\n\ncompiles into:\n\n.use-place {\n  scope-detached: value;\n}\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h1><p>合并功能允许将多个属性中的值聚合到单个属性下的逗号或空格分隔列表中。 merge对于背景和变换等属性很有用。<br>","more":"</p>\n<h2 id=\"使用逗号附加属性值\"><a href=\"#使用逗号附加属性值\" class=\"headerlink\" title=\"使用逗号附加属性值\"></a>使用逗号附加属性值</h2><blockquote>\n<p>Released v1.5.0</p>\n</blockquote>\n<pre><code>.mixin() {\n  box-shadow+: inset 0 0 10px #555;\n}\n.myclass {\n  .mixin();\n  box-shadow+: 0 0 20px black;\n}\n</code></pre><p>输出</p>\n<pre><code>.myclass {\n  box-shadow: inset 0 0 10px #555, 0 0 20px black;\n}\n</code></pre><h2 id=\"使用空格附加属性值\"><a href=\"#使用空格附加属性值\" class=\"headerlink\" title=\"使用空格附加属性值\"></a>使用空格附加属性值</h2><blockquote>\n<p>Released v1.7.0</p>\n</blockquote>\n<pre><code>.mixin() {\n  transform+_: scale(2);\n}\n.myclass {\n  .mixin();\n  transform+_: rotate(15deg);\n}\n</code></pre><p>输出</p>\n<pre><code>.myclass {\n  transform: scale(2) rotate(15deg);\n}\n</code></pre><blockquote>\n<p>为了避免任何无意的连接，merge需要在每个连接挂起声明上使用显式的+或+ _标志。</p>\n</blockquote>\n<h1 id=\"Mixins混合\"><a href=\"#Mixins混合\" class=\"headerlink\" title=\"Mixins混合\"></a>Mixins混合</h1><p>您可以混合使用类选择器和id选择器，例如：</p>\n<pre><code>.a, #b {\n  color: red;\n}\n.mixin-class {\n  .a();\n}\n.mixin-id {\n  #b();\n}\n</code></pre><p>输出</p>\n<pre><code>.a, #b {\n  color: red;\n}\n.mixin-class {\n  color: red;\n}\n.mixin-id {\n  color: red;\n}\n</code></pre><p>目前和历史上，mixin调用中的括号是可选的，但是不推荐使用可选括号，并且在将来的版本中将需要这些括号。</p>\n<pre><code>.a();\n.a;  // currently works, but deprecated; don&apos;t use\n</code></pre><h2 id=\"不输出Mixin\"><a href=\"#不输出Mixin\" class=\"headerlink\" title=\"不输出Mixin\"></a>不输出Mixin</h2><p>如果你想创建一个mixin但你不希望mixin以代码形式出现在你的CSS输出中，请在mixin定义之后添加括号。</p>\n<pre><code>.my-mixin {\n  color: black;\n}\n.my-other-mixin() {\n  background: white;\n}\n.class {\n  .my-mixin();\n  .my-other-mixin();\n}\n</code></pre><p>输出</p>\n<pre><code>.my-mixin {\n  color: black;\n}\n.class {\n  color: black;\n  background: white;\n}\n</code></pre><h2 id=\"Mixins中的选择器\"><a href=\"#Mixins中的选择器\" class=\"headerlink\" title=\"Mixins中的选择器\"></a>Mixins中的选择器</h2><p>Mixins可以包含的不仅仅是属性，它们也可以包含选择器。</p>\n<pre><code>.my-hover-mixin() {\n  &amp;:hover {\n    border: 1px solid red;\n  }\n}\nbutton {\n  .my-hover-mixin();\n}\n</code></pre><p>输出</p>\n<pre><code>button:hover {\n  border: 1px solid red;\n}\n</code></pre><p>可以看到编译将my-hover-mixin()的内容仅仅进行了替换，如下：</p>\n<pre><code>button {\n  &amp;:hover {\n    border: 1px solid red;\n  }\n}\n</code></pre><h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>如果要在更复杂的选择器中混合属性，可以堆叠多个id或类选择器</p>\n<pre><code>#outer() {\n  .inner {\n    color: red;\n  }\n}\n.c {\n  #outer &gt; .inner();\n}\n</code></pre><blockquote>\n<p>和空格都是可选的,下面几种形式的效果相同</p>\n</blockquote>\n<pre><code>#outer &gt; .inner();\n#outer .inner();\n#outer.inner();\n</code></pre><p>命名空间减少了你的mixins与其他库mixin或用户mixin的冲突，但它也可以是一种“组织”mixins组的方法，比如：</p>\n<pre><code>#my-library {\n  .my-mixin() {\n    color: black;\n  }\n}\n// which can be used like this\n.class {\n  #my-library.my-mixin();\n}\n</code></pre><h2 id=\"受保护的命名空间\"><a href=\"#受保护的命名空间\" class=\"headerlink\" title=\"受保护的命名空间\"></a>受保护的命名空间</h2><p>如果命名空间是受保护的，则仅在保护条件返回true时才使用由其定义的mixins。 命名空间保护的计算方式与mixin的保护完全相同，因此以下两个mixin的工作方式相同：</p>\n<pre><code>#namespace when (@mode = huge) {\n  .mixin() { /* */ }\n}\n#namespace {\n  .mixin() when (@mode = huge) { /* */ }\n}\n</code></pre><p>所有嵌套命名空间和mixin的默认函数具有相同的值。以下mixin从未被评估过，其中一名守卫肯定是假的：</p>\n<pre><code>#sp_1 when (default()) {\n  #sp_2 when (default()) {\n    .mixin() when not(default()) { /* */ }\n  }\n}\n</code></pre><h2 id=\"important关键字\"><a href=\"#important关键字\" class=\"headerlink\" title=\"!important关键字\"></a>!important关键字</h2><p>在mixin调用之后使用！important关键字将其继承的所有属性标记为！important：</p>\n<pre><code>.foo (@bg: #f5f5f5, @color: #900) {\n  background: @bg;\n  color: @color;\n}\n.unimportant {\n  .foo();\n}\n.important {\n  .foo() !important;\n}\n</code></pre><p>输出</p>\n<pre><code>.unimportant {\n  background: #f5f5f5;\n  color: #900;\n}\n.important {\n  background: #f5f5f5 !important;\n  color: #900 !important;\n}\n</code></pre><h2 id=\"参数混合Mixin\"><a href=\"#参数混合Mixin\" class=\"headerlink\" title=\"参数混合Mixin\"></a>参数混合Mixin</h2><p><strong>如何将参数传递给mixins</strong><br>Mixins也可以接受参数，这些参数是混合在一起时传递给选择器块的变量</p>\n<pre><code>.border-radius(@radius) {\n  -webkit-border-radius: @radius;\n     -moz-border-radius: @radius;\n          border-radius: @radius;\n}\n</code></pre><p>以下是我们如何将其混合到各种规则集中：</p>\n<pre><code>#header {\n  .border-radius(4px);\n}\n.button {\n  .border-radius(6px);\n}\n</code></pre><p>参数mixin也可以为其参数设置默认值：</p>\n<pre><code>.border-radius(@radius: 5px) {\n  -webkit-border-radius: @radius;\n     -moz-border-radius: @radius;\n          border-radius: @radius;\n}\n</code></pre><p>我们现在可以像这样调用它：</p>\n<pre><code>#header {\n  .border-radius();\n}\n</code></pre><p>它将包括5px边界半径。<br>您还可以使用不带参数的参数化mixins。 如果要从CSS输出中隐藏规则集，但希望在其他规则集中包含其属性，这非常有用：</p>\n<pre><code>.wrap() {\n  text-wrap: wrap;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\npre { .wrap() }\n</code></pre><p>输出</p>\n<pre><code>pre {\n  text-wrap: wrap;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n</code></pre><p><strong>具有多个参数的混合</strong></p>\n<p>参数可以是分号或逗号分隔，建议使用分号。逗号具有双重含义：它可以解释为mixin参数分隔符或css列表分隔符。<br>使用逗号作为mixin分隔符使得无法将逗号分隔列表创建为参数。另一方面，如果编译器在mixin调用或声明中看到至少一个分号，则它假定参数由分号分隔，并且所有逗号都属于css列表：</p>\n<ul>\n<li>两个参数，每个参数都包含以逗号分隔的列表：.name（1,2,3; some，else），</li>\n<li>三个参数，每个包含一个数字：.name（1,2,3），</li>\n<li>使用dummy分号创建mixin调用，其中一个参数包含逗号分隔的css列表：.name（1,2,3;），</li>\n<li>逗号分隔的默认值：.name（@ param1：red，blue;）。</li>\n</ul>\n<p>定义具有相同名称和参数数量的多个mixin是合法的。 Less将使用所有可应用的属性。如果你使用带有一个参数的mixin，例如.mixin（绿色）;然后将使用具有一个必需参数的所有mixins的属性：</p>\n<pre><code>.mixin(@color) {\n  color-1: @color;\n}\n.mixin(@color; @padding: 2) {\n  color-2: @color;\n  padding-2: @padding;\n}\n.mixin(@color; @padding; @margin: 2) {\n  color-3: @color;\n  padding-3: @padding;\n  margin: @margin @margin @margin @margin;\n}\n.some .selector div {\n  .mixin(#008000);\n}\n</code></pre><p>输出：</p>\n<pre><code>.some .selector div {\n  color-1: #008000;\n  color-2: #008000;\n  padding-2: 2;\n}\n</code></pre><p><strong>命名参数</strong></p>\n<p>mixin参考可以通过其名称而不仅仅是位置来提供参数值。 任何参数都可以通过其名称引用，并且它们不必具有任何特殊顺序：</p>\n<pre><code>.mixin(@color: black; @margin: 10px; @padding: 20px) {\n  color: @color;\n  margin: @margin;\n  padding: @padding;\n}\n.class1 {\n  .mixin(@margin: 20px; @color: #33acfe);\n}\n.class2 {\n  .mixin(#efca44; @padding: 40px);\n}\n</code></pre><p>输出</p>\n<pre><code>.class1 {\n  color: #33acfe;\n  margin: 20px;\n  padding: 20px;\n}\n.class2 {\n  color: #efca44;\n  margin: 10px;\n  padding: 40px;\n}\n</code></pre><p><strong>@arguments变量</strong></p>\n<p>@arguments在mixins中有一个特殊含义，它包含调用mixin时传递的所有参数。 如果您不想处理单个参数，这非常有用：</p>\n<pre><code>.mixin(...) {        // matches 0-N arguments\n.mixin() {           // matches exactly 0 arguments\n.mixin(@a: 1) {      // matches 0-1 arguments\n.mixin(@a: 1; ...) { // matches 0-N arguments\n.mixin(@a; ...) {    // matches 1-N arguments\n\n.mixin(@a; @rest...) {\n   // @rest is bound to arguments after @a\n   // @arguments is bound to all arguments\n}\n</code></pre><h2 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h2><p>有时候，您可能希望根据传递给它的参数来更改mixin的行为，比如：</p>\n<pre><code>.mixin(dark; @color) {\n  color: darken(@color, 10%);\n}\n.mixin(light; @color) {\n  color: lighten(@color, 10%);\n}\n.mixin(@_; @color) {\n  display: block;\n}\n</code></pre><p>下面我们使用它</p>\n<pre><code>@switch: light;\n\n.class {\n  .mixin(@switch; #888);\n}\n</code></pre><p>输出</p>\n<pre><code>.class {\n  color: #a2a2a2;\n  display: block;\n}\n</code></pre><p>可以看到，传递给.mixin的颜色减轻了，如果@switch的值是dark，结果将是一个较暗的颜色，这里发生了参数匹配：</p>\n<ul>\n<li>第一个mixin定义不匹配，因为它期望dark作为第一个参数。</li>\n<li>第二个mixin定义匹配，因为它预期light。</li>\n<li>第三个mixin定义匹配，因为它可以是任何值。</li>\n</ul>\n<p>仅使用匹配的mixin定义来进行编译输出，变量匹配并绑定到任何值，除变量之外的任何内容仅与值等于其自身的值匹配。<br>我们也可以匹配arity，这是一个例子：</p>\n<pre><code>.mixin(@a) {\n  color: @a;\n}\n.mixin(@a; @b) {\n  color: fade(@a; @b);\n}\n</code></pre><p>现在如果我们用一个参数调用.mixin，我们将得到第一个定义的输出，但如果我们用两个参数调用它，我们将得到第二个定义，即@a淡化为@b。</p>\n<h2 id=\"从mixin返回值\"><a href=\"#从mixin返回值\" class=\"headerlink\" title=\"从mixin返回值\"></a>从mixin返回值</h2><p>从mixin返回变量或mixins,从Less 3.5开始，您可以使用属性/变量访问器从mixin获取“返回值”，基本上像函数一样使用它。</p>\n<pre><code>.average(@x, @y) {\n  @result: ((@x + @y) / 2);\n}\n\ndiv {\n  padding: .average(16px, 50px)[@result];  // call a mixin and look up its &quot;@return&quot; value\n}\n</code></pre><p>输出</p>\n<pre><code>div {\n  padding: 33px;\n}\n</code></pre><p><strong>调用范围内的变量</strong></p>\n<blockquote>\n<p>DEPRECATED - 使用属性/值访问器</p>\n</blockquote>\n<p>mixin中定义的变量和mixin是可见的，可以在调用者的范围内使用。 只有一个例外：如果调用者包含一个具有相同名称的变量（包括由另一个mixin调用定义的变量），则不会复制变量。 只有受调用者本地范围中存在的变量才受到保护,从父作用域继承的变量将被重写。</p>\n<pre><code>.mixin() {\n  @width:  100%;\n  @height: 200px;\n}\n\n.caller {\n  .mixin();\n  width:  @width;\n  height: @height;\n}\n</code></pre><p>输出</p>\n<pre><code>.caller {\n  width:  100%;\n  height: 200px;\n}\n</code></pre><p>直接在调用者范围中定义的变量不能被覆盖。 但是，调用者父作用域中定义的变量不受保护，将被覆盖：</p>\n<pre><code>.mixin() {\n  @size: in-mixin;\n  @definedOnlyInMixin: in-mixin;\n}\n\n.class {\n  margin: @size @definedOnlyInMixin;\n  .mixin();\n}\n\n@size: globaly-defined-value; // callers parent scope - no protection\n</code></pre><p>输出</p>\n<pre><code>.class {\n  margin: in-mixin in-mixin;\n}\n</code></pre><p>最后，mixin中定义的mixin也可作为返回值使用，例子：</p>\n<pre><code>.unlock(@value) { // outer mixin\n  .doSomething() { // nested mixin\n    declaration: @value;\n  }\n}\n\n#namespace {\n  .unlock(5); // unlock doSomething mixin\n  .doSomething(); //nested mixin was copied here and is usable\n}\n\nResults in:\n\n#namespace {\n  declaration: 5;\n}\n</code></pre><h2 id=\"递归混合\"><a href=\"#递归混合\" class=\"headerlink\" title=\"递归混合\"></a>递归混合</h2><p>在Less中，mixin可以自调用。 当与Guard表达式和模式匹配结合使用时，这种递归mixin可用于创建各种迭代/循环结构。</p>\n<pre><code>.loop(@counter) when (@counter &gt; 0) {\n  .loop((@counter - 1));    // next iteration\n  width: (10px * @counter); // code for each iteration\n}\n\ndiv {\n  .loop(5); // launch the loop\n}\n</code></pre><p>输出</p>\n<pre><code>div {\n  width: 10px;\n  width: 20px;\n  width: 30px;\n  width: 40px;\n  width: 50px;\n}\n</code></pre><p>使用递归循环生成CSS网格类的一般示例：</p>\n<pre><code>.generate-columns(4);\n\n.generate-columns(@n, @i: 1) when (@i =&lt; @n) {\n  .column-@{i} {\n    width: (@i * 100% / @n);\n  }\n  .generate-columns(@n, (@i + 1));\n}\n\nOutput:\n\n.column-1 {\n  width: 25%;\n}\n.column-2 {\n  width: 50%;\n}\n.column-3 {\n  width: 75%;\n}\n.column-4 {\n  width: 100%;\n}\n</code></pre><h2 id=\"Mixin-Guards\"><a href=\"#Mixin-Guards\" class=\"headerlink\" title=\"Mixin Guards\"></a>Mixin Guards</h2><p>当您想要匹配表达式而不是简单值或arity时，防护很有用。 如果您熟悉函数式编程，则可能已经遇到过它们。<br>为了尽可能地保持CSS的声明性，Less选择通过受保护的mixins而不是if / else语句实现条件执行，这是@media查询功能规范的一部分。举个例子：</p>\n<pre><code>.mixin(@a) when (lightness(@a) &gt;= 50%) {\n  background-color: black;\n}\n.mixin(@a) when (lightness(@a) &lt; 50%) {\n  background-color: white;\n}\n.mixin(@a) {\n  color: @a;\n}\n</code></pre><p>关键是when关键字，它引入了一个保护序列（这里只有一个保护）。 现在，如果我们运行以下代码：</p>\n<pre><code>.class1 { .mixin(#ddd) }\n.class2 { .mixin(#555) }\n</code></pre><p>将输出如下：</p>\n<pre><code>.class1 {\n  background-color: black;\n  color: #ddd;\n}\n.class2 {\n  background-color: white;\n  color: #555;\n}\n</code></pre><p><strong>比较运算符</strong></p>\n<p>守卫中可用的比较运算符的完整列表是：&gt;，&gt; =，=，= &lt;，&lt;。 此外，关键字true是唯一的truthy值，使这两个mixin等效：</p>\n<pre><code>.truth(@a) when (@a) { ... }\n.truth(@a) when (@a = true) { ... }\n</code></pre><p>除关键字true之外的任何值都认为是false：</p>\n<pre><code>.class {\n  .truth(40); // Will not match any of the above definitions.\n}\n</code></pre><p>请注意，您还可以相互比较参数，或使用非参数：</p>\n<pre><code>@media: mobile;\n\n.mixin(@a) when (@media = mobile) { ... }\n.mixin(@a) when (@media = desktop) { ... }\n\n.max(@a; @b) when (@a &gt; @b) { width: @a }\n.max(@a; @b) when (@a &lt; @b) { width: @b }\n</code></pre><p><strong>逻辑运算符</strong></p>\n<p>您可以将逻辑运算符与守卫一起使用，语法基于CSS媒体查询。<br>使用and关键字组合守卫：</p>\n<pre><code>.mixin(@a) when (isnumber(@a)) and (@a &gt; 0) { ... }\n</code></pre><p>您可以通过用逗号分隔守卫来模拟或运算符：</p>\n<pre><code>.mixin(@a) when (@a &gt; 10), (@a &lt; -10) { ... }\n</code></pre><p>使用not关键字否定条件：</p>\n<pre><code>.mixin(@b) when not (@b &gt; 0) { ... }\n</code></pre><p><strong>类型检查方法</strong></p>\n<p>最后，如果要根据值类型匹配mixins，可以使用is函数：</p>\n<pre><code>.mixin(@a; @b: 0) when (isnumber(@b)) { ... }\n.mixin(@a; @b: black) when (iscolor(@b)) { ... }\n</code></pre><p>常用的方法：</p>\n<ul>\n<li>iscolor</li>\n<li>isnumber</li>\n<li>isstring</li>\n<li>iskeyword</li>\n<li>isurl</li>\n</ul>\n<p>如果您想检查某个值是否在某个特定单位中而不是数字，您可以使用以下方法之一：</p>\n<ul>\n<li>ispixel</li>\n<li>ispercentage</li>\n<li>isem</li>\n<li>isunit</li>\n</ul>\n<h2 id=\"Mixins别名\"><a href=\"#Mixins别名\" class=\"headerlink\" title=\"Mixins别名\"></a>Mixins别名</h2><blockquote>\n<p>Released v3.5.0-beta.4</p>\n</blockquote>\n<p><strong>将mixin调用分配给变量</strong></p>\n<p>可以将Mixins分配给变量以作为变量调用来调用，或者可以将其用于映射查找。</p>\n<pre><code>#theme.dark.navbar {\n  .colors(light) {\n    primary: purple;\n  }\n  .colors(dark) {\n    primary: black;\n    secondary: grey;\n  }\n}\n\n.navbar {\n  @colors: #theme.dark.navbar.colors(dark);\n  background: @colors[primary];\n  border: 1px solid @colors[secondary];\n}\n\noutput:\n\n.navbar {\n  background: black;\n  border: 1px solid grey;\n}\n</code></pre><p><strong>可变调用</strong></p>\n<p>整个mixin调用可以是别名并称为变量调用。 如：</p>\n<pre><code>#library() {\n  .rules() {\n    background: green;\n  }\n}\n.box {\n  @alias: #library.rules();\n  @alias();\n}\n</code></pre><p>输出</p>\n<pre><code>.box {\n  background: green;\n}\n</code></pre><p>注意，与root中使用的mixin不同，mixin调用分配给变量并且不带参数调用<strong>总是需要括号</strong>。 以下内容无效。</p>\n<pre><code>#library() {\n  .rules() {\n    background: green;\n  }\n}\n.box {\n  @alias: #library.colors;\n  @alias;   // ERROR: Could not evaluate variable call @alias\n}\n</code></pre><p>这是因为如果变量被分配了选择器列表或mixin调用，则它是不明确的。 例如，在Less 3.5+中，此变量可以这种方式使用。</p>\n<pre><code>.box {\n  @alias: #library.colors;\n  @{alias} {\n    a: b;\n  }\n}\n</code></pre><p>输出结果：</p>\n<pre><code>.box #library.colors {\n  a: b;\n}\n</code></pre><h1 id=\"CSS守卫\"><a href=\"#CSS守卫\" class=\"headerlink\" title=\"CSS守卫\"></a>CSS守卫</h1><blockquote>\n<p>released v1.5.0</p>\n</blockquote>\n<p>像Mixin Guards一样，守卫也可以应用于css选择器，这是用于声明mixin然后立即调用它的语法糖。<br>举个例子，在1.5.0之前你必须这样做：</p>\n<pre><code>.my-optional-style() when (@my-option = true) {\n  button {\n    color: white;\n  }\n}\n.my-optional-style();\n</code></pre><p>现在，你可以直接加在选择器上：</p>\n<pre><code>button when (@my-option = true) {\n  color: white;\n}\n</code></pre><p>您还可以通过将此功能与＆功能相结合来实现if类型语句，从而允许您对多个守卫进行分组。</p>\n<pre><code>&amp; when (@my-option = true) {\n  button {\n    color: white;\n  }\n  a {\n    color: blue;\n  }\n}\n</code></pre><h1 id=\"分离的规则集\"><a href=\"#分离的规则集\" class=\"headerlink\" title=\"分离的规则集\"></a>分离的规则集</h1><p>将整个css规则集当作变量使用</p>\n<blockquote>\n<p>发布v1.7.0</p>\n</blockquote>\n<p>分离的规则集是一组css属性/嵌套规则集/媒体声明或存储在变量中的任何其他内容。 您可以将其包含在规则集或其他结构中，并将其所有属性复制到那里。 您也可以将它用作mixin参数变量进行传递。</p>\n<pre><code>@detached-ruleset: { background: red; }; // semi-colon is optional in 3.5.0+\n\n// use detached ruleset\n.top {\n    @detached-ruleset();\n}\n</code></pre><p>输出</p>\n<pre><code>.top {\n  background: red;\n}\n</code></pre><p>分离的规则集调用后的括号是必需的，调用@ detached-ruleset; 是不行的。</p>\n<p>当您想要定义一个在媒体查询中或者从不支持的浏览器类名中抽象出来的mixin时，它非常有用，例如，</p>\n<pre><code>.desktop-and-old-ie(@rules) {\n  @media screen and (min-width: 1200px) { @rules(); }\n  html.lt-ie9 &amp;                         { @rules(); }\n}\n\nheader {\n  background-color: blue;\n\n  .desktop-and-old-ie({\n    background-color: red;\n  });\n}\n</code></pre><p>这里的desktop-and-old-ie定义了媒体查询和根类，以便您可以使用mixin来包装一段代码。 这将输出</p>\n<pre><code>header {\n  background-color: blue;\n}\n@media screen and (min-width: 1200px) {\n  header {\n    background-color: red;\n  }\n}\nhtml.lt-ie9 header {\n  background-color: red;\n}\n</code></pre><p>此外，还可以带代表完整的Less规则集，例如，</p>\n<pre><code>@my-ruleset: {\n    .my-selector {\n      background-color: black;\n    }\n};\n</code></pre><p>甚至可以利用媒体查询冒泡</p>\n<pre><code>@my-ruleset: {\n    .my-selector {\n      @media tv {\n        background-color: black;\n      }\n    }\n};\n@media (orientation:portrait) {\n    @my-ruleset();\n}\n\n//output\n@media (orientation: portrait) and tv {\n  .my-selector {\n    background-color: black;\n  }\n}\n</code></pre><p>分离规则集的调用以与mixin调用相同的方式解锁（返回）其所有mixin到调用者，但是，它不返回变量。</p>\n<pre><code>// detached ruleset with a mixin\n@detached-ruleset: {\n    .mixin() {\n        color:blue;\n    }\n};\n// call detached ruleset\n.caller {\n    @detached-ruleset();\n    .mixin();\n}\n</code></pre><p>输出</p>\n<pre><code>.caller {\n  color: blue;\n}\n</code></pre><p>私有变量：</p>\n<pre><code>@detached-ruleset: {\n    @color:blue; // this variable is private\n};\n.caller {\n    color: @color; // syntax error\n}\n</code></pre><h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>分离的规则集可访问变量和mixin的范围，包括定义它的位子以及调用它的位置。如果两个范围包含相同的变量或mixin，则声明范围值优先。<br>声明范围是定义分离规则集主体的范围。 规则集仅通过引用访问，将分离的规则集从一个变量复制到另一个变量而不能修改其范围。<br>最后，分离的规则集可以通过解锁（导入）到范围来获得对范围的访问。</p>\n<p><strong>定义范围可见性</strong></p>\n<p>分离的规则集可以看到调用者的变量和mixins：</p>\n<pre><code>@detached-ruleset: {\n  caller-variable: @caller-variable; // variable is undefined here\n  .caller-mixin(); // mixin is undefined here\n};\n\nselector {\n  // use detached ruleset\n  @detached-ruleset();\n\n  // define variable and mixin needed inside the detached ruleset\n  @caller-variable: value;\n  .caller-mixin() {\n    variable: declaration;\n  }\n}\n</code></pre><p>编译输出：</p>\n<pre><code>selector {\n  caller-variable: value;\n  variable: declaration;\n}\n</code></pre><p>变量和mixins可访问的同名变量定义胜过调用者中可用的那些：</p>\n<pre><code>@variable: global;\n@detached-ruleset: {\n  variable: @variable;\n};\n\nselector {\n  @detached-ruleset();\n  @variable: value;\n}\n</code></pre><p>编译输出</p>\n<pre><code>selector {\n  variable: global;\n}\n</code></pre><p><strong>引用不会修改分离的规则集范围</strong></p>\n<p>规则集仅通过在那里引用而无法访问新范围：</p>\n<pre><code>@detached-1: { scope-detached: @one @two; };\n.one {\n  @one: visible;\n  .two {\n    @detached-2: @detached-1; // copying/renaming ruleset\n    @two: visible; // ruleset can not see this variable\n  }\n}\n\n.use-place {\n  .one &gt; .two();\n  @detached-2();\n}\n</code></pre><p>throws an error:<br><em>ERROR 1:32 The variable “@one” was not declared.</em></p>\n<p><strong>解锁将修改分离的规则集范围</strong></p>\n<p>分离的规则集通过在作用域内解锁（导入）来获得访问权限：</p>\n<pre><code>#space {\n  .importer-1() {\n    @detached: { scope-detached: @variable; }; // define detached ruleset\n  }\n}\n\n.importer-2() {\n  @variable: value; // unlocked detached ruleset CAN see this variable\n  #space &gt; .importer-1(); // unlock/import detached ruleset\n}\n\n.use-place {\n  .importer-2(); // unlock/import detached ruleset second time\n   @detached();\n}\n\ncompiles into:\n\n.use-place {\n  scope-detached: value;\n}\n</code></pre>"},{"title":"Rxjs-操作符","date":"2017-12-27T14:47:10.000Z","comments":1,"_content":"\n操作符是 Observable 类型上的方法，比如map(...)、.filter(...)、.merge(...)，等等。当操作符被调用时，它们不会改变已经存在的 Observable 实例。相反，它们返回一个新的 Observable ，它的 subscription 逻辑基于第一个 Observable\n<!--more-->\n\n> 操作符是函数，它基于当前的 Observable 创建一个新的 Observable。这是一个无副作用的操作：前面的 Observable 保持不变。\n\n操作符本质上是一个纯函数 (pure function)，它接收一个 Observable 作为输入，并生成一个新的 Observable 作为输出。订阅输出 Observalbe 同样会订阅输入 Observable\n创建一个自定义操作符函数，它将从输入 Observable 接收的每个值都乘以10：\n\n    function multiplyByTen(input) {\n      var output = Rx.Observable.create(function subscribe(observer) {\n        input.subscribe({\n          next: (v) => observer.next(10 * v),\n          error: (err) => observer.error(err),\n          complete: () => observer.complete()\n        });\n      });\n      return output;\n    }\n\n    var input = Rx.Observable.from([1, 2, 3, 4]);\n    var output = multiplyByTen(input);\n    output.subscribe(x => console.log(x));\n\n输出：\n\n    10\n    20\n    30\n    40\n\n### 操作符分类\n\n**实例操作符**\n通常提到操作符时，我们指的是实例操作符，它是 Observable 实例上的方法。举例来说，如果上面的 multiplyByTen 是官方提供的实例操作符，它看起来大致是这个样子的：\n\n    Rx.Observable.prototype.multiplyByTen = function multiplyByTen() {\n      var input = this;\n      return Rx.Observable.create(function subscribe(observer) {\n        input.subscribe({\n          next: (v) => observer.next(10 * v),\n          error: (err) => observer.error(err),\n          complete: () => observer.complete()\n        });\n      });\n    }\n\n实例运算符是使用 this 关键字来指代输入的 Observable 的函数。\n注意，这里的 input Observable 不再是一个函数参数，它现在是 this 对象。下面是我们如何使用这样的实例运算符：\n\n    var observable = Rx.Observable.from([1, 2, 3, 4])\n                                  .multiplyByTen();\n                                  .subscribe(x => console.log(x));\n\n**静态操作符**\n除了实例操作符，还有静态操作符，它们是直接附加到 Observable 类上的。静态操作符在内部不使用 this 关键字，而是完全依赖于它的参数。比如：forkJoin\n\n    var obj1 = Rx.Observable.from([1,2.3]);\n    var obj2 = Rx.Observable.of(4,5,6);\n\n    Rx.Observable.forkJoin(obj1,obj2),subscribe(data => {\n        var obj1 = data[0];\n        var obj2 = data[1];\n    });\n\n### 常用操作符\n\nObservable的操作符很多，详细可参考官网：[Rxjs-opertors](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html)，里面有一节叫“选择操作符”很有用，指导你选择需要的操作符\n\n##### 1)  创建\ncreate，empty，from，fromEvent，fromEventPattern，fromPromise，generate，interval，never，of，repeat，range，throw，timer等\n\n    //每隔1秒发出自增的数字，3秒后开始发送。\n    var numbers = Rx.Observable.timer(3000, 1000);\n    numbers.subscribe(x => console.log(x));\n\n    //先发出数字7，然后发出错误通知。\n    var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n    result\n        .subscribe(res => console.log(res))\n        .catch(Rx.Observable.throw(errot.msg));\n\n    //发出从1开始，长度为10的数字\n    var numbers = Rx.Observable.range(1, 10);\n\n    //每1秒发出一个自增数\n    var numbers = Rx.Observable.interval(1000);\n\n#### 2)  转换\n**map**\nmap(function),根据条件函数对每个源方式值进行数据处理，输出到输出Observable\n*a.数据序列二次处理*\n\n    import { Observable} from 'rxjs/Observable';\n    import 'rxjs/add/operator/map'\n\n    let list = Observable.of(1,2,3);\n    list.map(x => x*10 + '$').subscribe(res => console.log(res));\n    //输出\n    10$ -> 20$ -> 30$\n\n*b.对象结构体属性处理*\n\n    let obj1 = {name:'jack',age:16,sex:'man'};\n    let obj2 = {name:'licy',age:18,sex:'woman'};\n    Observable.of(obj1,obj2)\n        .map(x => x.name+'@'+x.age)\n        .subscribe(res => console.log(res));\n    //输出\n    jack@16 -> licy@18\n\n**mapTo**\nmapTo(value: any)，每次源 Observble 发出值时，都在输出 Observable 上发出给定的常量值\n\n    var timer1 = Observable.of(2,3,6);\n    this.subject =  timer1.mapTo(88).subscribe(v => {this.valueList.push(v);});\n    //输出： 88  88  88\n\n**pluck**\npluck(string..),根据key提取源Observable每个发射对象的属性值，输出新Observable\n\n    let obj1 = {name:{firstName:'li',secondName:'jack'},age:16,sex:'man'};\n    let obj2 = {name:{firstName:'yang',secondName:'lucy'},age:18,sex:'woman'};\n    Observable.of(obj1,obj2)\n        .pluck('age')\n        .subscribe(res => console.log(res));\n    //输出\n    16 -> 18\n\n    Observable.of(obj1,obj2)\n        .pluck('name','firstName')\n        .subscribe(res => console.log(res));\n    //输出\n    li -> yang\n\n**pairwise**\n将当前值和前一个值作为数组放在一起，然后将其发出,[(N-1)th, Nth]\n\n    var timer1 = Observable.of(1,2,3,4,5,6);\n    this.subject =  timer1.pairwise().subscribe(v => {this.valueList.push(v);});\n    //输出: 1,2  2,3  3,4  4,5  5,6\n\n**partition**\npartition(function),将源 Observable 一分为二,输出两个Observables ： 一个像 filter 的输出， 而另一个是所有不符合条件的值\n\n    var timer1 = Observable.of(1,2,3,4,5,6);\n    var parts = timer1.partition(x => x%2 == 0);\n    var oushu = parts[0];\n    this.subject =  oushu.subscribe(v => {this.valueList.push(v);});\n    //满足条件的：2 6 8\n    var qishu = parts[1];\n    this.subject =  qishu.subscribe(v => {this.valueList.push(v);});\n    //不满足条件的：1 3 5\n\n**scan**\nscan(function),对源 Observable 使用累加器函数， 返回生成的中间值， 可选的初始值;给定初始值，计算值作为前一个值于数组元素进行计算\n\n    var timer1 = Observable.of(1,3,5);\n    this.subject =  timer1.scan((x,y) => x * y, 2).subscribe(v => {this.valueList.push(v);});\n\n    //输出： 2     6     30\n           2*1   2×3    6×5\n\n**groupBy**\n根据指定条件将源 Observable 发出的值进行分组，并将这些分组作为 GroupedObservables 发出，每一个分组都是一个 GroupedObservable\n\n     通过 id 分组并返回数组\n\n    Observable.of<Obj>({id: 1, name: 'aze1'},\n                       {id: 2, name: 'sf2'},\n                       {id: 2, name: 'dg2'},\n                       {id: 1, name: 'erg1'},\n                       {id: 1, name: 'df1'},\n                       {id: 2, name: 'sfqfb2'},\n                       {id: 3, name: 'qfs3'},\n                       {id: 2, name: 'qsgqsfg2'}\n        )\n        .groupBy(p => p.id)\n        .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n        .subscribe(p => console.log(p));\n\n    // 显示：\n    // [ { id: 1, name: 'aze1' },\n    //   { id: 1, name: 'erg1' },\n    //   { id: 1, name: 'df1' } ]\n    //\n    // [ { id: 2, name: 'sf2' },\n    //   { id: 2, name: 'dg2' },\n    //   { id: 2, name: 'sfqfb2' },\n    //   { id: 2, name: 'qsgqsfg2' } ]\n    //\n    // [ { id: 3, name: 'qfs3' } ]\n\n**concat**\nconcat(Observable,..),创建一个输出 Observable，它在当前 Observable 之后顺序地发出每个给定的输入 Observable 中的所有值;顺序地发出多个 Observables 的值将它们连接起来，一个接一个的\n\n    let obj1 = Observable.of(6,7,8);\n    let obj2 = Observable.of(1,2,3);\n    this.subject = obj1.concat(obj2)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出：6 7 8 1 2 3\n\n**concatAll**\n通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable;通过一个接一个的连接内部 Observable ，将高阶 Observable 打平\n\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n    var firstOrder = higherOrder.concatAll()\n                                .subscribe(x => console.log(x));\n    //顺序串行输出，于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n\n**concatMap**\n*concatMap = concatAll + map*\n将每个值映射为Observable, 然后使用concatAll将所有的内部Observables打平,顺序合并到输出 Observable,以串行的方式等待前一个完成再合并下一个Observable\n\n    var obj = Observable.of(1,6,10);\n    obj.concatMap(v => Observable.range(v,3))\n        .subscribe(x => console.log(x);\n    //输出：1,2,3  6,7,8  10,11,12\n\n    var obj2 = Observable.of(10,10,10);\n    obj.concatMap(v => obj2.map(y => y*v))\n        .subscribe(x => console.log(x);\n    //输出：10,10,10  60,60,60  100,100,100\n\n**concatMapTo**\n*concatMapTo = concat + mapTo*\nconcatMapTo(obj),将源对象每个值映射成常对象，然后打平和顺序合并到输出 Observable\n\n    var obj = Observable.of(1,6,10);\n    obj.concatMapTo(Observable.of('a','b','c'))\n        .subscribe(x => console.log(x);\n    //输出：a,b,c  a,b,c  a,b,c\n\n**merge**\n创建一个输出Observable，通过把多个 Observables 的值按照时间混合到一个 Observable中来将其打平,混合的顺序没有明确规律\nmerge(Observables,number)其中number为可同时订阅的输入 Observables 的最大数量\n\n    var timer1 = Rx.Observable.interval(1000).take(10);\n    var timer2 = Rx.Observable.interval(2000).take(6);\n    var timer3 = Rx.Observable.interval(500).take(10);\n    timer1.merge(timer2, timer3, 2).subscribe(x => console.log(x));\n\n**mergeAll**\nmergeAll(number),打平高阶 Observable，将高阶 Observable 转换成一阶 Observable ，一阶 Observable 会同时发出在内部 Observables 上发出的所有值\n\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n    higherOrder.mergeAll(2).subscribe(x => console.log(x));\n\n**mergeMap**\n*mergeMap = mergeAll + map*\n效果同concatMap，只是mergeMap不是顺序合并，而是：\n\n- 同步数据时，按发射时间输出\n- 异步数据时，无规律输出\n\n**mergeMapTo**\n*mergeMapTo = merge + mapTo*\n效果与concatMapTo类似，,将源对象每个值映射成常对象，然后合并到输出，无特定顺序\n\n**switch**\n通过只订阅最新发出的内部 Observable ，将高阶 Observable 转换成一阶 Observable;\n当发出一个新的内部 Observable 时， switch 会从先前发送的内部 Observable 那取消订阅，然后订阅新的内部 Observable 并开始发出它的值\n\n    // 结果是 `switched` 本质上是一个每次点击时会重新启动的计时器。\n    // 之前点击产生的 interval Observables 不会与当前的合并。\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n    higherOrder.switch().subscribe(x => console.log(x));\n\n**switchMap**\n*switchMap = switch + map*\n将每个源值投射成 Observable，该 Observable 会合并到输出 Observable 中， 并且只发出最新投射的 Observable 中的值\n\n    //还是上面的例子，只是将switch，map换成switchMap\n\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    higherOrder.switchMap(v => Observable.interval(1000))\n                .subscribe(x => console.log(x));\n\n**switchMapTo**\n*switchMapTo = switch + mapTo*\n效果与concatMapTo类似\n\n#### 3)  过滤\n**filter**\nfilter(function..),通过只发送源 Observable 的中满足指定 predicate 函数的项来进行过滤\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.filter(x => x%2 == 0)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 2 4 6 8 ...\n\n**take**\ntake(N),只发出源 Observable 最初发出的的N个值\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.take(5)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 3 4\n\n**takeLast**\ntakeLast(N),只发出源 Observable 最后发出的的N个值,只有当它完成时发出这些值;\n> 此操作符必须等待源Observable 的complete 通知发送才能在输出 Observable 上发出 next值,所以一般应用于有限序列\n\n    let obj = Observable.range(1,10);\n    this.subject = obj.takeLast(2)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    9 10\n\n**takeWhile**\ntakeWhile(function),发出在源 Observable 中满足 predicate 函数的每个值，并且一旦出现不满足 predicate 的值就立即完成\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.takeWhile(x => x < 6)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 3 4 5\n\n**distinct**\ndistinct(keySelector: function, flushes: Observable),入参可选，去重\n\n    let obj = Observable.of(0,1,2,7,0,7,6,2);\n    this.subject = obj.distinct()\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 7 6\n\n    this.subject = Observable.of<any>({ age: 4, name: 'Foo'},\n                                      { age: 7, name: 'Bar'},\n                                      { age: 5, name: 'Foo'})\n                            .distinct((p: Person) => p.name)\n                            .subscribe(x => console.log(x));\n    //输出\n    { age: 4, name: 'Foo'} -> { age: 7, name: 'Bar'}\n\n**distinctUntilChanged**\ndistinctUntilChanged(keySelector: function),入参可选，它发出源 Observable 发出的所有与前几项不相同的\n\n    let obj = Observable.of(0,1,1,1,2,7,7,6,6);\n    this.subject = obj.distinctUntilChanged()\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 7 6\n\n    this.subject = Observable.of<any>({ age: 4, name: 'Foo'},\n                                      { age: 7, name: 'Bar'},\n                                      { age: 5, name: 'Foo'},\n                                      { age: 4, name: 'Foo'},,\n                                      { age: 4, name: 'Fool'},)\n                          .distinctUntilChanged((p,q) => p.name == q.name)\n                          .subscribe(x => console.log(x));\n    //输出\n    { age: 4, name: 'Foo'} -> { age: 7, name: 'Bar'} -> { age: 5, name: 'Foo'} -> { age: 4, name: 'Fool'}\n\n**debounceTime**\ndebounceTime(dueTime: number, scheduler: Scheduler),只有在特定的一段时间经过后并且没有发出另一个源值，才从源 Observable 中发出一个值\n> debounceTime 延时发送源 Observable 发送的值,但是会丢弃正在排队的发送如果源 Observable 又发出新值,可以用于搜索框实现\n\n    let obj = Observable.interval(2000);\n    this.subject = obj.debounceTime(1000)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 3 4 ...\n\n**debounce**\ndebounce(durationSelector: function(value: T)),只有在另一个 Observable 决定的一段特定时间经过后并且没有发出另一个源值之后，才从源 Observable 中发出一个值,但是静默时间段由第二个 Observable 决定\n这个操作符会追踪源 Observable 的最新值, 并通过调用 durationSelector 函数来生产 duration Observable。只有当 duration Observable 发出值或完成时，才会发出值，如果源 Observable 上没有发 出其他值，那么 duration Observable 就会产生\n\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    var result = clicks.debounce(() => Rx.Observable.interval(1000));\n    result.subscribe(x => console.log(x));\n\n**throttleTime**\n从源 Observable 中发出一个值，然后在 duration 毫秒内忽略随后发出的源值， 然后重复此过程\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.throttleTime(5000)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 5 10 15 ...\n\n**throttle**\n从源 Observable 中发出一个值，然后在由另一个 Observable 决定的期间内忽略 随后发出的源值，然后重复此过程\n> 像throttleTime，但是沉默持续时间是由 第二个 Observable 决定的\n\n**first**\nfirst(predicate: function, resultSelector: function),只发出由源 Observable 所发出的值中第一个(或第一个满足条件的值)\npredicate: 可选函数，用于测试是否符合条件\nresultSelector(value: T, index: number):基于源 Observable 的值和索引来生成输出 Observable 的值\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.first()\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出 0\n    this.subject = obj.first(x => x!== 0 && x%5 == 0)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出 5\n    this.subject = obj.first((x) => {return x!== 0 && x%5 == 0;},(value,index) => {return value*10;})\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出 50\n\n**last**\nlast(predicate: function),只发出由源 Observable 所发出的值中最后一个(或最胡=后一个满足条件的值)，用法同first\n\n**skipLast**\nskipLast(count: number),跳过源 Observable 最后发出的的N个值\n\n#### 4)  组合\n**zip**\nzip(observable,observable,..),将多个 Observable 组合以创建一个，该 Observable的值是由所有输入 Observables 的值按顺序计算而来的\n如果最后一个参数是函数, 这个函数被用来计算最终发出的值.否则, 返回一个顺序包含所有输入值的数组\n\n    let obj1 = Observable.of<number>(12,13,14);\n    let obj2 = Observable.of<string>('AA','BB','CC');\n\n    this.subject = Observable.zip(obj1,obj2)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    [12,'AA'] -> [13,'BB'] -> [13,'CC']\n\n    this.subject = Observable.zip(obj1,obj2,(a,b) => {return a+'@'+b})\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    12@AA -> 13@BB -> 13@CC\n\n**forkJoin**\nforkJoin(Observable,Observable,...),等待源对象都完成后才输出目标Observable\n\n    let obj1 = Observable.of<number>(12,13,14);\n    let obj2 = Observable.of<string>('AA','BB','CC');\n\n    this.subject = Observable.forkJoin(obj1,obj2)\n                    .subscribe(data => {this.valueList.push(data);});\n    //输出：data[0] = obj1;data[2] = obj2;\n\n**combineLatest**\ncombineLatest(Observables,function),组合多个 Observables 来创建一个 Observable ，该 Observable 的值根据每个输入 Observable 的最新值计算得出的其中：\n- Observables是将要和源 Observable结合的输入Observable，\n- function是可选的投射函数，将输出 Observable 返回的值投射为要发出的新的值\n\n例子：\n\n    var timer1 = Observable.interval(1000).take(3);\n    var timer3 = Observable.interval(600).take(5);\n    this.subject = timer1. combineLatest(timer3).subscribe(v => {this.valueList.push(v);});\n\n    timer1     0         1          2\n    timer3   0    1     2     3     4\n    输出：0,0  0,1  0,2  1,2  1,3  2,3  2,4\n\n    this.subject = timer1. combineLatest(timer3,(x,y) => x*10 + y).subscribe(v => {this.valueList.push(v);});\n    输出：0  1  2  12  13  23  24\n\n**startWith**\nstartWith(s),返回的 Observable 会先发出s项，然后再发出由源 Observable 所发出的项\n> 源Observable的数据类型必须和入参s类型一致\n\n    var timer1 = Observable.of('a','b','c');\n    this.subject = timer1.startWith('fff').subscribe(v => {this.valueList.push(v);});\n    输出：fff  a  b  c\n    var timer1 = Observable.of(1,2,3);\n    this.subject = timer1.startWith(999).subscribe(v => {this.valueList.push(v);});\n    输出：999  1  2  3\n\n\n#### 5)  多播\n**multicast**\n\n**publish**\n\n\n#### 6)  错误处理\n**catch**\ncatch(selector: function),捕获 observable 中的错误，可以通过返回一个新的 observable 或者抛出错误对象来处理\n\n    Observable.of(1, 2, 3, 4, 5).map(n => {\n                                        if (n == 4) {\n                                          throw 'four!';\n                                        }\n                                        return n;\n                              })\n                              .catch(err => {\n                                throw 'error in source. Details: ' + err;\n                              })\n                              .subscribe(\n                                x => console.log(x),\n                                err => console.log(err)\n                              );\n    //输出：1, 2, 3, error in source. Details: four!\n\n**retry**\nretry(count: number)，返回一个 Observable， 该 Observable 是源 Observable 不包含错误异常的镜像。 如果源 Observable 发生错误, 这个方法不会传播错误而是会不 断的重新订阅源 Observable 直到达到最大重试次数：count\n\n#### 7)  条件\n**delay**\ndelay(number|Date),通过给定的超时或者直到一个给定的日期来延迟源 Observable 的发送\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.delay(5000)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出不变，只是延时5s发射\n    this.subject = obj.delay(ew Date('March 15, 2020 12:00:00'))\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出不变，直到设定的事件日期时才发射\n\n**delayWhen**\ndelayWhen(delayDurationSelector: function(value: T): Observable, subscriptionDelay: Observable),在给定的时间范围内，延迟源 Observable 所有数据项的发送，该时间段由另一个 Observable 的发送决定,延时的时间间隔由第二个Observable决定\n\n**do**\n给定一些 Observer 的回调函数， 将当前 Notification 所表示的值正确的传递给相应的回调函数\n\n    var value = 0;\n    Observable.of(1,2,3).do(x => value += x;}).subscribe();\n    //value = 6\n    Observable.of(1,2,3).do(x => console.log(x)}).subscribe();\n\n**toArray**\n输出数组\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.toArray()\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 [1,2,3,4,5,6,7,8]\n\n**toPromise**\n将 Observable 序列转换为符合 ES2015 标准的 Promise\n\n    Rx.Observable.toPromise()\n                 .then((value) => console.log('Value: %s', value))\n                 .catch((err) => console.log('Error: %s', err));\n\n#### 工具\n**defaultIfEmpty**\ndefaultIfEmpty(defaultValue: any)，如果源 Observable 在完成之前没有发出任何 next 值，则发出给定的值，否则返回 Observable 的镜像\n\n**every**\nevery(predicate: function),发出是否源 Observable 的每项都满足指定的条件,是则返回true,否则false\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.every(x => x < 8)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 false\n    this.subject = obj.every(x => x < 10)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 true\n\n**find**\nfind(predicate: function(value: T, index: number, source: Observable<T>),只发出源 Observable 所发出的值中第一个满足条件的值\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.find(x => x%4 == 0)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 4\n\n**findIndex**\n同find,发出源 Observable 所发出的值中第一个满足条件的值的索引\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.findIndex(x => x%4 == 0)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 3\n\n**isEmpty**\nisEmpty(),如果源 Observable 是空的话，它返回一个发出 true 的 Observable，否则发出 false\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.isEmpty()\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 false\n\n#### 数学\n**count**\ncount(predicate: function),发出源值的个数或满足函数条件的值个数\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.count()\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出：8\n    this.subject = obj.count(x => x%2 == 0)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出：4\n\n**max**\nmax(comparer: Function),当源 Observable 完成时它发出单一项：最大值的项\n\n    Observable.of(5, 4, 7, 2, 8)\n      .max()\n      .subscribe(x => console.log(x));\n    //输出： 8\n    Observable.of<any>({age: 7, name: 'Foo'},\n                          {age: 5, name: 'Bar'},\n                          {age: 9, name: 'Beer'})\n              .max<any>((a: any, b: any) => a.age < b.age ? -1 : 1)\n              .subscribe(x => console.log(x.name+'@'+x.age));\n    //输出：Beer@9\n\n**min**\nmin(comparer: Function),当源 Observable 完成时它发出单一项：最小值的项\n\n    Observable.of<any>({age: 7, name: 'Foo'},\n                          {age: 5, name: 'Bar'},\n                          {age: 9, name: 'Beer'})\n              .min<any>( (a: any, b: any) => a.age < b.age ? -1 : 1)\n              .subscribe(x => console.log(x.name+'@'+x.age));\n              //输出：Bar@5\n\n**reduce**\nreduce(accumulator: function, seed),在源 Observalbe 上应用 accumulator (累加器) 函数，然后当源 Observable 完成时，返回 累加的结果，可以提供一个可选的 seed初始值\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.reduce((x,y) => x+y,0)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出：36\n\n\n","source":"_posts/2017-12-27-rxjs-operators.md","raw":"---\ntitle: Rxjs-操作符\ndate: 2017-12-27 22:47:10\ntags: rxjs\ncategories: 前端\ncomments: true\n---\n\n操作符是 Observable 类型上的方法，比如map(...)、.filter(...)、.merge(...)，等等。当操作符被调用时，它们不会改变已经存在的 Observable 实例。相反，它们返回一个新的 Observable ，它的 subscription 逻辑基于第一个 Observable\n<!--more-->\n\n> 操作符是函数，它基于当前的 Observable 创建一个新的 Observable。这是一个无副作用的操作：前面的 Observable 保持不变。\n\n操作符本质上是一个纯函数 (pure function)，它接收一个 Observable 作为输入，并生成一个新的 Observable 作为输出。订阅输出 Observalbe 同样会订阅输入 Observable\n创建一个自定义操作符函数，它将从输入 Observable 接收的每个值都乘以10：\n\n    function multiplyByTen(input) {\n      var output = Rx.Observable.create(function subscribe(observer) {\n        input.subscribe({\n          next: (v) => observer.next(10 * v),\n          error: (err) => observer.error(err),\n          complete: () => observer.complete()\n        });\n      });\n      return output;\n    }\n\n    var input = Rx.Observable.from([1, 2, 3, 4]);\n    var output = multiplyByTen(input);\n    output.subscribe(x => console.log(x));\n\n输出：\n\n    10\n    20\n    30\n    40\n\n### 操作符分类\n\n**实例操作符**\n通常提到操作符时，我们指的是实例操作符，它是 Observable 实例上的方法。举例来说，如果上面的 multiplyByTen 是官方提供的实例操作符，它看起来大致是这个样子的：\n\n    Rx.Observable.prototype.multiplyByTen = function multiplyByTen() {\n      var input = this;\n      return Rx.Observable.create(function subscribe(observer) {\n        input.subscribe({\n          next: (v) => observer.next(10 * v),\n          error: (err) => observer.error(err),\n          complete: () => observer.complete()\n        });\n      });\n    }\n\n实例运算符是使用 this 关键字来指代输入的 Observable 的函数。\n注意，这里的 input Observable 不再是一个函数参数，它现在是 this 对象。下面是我们如何使用这样的实例运算符：\n\n    var observable = Rx.Observable.from([1, 2, 3, 4])\n                                  .multiplyByTen();\n                                  .subscribe(x => console.log(x));\n\n**静态操作符**\n除了实例操作符，还有静态操作符，它们是直接附加到 Observable 类上的。静态操作符在内部不使用 this 关键字，而是完全依赖于它的参数。比如：forkJoin\n\n    var obj1 = Rx.Observable.from([1,2.3]);\n    var obj2 = Rx.Observable.of(4,5,6);\n\n    Rx.Observable.forkJoin(obj1,obj2),subscribe(data => {\n        var obj1 = data[0];\n        var obj2 = data[1];\n    });\n\n### 常用操作符\n\nObservable的操作符很多，详细可参考官网：[Rxjs-opertors](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html)，里面有一节叫“选择操作符”很有用，指导你选择需要的操作符\n\n##### 1)  创建\ncreate，empty，from，fromEvent，fromEventPattern，fromPromise，generate，interval，never，of，repeat，range，throw，timer等\n\n    //每隔1秒发出自增的数字，3秒后开始发送。\n    var numbers = Rx.Observable.timer(3000, 1000);\n    numbers.subscribe(x => console.log(x));\n\n    //先发出数字7，然后发出错误通知。\n    var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n    result\n        .subscribe(res => console.log(res))\n        .catch(Rx.Observable.throw(errot.msg));\n\n    //发出从1开始，长度为10的数字\n    var numbers = Rx.Observable.range(1, 10);\n\n    //每1秒发出一个自增数\n    var numbers = Rx.Observable.interval(1000);\n\n#### 2)  转换\n**map**\nmap(function),根据条件函数对每个源方式值进行数据处理，输出到输出Observable\n*a.数据序列二次处理*\n\n    import { Observable} from 'rxjs/Observable';\n    import 'rxjs/add/operator/map'\n\n    let list = Observable.of(1,2,3);\n    list.map(x => x*10 + '$').subscribe(res => console.log(res));\n    //输出\n    10$ -> 20$ -> 30$\n\n*b.对象结构体属性处理*\n\n    let obj1 = {name:'jack',age:16,sex:'man'};\n    let obj2 = {name:'licy',age:18,sex:'woman'};\n    Observable.of(obj1,obj2)\n        .map(x => x.name+'@'+x.age)\n        .subscribe(res => console.log(res));\n    //输出\n    jack@16 -> licy@18\n\n**mapTo**\nmapTo(value: any)，每次源 Observble 发出值时，都在输出 Observable 上发出给定的常量值\n\n    var timer1 = Observable.of(2,3,6);\n    this.subject =  timer1.mapTo(88).subscribe(v => {this.valueList.push(v);});\n    //输出： 88  88  88\n\n**pluck**\npluck(string..),根据key提取源Observable每个发射对象的属性值，输出新Observable\n\n    let obj1 = {name:{firstName:'li',secondName:'jack'},age:16,sex:'man'};\n    let obj2 = {name:{firstName:'yang',secondName:'lucy'},age:18,sex:'woman'};\n    Observable.of(obj1,obj2)\n        .pluck('age')\n        .subscribe(res => console.log(res));\n    //输出\n    16 -> 18\n\n    Observable.of(obj1,obj2)\n        .pluck('name','firstName')\n        .subscribe(res => console.log(res));\n    //输出\n    li -> yang\n\n**pairwise**\n将当前值和前一个值作为数组放在一起，然后将其发出,[(N-1)th, Nth]\n\n    var timer1 = Observable.of(1,2,3,4,5,6);\n    this.subject =  timer1.pairwise().subscribe(v => {this.valueList.push(v);});\n    //输出: 1,2  2,3  3,4  4,5  5,6\n\n**partition**\npartition(function),将源 Observable 一分为二,输出两个Observables ： 一个像 filter 的输出， 而另一个是所有不符合条件的值\n\n    var timer1 = Observable.of(1,2,3,4,5,6);\n    var parts = timer1.partition(x => x%2 == 0);\n    var oushu = parts[0];\n    this.subject =  oushu.subscribe(v => {this.valueList.push(v);});\n    //满足条件的：2 6 8\n    var qishu = parts[1];\n    this.subject =  qishu.subscribe(v => {this.valueList.push(v);});\n    //不满足条件的：1 3 5\n\n**scan**\nscan(function),对源 Observable 使用累加器函数， 返回生成的中间值， 可选的初始值;给定初始值，计算值作为前一个值于数组元素进行计算\n\n    var timer1 = Observable.of(1,3,5);\n    this.subject =  timer1.scan((x,y) => x * y, 2).subscribe(v => {this.valueList.push(v);});\n\n    //输出： 2     6     30\n           2*1   2×3    6×5\n\n**groupBy**\n根据指定条件将源 Observable 发出的值进行分组，并将这些分组作为 GroupedObservables 发出，每一个分组都是一个 GroupedObservable\n\n     通过 id 分组并返回数组\n\n    Observable.of<Obj>({id: 1, name: 'aze1'},\n                       {id: 2, name: 'sf2'},\n                       {id: 2, name: 'dg2'},\n                       {id: 1, name: 'erg1'},\n                       {id: 1, name: 'df1'},\n                       {id: 2, name: 'sfqfb2'},\n                       {id: 3, name: 'qfs3'},\n                       {id: 2, name: 'qsgqsfg2'}\n        )\n        .groupBy(p => p.id)\n        .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n        .subscribe(p => console.log(p));\n\n    // 显示：\n    // [ { id: 1, name: 'aze1' },\n    //   { id: 1, name: 'erg1' },\n    //   { id: 1, name: 'df1' } ]\n    //\n    // [ { id: 2, name: 'sf2' },\n    //   { id: 2, name: 'dg2' },\n    //   { id: 2, name: 'sfqfb2' },\n    //   { id: 2, name: 'qsgqsfg2' } ]\n    //\n    // [ { id: 3, name: 'qfs3' } ]\n\n**concat**\nconcat(Observable,..),创建一个输出 Observable，它在当前 Observable 之后顺序地发出每个给定的输入 Observable 中的所有值;顺序地发出多个 Observables 的值将它们连接起来，一个接一个的\n\n    let obj1 = Observable.of(6,7,8);\n    let obj2 = Observable.of(1,2,3);\n    this.subject = obj1.concat(obj2)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出：6 7 8 1 2 3\n\n**concatAll**\n通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable;通过一个接一个的连接内部 Observable ，将高阶 Observable 打平\n\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n    var firstOrder = higherOrder.concatAll()\n                                .subscribe(x => console.log(x));\n    //顺序串行输出，于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n\n**concatMap**\n*concatMap = concatAll + map*\n将每个值映射为Observable, 然后使用concatAll将所有的内部Observables打平,顺序合并到输出 Observable,以串行的方式等待前一个完成再合并下一个Observable\n\n    var obj = Observable.of(1,6,10);\n    obj.concatMap(v => Observable.range(v,3))\n        .subscribe(x => console.log(x);\n    //输出：1,2,3  6,7,8  10,11,12\n\n    var obj2 = Observable.of(10,10,10);\n    obj.concatMap(v => obj2.map(y => y*v))\n        .subscribe(x => console.log(x);\n    //输出：10,10,10  60,60,60  100,100,100\n\n**concatMapTo**\n*concatMapTo = concat + mapTo*\nconcatMapTo(obj),将源对象每个值映射成常对象，然后打平和顺序合并到输出 Observable\n\n    var obj = Observable.of(1,6,10);\n    obj.concatMapTo(Observable.of('a','b','c'))\n        .subscribe(x => console.log(x);\n    //输出：a,b,c  a,b,c  a,b,c\n\n**merge**\n创建一个输出Observable，通过把多个 Observables 的值按照时间混合到一个 Observable中来将其打平,混合的顺序没有明确规律\nmerge(Observables,number)其中number为可同时订阅的输入 Observables 的最大数量\n\n    var timer1 = Rx.Observable.interval(1000).take(10);\n    var timer2 = Rx.Observable.interval(2000).take(6);\n    var timer3 = Rx.Observable.interval(500).take(10);\n    timer1.merge(timer2, timer3, 2).subscribe(x => console.log(x));\n\n**mergeAll**\nmergeAll(number),打平高阶 Observable，将高阶 Observable 转换成一阶 Observable ，一阶 Observable 会同时发出在内部 Observables 上发出的所有值\n\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n    higherOrder.mergeAll(2).subscribe(x => console.log(x));\n\n**mergeMap**\n*mergeMap = mergeAll + map*\n效果同concatMap，只是mergeMap不是顺序合并，而是：\n\n- 同步数据时，按发射时间输出\n- 异步数据时，无规律输出\n\n**mergeMapTo**\n*mergeMapTo = merge + mapTo*\n效果与concatMapTo类似，,将源对象每个值映射成常对象，然后合并到输出，无特定顺序\n\n**switch**\n通过只订阅最新发出的内部 Observable ，将高阶 Observable 转换成一阶 Observable;\n当发出一个新的内部 Observable 时， switch 会从先前发送的内部 Observable 那取消订阅，然后订阅新的内部 Observable 并开始发出它的值\n\n    // 结果是 `switched` 本质上是一个每次点击时会重新启动的计时器。\n    // 之前点击产生的 interval Observables 不会与当前的合并。\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n    higherOrder.switch().subscribe(x => console.log(x));\n\n**switchMap**\n*switchMap = switch + map*\n将每个源值投射成 Observable，该 Observable 会合并到输出 Observable 中， 并且只发出最新投射的 Observable 中的值\n\n    //还是上面的例子，只是将switch，map换成switchMap\n\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    higherOrder.switchMap(v => Observable.interval(1000))\n                .subscribe(x => console.log(x));\n\n**switchMapTo**\n*switchMapTo = switch + mapTo*\n效果与concatMapTo类似\n\n#### 3)  过滤\n**filter**\nfilter(function..),通过只发送源 Observable 的中满足指定 predicate 函数的项来进行过滤\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.filter(x => x%2 == 0)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 2 4 6 8 ...\n\n**take**\ntake(N),只发出源 Observable 最初发出的的N个值\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.take(5)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 3 4\n\n**takeLast**\ntakeLast(N),只发出源 Observable 最后发出的的N个值,只有当它完成时发出这些值;\n> 此操作符必须等待源Observable 的complete 通知发送才能在输出 Observable 上发出 next值,所以一般应用于有限序列\n\n    let obj = Observable.range(1,10);\n    this.subject = obj.takeLast(2)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    9 10\n\n**takeWhile**\ntakeWhile(function),发出在源 Observable 中满足 predicate 函数的每个值，并且一旦出现不满足 predicate 的值就立即完成\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.takeWhile(x => x < 6)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 3 4 5\n\n**distinct**\ndistinct(keySelector: function, flushes: Observable),入参可选，去重\n\n    let obj = Observable.of(0,1,2,7,0,7,6,2);\n    this.subject = obj.distinct()\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 7 6\n\n    this.subject = Observable.of<any>({ age: 4, name: 'Foo'},\n                                      { age: 7, name: 'Bar'},\n                                      { age: 5, name: 'Foo'})\n                            .distinct((p: Person) => p.name)\n                            .subscribe(x => console.log(x));\n    //输出\n    { age: 4, name: 'Foo'} -> { age: 7, name: 'Bar'}\n\n**distinctUntilChanged**\ndistinctUntilChanged(keySelector: function),入参可选，它发出源 Observable 发出的所有与前几项不相同的\n\n    let obj = Observable.of(0,1,1,1,2,7,7,6,6);\n    this.subject = obj.distinctUntilChanged()\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 7 6\n\n    this.subject = Observable.of<any>({ age: 4, name: 'Foo'},\n                                      { age: 7, name: 'Bar'},\n                                      { age: 5, name: 'Foo'},\n                                      { age: 4, name: 'Foo'},,\n                                      { age: 4, name: 'Fool'},)\n                          .distinctUntilChanged((p,q) => p.name == q.name)\n                          .subscribe(x => console.log(x));\n    //输出\n    { age: 4, name: 'Foo'} -> { age: 7, name: 'Bar'} -> { age: 5, name: 'Foo'} -> { age: 4, name: 'Fool'}\n\n**debounceTime**\ndebounceTime(dueTime: number, scheduler: Scheduler),只有在特定的一段时间经过后并且没有发出另一个源值，才从源 Observable 中发出一个值\n> debounceTime 延时发送源 Observable 发送的值,但是会丢弃正在排队的发送如果源 Observable 又发出新值,可以用于搜索框实现\n\n    let obj = Observable.interval(2000);\n    this.subject = obj.debounceTime(1000)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 1 2 3 4 ...\n\n**debounce**\ndebounce(durationSelector: function(value: T)),只有在另一个 Observable 决定的一段特定时间经过后并且没有发出另一个源值之后，才从源 Observable 中发出一个值,但是静默时间段由第二个 Observable 决定\n这个操作符会追踪源 Observable 的最新值, 并通过调用 durationSelector 函数来生产 duration Observable。只有当 duration Observable 发出值或完成时，才会发出值，如果源 Observable 上没有发 出其他值，那么 duration Observable 就会产生\n\n    var clicks = Rx.Observable.fromEvent(document, 'click');\n    var result = clicks.debounce(() => Rx.Observable.interval(1000));\n    result.subscribe(x => console.log(x));\n\n**throttleTime**\n从源 Observable 中发出一个值，然后在 duration 毫秒内忽略随后发出的源值， 然后重复此过程\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.throttleTime(5000)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    0 5 10 15 ...\n\n**throttle**\n从源 Observable 中发出一个值，然后在由另一个 Observable 决定的期间内忽略 随后发出的源值，然后重复此过程\n> 像throttleTime，但是沉默持续时间是由 第二个 Observable 决定的\n\n**first**\nfirst(predicate: function, resultSelector: function),只发出由源 Observable 所发出的值中第一个(或第一个满足条件的值)\npredicate: 可选函数，用于测试是否符合条件\nresultSelector(value: T, index: number):基于源 Observable 的值和索引来生成输出 Observable 的值\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.first()\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出 0\n    this.subject = obj.first(x => x!== 0 && x%5 == 0)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出 5\n    this.subject = obj.first((x) => {return x!== 0 && x%5 == 0;},(value,index) => {return value*10;})\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出 50\n\n**last**\nlast(predicate: function),只发出由源 Observable 所发出的值中最后一个(或最胡=后一个满足条件的值)，用法同first\n\n**skipLast**\nskipLast(count: number),跳过源 Observable 最后发出的的N个值\n\n#### 4)  组合\n**zip**\nzip(observable,observable,..),将多个 Observable 组合以创建一个，该 Observable的值是由所有输入 Observables 的值按顺序计算而来的\n如果最后一个参数是函数, 这个函数被用来计算最终发出的值.否则, 返回一个顺序包含所有输入值的数组\n\n    let obj1 = Observable.of<number>(12,13,14);\n    let obj2 = Observable.of<string>('AA','BB','CC');\n\n    this.subject = Observable.zip(obj1,obj2)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    [12,'AA'] -> [13,'BB'] -> [13,'CC']\n\n    this.subject = Observable.zip(obj1,obj2,(a,b) => {return a+'@'+b})\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出\n    12@AA -> 13@BB -> 13@CC\n\n**forkJoin**\nforkJoin(Observable,Observable,...),等待源对象都完成后才输出目标Observable\n\n    let obj1 = Observable.of<number>(12,13,14);\n    let obj2 = Observable.of<string>('AA','BB','CC');\n\n    this.subject = Observable.forkJoin(obj1,obj2)\n                    .subscribe(data => {this.valueList.push(data);});\n    //输出：data[0] = obj1;data[2] = obj2;\n\n**combineLatest**\ncombineLatest(Observables,function),组合多个 Observables 来创建一个 Observable ，该 Observable 的值根据每个输入 Observable 的最新值计算得出的其中：\n- Observables是将要和源 Observable结合的输入Observable，\n- function是可选的投射函数，将输出 Observable 返回的值投射为要发出的新的值\n\n例子：\n\n    var timer1 = Observable.interval(1000).take(3);\n    var timer3 = Observable.interval(600).take(5);\n    this.subject = timer1. combineLatest(timer3).subscribe(v => {this.valueList.push(v);});\n\n    timer1     0         1          2\n    timer3   0    1     2     3     4\n    输出：0,0  0,1  0,2  1,2  1,3  2,3  2,4\n\n    this.subject = timer1. combineLatest(timer3,(x,y) => x*10 + y).subscribe(v => {this.valueList.push(v);});\n    输出：0  1  2  12  13  23  24\n\n**startWith**\nstartWith(s),返回的 Observable 会先发出s项，然后再发出由源 Observable 所发出的项\n> 源Observable的数据类型必须和入参s类型一致\n\n    var timer1 = Observable.of('a','b','c');\n    this.subject = timer1.startWith('fff').subscribe(v => {this.valueList.push(v);});\n    输出：fff  a  b  c\n    var timer1 = Observable.of(1,2,3);\n    this.subject = timer1.startWith(999).subscribe(v => {this.valueList.push(v);});\n    输出：999  1  2  3\n\n\n#### 5)  多播\n**multicast**\n\n**publish**\n\n\n#### 6)  错误处理\n**catch**\ncatch(selector: function),捕获 observable 中的错误，可以通过返回一个新的 observable 或者抛出错误对象来处理\n\n    Observable.of(1, 2, 3, 4, 5).map(n => {\n                                        if (n == 4) {\n                                          throw 'four!';\n                                        }\n                                        return n;\n                              })\n                              .catch(err => {\n                                throw 'error in source. Details: ' + err;\n                              })\n                              .subscribe(\n                                x => console.log(x),\n                                err => console.log(err)\n                              );\n    //输出：1, 2, 3, error in source. Details: four!\n\n**retry**\nretry(count: number)，返回一个 Observable， 该 Observable 是源 Observable 不包含错误异常的镜像。 如果源 Observable 发生错误, 这个方法不会传播错误而是会不 断的重新订阅源 Observable 直到达到最大重试次数：count\n\n#### 7)  条件\n**delay**\ndelay(number|Date),通过给定的超时或者直到一个给定的日期来延迟源 Observable 的发送\n\n    let obj = Observable.interval(1000);\n    this.subject = obj.delay(5000)\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出不变，只是延时5s发射\n    this.subject = obj.delay(ew Date('March 15, 2020 12:00:00'))\n                    .subscribe(v => {this.valueList.push(v);});\n    //输出不变，直到设定的事件日期时才发射\n\n**delayWhen**\ndelayWhen(delayDurationSelector: function(value: T): Observable, subscriptionDelay: Observable),在给定的时间范围内，延迟源 Observable 所有数据项的发送，该时间段由另一个 Observable 的发送决定,延时的时间间隔由第二个Observable决定\n\n**do**\n给定一些 Observer 的回调函数， 将当前 Notification 所表示的值正确的传递给相应的回调函数\n\n    var value = 0;\n    Observable.of(1,2,3).do(x => value += x;}).subscribe();\n    //value = 6\n    Observable.of(1,2,3).do(x => console.log(x)}).subscribe();\n\n**toArray**\n输出数组\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.toArray()\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 [1,2,3,4,5,6,7,8]\n\n**toPromise**\n将 Observable 序列转换为符合 ES2015 标准的 Promise\n\n    Rx.Observable.toPromise()\n                 .then((value) => console.log('Value: %s', value))\n                 .catch((err) => console.log('Error: %s', err));\n\n#### 工具\n**defaultIfEmpty**\ndefaultIfEmpty(defaultValue: any)，如果源 Observable 在完成之前没有发出任何 next 值，则发出给定的值，否则返回 Observable 的镜像\n\n**every**\nevery(predicate: function),发出是否源 Observable 的每项都满足指定的条件,是则返回true,否则false\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.every(x => x < 8)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 false\n    this.subject = obj.every(x => x < 10)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 true\n\n**find**\nfind(predicate: function(value: T, index: number, source: Observable<T>),只发出源 Observable 所发出的值中第一个满足条件的值\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.find(x => x%4 == 0)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 4\n\n**findIndex**\n同find,发出源 Observable 所发出的值中第一个满足条件的值的索引\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.findIndex(x => x%4 == 0)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 3\n\n**isEmpty**\nisEmpty(),如果源 Observable 是空的话，它返回一个发出 true 的 Observable，否则发出 false\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.isEmpty()\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出 false\n\n#### 数学\n**count**\ncount(predicate: function),发出源值的个数或满足函数条件的值个数\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.count()\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出：8\n    this.subject = obj.count(x => x%2 == 0)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出：4\n\n**max**\nmax(comparer: Function),当源 Observable 完成时它发出单一项：最大值的项\n\n    Observable.of(5, 4, 7, 2, 8)\n      .max()\n      .subscribe(x => console.log(x));\n    //输出： 8\n    Observable.of<any>({age: 7, name: 'Foo'},\n                          {age: 5, name: 'Bar'},\n                          {age: 9, name: 'Beer'})\n              .max<any>((a: any, b: any) => a.age < b.age ? -1 : 1)\n              .subscribe(x => console.log(x.name+'@'+x.age));\n    //输出：Beer@9\n\n**min**\nmin(comparer: Function),当源 Observable 完成时它发出单一项：最小值的项\n\n    Observable.of<any>({age: 7, name: 'Foo'},\n                          {age: 5, name: 'Bar'},\n                          {age: 9, name: 'Beer'})\n              .min<any>( (a: any, b: any) => a.age < b.age ? -1 : 1)\n              .subscribe(x => console.log(x.name+'@'+x.age));\n              //输出：Bar@5\n\n**reduce**\nreduce(accumulator: function, seed),在源 Observalbe 上应用 accumulator (累加器) 函数，然后当源 Observable 完成时，返回 累加的结果，可以提供一个可选的 seed初始值\n\n    let obj = Observable.of(1,2,3,4,5,6,7,8);\n    this.subject = obj.reduce((x,y) => x+y,0)\n                      .subscribe(v => {this.valueList.push(v);});\n    //输出：36\n\n\n","slug":"rxjs-operators","published":1,"updated":"2018-01-11T15:19:28.377Z","layout":"post","photos":[],"link":"","_id":"cjqwe42fc0069or0baizqusbm","content":"<p>操作符是 Observable 类型上的方法，比如map(…)、.filter(…)、.merge(…)，等等。当操作符被调用时，它们不会改变已经存在的 Observable 实例。相反，它们返回一个新的 Observable ，它的 subscription 逻辑基于第一个 Observable<br><a id=\"more\"></a></p>\n<blockquote>\n<p>操作符是函数，它基于当前的 Observable 创建一个新的 Observable。这是一个无副作用的操作：前面的 Observable 保持不变。</p>\n</blockquote>\n<p>操作符本质上是一个纯函数 (pure function)，它接收一个 Observable 作为输入，并生成一个新的 Observable 作为输出。订阅输出 Observalbe 同样会订阅输入 Observable<br>创建一个自定义操作符函数，它将从输入 Observable 接收的每个值都乘以10：</p>\n<pre><code>function multiplyByTen(input) {\n  var output = Rx.Observable.create(function subscribe(observer) {\n    input.subscribe({\n      next: (v) =&gt; observer.next(10 * v),\n      error: (err) =&gt; observer.error(err),\n      complete: () =&gt; observer.complete()\n    });\n  });\n  return output;\n}\n\nvar input = Rx.Observable.from([1, 2, 3, 4]);\nvar output = multiplyByTen(input);\noutput.subscribe(x =&gt; console.log(x));\n</code></pre><p>输出：</p>\n<pre><code>10\n20\n30\n40\n</code></pre><h3 id=\"操作符分类\"><a href=\"#操作符分类\" class=\"headerlink\" title=\"操作符分类\"></a>操作符分类</h3><p><strong>实例操作符</strong><br>通常提到操作符时，我们指的是实例操作符，它是 Observable 实例上的方法。举例来说，如果上面的 multiplyByTen 是官方提供的实例操作符，它看起来大致是这个样子的：</p>\n<pre><code>Rx.Observable.prototype.multiplyByTen = function multiplyByTen() {\n  var input = this;\n  return Rx.Observable.create(function subscribe(observer) {\n    input.subscribe({\n      next: (v) =&gt; observer.next(10 * v),\n      error: (err) =&gt; observer.error(err),\n      complete: () =&gt; observer.complete()\n    });\n  });\n}\n</code></pre><p>实例运算符是使用 this 关键字来指代输入的 Observable 的函数。<br>注意，这里的 input Observable 不再是一个函数参数，它现在是 this 对象。下面是我们如何使用这样的实例运算符：</p>\n<pre><code>var observable = Rx.Observable.from([1, 2, 3, 4])\n                              .multiplyByTen();\n                              .subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>静态操作符</strong><br>除了实例操作符，还有静态操作符，它们是直接附加到 Observable 类上的。静态操作符在内部不使用 this 关键字，而是完全依赖于它的参数。比如：forkJoin</p>\n<pre><code>var obj1 = Rx.Observable.from([1,2.3]);\nvar obj2 = Rx.Observable.of(4,5,6);\n\nRx.Observable.forkJoin(obj1,obj2),subscribe(data =&gt; {\n    var obj1 = data[0];\n    var obj2 = data[1];\n});\n</code></pre><h3 id=\"常用操作符\"><a href=\"#常用操作符\" class=\"headerlink\" title=\"常用操作符\"></a>常用操作符</h3><p>Observable的操作符很多，详细可参考官网：<a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html\" target=\"_blank\" rel=\"external\">Rxjs-opertors</a>，里面有一节叫“选择操作符”很有用，指导你选择需要的操作符</p>\n<h5 id=\"1-创建\"><a href=\"#1-创建\" class=\"headerlink\" title=\"1)  创建\"></a>1)  创建</h5><p>create，empty，from，fromEvent，fromEventPattern，fromPromise，generate，interval，never，of，repeat，range，throw，timer等</p>\n<pre><code>//每隔1秒发出自增的数字，3秒后开始发送。\nvar numbers = Rx.Observable.timer(3000, 1000);\nnumbers.subscribe(x =&gt; console.log(x));\n\n//先发出数字7，然后发出错误通知。\nvar result = Rx.Observable.throw(new Error(&apos;oops!&apos;)).startWith(7);\nresult\n    .subscribe(res =&gt; console.log(res))\n    .catch(Rx.Observable.throw(errot.msg));\n\n//发出从1开始，长度为10的数字\nvar numbers = Rx.Observable.range(1, 10);\n\n//每1秒发出一个自增数\nvar numbers = Rx.Observable.interval(1000);\n</code></pre><h4 id=\"2-转换\"><a href=\"#2-转换\" class=\"headerlink\" title=\"2)  转换\"></a>2)  转换</h4><p><strong>map</strong><br>map(function),根据条件函数对每个源方式值进行数据处理，输出到输出Observable<br><em>a.数据序列二次处理</em></p>\n<pre><code>import { Observable} from &apos;rxjs/Observable&apos;;\nimport &apos;rxjs/add/operator/map&apos;\n\nlet list = Observable.of(1,2,3);\nlist.map(x =&gt; x*10 + &apos;$&apos;).subscribe(res =&gt; console.log(res));\n//输出\n10$ -&gt; 20$ -&gt; 30$\n</code></pre><p><em>b.对象结构体属性处理</em></p>\n<pre><code>let obj1 = {name:&apos;jack&apos;,age:16,sex:&apos;man&apos;};\nlet obj2 = {name:&apos;licy&apos;,age:18,sex:&apos;woman&apos;};\nObservable.of(obj1,obj2)\n    .map(x =&gt; x.name+&apos;@&apos;+x.age)\n    .subscribe(res =&gt; console.log(res));\n//输出\njack@16 -&gt; licy@18\n</code></pre><p><strong>mapTo</strong><br>mapTo(value: any)，每次源 Observble 发出值时，都在输出 Observable 上发出给定的常量值</p>\n<pre><code>var timer1 = Observable.of(2,3,6);\nthis.subject =  timer1.mapTo(88).subscribe(v =&gt; {this.valueList.push(v);});\n//输出： 88  88  88\n</code></pre><p><strong>pluck</strong><br>pluck(string..),根据key提取源Observable每个发射对象的属性值，输出新Observable</p>\n<pre><code>let obj1 = {name:{firstName:&apos;li&apos;,secondName:&apos;jack&apos;},age:16,sex:&apos;man&apos;};\nlet obj2 = {name:{firstName:&apos;yang&apos;,secondName:&apos;lucy&apos;},age:18,sex:&apos;woman&apos;};\nObservable.of(obj1,obj2)\n    .pluck(&apos;age&apos;)\n    .subscribe(res =&gt; console.log(res));\n//输出\n16 -&gt; 18\n\nObservable.of(obj1,obj2)\n    .pluck(&apos;name&apos;,&apos;firstName&apos;)\n    .subscribe(res =&gt; console.log(res));\n//输出\nli -&gt; yang\n</code></pre><p><strong>pairwise</strong><br>将当前值和前一个值作为数组放在一起，然后将其发出,[(N-1)th, Nth]</p>\n<pre><code>var timer1 = Observable.of(1,2,3,4,5,6);\nthis.subject =  timer1.pairwise().subscribe(v =&gt; {this.valueList.push(v);});\n//输出: 1,2  2,3  3,4  4,5  5,6\n</code></pre><p><strong>partition</strong><br>partition(function),将源 Observable 一分为二,输出两个Observables ： 一个像 filter 的输出， 而另一个是所有不符合条件的值</p>\n<pre><code>var timer1 = Observable.of(1,2,3,4,5,6);\nvar parts = timer1.partition(x =&gt; x%2 == 0);\nvar oushu = parts[0];\nthis.subject =  oushu.subscribe(v =&gt; {this.valueList.push(v);});\n//满足条件的：2 6 8\nvar qishu = parts[1];\nthis.subject =  qishu.subscribe(v =&gt; {this.valueList.push(v);});\n//不满足条件的：1 3 5\n</code></pre><p><strong>scan</strong><br>scan(function),对源 Observable 使用累加器函数， 返回生成的中间值， 可选的初始值;给定初始值，计算值作为前一个值于数组元素进行计算</p>\n<pre><code>var timer1 = Observable.of(1,3,5);\nthis.subject =  timer1.scan((x,y) =&gt; x * y, 2).subscribe(v =&gt; {this.valueList.push(v);});\n\n//输出： 2     6     30\n       2*1   2×3    6×5\n</code></pre><p><strong>groupBy</strong><br>根据指定条件将源 Observable 发出的值进行分组，并将这些分组作为 GroupedObservables 发出，每一个分组都是一个 GroupedObservable</p>\n<pre><code> 通过 id 分组并返回数组\n\nObservable.of&lt;Obj&gt;({id: 1, name: &apos;aze1&apos;},\n                   {id: 2, name: &apos;sf2&apos;},\n                   {id: 2, name: &apos;dg2&apos;},\n                   {id: 1, name: &apos;erg1&apos;},\n                   {id: 1, name: &apos;df1&apos;},\n                   {id: 2, name: &apos;sfqfb2&apos;},\n                   {id: 3, name: &apos;qfs3&apos;},\n                   {id: 2, name: &apos;qsgqsfg2&apos;}\n    )\n    .groupBy(p =&gt; p.id)\n    .flatMap( (group$) =&gt; group$.reduce((acc, cur) =&gt; [...acc, cur], []))\n    .subscribe(p =&gt; console.log(p));\n\n// 显示：\n// [ { id: 1, name: &apos;aze1&apos; },\n//   { id: 1, name: &apos;erg1&apos; },\n//   { id: 1, name: &apos;df1&apos; } ]\n//\n// [ { id: 2, name: &apos;sf2&apos; },\n//   { id: 2, name: &apos;dg2&apos; },\n//   { id: 2, name: &apos;sfqfb2&apos; },\n//   { id: 2, name: &apos;qsgqsfg2&apos; } ]\n//\n// [ { id: 3, name: &apos;qfs3&apos; } ]\n</code></pre><p><strong>concat</strong><br>concat(Observable,..),创建一个输出 Observable，它在当前 Observable 之后顺序地发出每个给定的输入 Observable 中的所有值;顺序地发出多个 Observables 的值将它们连接起来，一个接一个的</p>\n<pre><code>let obj1 = Observable.of(6,7,8);\nlet obj2 = Observable.of(1,2,3);\nthis.subject = obj1.concat(obj2)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出：6 7 8 1 2 3\n</code></pre><p><strong>concatAll</strong><br>通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable;通过一个接一个的连接内部 Observable ，将高阶 Observable 打平</p>\n<pre><code>var clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nvar higherOrder = clicks.map(ev =&gt; Rx.Observable.interval(1000).take(4));\nvar firstOrder = higherOrder.concatAll()\n                            .subscribe(x =&gt; console.log(x));\n//顺序串行输出，于&quot;document&quot;对象上的点击事件，都会以1秒的间隔发出从0到3的值\n</code></pre><p><strong>concatMap</strong><br><em>concatMap = concatAll + map</em><br>将每个值映射为Observable, 然后使用concatAll将所有的内部Observables打平,顺序合并到输出 Observable,以串行的方式等待前一个完成再合并下一个Observable</p>\n<pre><code>var obj = Observable.of(1,6,10);\nobj.concatMap(v =&gt; Observable.range(v,3))\n    .subscribe(x =&gt; console.log(x);\n//输出：1,2,3  6,7,8  10,11,12\n\nvar obj2 = Observable.of(10,10,10);\nobj.concatMap(v =&gt; obj2.map(y =&gt; y*v))\n    .subscribe(x =&gt; console.log(x);\n//输出：10,10,10  60,60,60  100,100,100\n</code></pre><p><strong>concatMapTo</strong><br><em>concatMapTo = concat + mapTo</em><br>concatMapTo(obj),将源对象每个值映射成常对象，然后打平和顺序合并到输出 Observable</p>\n<pre><code>var obj = Observable.of(1,6,10);\nobj.concatMapTo(Observable.of(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;))\n    .subscribe(x =&gt; console.log(x);\n//输出：a,b,c  a,b,c  a,b,c\n</code></pre><p><strong>merge</strong><br>创建一个输出Observable，通过把多个 Observables 的值按照时间混合到一个 Observable中来将其打平,混合的顺序没有明确规律<br>merge(Observables,number)其中number为可同时订阅的输入 Observables 的最大数量</p>\n<pre><code>var timer1 = Rx.Observable.interval(1000).take(10);\nvar timer2 = Rx.Observable.interval(2000).take(6);\nvar timer3 = Rx.Observable.interval(500).take(10);\ntimer1.merge(timer2, timer3, 2).subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>mergeAll</strong><br>mergeAll(number),打平高阶 Observable，将高阶 Observable 转换成一阶 Observable ，一阶 Observable 会同时发出在内部 Observables 上发出的所有值</p>\n<pre><code>var clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nvar higherOrder = clicks.map((ev) =&gt; Rx.Observable.interval(1000).take(10));\nhigherOrder.mergeAll(2).subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>mergeMap</strong><br><em>mergeMap = mergeAll + map</em><br>效果同concatMap，只是mergeMap不是顺序合并，而是：</p>\n<ul>\n<li>同步数据时，按发射时间输出</li>\n<li>异步数据时，无规律输出</li>\n</ul>\n<p><strong>mergeMapTo</strong><br><em>mergeMapTo = merge + mapTo</em><br>效果与concatMapTo类似，,将源对象每个值映射成常对象，然后合并到输出，无特定顺序</p>\n<p><strong>switch</strong><br>通过只订阅最新发出的内部 Observable ，将高阶 Observable 转换成一阶 Observable;<br>当发出一个新的内部 Observable 时， switch 会从先前发送的内部 Observable 那取消订阅，然后订阅新的内部 Observable 并开始发出它的值</p>\n<pre><code>// 结果是 `switched` 本质上是一个每次点击时会重新启动的计时器。\n// 之前点击产生的 interval Observables 不会与当前的合并。\nvar clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nvar higherOrder = clicks.map((ev) =&gt; Rx.Observable.interval(1000));\nhigherOrder.switch().subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>switchMap</strong><br><em>switchMap = switch + map</em><br>将每个源值投射成 Observable，该 Observable 会合并到输出 Observable 中， 并且只发出最新投射的 Observable 中的值</p>\n<pre><code>//还是上面的例子，只是将switch，map换成switchMap\n\nvar clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nhigherOrder.switchMap(v =&gt; Observable.interval(1000))\n            .subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>switchMapTo</strong><br><em>switchMapTo = switch + mapTo</em><br>效果与concatMapTo类似</p>\n<h4 id=\"3-过滤\"><a href=\"#3-过滤\" class=\"headerlink\" title=\"3)  过滤\"></a>3)  过滤</h4><p><strong>filter</strong><br>filter(function..),通过只发送源 Observable 的中满足指定 predicate 函数的项来进行过滤</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.filter(x =&gt; x%2 == 0)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 2 4 6 8 ...\n</code></pre><p><strong>take</strong><br>take(N),只发出源 Observable 最初发出的的N个值</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.take(5)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 3 4\n</code></pre><p><strong>takeLast</strong><br>takeLast(N),只发出源 Observable 最后发出的的N个值,只有当它完成时发出这些值;</p>\n<blockquote>\n<p>此操作符必须等待源Observable 的complete 通知发送才能在输出 Observable 上发出 next值,所以一般应用于有限序列</p>\n</blockquote>\n<pre><code>let obj = Observable.range(1,10);\nthis.subject = obj.takeLast(2)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n9 10\n</code></pre><p><strong>takeWhile</strong><br>takeWhile(function),发出在源 Observable 中满足 predicate 函数的每个值，并且一旦出现不满足 predicate 的值就立即完成</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.takeWhile(x =&gt; x &lt; 6)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 3 4 5\n</code></pre><p><strong>distinct</strong><br>distinct(keySelector: function, flushes: Observable),入参可选，去重</p>\n<pre><code>let obj = Observable.of(0,1,2,7,0,7,6,2);\nthis.subject = obj.distinct()\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 7 6\n\nthis.subject = Observable.of&lt;any&gt;({ age: 4, name: &apos;Foo&apos;},\n                                  { age: 7, name: &apos;Bar&apos;},\n                                  { age: 5, name: &apos;Foo&apos;})\n                        .distinct((p: Person) =&gt; p.name)\n                        .subscribe(x =&gt; console.log(x));\n//输出\n{ age: 4, name: &apos;Foo&apos;} -&gt; { age: 7, name: &apos;Bar&apos;}\n</code></pre><p><strong>distinctUntilChanged</strong><br>distinctUntilChanged(keySelector: function),入参可选，它发出源 Observable 发出的所有与前几项不相同的</p>\n<pre><code>let obj = Observable.of(0,1,1,1,2,7,7,6,6);\nthis.subject = obj.distinctUntilChanged()\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 7 6\n\nthis.subject = Observable.of&lt;any&gt;({ age: 4, name: &apos;Foo&apos;},\n                                  { age: 7, name: &apos;Bar&apos;},\n                                  { age: 5, name: &apos;Foo&apos;},\n                                  { age: 4, name: &apos;Foo&apos;},,\n                                  { age: 4, name: &apos;Fool&apos;},)\n                      .distinctUntilChanged((p,q) =&gt; p.name == q.name)\n                      .subscribe(x =&gt; console.log(x));\n//输出\n{ age: 4, name: &apos;Foo&apos;} -&gt; { age: 7, name: &apos;Bar&apos;} -&gt; { age: 5, name: &apos;Foo&apos;} -&gt; { age: 4, name: &apos;Fool&apos;}\n</code></pre><p><strong>debounceTime</strong><br>debounceTime(dueTime: number, scheduler: Scheduler),只有在特定的一段时间经过后并且没有发出另一个源值，才从源 Observable 中发出一个值</p>\n<blockquote>\n<p>debounceTime 延时发送源 Observable 发送的值,但是会丢弃正在排队的发送如果源 Observable 又发出新值,可以用于搜索框实现</p>\n</blockquote>\n<pre><code>let obj = Observable.interval(2000);\nthis.subject = obj.debounceTime(1000)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 3 4 ...\n</code></pre><p><strong>debounce</strong><br>debounce(durationSelector: function(value: T)),只有在另一个 Observable 决定的一段特定时间经过后并且没有发出另一个源值之后，才从源 Observable 中发出一个值,但是静默时间段由第二个 Observable 决定<br>这个操作符会追踪源 Observable 的最新值, 并通过调用 durationSelector 函数来生产 duration Observable。只有当 duration Observable 发出值或完成时，才会发出值，如果源 Observable 上没有发 出其他值，那么 duration Observable 就会产生</p>\n<pre><code>var clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nvar result = clicks.debounce(() =&gt; Rx.Observable.interval(1000));\nresult.subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>throttleTime</strong><br>从源 Observable 中发出一个值，然后在 duration 毫秒内忽略随后发出的源值， 然后重复此过程</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.throttleTime(5000)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 5 10 15 ...\n</code></pre><p><strong>throttle</strong><br>从源 Observable 中发出一个值，然后在由另一个 Observable 决定的期间内忽略 随后发出的源值，然后重复此过程</p>\n<blockquote>\n<p>像throttleTime，但是沉默持续时间是由 第二个 Observable 决定的</p>\n</blockquote>\n<p><strong>first</strong><br>first(predicate: function, resultSelector: function),只发出由源 Observable 所发出的值中第一个(或第一个满足条件的值)<br>predicate: 可选函数，用于测试是否符合条件<br>resultSelector(value: T, index: number):基于源 Observable 的值和索引来生成输出 Observable 的值</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.first()\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 0\nthis.subject = obj.first(x =&gt; x!== 0 &amp;&amp; x%5 == 0)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 5\nthis.subject = obj.first((x) =&gt; {return x!== 0 &amp;&amp; x%5 == 0;},(value,index) =&gt; {return value*10;})\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 50\n</code></pre><p><strong>last</strong><br>last(predicate: function),只发出由源 Observable 所发出的值中最后一个(或最胡=后一个满足条件的值)，用法同first</p>\n<p><strong>skipLast</strong><br>skipLast(count: number),跳过源 Observable 最后发出的的N个值</p>\n<h4 id=\"4-组合\"><a href=\"#4-组合\" class=\"headerlink\" title=\"4)  组合\"></a>4)  组合</h4><p><strong>zip</strong><br>zip(observable,observable,..),将多个 Observable 组合以创建一个，该 Observable的值是由所有输入 Observables 的值按顺序计算而来的<br>如果最后一个参数是函数, 这个函数被用来计算最终发出的值.否则, 返回一个顺序包含所有输入值的数组</p>\n<pre><code>let obj1 = Observable.of&lt;number&gt;(12,13,14);\nlet obj2 = Observable.of&lt;string&gt;(&apos;AA&apos;,&apos;BB&apos;,&apos;CC&apos;);\n\nthis.subject = Observable.zip(obj1,obj2)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n[12,&apos;AA&apos;] -&gt; [13,&apos;BB&apos;] -&gt; [13,&apos;CC&apos;]\n\nthis.subject = Observable.zip(obj1,obj2,(a,b) =&gt; {return a+&apos;@&apos;+b})\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n12@AA -&gt; 13@BB -&gt; 13@CC\n</code></pre><p><strong>forkJoin</strong><br>forkJoin(Observable,Observable,…),等待源对象都完成后才输出目标Observable</p>\n<pre><code>let obj1 = Observable.of&lt;number&gt;(12,13,14);\nlet obj2 = Observable.of&lt;string&gt;(&apos;AA&apos;,&apos;BB&apos;,&apos;CC&apos;);\n\nthis.subject = Observable.forkJoin(obj1,obj2)\n                .subscribe(data =&gt; {this.valueList.push(data);});\n//输出：data[0] = obj1;data[2] = obj2;\n</code></pre><p><strong>combineLatest</strong><br>combineLatest(Observables,function),组合多个 Observables 来创建一个 Observable ，该 Observable 的值根据每个输入 Observable 的最新值计算得出的其中：</p>\n<ul>\n<li>Observables是将要和源 Observable结合的输入Observable，</li>\n<li>function是可选的投射函数，将输出 Observable 返回的值投射为要发出的新的值</li>\n</ul>\n<p>例子：</p>\n<pre><code>var timer1 = Observable.interval(1000).take(3);\nvar timer3 = Observable.interval(600).take(5);\nthis.subject = timer1. combineLatest(timer3).subscribe(v =&gt; {this.valueList.push(v);});\n\ntimer1     0         1          2\ntimer3   0    1     2     3     4\n输出：0,0  0,1  0,2  1,2  1,3  2,3  2,4\n\nthis.subject = timer1. combineLatest(timer3,(x,y) =&gt; x*10 + y).subscribe(v =&gt; {this.valueList.push(v);});\n输出：0  1  2  12  13  23  24\n</code></pre><p><strong>startWith</strong><br>startWith(s),返回的 Observable 会先发出s项，然后再发出由源 Observable 所发出的项</p>\n<blockquote>\n<p>源Observable的数据类型必须和入参s类型一致</p>\n</blockquote>\n<pre><code>var timer1 = Observable.of(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;);\nthis.subject = timer1.startWith(&apos;fff&apos;).subscribe(v =&gt; {this.valueList.push(v);});\n输出：fff  a  b  c\nvar timer1 = Observable.of(1,2,3);\nthis.subject = timer1.startWith(999).subscribe(v =&gt; {this.valueList.push(v);});\n输出：999  1  2  3\n</code></pre><h4 id=\"5-多播\"><a href=\"#5-多播\" class=\"headerlink\" title=\"5)  多播\"></a>5)  多播</h4><p><strong>multicast</strong></p>\n<p><strong>publish</strong></p>\n<h4 id=\"6-错误处理\"><a href=\"#6-错误处理\" class=\"headerlink\" title=\"6)  错误处理\"></a>6)  错误处理</h4><p><strong>catch</strong><br>catch(selector: function),捕获 observable 中的错误，可以通过返回一个新的 observable 或者抛出错误对象来处理</p>\n<pre><code>Observable.of(1, 2, 3, 4, 5).map(n =&gt; {\n                                    if (n == 4) {\n                                      throw &apos;four!&apos;;\n                                    }\n                                    return n;\n                          })\n                          .catch(err =&gt; {\n                            throw &apos;error in source. Details: &apos; + err;\n                          })\n                          .subscribe(\n                            x =&gt; console.log(x),\n                            err =&gt; console.log(err)\n                          );\n//输出：1, 2, 3, error in source. Details: four!\n</code></pre><p><strong>retry</strong><br>retry(count: number)，返回一个 Observable， 该 Observable 是源 Observable 不包含错误异常的镜像。 如果源 Observable 发生错误, 这个方法不会传播错误而是会不 断的重新订阅源 Observable 直到达到最大重试次数：count</p>\n<h4 id=\"7-条件\"><a href=\"#7-条件\" class=\"headerlink\" title=\"7)  条件\"></a>7)  条件</h4><p><strong>delay</strong><br>delay(number|Date),通过给定的超时或者直到一个给定的日期来延迟源 Observable 的发送</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.delay(5000)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出不变，只是延时5s发射\nthis.subject = obj.delay(ew Date(&apos;March 15, 2020 12:00:00&apos;))\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出不变，直到设定的事件日期时才发射\n</code></pre><p><strong>delayWhen</strong><br>delayWhen(delayDurationSelector: function(value: T): Observable, subscriptionDelay: Observable),在给定的时间范围内，延迟源 Observable 所有数据项的发送，该时间段由另一个 Observable 的发送决定,延时的时间间隔由第二个Observable决定</p>\n<p><strong>do</strong><br>给定一些 Observer 的回调函数， 将当前 Notification 所表示的值正确的传递给相应的回调函数</p>\n<pre><code>var value = 0;\nObservable.of(1,2,3).do(x =&gt; value += x;}).subscribe();\n//value = 6\nObservable.of(1,2,3).do(x =&gt; console.log(x)}).subscribe();\n</code></pre><p><strong>toArray</strong><br>输出数组</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.toArray()\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 [1,2,3,4,5,6,7,8]\n</code></pre><p><strong>toPromise</strong><br>将 Observable 序列转换为符合 ES2015 标准的 Promise</p>\n<pre><code>Rx.Observable.toPromise()\n             .then((value) =&gt; console.log(&apos;Value: %s&apos;, value))\n             .catch((err) =&gt; console.log(&apos;Error: %s&apos;, err));\n</code></pre><h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><p><strong>defaultIfEmpty</strong><br>defaultIfEmpty(defaultValue: any)，如果源 Observable 在完成之前没有发出任何 next 值，则发出给定的值，否则返回 Observable 的镜像</p>\n<p><strong>every</strong><br>every(predicate: function),发出是否源 Observable 的每项都满足指定的条件,是则返回true,否则false</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.every(x =&gt; x &lt; 8)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 false\nthis.subject = obj.every(x =&gt; x &lt; 10)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 true\n</code></pre><p><strong>find</strong><br>find(predicate: function(value: T, index: number, source: Observable<t>),只发出源 Observable 所发出的值中第一个满足条件的值</t></p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.find(x =&gt; x%4 == 0)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 4\n</code></pre><p><strong>findIndex</strong><br>同find,发出源 Observable 所发出的值中第一个满足条件的值的索引</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.findIndex(x =&gt; x%4 == 0)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 3\n</code></pre><p><strong>isEmpty</strong><br>isEmpty(),如果源 Observable 是空的话，它返回一个发出 true 的 Observable，否则发出 false</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.isEmpty()\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 false\n</code></pre><h4 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h4><p><strong>count</strong><br>count(predicate: function),发出源值的个数或满足函数条件的值个数</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.count()\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出：8\nthis.subject = obj.count(x =&gt; x%2 == 0)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出：4\n</code></pre><p><strong>max</strong><br>max(comparer: Function),当源 Observable 完成时它发出单一项：最大值的项</p>\n<pre><code>Observable.of(5, 4, 7, 2, 8)\n  .max()\n  .subscribe(x =&gt; console.log(x));\n//输出： 8\nObservable.of&lt;any&gt;({age: 7, name: &apos;Foo&apos;},\n                      {age: 5, name: &apos;Bar&apos;},\n                      {age: 9, name: &apos;Beer&apos;})\n          .max&lt;any&gt;((a: any, b: any) =&gt; a.age &lt; b.age ? -1 : 1)\n          .subscribe(x =&gt; console.log(x.name+&apos;@&apos;+x.age));\n//输出：Beer@9\n</code></pre><p><strong>min</strong><br>min(comparer: Function),当源 Observable 完成时它发出单一项：最小值的项</p>\n<pre><code>Observable.of&lt;any&gt;({age: 7, name: &apos;Foo&apos;},\n                      {age: 5, name: &apos;Bar&apos;},\n                      {age: 9, name: &apos;Beer&apos;})\n          .min&lt;any&gt;( (a: any, b: any) =&gt; a.age &lt; b.age ? -1 : 1)\n          .subscribe(x =&gt; console.log(x.name+&apos;@&apos;+x.age));\n          //输出：Bar@5\n</code></pre><p><strong>reduce</strong><br>reduce(accumulator: function, seed),在源 Observalbe 上应用 accumulator (累加器) 函数，然后当源 Observable 完成时，返回 累加的结果，可以提供一个可选的 seed初始值</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.reduce((x,y) =&gt; x+y,0)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出：36\n</code></pre>","site":{"data":{}},"excerpt":"<p>操作符是 Observable 类型上的方法，比如map(…)、.filter(…)、.merge(…)，等等。当操作符被调用时，它们不会改变已经存在的 Observable 实例。相反，它们返回一个新的 Observable ，它的 subscription 逻辑基于第一个 Observable<br>","more":"</p>\n<blockquote>\n<p>操作符是函数，它基于当前的 Observable 创建一个新的 Observable。这是一个无副作用的操作：前面的 Observable 保持不变。</p>\n</blockquote>\n<p>操作符本质上是一个纯函数 (pure function)，它接收一个 Observable 作为输入，并生成一个新的 Observable 作为输出。订阅输出 Observalbe 同样会订阅输入 Observable<br>创建一个自定义操作符函数，它将从输入 Observable 接收的每个值都乘以10：</p>\n<pre><code>function multiplyByTen(input) {\n  var output = Rx.Observable.create(function subscribe(observer) {\n    input.subscribe({\n      next: (v) =&gt; observer.next(10 * v),\n      error: (err) =&gt; observer.error(err),\n      complete: () =&gt; observer.complete()\n    });\n  });\n  return output;\n}\n\nvar input = Rx.Observable.from([1, 2, 3, 4]);\nvar output = multiplyByTen(input);\noutput.subscribe(x =&gt; console.log(x));\n</code></pre><p>输出：</p>\n<pre><code>10\n20\n30\n40\n</code></pre><h3 id=\"操作符分类\"><a href=\"#操作符分类\" class=\"headerlink\" title=\"操作符分类\"></a>操作符分类</h3><p><strong>实例操作符</strong><br>通常提到操作符时，我们指的是实例操作符，它是 Observable 实例上的方法。举例来说，如果上面的 multiplyByTen 是官方提供的实例操作符，它看起来大致是这个样子的：</p>\n<pre><code>Rx.Observable.prototype.multiplyByTen = function multiplyByTen() {\n  var input = this;\n  return Rx.Observable.create(function subscribe(observer) {\n    input.subscribe({\n      next: (v) =&gt; observer.next(10 * v),\n      error: (err) =&gt; observer.error(err),\n      complete: () =&gt; observer.complete()\n    });\n  });\n}\n</code></pre><p>实例运算符是使用 this 关键字来指代输入的 Observable 的函数。<br>注意，这里的 input Observable 不再是一个函数参数，它现在是 this 对象。下面是我们如何使用这样的实例运算符：</p>\n<pre><code>var observable = Rx.Observable.from([1, 2, 3, 4])\n                              .multiplyByTen();\n                              .subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>静态操作符</strong><br>除了实例操作符，还有静态操作符，它们是直接附加到 Observable 类上的。静态操作符在内部不使用 this 关键字，而是完全依赖于它的参数。比如：forkJoin</p>\n<pre><code>var obj1 = Rx.Observable.from([1,2.3]);\nvar obj2 = Rx.Observable.of(4,5,6);\n\nRx.Observable.forkJoin(obj1,obj2),subscribe(data =&gt; {\n    var obj1 = data[0];\n    var obj2 = data[1];\n});\n</code></pre><h3 id=\"常用操作符\"><a href=\"#常用操作符\" class=\"headerlink\" title=\"常用操作符\"></a>常用操作符</h3><p>Observable的操作符很多，详细可参考官网：<a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html\" target=\"_blank\" rel=\"external\">Rxjs-opertors</a>，里面有一节叫“选择操作符”很有用，指导你选择需要的操作符</p>\n<h5 id=\"1-创建\"><a href=\"#1-创建\" class=\"headerlink\" title=\"1)  创建\"></a>1)  创建</h5><p>create，empty，from，fromEvent，fromEventPattern，fromPromise，generate，interval，never，of，repeat，range，throw，timer等</p>\n<pre><code>//每隔1秒发出自增的数字，3秒后开始发送。\nvar numbers = Rx.Observable.timer(3000, 1000);\nnumbers.subscribe(x =&gt; console.log(x));\n\n//先发出数字7，然后发出错误通知。\nvar result = Rx.Observable.throw(new Error(&apos;oops!&apos;)).startWith(7);\nresult\n    .subscribe(res =&gt; console.log(res))\n    .catch(Rx.Observable.throw(errot.msg));\n\n//发出从1开始，长度为10的数字\nvar numbers = Rx.Observable.range(1, 10);\n\n//每1秒发出一个自增数\nvar numbers = Rx.Observable.interval(1000);\n</code></pre><h4 id=\"2-转换\"><a href=\"#2-转换\" class=\"headerlink\" title=\"2)  转换\"></a>2)  转换</h4><p><strong>map</strong><br>map(function),根据条件函数对每个源方式值进行数据处理，输出到输出Observable<br><em>a.数据序列二次处理</em></p>\n<pre><code>import { Observable} from &apos;rxjs/Observable&apos;;\nimport &apos;rxjs/add/operator/map&apos;\n\nlet list = Observable.of(1,2,3);\nlist.map(x =&gt; x*10 + &apos;$&apos;).subscribe(res =&gt; console.log(res));\n//输出\n10$ -&gt; 20$ -&gt; 30$\n</code></pre><p><em>b.对象结构体属性处理</em></p>\n<pre><code>let obj1 = {name:&apos;jack&apos;,age:16,sex:&apos;man&apos;};\nlet obj2 = {name:&apos;licy&apos;,age:18,sex:&apos;woman&apos;};\nObservable.of(obj1,obj2)\n    .map(x =&gt; x.name+&apos;@&apos;+x.age)\n    .subscribe(res =&gt; console.log(res));\n//输出\njack@16 -&gt; licy@18\n</code></pre><p><strong>mapTo</strong><br>mapTo(value: any)，每次源 Observble 发出值时，都在输出 Observable 上发出给定的常量值</p>\n<pre><code>var timer1 = Observable.of(2,3,6);\nthis.subject =  timer1.mapTo(88).subscribe(v =&gt; {this.valueList.push(v);});\n//输出： 88  88  88\n</code></pre><p><strong>pluck</strong><br>pluck(string..),根据key提取源Observable每个发射对象的属性值，输出新Observable</p>\n<pre><code>let obj1 = {name:{firstName:&apos;li&apos;,secondName:&apos;jack&apos;},age:16,sex:&apos;man&apos;};\nlet obj2 = {name:{firstName:&apos;yang&apos;,secondName:&apos;lucy&apos;},age:18,sex:&apos;woman&apos;};\nObservable.of(obj1,obj2)\n    .pluck(&apos;age&apos;)\n    .subscribe(res =&gt; console.log(res));\n//输出\n16 -&gt; 18\n\nObservable.of(obj1,obj2)\n    .pluck(&apos;name&apos;,&apos;firstName&apos;)\n    .subscribe(res =&gt; console.log(res));\n//输出\nli -&gt; yang\n</code></pre><p><strong>pairwise</strong><br>将当前值和前一个值作为数组放在一起，然后将其发出,[(N-1)th, Nth]</p>\n<pre><code>var timer1 = Observable.of(1,2,3,4,5,6);\nthis.subject =  timer1.pairwise().subscribe(v =&gt; {this.valueList.push(v);});\n//输出: 1,2  2,3  3,4  4,5  5,6\n</code></pre><p><strong>partition</strong><br>partition(function),将源 Observable 一分为二,输出两个Observables ： 一个像 filter 的输出， 而另一个是所有不符合条件的值</p>\n<pre><code>var timer1 = Observable.of(1,2,3,4,5,6);\nvar parts = timer1.partition(x =&gt; x%2 == 0);\nvar oushu = parts[0];\nthis.subject =  oushu.subscribe(v =&gt; {this.valueList.push(v);});\n//满足条件的：2 6 8\nvar qishu = parts[1];\nthis.subject =  qishu.subscribe(v =&gt; {this.valueList.push(v);});\n//不满足条件的：1 3 5\n</code></pre><p><strong>scan</strong><br>scan(function),对源 Observable 使用累加器函数， 返回生成的中间值， 可选的初始值;给定初始值，计算值作为前一个值于数组元素进行计算</p>\n<pre><code>var timer1 = Observable.of(1,3,5);\nthis.subject =  timer1.scan((x,y) =&gt; x * y, 2).subscribe(v =&gt; {this.valueList.push(v);});\n\n//输出： 2     6     30\n       2*1   2×3    6×5\n</code></pre><p><strong>groupBy</strong><br>根据指定条件将源 Observable 发出的值进行分组，并将这些分组作为 GroupedObservables 发出，每一个分组都是一个 GroupedObservable</p>\n<pre><code> 通过 id 分组并返回数组\n\nObservable.of&lt;Obj&gt;({id: 1, name: &apos;aze1&apos;},\n                   {id: 2, name: &apos;sf2&apos;},\n                   {id: 2, name: &apos;dg2&apos;},\n                   {id: 1, name: &apos;erg1&apos;},\n                   {id: 1, name: &apos;df1&apos;},\n                   {id: 2, name: &apos;sfqfb2&apos;},\n                   {id: 3, name: &apos;qfs3&apos;},\n                   {id: 2, name: &apos;qsgqsfg2&apos;}\n    )\n    .groupBy(p =&gt; p.id)\n    .flatMap( (group$) =&gt; group$.reduce((acc, cur) =&gt; [...acc, cur], []))\n    .subscribe(p =&gt; console.log(p));\n\n// 显示：\n// [ { id: 1, name: &apos;aze1&apos; },\n//   { id: 1, name: &apos;erg1&apos; },\n//   { id: 1, name: &apos;df1&apos; } ]\n//\n// [ { id: 2, name: &apos;sf2&apos; },\n//   { id: 2, name: &apos;dg2&apos; },\n//   { id: 2, name: &apos;sfqfb2&apos; },\n//   { id: 2, name: &apos;qsgqsfg2&apos; } ]\n//\n// [ { id: 3, name: &apos;qfs3&apos; } ]\n</code></pre><p><strong>concat</strong><br>concat(Observable,..),创建一个输出 Observable，它在当前 Observable 之后顺序地发出每个给定的输入 Observable 中的所有值;顺序地发出多个 Observables 的值将它们连接起来，一个接一个的</p>\n<pre><code>let obj1 = Observable.of(6,7,8);\nlet obj2 = Observable.of(1,2,3);\nthis.subject = obj1.concat(obj2)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出：6 7 8 1 2 3\n</code></pre><p><strong>concatAll</strong><br>通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable;通过一个接一个的连接内部 Observable ，将高阶 Observable 打平</p>\n<pre><code>var clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nvar higherOrder = clicks.map(ev =&gt; Rx.Observable.interval(1000).take(4));\nvar firstOrder = higherOrder.concatAll()\n                            .subscribe(x =&gt; console.log(x));\n//顺序串行输出，于&quot;document&quot;对象上的点击事件，都会以1秒的间隔发出从0到3的值\n</code></pre><p><strong>concatMap</strong><br><em>concatMap = concatAll + map</em><br>将每个值映射为Observable, 然后使用concatAll将所有的内部Observables打平,顺序合并到输出 Observable,以串行的方式等待前一个完成再合并下一个Observable</p>\n<pre><code>var obj = Observable.of(1,6,10);\nobj.concatMap(v =&gt; Observable.range(v,3))\n    .subscribe(x =&gt; console.log(x);\n//输出：1,2,3  6,7,8  10,11,12\n\nvar obj2 = Observable.of(10,10,10);\nobj.concatMap(v =&gt; obj2.map(y =&gt; y*v))\n    .subscribe(x =&gt; console.log(x);\n//输出：10,10,10  60,60,60  100,100,100\n</code></pre><p><strong>concatMapTo</strong><br><em>concatMapTo = concat + mapTo</em><br>concatMapTo(obj),将源对象每个值映射成常对象，然后打平和顺序合并到输出 Observable</p>\n<pre><code>var obj = Observable.of(1,6,10);\nobj.concatMapTo(Observable.of(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;))\n    .subscribe(x =&gt; console.log(x);\n//输出：a,b,c  a,b,c  a,b,c\n</code></pre><p><strong>merge</strong><br>创建一个输出Observable，通过把多个 Observables 的值按照时间混合到一个 Observable中来将其打平,混合的顺序没有明确规律<br>merge(Observables,number)其中number为可同时订阅的输入 Observables 的最大数量</p>\n<pre><code>var timer1 = Rx.Observable.interval(1000).take(10);\nvar timer2 = Rx.Observable.interval(2000).take(6);\nvar timer3 = Rx.Observable.interval(500).take(10);\ntimer1.merge(timer2, timer3, 2).subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>mergeAll</strong><br>mergeAll(number),打平高阶 Observable，将高阶 Observable 转换成一阶 Observable ，一阶 Observable 会同时发出在内部 Observables 上发出的所有值</p>\n<pre><code>var clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nvar higherOrder = clicks.map((ev) =&gt; Rx.Observable.interval(1000).take(10));\nhigherOrder.mergeAll(2).subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>mergeMap</strong><br><em>mergeMap = mergeAll + map</em><br>效果同concatMap，只是mergeMap不是顺序合并，而是：</p>\n<ul>\n<li>同步数据时，按发射时间输出</li>\n<li>异步数据时，无规律输出</li>\n</ul>\n<p><strong>mergeMapTo</strong><br><em>mergeMapTo = merge + mapTo</em><br>效果与concatMapTo类似，,将源对象每个值映射成常对象，然后合并到输出，无特定顺序</p>\n<p><strong>switch</strong><br>通过只订阅最新发出的内部 Observable ，将高阶 Observable 转换成一阶 Observable;<br>当发出一个新的内部 Observable 时， switch 会从先前发送的内部 Observable 那取消订阅，然后订阅新的内部 Observable 并开始发出它的值</p>\n<pre><code>// 结果是 `switched` 本质上是一个每次点击时会重新启动的计时器。\n// 之前点击产生的 interval Observables 不会与当前的合并。\nvar clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nvar higherOrder = clicks.map((ev) =&gt; Rx.Observable.interval(1000));\nhigherOrder.switch().subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>switchMap</strong><br><em>switchMap = switch + map</em><br>将每个源值投射成 Observable，该 Observable 会合并到输出 Observable 中， 并且只发出最新投射的 Observable 中的值</p>\n<pre><code>//还是上面的例子，只是将switch，map换成switchMap\n\nvar clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nhigherOrder.switchMap(v =&gt; Observable.interval(1000))\n            .subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>switchMapTo</strong><br><em>switchMapTo = switch + mapTo</em><br>效果与concatMapTo类似</p>\n<h4 id=\"3-过滤\"><a href=\"#3-过滤\" class=\"headerlink\" title=\"3)  过滤\"></a>3)  过滤</h4><p><strong>filter</strong><br>filter(function..),通过只发送源 Observable 的中满足指定 predicate 函数的项来进行过滤</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.filter(x =&gt; x%2 == 0)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 2 4 6 8 ...\n</code></pre><p><strong>take</strong><br>take(N),只发出源 Observable 最初发出的的N个值</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.take(5)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 3 4\n</code></pre><p><strong>takeLast</strong><br>takeLast(N),只发出源 Observable 最后发出的的N个值,只有当它完成时发出这些值;</p>\n<blockquote>\n<p>此操作符必须等待源Observable 的complete 通知发送才能在输出 Observable 上发出 next值,所以一般应用于有限序列</p>\n</blockquote>\n<pre><code>let obj = Observable.range(1,10);\nthis.subject = obj.takeLast(2)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n9 10\n</code></pre><p><strong>takeWhile</strong><br>takeWhile(function),发出在源 Observable 中满足 predicate 函数的每个值，并且一旦出现不满足 predicate 的值就立即完成</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.takeWhile(x =&gt; x &lt; 6)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 3 4 5\n</code></pre><p><strong>distinct</strong><br>distinct(keySelector: function, flushes: Observable),入参可选，去重</p>\n<pre><code>let obj = Observable.of(0,1,2,7,0,7,6,2);\nthis.subject = obj.distinct()\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 7 6\n\nthis.subject = Observable.of&lt;any&gt;({ age: 4, name: &apos;Foo&apos;},\n                                  { age: 7, name: &apos;Bar&apos;},\n                                  { age: 5, name: &apos;Foo&apos;})\n                        .distinct((p: Person) =&gt; p.name)\n                        .subscribe(x =&gt; console.log(x));\n//输出\n{ age: 4, name: &apos;Foo&apos;} -&gt; { age: 7, name: &apos;Bar&apos;}\n</code></pre><p><strong>distinctUntilChanged</strong><br>distinctUntilChanged(keySelector: function),入参可选，它发出源 Observable 发出的所有与前几项不相同的</p>\n<pre><code>let obj = Observable.of(0,1,1,1,2,7,7,6,6);\nthis.subject = obj.distinctUntilChanged()\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 7 6\n\nthis.subject = Observable.of&lt;any&gt;({ age: 4, name: &apos;Foo&apos;},\n                                  { age: 7, name: &apos;Bar&apos;},\n                                  { age: 5, name: &apos;Foo&apos;},\n                                  { age: 4, name: &apos;Foo&apos;},,\n                                  { age: 4, name: &apos;Fool&apos;},)\n                      .distinctUntilChanged((p,q) =&gt; p.name == q.name)\n                      .subscribe(x =&gt; console.log(x));\n//输出\n{ age: 4, name: &apos;Foo&apos;} -&gt; { age: 7, name: &apos;Bar&apos;} -&gt; { age: 5, name: &apos;Foo&apos;} -&gt; { age: 4, name: &apos;Fool&apos;}\n</code></pre><p><strong>debounceTime</strong><br>debounceTime(dueTime: number, scheduler: Scheduler),只有在特定的一段时间经过后并且没有发出另一个源值，才从源 Observable 中发出一个值</p>\n<blockquote>\n<p>debounceTime 延时发送源 Observable 发送的值,但是会丢弃正在排队的发送如果源 Observable 又发出新值,可以用于搜索框实现</p>\n</blockquote>\n<pre><code>let obj = Observable.interval(2000);\nthis.subject = obj.debounceTime(1000)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 1 2 3 4 ...\n</code></pre><p><strong>debounce</strong><br>debounce(durationSelector: function(value: T)),只有在另一个 Observable 决定的一段特定时间经过后并且没有发出另一个源值之后，才从源 Observable 中发出一个值,但是静默时间段由第二个 Observable 决定<br>这个操作符会追踪源 Observable 的最新值, 并通过调用 durationSelector 函数来生产 duration Observable。只有当 duration Observable 发出值或完成时，才会发出值，如果源 Observable 上没有发 出其他值，那么 duration Observable 就会产生</p>\n<pre><code>var clicks = Rx.Observable.fromEvent(document, &apos;click&apos;);\nvar result = clicks.debounce(() =&gt; Rx.Observable.interval(1000));\nresult.subscribe(x =&gt; console.log(x));\n</code></pre><p><strong>throttleTime</strong><br>从源 Observable 中发出一个值，然后在 duration 毫秒内忽略随后发出的源值， 然后重复此过程</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.throttleTime(5000)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n0 5 10 15 ...\n</code></pre><p><strong>throttle</strong><br>从源 Observable 中发出一个值，然后在由另一个 Observable 决定的期间内忽略 随后发出的源值，然后重复此过程</p>\n<blockquote>\n<p>像throttleTime，但是沉默持续时间是由 第二个 Observable 决定的</p>\n</blockquote>\n<p><strong>first</strong><br>first(predicate: function, resultSelector: function),只发出由源 Observable 所发出的值中第一个(或第一个满足条件的值)<br>predicate: 可选函数，用于测试是否符合条件<br>resultSelector(value: T, index: number):基于源 Observable 的值和索引来生成输出 Observable 的值</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.first()\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 0\nthis.subject = obj.first(x =&gt; x!== 0 &amp;&amp; x%5 == 0)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 5\nthis.subject = obj.first((x) =&gt; {return x!== 0 &amp;&amp; x%5 == 0;},(value,index) =&gt; {return value*10;})\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 50\n</code></pre><p><strong>last</strong><br>last(predicate: function),只发出由源 Observable 所发出的值中最后一个(或最胡=后一个满足条件的值)，用法同first</p>\n<p><strong>skipLast</strong><br>skipLast(count: number),跳过源 Observable 最后发出的的N个值</p>\n<h4 id=\"4-组合\"><a href=\"#4-组合\" class=\"headerlink\" title=\"4)  组合\"></a>4)  组合</h4><p><strong>zip</strong><br>zip(observable,observable,..),将多个 Observable 组合以创建一个，该 Observable的值是由所有输入 Observables 的值按顺序计算而来的<br>如果最后一个参数是函数, 这个函数被用来计算最终发出的值.否则, 返回一个顺序包含所有输入值的数组</p>\n<pre><code>let obj1 = Observable.of&lt;number&gt;(12,13,14);\nlet obj2 = Observable.of&lt;string&gt;(&apos;AA&apos;,&apos;BB&apos;,&apos;CC&apos;);\n\nthis.subject = Observable.zip(obj1,obj2)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n[12,&apos;AA&apos;] -&gt; [13,&apos;BB&apos;] -&gt; [13,&apos;CC&apos;]\n\nthis.subject = Observable.zip(obj1,obj2,(a,b) =&gt; {return a+&apos;@&apos;+b})\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出\n12@AA -&gt; 13@BB -&gt; 13@CC\n</code></pre><p><strong>forkJoin</strong><br>forkJoin(Observable,Observable,…),等待源对象都完成后才输出目标Observable</p>\n<pre><code>let obj1 = Observable.of&lt;number&gt;(12,13,14);\nlet obj2 = Observable.of&lt;string&gt;(&apos;AA&apos;,&apos;BB&apos;,&apos;CC&apos;);\n\nthis.subject = Observable.forkJoin(obj1,obj2)\n                .subscribe(data =&gt; {this.valueList.push(data);});\n//输出：data[0] = obj1;data[2] = obj2;\n</code></pre><p><strong>combineLatest</strong><br>combineLatest(Observables,function),组合多个 Observables 来创建一个 Observable ，该 Observable 的值根据每个输入 Observable 的最新值计算得出的其中：</p>\n<ul>\n<li>Observables是将要和源 Observable结合的输入Observable，</li>\n<li>function是可选的投射函数，将输出 Observable 返回的值投射为要发出的新的值</li>\n</ul>\n<p>例子：</p>\n<pre><code>var timer1 = Observable.interval(1000).take(3);\nvar timer3 = Observable.interval(600).take(5);\nthis.subject = timer1. combineLatest(timer3).subscribe(v =&gt; {this.valueList.push(v);});\n\ntimer1     0         1          2\ntimer3   0    1     2     3     4\n输出：0,0  0,1  0,2  1,2  1,3  2,3  2,4\n\nthis.subject = timer1. combineLatest(timer3,(x,y) =&gt; x*10 + y).subscribe(v =&gt; {this.valueList.push(v);});\n输出：0  1  2  12  13  23  24\n</code></pre><p><strong>startWith</strong><br>startWith(s),返回的 Observable 会先发出s项，然后再发出由源 Observable 所发出的项</p>\n<blockquote>\n<p>源Observable的数据类型必须和入参s类型一致</p>\n</blockquote>\n<pre><code>var timer1 = Observable.of(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;);\nthis.subject = timer1.startWith(&apos;fff&apos;).subscribe(v =&gt; {this.valueList.push(v);});\n输出：fff  a  b  c\nvar timer1 = Observable.of(1,2,3);\nthis.subject = timer1.startWith(999).subscribe(v =&gt; {this.valueList.push(v);});\n输出：999  1  2  3\n</code></pre><h4 id=\"5-多播\"><a href=\"#5-多播\" class=\"headerlink\" title=\"5)  多播\"></a>5)  多播</h4><p><strong>multicast</strong></p>\n<p><strong>publish</strong></p>\n<h4 id=\"6-错误处理\"><a href=\"#6-错误处理\" class=\"headerlink\" title=\"6)  错误处理\"></a>6)  错误处理</h4><p><strong>catch</strong><br>catch(selector: function),捕获 observable 中的错误，可以通过返回一个新的 observable 或者抛出错误对象来处理</p>\n<pre><code>Observable.of(1, 2, 3, 4, 5).map(n =&gt; {\n                                    if (n == 4) {\n                                      throw &apos;four!&apos;;\n                                    }\n                                    return n;\n                          })\n                          .catch(err =&gt; {\n                            throw &apos;error in source. Details: &apos; + err;\n                          })\n                          .subscribe(\n                            x =&gt; console.log(x),\n                            err =&gt; console.log(err)\n                          );\n//输出：1, 2, 3, error in source. Details: four!\n</code></pre><p><strong>retry</strong><br>retry(count: number)，返回一个 Observable， 该 Observable 是源 Observable 不包含错误异常的镜像。 如果源 Observable 发生错误, 这个方法不会传播错误而是会不 断的重新订阅源 Observable 直到达到最大重试次数：count</p>\n<h4 id=\"7-条件\"><a href=\"#7-条件\" class=\"headerlink\" title=\"7)  条件\"></a>7)  条件</h4><p><strong>delay</strong><br>delay(number|Date),通过给定的超时或者直到一个给定的日期来延迟源 Observable 的发送</p>\n<pre><code>let obj = Observable.interval(1000);\nthis.subject = obj.delay(5000)\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出不变，只是延时5s发射\nthis.subject = obj.delay(ew Date(&apos;March 15, 2020 12:00:00&apos;))\n                .subscribe(v =&gt; {this.valueList.push(v);});\n//输出不变，直到设定的事件日期时才发射\n</code></pre><p><strong>delayWhen</strong><br>delayWhen(delayDurationSelector: function(value: T): Observable, subscriptionDelay: Observable),在给定的时间范围内，延迟源 Observable 所有数据项的发送，该时间段由另一个 Observable 的发送决定,延时的时间间隔由第二个Observable决定</p>\n<p><strong>do</strong><br>给定一些 Observer 的回调函数， 将当前 Notification 所表示的值正确的传递给相应的回调函数</p>\n<pre><code>var value = 0;\nObservable.of(1,2,3).do(x =&gt; value += x;}).subscribe();\n//value = 6\nObservable.of(1,2,3).do(x =&gt; console.log(x)}).subscribe();\n</code></pre><p><strong>toArray</strong><br>输出数组</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.toArray()\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 [1,2,3,4,5,6,7,8]\n</code></pre><p><strong>toPromise</strong><br>将 Observable 序列转换为符合 ES2015 标准的 Promise</p>\n<pre><code>Rx.Observable.toPromise()\n             .then((value) =&gt; console.log(&apos;Value: %s&apos;, value))\n             .catch((err) =&gt; console.log(&apos;Error: %s&apos;, err));\n</code></pre><h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><p><strong>defaultIfEmpty</strong><br>defaultIfEmpty(defaultValue: any)，如果源 Observable 在完成之前没有发出任何 next 值，则发出给定的值，否则返回 Observable 的镜像</p>\n<p><strong>every</strong><br>every(predicate: function),发出是否源 Observable 的每项都满足指定的条件,是则返回true,否则false</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.every(x =&gt; x &lt; 8)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 false\nthis.subject = obj.every(x =&gt; x &lt; 10)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 true\n</code></pre><p><strong>find</strong><br>find(predicate: function(value: T, index: number, source: Observable<t>),只发出源 Observable 所发出的值中第一个满足条件的值</t></p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.find(x =&gt; x%4 == 0)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 4\n</code></pre><p><strong>findIndex</strong><br>同find,发出源 Observable 所发出的值中第一个满足条件的值的索引</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.findIndex(x =&gt; x%4 == 0)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 3\n</code></pre><p><strong>isEmpty</strong><br>isEmpty(),如果源 Observable 是空的话，它返回一个发出 true 的 Observable，否则发出 false</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.isEmpty()\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出 false\n</code></pre><h4 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h4><p><strong>count</strong><br>count(predicate: function),发出源值的个数或满足函数条件的值个数</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.count()\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出：8\nthis.subject = obj.count(x =&gt; x%2 == 0)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出：4\n</code></pre><p><strong>max</strong><br>max(comparer: Function),当源 Observable 完成时它发出单一项：最大值的项</p>\n<pre><code>Observable.of(5, 4, 7, 2, 8)\n  .max()\n  .subscribe(x =&gt; console.log(x));\n//输出： 8\nObservable.of&lt;any&gt;({age: 7, name: &apos;Foo&apos;},\n                      {age: 5, name: &apos;Bar&apos;},\n                      {age: 9, name: &apos;Beer&apos;})\n          .max&lt;any&gt;((a: any, b: any) =&gt; a.age &lt; b.age ? -1 : 1)\n          .subscribe(x =&gt; console.log(x.name+&apos;@&apos;+x.age));\n//输出：Beer@9\n</code></pre><p><strong>min</strong><br>min(comparer: Function),当源 Observable 完成时它发出单一项：最小值的项</p>\n<pre><code>Observable.of&lt;any&gt;({age: 7, name: &apos;Foo&apos;},\n                      {age: 5, name: &apos;Bar&apos;},\n                      {age: 9, name: &apos;Beer&apos;})\n          .min&lt;any&gt;( (a: any, b: any) =&gt; a.age &lt; b.age ? -1 : 1)\n          .subscribe(x =&gt; console.log(x.name+&apos;@&apos;+x.age));\n          //输出：Bar@5\n</code></pre><p><strong>reduce</strong><br>reduce(accumulator: function, seed),在源 Observalbe 上应用 accumulator (累加器) 函数，然后当源 Observable 完成时，返回 累加的结果，可以提供一个可选的 seed初始值</p>\n<pre><code>let obj = Observable.of(1,2,3,4,5,6,7,8);\nthis.subject = obj.reduce((x,y) =&gt; x+y,0)\n                  .subscribe(v =&gt; {this.valueList.push(v);});\n//输出：36\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjqwe424b0008or0bmxk71q10","category_id":"cjqwe42450004or0bbtycnh49","_id":"cjqwe424v000eor0bbkjkcsh0"},{"post_id":"cjqwe423g0000or0bs00by0ko","category_id":"cjqwe42450004or0bbtycnh49","_id":"cjqwe425c000ior0bfs1psq2c"},{"post_id":"cjqwe42410002or0bcapncpw4","category_id":"cjqwe42450004or0bbtycnh49","_id":"cjqwe425e000lor0bumvvv4sj"},{"post_id":"cjqwe42480006or0b1n0z9gjh","category_id":"cjqwe42450004or0bbtycnh49","_id":"cjqwe425j000ror0be4lbfi4u"},{"post_id":"cjqwe425i000por0bbobv7tm3","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe425o000xor0bk19i9vai"},{"post_id":"cjqwe424p0009or0bw8cbaowy","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe425q0011or0bey2xfqbr"},{"post_id":"cjqwe425j000sor0bve3uhsqe","category_id":"cjqwe42450004or0bbtycnh49","_id":"cjqwe42630014or0b82orc4i4"},{"post_id":"cjqwe425m000vor0bztf1n8k9","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42660019or0b1zujdpy9"},{"post_id":"cjqwe424t000dor0bjq01bpgh","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4268001cor0bvapcin7w"},{"post_id":"cjqwe425o000yor0b8bj6riif","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426b001hor0bdf7v7tab"},{"post_id":"cjqwe425r0012or0b3pf74zg8","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426e001kor0bz40as2nh"},{"post_id":"cjqwe424w000for0bwb6j8hhp","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426g001oor0b2yyol43h"},{"post_id":"cjqwe42630015or0bkq3t9wl9","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426j001ror0bf4cki4xv"},{"post_id":"cjqwe4266001aor0b86erfn5l","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426o001vor0bze8lejkj"},{"post_id":"cjqwe425c000jor0b4q8znuv0","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426q001yor0bjxi0brfk"},{"post_id":"cjqwe4269001dor0bmstq3q9c","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426s0022or0byqlxg5t9"},{"post_id":"cjqwe426c001ior0bn114zlhm","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426v0025or0bikop7cy9"},{"post_id":"cjqwe425f000mor0bnod2dzez","category_id":"cjqwe426a001eor0bu31yv7f9","_id":"cjqwe426x0027or0buexr4753"},{"post_id":"cjqwe426e001lor0bz6b62agc","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe426z002bor0bfm9an5t6"},{"post_id":"cjqwe426h001por0bxkp3yz0s","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4271002eor0bfp0rzao4"},{"post_id":"cjqwe426j001sor0bqlpi7xes","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4272002hor0b1nmc0off"},{"post_id":"cjqwe426p001wor0bufawwums","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4274002kor0b16b75hl4"},{"post_id":"cjqwe426q001zor0b7v3u0a3g","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4276002nor0bmrowi3h9"},{"post_id":"cjqwe426t0023or0b1iimr8sh","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4278002qor0bezoyf6uv"},{"post_id":"cjqwe426v0026or0blarj4yos","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4279002tor0bsomc4rgl"},{"post_id":"cjqwe426z002cor0b5op7d5kk","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe427c002wor0b7kdwg3kg"},{"post_id":"cjqwe4271002for0bqijvomui","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe427d002zor0b8xf2g373"},{"post_id":"cjqwe4273002jor0bd0mgfhnv","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe427f0032or0beuujd0oj"},{"post_id":"cjqwe426x0029or0brfvhgc3q","category_id":"cjqwe4271002dor0bb6hew6eb","_id":"cjqwe427h0035or0bemt90v5z"},{"post_id":"cjqwe4274002lor0bv288yu12","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe427j0038or0b0wcrxu5k"},{"post_id":"cjqwe4276002oor0bgy6snoew","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4289003bor0b9bznicfw"},{"post_id":"cjqwe4278002ror0b4e2w6avh","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe428b003eor0bpizmb1tk"},{"post_id":"cjqwe427a002uor0bu8nij9x5","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe428e003ior0bjddjca7s"},{"post_id":"cjqwe427c002xor0b1p7nuhdh","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe428h003lor0bagjwslil"},{"post_id":"cjqwe427e0030or0b5m2k5mkf","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe428v003nor0beylgmste"},{"post_id":"cjqwe427g0033or0b8n6apisv","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe428x003por0bc4mrb1oc"},{"post_id":"cjqwe427h0036or0b9hmyg6v0","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe428y003ror0bi6fxndhn"},{"post_id":"cjqwe427j0039or0bzo7qlo67","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe428z003tor0bjx1od1d0"},{"post_id":"cjqwe4289003cor0bizzzewpx","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe428z003uor0b9vvj4al1"},{"post_id":"cjqwe428b003for0b746511kw","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4290003xor0belwyzmox"},{"post_id":"cjqwe428f003jor0baj0121bl","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe4290003yor0b0pi3y9jg"},{"post_id":"cjqwe42ar004qor0boo26lvkj","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42bc004uor0ba2flryxu"},{"post_id":"cjqwe42b7004ror0b9p77ozlx","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42be004xor0b4h0szmh5"},{"post_id":"cjqwe42b8004tor0b6coe7c54","category_id":"cjqwe426a001eor0bu31yv7f9","_id":"cjqwe42bg0050or0bpwf9mm3y"},{"post_id":"cjqwe42bd004wor0b17kb3htx","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42bi0053or0betofn8kj"},{"post_id":"cjqwe42bf004zor0b51oc7ec9","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42bl0056or0b1uk1v3ev"},{"post_id":"cjqwe42bh0052or0btsc2yzae","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42bn0059or0b9154n434"},{"post_id":"cjqwe42bj0055or0bocslw6r5","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42c1005cor0b2l09f2l6"},{"post_id":"cjqwe42bl0058or0bwkuvhezb","category_id":"cjqwe4271002dor0bb6hew6eb","_id":"cjqwe42c3005for0b143mijoi"},{"post_id":"cjqwe42bz005bor0b5vru3ogk","category_id":"cjqwe4271002dor0bb6hew6eb","_id":"cjqwe42c4005ior0bp9f1ibt7"},{"post_id":"cjqwe42c1005eor0b3zn287el","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42cj005lor0b0ffwv0lq"},{"post_id":"cjqwe42c3005hor0b531uzswo","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42cl005por0b9j7qtqda"},{"post_id":"cjqwe42cf005kor0bvv8hvkfr","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42cm005ror0b2wu1dets"},{"post_id":"cjqwe42ck005nor0bge35ch4u","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42cn005sor0bwaeqms5h"},{"post_id":"cjqwe42eb005uor0bke1trj5d","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42eg005yor0b7l86ek31"},{"post_id":"cjqwe42ed005vor0bhmsb6pzc","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42ei0061or0bu58tzz5w"},{"post_id":"cjqwe42ef005xor0b8khrhbec","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42ej0064or0bw48mbqyl"},{"post_id":"cjqwe42eg0060or0bt7kbqwqi","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42ek0066or0bjompkc5i"},{"post_id":"cjqwe42ei0063or0b25n5rr7r","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42et0068or0bovllqli1"},{"post_id":"cjqwe42fc0069or0baizqusbm","category_id":"cjqwe425g000nor0buupohww2","_id":"cjqwe42fd006bor0b3sowvjc0"}],"PostTag":[{"post_id":"cjqwe423g0000or0bs00by0ko","tag_id":"cjqwe42470005or0bvusbh577","_id":"cjqwe424t000cor0bzopln5lz"},{"post_id":"cjqwe42410002or0bcapncpw4","tag_id":"cjqwe424q000bor0bxsjy1n35","_id":"cjqwe425d000kor0bedyr3jpo"},{"post_id":"cjqwe42480006or0b1n0z9gjh","tag_id":"cjqwe424q000bor0bxsjy1n35","_id":"cjqwe425j000qor0bmhnxt8qm"},{"post_id":"cjqwe424b0008or0bmxk71q10","tag_id":"cjqwe424q000bor0bxsjy1n35","_id":"cjqwe425n000wor0bnl49ryfv"},{"post_id":"cjqwe424p0009or0bw8cbaowy","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42620013or0bkw05zlkf"},{"post_id":"cjqwe425o000yor0b8bj6riif","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42650017or0b25epzxku"},{"post_id":"cjqwe425r0012or0b3pf74zg8","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe4268001bor0b8gblb5p9"},{"post_id":"cjqwe424t000dor0bjq01bpgh","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe426a001for0bzdqpc04f"},{"post_id":"cjqwe42630015or0bkq3t9wl9","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe426d001jor0bgmlb8fq5"},{"post_id":"cjqwe4266001aor0b86erfn5l","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe426f001mor0brft0gpup"},{"post_id":"cjqwe424w000for0bwb6j8hhp","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe426i001qor0bxmw9mvx5"},{"post_id":"cjqwe4269001dor0bmstq3q9c","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe426n001tor0b63o5zxz0"},{"post_id":"cjqwe425c000jor0b4q8znuv0","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe426q001xor0b3flopi14"},{"post_id":"cjqwe425f000mor0bnod2dzez","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe426s0020or0bcaiefemt"},{"post_id":"cjqwe425i000por0bbobv7tm3","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe426v0024or0bqn3vwk3k"},{"post_id":"cjqwe425j000sor0bve3uhsqe","tag_id":"cjqwe426s0021or0bnak3qjxp","_id":"cjqwe426z002aor0bc6ydukgp"},{"post_id":"cjqwe425m000vor0bztf1n8k9","tag_id":"cjqwe426x0028or0b8xoa53z9","_id":"cjqwe4273002ior0buegch9aj"},{"post_id":"cjqwe426c001ior0bn114zlhm","tag_id":"cjqwe4272002gor0bix1645fi","_id":"cjqwe4277002por0bp7fte5ea"},{"post_id":"cjqwe426e001lor0bz6b62agc","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe427b002vor0by0wj4jro"},{"post_id":"cjqwe426h001por0bxkp3yz0s","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe427f0031or0b9u4c8smq"},{"post_id":"cjqwe426j001sor0bqlpi7xes","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe427j0037or0bpoyg3u6g"},{"post_id":"cjqwe426p001wor0bufawwums","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe428b003dor0b0cdjk79z"},{"post_id":"cjqwe427j0039or0bzo7qlo67","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe428d003gor0brw947bnh"},{"post_id":"cjqwe426q001zor0b7v3u0a3g","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe428g003kor0bfebmab77"},{"post_id":"cjqwe426t0023or0b1iimr8sh","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe428x003oor0brjfrv4l3"},{"post_id":"cjqwe426v0026or0blarj4yos","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe428z003sor0b8gnbhgyh"},{"post_id":"cjqwe426x0029or0brfvhgc3q","tag_id":"cjqwe428y003qor0bcivedepm","_id":"cjqwe4290003wor0b7fqcxj4n"},{"post_id":"cjqwe426z002cor0b5op7d5kk","tag_id":"cjqwe428z003vor0buiu8sz2g","_id":"cjqwe42910040or0batyfidtk"},{"post_id":"cjqwe4271002for0bqijvomui","tag_id":"cjqwe4290003zor0biqia9q7p","_id":"cjqwe42920042or0brl5818ax"},{"post_id":"cjqwe4273002jor0bd0mgfhnv","tag_id":"cjqwe4275002mor0bd38jmm2q","_id":"cjqwe42920044or0bozk06zru"},{"post_id":"cjqwe4274002lor0bv288yu12","tag_id":"cjqwe42920043or0bn3odec1n","_id":"cjqwe42930046or0br0ygeiwr"},{"post_id":"cjqwe4276002oor0bgy6snoew","tag_id":"cjqwe42920045or0bj05q6nbn","_id":"cjqwe429g0048or0b56015buk"},{"post_id":"cjqwe4278002ror0b4e2w6avh","tag_id":"cjqwe428z003vor0buiu8sz2g","_id":"cjqwe429h004aor0bqnmq01q4"},{"post_id":"cjqwe427a002uor0bu8nij9x5","tag_id":"cjqwe428z003vor0buiu8sz2g","_id":"cjqwe429i004cor0bpupub71i"},{"post_id":"cjqwe427c002xor0b1p7nuhdh","tag_id":"cjqwe429h004bor0b2at7o6vg","_id":"cjqwe429i004eor0bhdv05ipc"},{"post_id":"cjqwe427e0030or0b5m2k5mkf","tag_id":"cjqwe429i004dor0biwkko7mp","_id":"cjqwe429j004gor0bzu7hf8gb"},{"post_id":"cjqwe427g0033or0b8n6apisv","tag_id":"cjqwe429i004dor0biwkko7mp","_id":"cjqwe429k004ior0bxdw6fzq7"},{"post_id":"cjqwe427h0036or0b9hmyg6v0","tag_id":"cjqwe429i004dor0biwkko7mp","_id":"cjqwe429m004kor0bt8dswgrx"},{"post_id":"cjqwe4289003cor0bizzzewpx","tag_id":"cjqwe428z003vor0buiu8sz2g","_id":"cjqwe429n004mor0bjjre036l"},{"post_id":"cjqwe428b003for0b746511kw","tag_id":"cjqwe428z003vor0buiu8sz2g","_id":"cjqwe429o004oor0btfzuaw07"},{"post_id":"cjqwe428f003jor0baj0121bl","tag_id":"cjqwe429i004dor0biwkko7mp","_id":"cjqwe429p004por0bof0trs5o"},{"post_id":"cjqwe42ar004qor0boo26lvkj","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42b8004sor0bn6mt08di"},{"post_id":"cjqwe42b7004ror0b9p77ozlx","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42bc004vor0b8e3sbbpf"},{"post_id":"cjqwe42b8004tor0b6coe7c54","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42be004yor0b9b0rqlps"},{"post_id":"cjqwe42bd004wor0b17kb3htx","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42bg0051or0bv2afk1kl"},{"post_id":"cjqwe42bf004zor0b51oc7ec9","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42bi0054or0bi4tb3fv6"},{"post_id":"cjqwe42bh0052or0btsc2yzae","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42bl0057or0b4nvdrfi9"},{"post_id":"cjqwe42bj0055or0bocslw6r5","tag_id":"cjqwe4272002gor0bix1645fi","_id":"cjqwe42bn005aor0bbrytgoio"},{"post_id":"cjqwe42bl0058or0bwkuvhezb","tag_id":"cjqwe428y003qor0bcivedepm","_id":"cjqwe42c1005dor0bv0p7vb8q"},{"post_id":"cjqwe42bz005bor0b5vru3ogk","tag_id":"cjqwe428y003qor0bcivedepm","_id":"cjqwe42c3005gor0bxqy0obof"},{"post_id":"cjqwe42c1005eor0b3zn287el","tag_id":"cjqwe428z003vor0buiu8sz2g","_id":"cjqwe42c5005jor0bz95m1y76"},{"post_id":"cjqwe42c3005hor0b531uzswo","tag_id":"cjqwe428z003vor0buiu8sz2g","_id":"cjqwe42cj005mor0b9bjc13ue"},{"post_id":"cjqwe42ck005nor0bge35ch4u","tag_id":"cjqwe42920043or0bn3odec1n","_id":"cjqwe42cm005qor0bawmhux6k"},{"post_id":"cjqwe42cf005kor0bvv8hvkfr","tag_id":"cjqwe42cl005oor0bge5nuykm","_id":"cjqwe42cn005tor0bcuenlqud"},{"post_id":"cjqwe42eb005uor0bke1trj5d","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42ee005wor0b8f0m32zr"},{"post_id":"cjqwe42ed005vor0bhmsb6pzc","tag_id":"cjqwe425l000uor0bljllzdrt","_id":"cjqwe42eg005zor0bnzwc7xfz"},{"post_id":"cjqwe42ef005xor0b8khrhbec","tag_id":"cjqwe42cl005oor0bge5nuykm","_id":"cjqwe42ei0062or0b9qxht2nf"},{"post_id":"cjqwe42eg0060or0bt7kbqwqi","tag_id":"cjqwe42cl005oor0bge5nuykm","_id":"cjqwe42ej0065or0b0e9ywuad"},{"post_id":"cjqwe42ei0063or0b25n5rr7r","tag_id":"cjqwe42cl005oor0bge5nuykm","_id":"cjqwe42ek0067or0bwz9hogxi"},{"post_id":"cjqwe42fc0069or0baizqusbm","tag_id":"cjqwe4272002gor0bix1645fi","_id":"cjqwe42fd006aor0bt6mtaixr"}],"Tag":[{"name":"Hexo","_id":"cjqwe42470005or0bvusbh577"},{"name":"hexo","_id":"cjqwe424q000bor0bxsjy1n35"},{"name":"Augular","_id":"cjqwe425l000uor0bljllzdrt"},{"name":"写作","_id":"cjqwe426s0021or0bnak3qjxp"},{"name":"Typescript","_id":"cjqwe426x0028or0b8xoa53z9"},{"name":"rxjs","_id":"cjqwe4272002gor0bix1645fi"},{"name":"CSS","_id":"cjqwe4275002mor0bd38jmm2q"},{"name":"设计","_id":"cjqwe428y003qor0bcivedepm"},{"name":"js","_id":"cjqwe428z003vor0buiu8sz2g"},{"name":"Jqury","_id":"cjqwe4290003zor0biqia9q7p"},{"name":"Jquery","_id":"cjqwe42920043or0bn3odec1n"},{"name":"Jquery，plugin","_id":"cjqwe42920045or0bj05q6nbn"},{"name":"angular，plugin","_id":"cjqwe429h004bor0b2at7o6vg"},{"name":"angular","_id":"cjqwe429i004dor0biwkko7mp"},{"name":"Less","_id":"cjqwe42cl005oor0bge5nuykm"}]}}